package main

import (
	"fmt"
	"os"
	"vitess.io/vitess/go/pools"
)

type implSet struct {
	name string
	impl pools.Impl
}

func main() {
	impls := []implSet{
		{"Res", pools.ResourceImpl},
		{"Fst", pools.FastImpl},
	}

	f, err := os.Create("go/pools/bench_test.go")
	if err != nil {
		panic(err)
	}

	fmt.Fprintln(f, "// Generated by generate_bench/main.go")
	fmt.Fprintln(f, "package pools")
	fmt.Fprintln(f, "\nimport (")
	fmt.Fprintln(f, "\t\"testing\"")
	fmt.Fprintln(f, ")")
	fmt.Fprintln(f)

	for _, workers := range []int{1, 10, 100} {
		for _, capacity := range []int{10, 100, 1000} {
			for _, s := range impls {
				fmt.Fprintf(f, "func Benchmark_%v_%vWorkers_%vCapacity(b *testing.B) {\n", s.name, workers, capacity)
				fmt.Fprintf(f, "\tbenchmarkGetPut(b, %v, VerySlowFactory, %v, %v)\n", s.impl, workers, capacity)
				fmt.Fprint(f, "}\n\n")
			}
		}
	}

	f.Close()
}
