// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line sql.y:53
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	sqlVal               *SQLVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	colIdent             ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	colKeyOpt            ColumnKeyOption
	optVal               Expr
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexColumn          *IndexColumn
	indexColumns         []*IndexColumn
	constraintDefinition *ConstraintDefinition
	constraintInfo       ConstraintInfo
	ReferenceAction      ReferenceAction
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
	optLike              *OptLike
}

const LEX_ERROR = 57346
const UNION = 57347
const EXPLAIN = 57348
const SELECT = 57349
const STREAM = 57350
const INSERT = 57351
const UPDATE = 57352
const DELETE = 57353
const FROM = 57354
const WHERE = 57355
const GROUP = 57356
const HAVING = 57357
const ORDER = 57358
const BY = 57359
const LIMIT = 57360
const OFFSET = 57361
const FOR = 57362
const ALL = 57363
const DISTINCT = 57364
const AS = 57365
const EXISTS = 57366
const ASC = 57367
const DESC = 57368
const INTO = 57369
const DUPLICATE = 57370
const KEY = 57371
const DEFAULT = 57372
const SET = 57373
const LOCK = 57374
const UNLOCK = 57375
const KEYS = 57376
const VALUES = 57377
const LAST_INSERT_ID = 57378
const NEXT = 57379
const VALUE = 57380
const SHARE = 57381
const MODE = 57382
const SQL_NO_CACHE = 57383
const SQL_CACHE = 57384
const JOIN = 57385
const STRAIGHT_JOIN = 57386
const LEFT = 57387
const RIGHT = 57388
const INNER = 57389
const OUTER = 57390
const CROSS = 57391
const NATURAL = 57392
const USE = 57393
const FORCE = 57394
const ON = 57395
const USING = 57396
const ID = 57397
const HEX = 57398
const STRING = 57399
const INTEGRAL = 57400
const FLOAT = 57401
const HEXNUM = 57402
const VALUE_ARG = 57403
const LIST_ARG = 57404
const COMMENT = 57405
const COMMENT_KEYWORD = 57406
const BIT_LITERAL = 57407
const NULL = 57408
const TRUE = 57409
const FALSE = 57410
const OFF = 57411
const OR = 57412
const AND = 57413
const NOT = 57414
const BETWEEN = 57415
const CASE = 57416
const WHEN = 57417
const THEN = 57418
const ELSE = 57419
const END = 57420
const LE = 57421
const GE = 57422
const NE = 57423
const NULL_SAFE_EQUAL = 57424
const IS = 57425
const LIKE = 57426
const REGEXP = 57427
const IN = 57428
const SHIFT_LEFT = 57429
const SHIFT_RIGHT = 57430
const DIV = 57431
const MOD = 57432
const UNARY = 57433
const COLLATE = 57434
const BINARY = 57435
const UNDERSCORE_BINARY = 57436
const UNDERSCORE_UTF8MB4 = 57437
const INTERVAL = 57438
const JSON_EXTRACT_OP = 57439
const JSON_UNQUOTE_EXTRACT_OP = 57440
const CREATE = 57441
const ALTER = 57442
const DROP = 57443
const RENAME = 57444
const ANALYZE = 57445
const ADD = 57446
const FLUSH = 57447
const SCHEMA = 57448
const TABLE = 57449
const INDEX = 57450
const VIEW = 57451
const TO = 57452
const IGNORE = 57453
const IF = 57454
const UNIQUE = 57455
const PRIMARY = 57456
const COLUMN = 57457
const SPATIAL = 57458
const FULLTEXT = 57459
const KEY_BLOCK_SIZE = 57460
const CHECK = 57461
const ACTION = 57462
const CASCADE = 57463
const CONSTRAINT = 57464
const FOREIGN = 57465
const NO = 57466
const REFERENCES = 57467
const RESTRICT = 57468
const SHOW = 57469
const DESCRIBE = 57470
const DATE = 57471
const ESCAPE = 57472
const REPAIR = 57473
const OPTIMIZE = 57474
const TRUNCATE = 57475
const MAXVALUE = 57476
const PARTITION = 57477
const REORGANIZE = 57478
const LESS = 57479
const THAN = 57480
const PROCEDURE = 57481
const TRIGGER = 57482
const VINDEX = 57483
const VINDEXES = 57484
const STATUS = 57485
const VARIABLES = 57486
const WARNINGS = 57487
const SEQUENCE = 57488
const BEGIN = 57489
const START = 57490
const TRANSACTION = 57491
const COMMIT = 57492
const ROLLBACK = 57493
const BIT = 57494
const TINYINT = 57495
const SMALLINT = 57496
const MEDIUMINT = 57497
const INT = 57498
const INTEGER = 57499
const BIGINT = 57500
const INTNUM = 57501
const REAL = 57502
const DOUBLE = 57503
const FLOAT_TYPE = 57504
const DECIMAL = 57505
const NUMERIC = 57506
const TIME = 57507
const TIMESTAMP = 57508
const DATETIME = 57509
const YEAR = 57510
const CHAR = 57511
const VARCHAR = 57512
const BOOL = 57513
const CHARACTER = 57514
const VARBINARY = 57515
const NCHAR = 57516
const TEXT = 57517
const TINYTEXT = 57518
const MEDIUMTEXT = 57519
const LONGTEXT = 57520
const BLOB = 57521
const TINYBLOB = 57522
const MEDIUMBLOB = 57523
const LONGBLOB = 57524
const JSON = 57525
const ENUM = 57526
const GEOMETRY = 57527
const POINT = 57528
const LINESTRING = 57529
const POLYGON = 57530
const GEOMETRYCOLLECTION = 57531
const MULTIPOINT = 57532
const MULTILINESTRING = 57533
const MULTIPOLYGON = 57534
const NULLX = 57535
const AUTO_INCREMENT = 57536
const APPROXNUM = 57537
const SIGNED = 57538
const UNSIGNED = 57539
const ZEROFILL = 57540
const COLLATION = 57541
const DATABASES = 57542
const TABLES = 57543
const VITESS_METADATA = 57544
const VSCHEMA = 57545
const FULL = 57546
const PROCESSLIST = 57547
const COLUMNS = 57548
const FIELDS = 57549
const ENGINES = 57550
const PLUGINS = 57551
const NAMES = 57552
const CHARSET = 57553
const GLOBAL = 57554
const SESSION = 57555
const ISOLATION = 57556
const LEVEL = 57557
const READ = 57558
const WRITE = 57559
const ONLY = 57560
const REPEATABLE = 57561
const COMMITTED = 57562
const UNCOMMITTED = 57563
const SERIALIZABLE = 57564
const CURRENT_TIMESTAMP = 57565
const DATABASE = 57566
const CURRENT_DATE = 57567
const CURRENT_TIME = 57568
const LOCALTIME = 57569
const LOCALTIMESTAMP = 57570
const UTC_DATE = 57571
const UTC_TIME = 57572
const UTC_TIMESTAMP = 57573
const REPLACE = 57574
const CONVERT = 57575
const CAST = 57576
const SUBSTR = 57577
const SUBSTRING = 57578
const GROUP_CONCAT = 57579
const SEPARATOR = 57580
const TIMESTAMPADD = 57581
const TIMESTAMPDIFF = 57582
const MATCH = 57583
const AGAINST = 57584
const BOOLEAN = 57585
const LANGUAGE = 57586
const WITH = 57587
const QUERY = 57588
const EXPANSION = 57589
const UNUSED = 57590
const ARRAY = 57591
const CUME_DIST = 57592
const DESCRIPTION = 57593
const DENSE_RANK = 57594
const EMPTY = 57595
const EXCEPT = 57596
const FIRST_VALUE = 57597
const GROUPING = 57598
const GROUPS = 57599
const JSON_TABLE = 57600
const LAG = 57601
const LAST_VALUE = 57602
const LATERAL = 57603
const LEAD = 57604
const MEMBER = 57605
const NTH_VALUE = 57606
const NTILE = 57607
const OF = 57608
const OVER = 57609
const PERCENT_RANK = 57610
const RANK = 57611
const RECURSIVE = 57612
const ROW_NUMBER = 57613
const SYSTEM = 57614
const WINDOW = 57615
const ACTIVE = 57616
const ADMIN = 57617
const BUCKETS = 57618
const CLONE = 57619
const COMPONENT = 57620
const DEFINITION = 57621
const ENFORCED = 57622
const EXCLUDE = 57623
const FOLLOWING = 57624
const GEOMCOLLECTION = 57625
const GET_MASTER_PUBLIC_KEY = 57626
const HISTOGRAM = 57627
const HISTORY = 57628
const INACTIVE = 57629
const INVISIBLE = 57630
const LOCKED = 57631
const MASTER_COMPRESSION_ALGORITHMS = 57632
const MASTER_PUBLIC_KEY_PATH = 57633
const MASTER_TLS_CIPHERSUITES = 57634
const MASTER_ZSTD_COMPRESSION_LEVEL = 57635
const NESTED = 57636
const NETWORK_NAMESPACE = 57637
const NOWAIT = 57638
const NULLS = 57639
const OJ = 57640
const OLD = 57641
const OPTIONAL = 57642
const ORDINALITY = 57643
const ORGANIZATION = 57644
const OTHERS = 57645
const PATH = 57646
const PERSIST = 57647
const PERSIST_ONLY = 57648
const PRECEDING = 57649
const PRIVILEGE_CHECKS_USER = 57650
const PROCESS = 57651
const RANDOM = 57652
const REFERENCE = 57653
const REQUIRE_ROW_FORMAT = 57654
const RESOURCE = 57655
const RESPECT = 57656
const RESTART = 57657
const RETAIN = 57658
const REUSE = 57659
const ROLE = 57660
const SECONDARY = 57661
const SECONDARY_ENGINE = 57662
const SECONDARY_LOAD = 57663
const SECONDARY_UNLOAD = 57664
const SKIP = 57665
const SRID = 57666
const THREAD_PRIORITY = 57667
const TIES = 57668
const UNBOUNDED = 57669
const VCPU = 57670
const VISIBLE = 57671

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"EXPLAIN",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"CHECK",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"SHOW",
	"DESCRIBE",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"SEQUENCE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"TABLES",
	"VITESS_METADATA",
	"VSCHEMA",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"PLUGINS",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"ARRAY",
	"CUME_DIST",
	"DESCRIPTION",
	"DENSE_RANK",
	"EMPTY",
	"EXCEPT",
	"FIRST_VALUE",
	"GROUPING",
	"GROUPS",
	"JSON_TABLE",
	"LAG",
	"LAST_VALUE",
	"LATERAL",
	"LEAD",
	"MEMBER",
	"NTH_VALUE",
	"NTILE",
	"OF",
	"OVER",
	"PERCENT_RANK",
	"RANK",
	"RECURSIVE",
	"ROW_NUMBER",
	"SYSTEM",
	"WINDOW",
	"ACTIVE",
	"ADMIN",
	"BUCKETS",
	"CLONE",
	"COMPONENT",
	"DEFINITION",
	"ENFORCED",
	"EXCLUDE",
	"FOLLOWING",
	"GEOMCOLLECTION",
	"GET_MASTER_PUBLIC_KEY",
	"HISTOGRAM",
	"HISTORY",
	"INACTIVE",
	"INVISIBLE",
	"LOCKED",
	"MASTER_COMPRESSION_ALGORITHMS",
	"MASTER_PUBLIC_KEY_PATH",
	"MASTER_TLS_CIPHERSUITES",
	"MASTER_ZSTD_COMPRESSION_LEVEL",
	"NESTED",
	"NETWORK_NAMESPACE",
	"NOWAIT",
	"NULLS",
	"OJ",
	"OLD",
	"OPTIONAL",
	"ORDINALITY",
	"ORGANIZATION",
	"OTHERS",
	"PATH",
	"PERSIST",
	"PERSIST_ONLY",
	"PRECEDING",
	"PRIVILEGE_CHECKS_USER",
	"PROCESS",
	"RANDOM",
	"REFERENCE",
	"REQUIRE_ROW_FORMAT",
	"RESOURCE",
	"RESPECT",
	"RESTART",
	"RETAIN",
	"REUSE",
	"ROLE",
	"SECONDARY",
	"SECONDARY_ENGINE",
	"SECONDARY_LOAD",
	"SECONDARY_UNLOAD",
	"SKIP",
	"SRID",
	"THREAD_PRIORITY",
	"TIES",
	"UNBOUNDED",
	"VCPU",
	"VISIBLE",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 31,
	-2, 4,
	-1, 38,
	160, 302,
	161, 302,
	-2, 290,
	-1, 321,
	113, 641,
	-2, 637,
	-1, 322,
	113, 642,
	-2, 638,
	-1, 390,
	83, 889,
	-2, 65,
	-1, 391,
	83, 807,
	-2, 66,
	-1, 396,
	83, 776,
	-2, 603,
	-1, 398,
	83, 837,
	-2, 605,
	-1, 690,
	1, 353,
	5, 353,
	13, 353,
	14, 353,
	15, 353,
	16, 353,
	18, 353,
	20, 353,
	31, 353,
	32, 353,
	43, 353,
	44, 353,
	45, 353,
	46, 353,
	47, 353,
	49, 353,
	50, 353,
	53, 353,
	54, 353,
	56, 353,
	57, 353,
	347, 353,
	-2, 371,
	-1, 693,
	54, 46,
	56, 46,
	-2, 50,
	-1, 841,
	113, 644,
	-2, 640,
	-1, 1070,
	5, 32,
	-2, 438,
	-1, 1100,
	5, 31,
	-2, 577,
	-1, 1345,
	5, 32,
	-2, 578,
	-1, 1398,
	5, 31,
	-2, 580,
	-1, 1476,
	5, 32,
	-2, 581,
}

const yyPrivate = 57344

const yyLast = 16556

var yyAct = [...]int{

	322, 1500, 1307, 1510, 1195, 1464, 646, 1103, 1378, 1365,
	954, 1121, 1281, 1410, 1247, 339, 927, 549, 352, 300,
	1104, 1244, 1248, 997, 1127, 326, 925, 547, 1034, 1148,
	963, 58, 953, 82, 1219, 1260, 1254, 265, 866, 790,
	265, 1062, 804, 1174, 1165, 876, 843, 291, 967, 706,
	929, 873, 395, 686, 578, 645, 3, 914, 894, 518,
	993, 353, 52, 584, 907, 389, 590, 705, 265, 82,
	687, 324, 598, 265, 381, 265, 386, 695, 309, 660,
	57, 950, 1503, 1487, 384, 1498, 392, 661, 1474, 62,
	983, 536, 1495, 292, 293, 294, 1308, 1016, 297, 1486,
	1473, 1236, 1337, 523, 1275, 551, 1136, 3, 299, 1135,
	313, 1015, 1137, 52, 52, 977, 64, 65, 66, 67,
	68, 944, 305, 1276, 1277, 1439, 611, 610, 620, 621,
	613, 614, 615, 616, 617, 618, 619, 612, 1220, 1020,
	622, 260, 256, 257, 258, 945, 946, 364, 1014, 370,
	371, 368, 369, 367, 366, 365, 707, 252, 708, 254,
	572, 567, 296, 372, 373, 568, 565, 566, 295, 1156,
	976, 553, 1197, 555, 1368, 1222, 984, 1385, 1328, 1326,
	570, 290, 779, 560, 561, 1199, 776, 1494, 778, 1497,
	1465, 1194, 908, 1457, 968, 1419, 1518, 875, 1011, 1008,
	1009, 1411, 1007, 552, 554, 537, 1122, 1124, 525, 1224,
	970, 1228, 315, 1223, 1413, 1221, 1514, 254, 1200, 571,
	1226, 780, 777, 783, 769, 1198, 970, 1270, 970, 1225,
	1269, 1268, 521, 1018, 1021, 528, 533, 267, 1191, 519,
	255, 1446, 1227, 1229, 1193, 1028, 634, 635, 1027, 1348,
	1206, 253, 1182, 265, 1132, 1149, 265, 1089, 1056, 259,
	940, 815, 265, 1079, 701, 602, 1076, 543, 265, 612,
	1013, 82, 622, 82, 1293, 82, 82, 951, 82, 622,
	82, 1180, 1412, 1123, 812, 519, 82, 809, 550, 805,
	597, 71, 1012, 1036, 1440, 1455, 1420, 1418, 895, 530,
	556, 531, 557, 558, 532, 559, 969, 562, 984, 1428,
	1472, 966, 964, 573, 965, 1258, 82, 595, 517, 1238,
	962, 968, 969, 1512, 969, 1294, 1513, 72, 1511, 319,
	709, 1017, 548, 597, 548, 586, 548, 548, 771, 548,
	1192, 548, 1190, 574, 575, 1154, 1019, 548, 1181, 1460,
	539, 540, 541, 1186, 1183, 1176, 1184, 1179, 850, 1175,
	592, 587, 1177, 1178, 1480, 634, 635, 52, 634, 635,
	806, 1035, 848, 849, 847, 1185, 596, 595, 1478, 265,
	265, 265, 631, 1240, 895, 633, 1086, 1374, 82, 973,
	1373, 596, 595, 597, 82, 974, 588, 613, 614, 615,
	616, 617, 618, 619, 612, 392, 685, 622, 597, 1053,
	1054, 1055, 867, 644, 868, 648, 649, 650, 651, 652,
	653, 654, 655, 656, 1519, 659, 662, 662, 662, 668,
	662, 662, 668, 662, 676, 677, 678, 679, 680, 681,
	1169, 691, 1074, 1168, 1073, 663, 665, 667, 669, 671,
	673, 674, 1157, 664, 666, 694, 670, 672, 1456, 675,
	699, 596, 595, 1520, 703, 23, 611, 610, 620, 621,
	613, 614, 615, 616, 617, 618, 619, 612, 597, 1138,
	622, 1139, 1075, 606, 1392, 609, 524, 1371, 814, 351,
	1203, 623, 624, 625, 626, 627, 628, 629, 1166, 607,
	608, 605, 611, 610, 620, 621, 613, 614, 615, 616,
	617, 618, 619, 612, 581, 585, 622, 55, 265, 1063,
	818, 819, 80, 82, 1039, 813, 304, 846, 265, 265,
	82, 603, 596, 595, 265, 251, 1453, 265, 1416, 1496,
	265, 1310, 596, 595, 265, 1149, 82, 82, 1144, 597,
	768, 82, 82, 82, 265, 82, 82, 775, 394, 597,
	869, 82, 82, 789, 526, 527, 647, 788, 596, 595,
	833, 835, 836, 793, 794, 658, 834, 772, 795, 796,
	797, 770, 799, 800, 548, 597, 1482, 577, 801, 802,
	82, 548, 577, 577, 265, 767, 792, 1416, 1468, 1425,
	82, 378, 379, 1416, 577, 1424, 820, 548, 548, 1416,
	1447, 784, 548, 548, 548, 545, 548, 548, 1416, 1415,
	840, 538, 548, 548, 844, 1290, 899, 1363, 1362, 611,
	610, 620, 621, 613, 614, 615, 616, 617, 618, 619,
	612, 971, 839, 622, 82, 620, 621, 613, 614, 615,
	616, 617, 618, 619, 612, 841, 1128, 622, 1257, 636,
	637, 638, 639, 640, 641, 642, 643, 822, 1350, 577,
	1347, 577, 837, 1300, 1299, 1296, 1297, 82, 82, 885,
	888, 1296, 1295, 697, 265, 896, 615, 616, 617, 618,
	619, 612, 265, 265, 622, 52, 265, 265, 1340, 911,
	265, 265, 265, 82, 880, 1128, 870, 871, 1068, 577,
	648, 911, 577, 878, 577, 59, 82, 716, 715, 1209,
	392, 1245, 935, 892, 1257, 698, 937, 700, 934, 878,
	696, 904, 1343, 955, 910, 1427, 611, 610, 620, 621,
	613, 614, 615, 616, 617, 618, 619, 612, 1257, 911,
	622, 25, 1298, 926, 792, 1068, 1140, 691, 933, 911,
	394, 691, 394, 1068, 394, 394, 943, 394, 941, 394,
	265, 82, 942, 82, 697, 394, 958, 265, 265, 265,
	265, 265, 807, 265, 265, 938, 1092, 265, 82, 25,
	999, 25, 342, 341, 344, 345, 346, 347, 1003, 55,
	1005, 343, 348, 1091, 265, 600, 265, 265, 830, 831,
	1068, 265, 696, 1098, 702, 1032, 698, 1099, 696, 1397,
	816, 985, 986, 987, 995, 996, 782, 55, 1488, 1380,
	978, 1355, 548, 840, 548, 998, 306, 55, 1286, 55,
	1143, 979, 980, 981, 982, 1261, 1262, 881, 882, 548,
	994, 887, 890, 891, 989, 1044, 988, 990, 991, 992,
	1196, 647, 1381, 1001, 883, 884, 844, 1505, 841, 1501,
	1288, 1264, 328, 1245, 1170, 1046, 903, 394, 905, 906,
	1045, 810, 828, 711, 55, 916, 919, 920, 921, 917,
	786, 918, 922, 1267, 1058, 1261, 1262, 916, 919, 920,
	921, 917, 1057, 918, 922, 2, 1115, 1117, 1266, 920,
	921, 1116, 265, 265, 265, 265, 265, 1112, 1113, 1111,
	310, 311, 949, 1114, 265, 1492, 576, 265, 1485, 1205,
	1041, 265, 1490, 1051, 842, 265, 1105, 851, 852, 853,
	854, 855, 856, 857, 858, 859, 860, 861, 862, 863,
	864, 865, 1085, 1050, 82, 579, 1161, 298, 714, 546,
	1130, 1129, 1131, 1100, 1141, 1106, 1153, 580, 1109, 1101,
	1102, 955, 591, 691, 691, 691, 691, 691, 1462, 1341,
	1118, 1126, 880, 1107, 1108, 1461, 1110, 589, 926, 1395,
	1125, 1151, 900, 1133, 1145, 1376, 691, 1150, 1004, 785,
	924, 591, 82, 82, 307, 308, 301, 1433, 1049, 302,
	59, 1383, 394, 1432, 1146, 1147, 1048, 1128, 569, 394,
	1507, 1506, 61, 1080, 1077, 1052, 1042, 1043, 803, 585,
	1172, 593, 82, 1507, 1167, 394, 394, 1443, 1369, 811,
	394, 394, 394, 63, 394, 394, 56, 1, 265, 1499,
	394, 394, 1187, 1309, 1173, 1377, 1010, 82, 1463, 1201,
	1409, 1280, 961, 952, 548, 1160, 70, 1162, 1163, 1164,
	1158, 1159, 1067, 516, 1211, 69, 1202, 1454, 960, 824,
	959, 1417, 1367, 972, 1155, 975, 1287, 1152, 1459, 600,
	1083, 1069, 394, 548, 722, 720, 721, 719, 724, 723,
	718, 1213, 82, 82, 278, 387, 1246, 1241, 1087, 1212,
	1231, 923, 710, 1230, 1218, 1237, 1000, 594, 1249, 73,
	1189, 1188, 1006, 808, 1105, 563, 82, 564, 1256, 1044,
	280, 630, 1047, 872, 1134, 393, 1252, 817, 583, 1431,
	1382, 82, 841, 82, 82, 1265, 1084, 657, 893, 897,
	327, 832, 340, 1279, 1274, 337, 338, 1251, 955, 1272,
	955, 1250, 1271, 52, 823, 1097, 901, 902, 604, 325,
	317, 265, 689, 1278, 682, 1283, 1284, 1285, 1059, 1060,
	1061, 915, 913, 912, 382, 1263, 1259, 688, 692, 265,
	1208, 1336, 394, 1438, 827, 82, 632, 27, 82, 82,
	82, 265, 60, 312, 19, 394, 18, 82, 17, 20,
	265, 16, 15, 14, 821, 534, 31, 21, 13, 12,
	11, 10, 1302, 9, 1211, 262, 22, 8, 7, 6,
	5, 1315, 4, 1316, 303, 1303, 1317, 1305, 24, 0,
	1291, 1292, 0, 0, 0, 0, 0, 0, 1324, 1204,
	0, 0, 690, 0, 0, 0, 383, 0, 0, 0,
	394, 520, 394, 522, 0, 0, 0, 0, 1342, 0,
	0, 691, 877, 879, 0, 1339, 0, 394, 1352, 82,
	0, 0, 0, 1105, 0, 0, 0, 82, 1351, 1141,
	0, 0, 1361, 0, 0, 0, 955, 0, 1335, 1239,
	0, 0, 82, 0, 0, 394, 0, 0, 0, 82,
	0, 0, 0, 611, 610, 620, 621, 613, 614, 615,
	616, 617, 618, 619, 612, 0, 1379, 622, 0, 1375,
	1357, 1358, 1359, 0, 0, 0, 1321, 1322, 0, 1323,
	0, 1273, 1325, 0, 1327, 0, 0, 0, 82, 82,
	0, 82, 0, 0, 0, 0, 82, 0, 82, 82,
	82, 265, 1249, 548, 82, 1404, 1396, 1405, 1406, 1407,
	0, 1403, 0, 0, 0, 0, 1414, 1408, 0, 0,
	0, 82, 265, 0, 0, 1421, 1370, 0, 1372, 0,
	1429, 0, 0, 1215, 1216, 0, 0, 0, 1364, 0,
	897, 0, 1398, 0, 0, 1250, 1232, 1233, 1399, 1234,
	1235, 0, 1444, 1384, 0, 0, 1249, 82, 0, 0,
	1451, 1242, 1243, 1452, 0, 0, 0, 0, 82, 82,
	0, 0, 0, 0, 0, 0, 1466, 0, 1426, 1467,
	1470, 529, 0, 394, 535, 1379, 955, 82, 0, 0,
	542, 1475, 1422, 1338, 1423, 1445, 544, 0, 265, 1250,
	0, 52, 0, 647, 0, 0, 82, 0, 0, 1105,
	0, 1353, 0, 1484, 1354, 0, 0, 1356, 845, 0,
	0, 0, 0, 1289, 0, 0, 0, 1491, 1489, 82,
	0, 1171, 394, 0, 0, 0, 1065, 0, 1493, 0,
	1066, 1504, 0, 0, 0, 0, 0, 1070, 1071, 1072,
	582, 1515, 0, 0, 1078, 0, 0, 1081, 1082, 1334,
	0, 394, 0, 1088, 0, 0, 0, 1090, 0, 0,
	1093, 1094, 1095, 1096, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1319, 0, 394, 263, 0, 275,
	289, 0, 1120, 0, 0, 0, 0, 0, 0, 1502,
	0, 0, 0, 0, 690, 0, 0, 684, 690, 693,
	0, 0, 690, 285, 0, 316, 0, 0, 385, 394,
	0, 0, 0, 263, 0, 263, 0, 0, 897, 0,
	0, 1253, 1255, 611, 610, 620, 621, 613, 614, 615,
	616, 617, 618, 619, 612, 0, 0, 622, 0, 0,
	0, 0, 0, 0, 0, 1255, 0, 0, 0, 0,
	0, 0, 0, 0, 268, 0, 0, 0, 0, 0,
	394, 271, 394, 1282, 0, 0, 0, 0, 0, 279,
	274, 0, 0, 0, 0, 1469, 647, 610, 620, 621,
	613, 614, 615, 616, 617, 618, 619, 612, 0, 0,
	622, 1386, 1387, 1388, 1389, 1390, 0, 0, 0, 1393,
	1394, 277, 0, 0, 1333, 0, 0, 284, 0, 0,
	0, 0, 0, 0, 1306, 0, 0, 1311, 1312, 1313,
	0, 0, 0, 0, 1217, 0, 394, 0, 0, 0,
	0, 0, 0, 0, 269, 0, 717, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 773, 774, 0, 0,
	845, 0, 781, 0, 0, 383, 0, 0, 787, 0,
	0, 281, 272, 0, 282, 283, 288, 1332, 0, 0,
	273, 276, 798, 270, 287, 286, 0, 897, 611, 610,
	620, 621, 613, 614, 615, 616, 617, 618, 619, 612,
	0, 0, 622, 263, 0, 0, 263, 0, 394, 0,
	0, 0, 263, 0, 0, 0, 1366, 0, 263, 0,
	0, 0, 829, 0, 690, 690, 690, 690, 690, 0,
	0, 394, 0, 0, 0, 0, 0, 0, 394, 690,
	0, 0, 0, 0, 0, 0, 0, 690, 0, 0,
	0, 611, 610, 620, 621, 613, 614, 615, 616, 617,
	618, 619, 612, 0, 0, 622, 0, 0, 0, 0,
	0, 0, 1508, 0, 0, 0, 0, 1400, 1401, 1318,
	1402, 0, 0, 0, 0, 1366, 1320, 1366, 1366, 1366,
	0, 0, 0, 1282, 0, 0, 0, 1329, 1330, 0,
	0, 0, 0, 1331, 0, 0, 0, 0, 0, 0,
	1366, 0, 909, 0, 0, 0, 0, 1344, 1345, 1346,
	0, 1349, 0, 0, 0, 936, 0, 0, 0, 263,
	263, 263, 0, 0, 0, 0, 0, 0, 1360, 0,
	1214, 0, 0, 0, 0, 0, 1458, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 394, 394, 0,
	611, 610, 620, 621, 613, 614, 615, 616, 617, 618,
	619, 612, 0, 897, 622, 0, 1477, 611, 610, 620,
	621, 613, 614, 615, 616, 617, 618, 619, 612, 0,
	0, 622, 0, 0, 0, 1483, 0, 0, 1002, 1064,
	0, 0, 0, 1391, 0, 1022, 1023, 1024, 1025, 1026,
	0, 1029, 1030, 0, 0, 1031, 0, 0, 1366, 611,
	610, 620, 621, 613, 614, 615, 616, 617, 618, 619,
	612, 0, 1033, 622, 0, 0, 0, 0, 0, 1040,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1434, 1435, 1436, 1437, 0, 0, 0,
	1441, 1442, 0, 0, 0, 0, 0, 0, 263, 0,
	0, 0, 1448, 1449, 1450, 0, 0, 0, 263, 263,
	0, 0, 0, 0, 263, 0, 0, 263, 0, 0,
	263, 0, 0, 0, 791, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 263, 1471, 0, 0, 0, 0,
	0, 0, 1476, 0, 0, 0, 0, 0, 739, 0,
	0, 0, 690, 0, 0, 0, 0, 0, 0, 0,
	1481, 611, 610, 620, 621, 613, 614, 615, 616, 617,
	618, 619, 612, 0, 263, 622, 0, 0, 0, 0,
	0, 0, 0, 791, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1516, 1517, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 316, 727, 0, 0, 0,
	316, 316, 0, 0, 316, 316, 316, 0, 0, 0,
	898, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 316,
	316, 316, 316, 740, 263, 0, 0, 0, 0, 0,
	0, 0, 263, 931, 0, 0, 263, 263, 0, 0,
	263, 939, 791, 0, 0, 0, 753, 756, 757, 758,
	759, 760, 761, 0, 762, 763, 764, 765, 766, 741,
	742, 743, 744, 725, 726, 754, 1207, 728, 0, 729,
	730, 731, 732, 733, 734, 735, 736, 737, 738, 745,
	746, 747, 748, 749, 750, 751, 752, 51, 25, 26,
	53, 28, 29, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 44, 0, 0,
	263, 0, 30, 48, 49, 0, 0, 263, 263, 263,
	263, 263, 0, 263, 263, 0, 0, 263, 0, 0,
	0, 0, 39, 0, 0, 0, 55, 755, 0, 0,
	0, 0, 0, 0, 263, 0, 1037, 1038, 0, 0,
	0, 263, 0, 0, 0, 0, 791, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 316, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1301,
	0, 0, 0, 0, 0, 0, 0, 32, 33, 35,
	34, 37, 0, 50, 0, 0, 0, 1304, 0, 0,
	0, 0, 0, 0, 0, 316, 0, 0, 0, 1314,
	0, 0, 0, 0, 0, 38, 45, 0, 0, 46,
	47, 36, 0, 316, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 40, 41, 0, 42, 43,
	0, 898, 263, 263, 263, 263, 263, 0, 0, 0,
	0, 0, 0, 0, 1119, 0, 0, 263, 0, 0,
	0, 931, 0, 0, 0, 263, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	54, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 263, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 316, 0,
	1430, 0, 0, 0, 0, 0, 0, 0, 0, 316,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	791, 0, 0, 0, 0, 0, 0, 0, 0, 898,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1479, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 263, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 263,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 263, 0, 0, 0, 0, 0, 0, 0, 0,
	263, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 898, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 931, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 263, 0, 0, 0, 0, 503, 433, 491,
	0, 448, 506, 422, 438, 514, 439, 442, 479, 407,
	461, 166, 436, 0, 426, 402, 432, 403, 424, 450,
	112, 454, 421, 493, 464, 505, 138, 512, 140, 470,
	0, 212, 154, 0, 0, 452, 495, 459, 488, 447,
	480, 412, 469, 507, 437, 477, 508, 0, 0, 0,
	81, 0, 956, 957, 898, 0, 0, 0, 0, 102,
	0, 474, 502, 434, 476, 478, 401, 471, 263, 405,
	408, 513, 498, 429, 430, 1142, 0, 0, 0, 0,
	0, 0, 451, 460, 485, 445, 0, 0, 0, 0,
	0, 0, 0, 0, 427, 0, 468, 0, 0, 0,
	409, 406, 0, 0, 449, 0, 0, 0, 411, 0,
	428, 486, 0, 399, 120, 490, 497, 446, 266, 501,
	444, 443, 504, 185, 0, 216, 123, 137, 98, 84,
	94, 0, 122, 163, 192, 196, 494, 425, 106, 431,
	194, 173, 232, 467, 175, 193, 141, 222, 186, 231,
	241, 242, 219, 239, 246, 209, 87, 218, 230, 103,
	204, 89, 228, 215, 152, 132, 133, 88, 0, 190,
	111, 118, 108, 165, 225, 226, 107, 249, 95, 238,
	91, 96, 237, 159, 221, 229, 153, 146, 90, 227,
	151, 145, 136, 115, 125, 183, 143, 184, 126, 156,
	155, 157, 0, 404, 0, 213, 235, 250, 100, 420,
	220, 244, 245, 0, 0, 101, 119, 114, 182, 158,
	97, 128, 210, 135, 142, 189, 248, 172, 195, 104,
	234, 211, 416, 419, 414, 415, 462, 463, 509, 510,
	511, 487, 410, 0, 417, 418, 0, 492, 499, 500,
	466, 83, 92, 139, 247, 187, 117, 236, 400, 413,
	110, 423, 0, 0, 435, 440, 441, 453, 455, 456,
	457, 458, 465, 472, 473, 475, 481, 482, 483, 484,
	489, 496, 515, 85, 86, 93, 99, 105, 109, 113,
	116, 121, 124, 127, 129, 130, 131, 134, 144, 147,
	148, 149, 150, 160, 161, 162, 164, 167, 168, 169,
	170, 171, 174, 176, 177, 178, 179, 180, 181, 188,
	191, 197, 198, 199, 200, 201, 202, 203, 205, 206,
	207, 208, 214, 217, 223, 224, 233, 240, 243, 503,
	433, 491, 0, 448, 506, 422, 438, 514, 439, 442,
	479, 407, 461, 166, 436, 0, 426, 402, 432, 403,
	424, 450, 112, 454, 421, 493, 464, 505, 138, 512,
	140, 470, 0, 212, 154, 0, 0, 452, 495, 459,
	488, 447, 480, 412, 469, 507, 437, 477, 508, 0,
	0, 0, 81, 0, 956, 957, 0, 0, 0, 0,
	0, 102, 0, 474, 502, 434, 476, 478, 401, 471,
	0, 405, 408, 513, 498, 429, 430, 0, 0, 0,
	0, 0, 0, 0, 451, 460, 485, 445, 0, 0,
	0, 0, 0, 0, 0, 0, 427, 0, 468, 0,
	0, 0, 409, 406, 0, 0, 449, 0, 0, 0,
	411, 0, 428, 486, 0, 399, 120, 490, 497, 446,
	266, 501, 444, 443, 504, 185, 0, 216, 123, 137,
	98, 84, 94, 0, 122, 163, 192, 196, 494, 425,
	106, 431, 194, 173, 232, 467, 175, 193, 141, 222,
	186, 231, 241, 242, 219, 239, 246, 209, 87, 218,
	230, 103, 204, 89, 228, 215, 152, 132, 133, 88,
	0, 190, 111, 118, 108, 165, 225, 226, 107, 249,
	95, 238, 91, 96, 237, 159, 221, 229, 153, 146,
	90, 227, 151, 145, 136, 115, 125, 183, 143, 184,
	126, 156, 155, 157, 0, 404, 0, 213, 235, 250,
	100, 420, 220, 244, 245, 0, 0, 101, 119, 114,
	182, 158, 97, 128, 210, 135, 142, 189, 248, 172,
	195, 104, 234, 211, 416, 419, 414, 415, 462, 463,
	509, 510, 511, 487, 410, 0, 417, 418, 0, 492,
	499, 500, 466, 83, 92, 139, 247, 187, 117, 236,
	400, 413, 110, 423, 0, 0, 435, 440, 441, 453,
	455, 456, 457, 458, 465, 472, 473, 475, 481, 482,
	483, 484, 489, 496, 515, 85, 86, 93, 99, 105,
	109, 113, 116, 121, 124, 127, 129, 130, 131, 134,
	144, 147, 148, 149, 150, 160, 161, 162, 164, 167,
	168, 169, 170, 171, 174, 176, 177, 178, 179, 180,
	181, 188, 191, 197, 198, 199, 200, 201, 202, 203,
	205, 206, 207, 208, 214, 217, 223, 224, 233, 240,
	243, 503, 433, 491, 0, 448, 506, 422, 438, 514,
	439, 442, 479, 407, 461, 166, 436, 0, 426, 402,
	432, 403, 424, 450, 112, 454, 421, 493, 464, 505,
	138, 512, 140, 470, 0, 212, 154, 0, 0, 452,
	495, 459, 488, 447, 480, 412, 469, 507, 437, 477,
	508, 55, 0, 0, 81, 0, 0, 0, 0, 0,
	0, 0, 0, 102, 0, 474, 502, 434, 476, 478,
	401, 471, 0, 405, 408, 513, 498, 429, 430, 0,
	0, 0, 0, 0, 0, 0, 451, 460, 485, 445,
	0, 0, 0, 0, 0, 0, 0, 0, 427, 0,
	468, 0, 0, 0, 409, 406, 0, 0, 449, 0,
	0, 0, 411, 0, 428, 486, 0, 399, 120, 490,
	497, 446, 266, 501, 444, 443, 504, 185, 0, 216,
	123, 137, 98, 84, 94, 0, 122, 163, 192, 196,
	494, 425, 106, 431, 194, 173, 232, 467, 175, 193,
	141, 222, 186, 231, 241, 242, 219, 239, 246, 209,
	87, 218, 230, 103, 204, 89, 228, 215, 152, 132,
	133, 88, 0, 190, 111, 118, 108, 165, 225, 226,
	107, 249, 95, 238, 91, 96, 237, 159, 221, 229,
	153, 146, 90, 227, 151, 145, 136, 115, 125, 183,
	143, 184, 126, 156, 155, 157, 0, 404, 0, 213,
	235, 250, 100, 420, 220, 244, 245, 0, 0, 101,
	119, 114, 182, 158, 97, 128, 210, 135, 142, 189,
	248, 172, 195, 104, 234, 211, 416, 419, 414, 415,
	462, 463, 509, 510, 511, 487, 410, 0, 417, 418,
	0, 492, 499, 500, 466, 83, 92, 139, 247, 187,
	117, 236, 400, 413, 110, 423, 0, 0, 435, 440,
	441, 453, 455, 456, 457, 458, 465, 472, 473, 475,
	481, 482, 483, 484, 489, 496, 515, 85, 86, 93,
	99, 105, 109, 113, 116, 121, 124, 127, 129, 130,
	131, 134, 144, 147, 148, 149, 150, 160, 161, 162,
	164, 167, 168, 169, 170, 171, 174, 176, 177, 178,
	179, 180, 181, 188, 191, 197, 198, 199, 200, 201,
	202, 203, 205, 206, 207, 208, 214, 217, 223, 224,
	233, 240, 243, 503, 433, 491, 0, 448, 506, 422,
	438, 514, 439, 442, 479, 407, 461, 166, 436, 0,
	426, 402, 432, 403, 424, 450, 112, 454, 421, 493,
	464, 505, 138, 512, 140, 470, 0, 212, 154, 0,
	0, 452, 495, 459, 488, 447, 480, 412, 469, 507,
	437, 477, 508, 0, 0, 0, 81, 0, 0, 0,
	0, 0, 0, 0, 0, 102, 0, 474, 502, 434,
	476, 478, 401, 471, 0, 405, 408, 513, 498, 429,
	430, 0, 0, 0, 0, 0, 0, 0, 451, 460,
	485, 445, 0, 0, 0, 0, 0, 0, 1210, 0,
	427, 0, 468, 0, 0, 0, 409, 406, 0, 0,
	449, 0, 0, 0, 411, 0, 428, 486, 0, 399,
	120, 490, 497, 446, 266, 501, 444, 443, 504, 185,
	0, 216, 123, 137, 98, 84, 94, 0, 122, 163,
	192, 196, 494, 425, 106, 431, 194, 173, 232, 467,
	175, 193, 141, 222, 186, 231, 241, 242, 219, 239,
	246, 209, 87, 218, 230, 103, 204, 89, 228, 215,
	152, 132, 133, 88, 0, 190, 111, 118, 108, 165,
	225, 226, 107, 249, 95, 238, 91, 96, 237, 159,
	221, 229, 153, 146, 90, 227, 151, 145, 136, 115,
	125, 183, 143, 184, 126, 156, 155, 157, 0, 404,
	0, 213, 235, 250, 100, 420, 220, 244, 245, 0,
	0, 101, 119, 114, 182, 158, 97, 128, 210, 135,
	142, 189, 248, 172, 195, 104, 234, 211, 416, 419,
	414, 415, 462, 463, 509, 510, 511, 487, 410, 0,
	417, 418, 0, 492, 499, 500, 466, 83, 92, 139,
	247, 187, 117, 236, 400, 413, 110, 423, 0, 0,
	435, 440, 441, 453, 455, 456, 457, 458, 465, 472,
	473, 475, 481, 482, 483, 484, 489, 496, 515, 85,
	86, 93, 99, 105, 109, 113, 116, 121, 124, 127,
	129, 130, 131, 134, 144, 147, 148, 149, 150, 160,
	161, 162, 164, 167, 168, 169, 170, 171, 174, 176,
	177, 178, 179, 180, 181, 188, 191, 197, 198, 199,
	200, 201, 202, 203, 205, 206, 207, 208, 214, 217,
	223, 224, 233, 240, 243, 503, 433, 491, 0, 448,
	506, 422, 438, 514, 439, 442, 479, 407, 461, 166,
	436, 0, 426, 402, 432, 403, 424, 450, 112, 454,
	421, 493, 464, 505, 138, 512, 140, 470, 0, 212,
	154, 0, 0, 452, 495, 459, 488, 447, 480, 412,
	469, 507, 437, 477, 508, 0, 0, 0, 264, 0,
	0, 0, 0, 0, 0, 0, 0, 102, 0, 474,
	502, 434, 476, 478, 401, 471, 0, 405, 408, 513,
	498, 429, 430, 0, 0, 0, 0, 0, 0, 0,
	451, 460, 485, 445, 0, 0, 0, 0, 0, 0,
	940, 0, 427, 0, 468, 0, 0, 0, 409, 406,
	0, 0, 449, 0, 0, 0, 411, 0, 428, 486,
	0, 399, 120, 490, 497, 446, 266, 501, 444, 443,
	504, 185, 0, 216, 123, 137, 98, 84, 94, 0,
	122, 163, 192, 196, 494, 425, 106, 431, 194, 173,
	232, 467, 175, 193, 141, 222, 186, 231, 241, 242,
	219, 239, 246, 209, 87, 218, 230, 103, 204, 89,
	228, 215, 152, 132, 133, 88, 0, 190, 111, 118,
	108, 165, 225, 226, 107, 249, 95, 238, 91, 96,
	237, 159, 221, 229, 153, 146, 90, 227, 151, 145,
	136, 115, 125, 183, 143, 184, 126, 156, 155, 157,
	0, 404, 0, 213, 235, 250, 100, 420, 220, 244,
	245, 0, 0, 101, 119, 114, 182, 158, 97, 128,
	210, 135, 142, 189, 248, 172, 195, 104, 234, 211,
	416, 419, 414, 415, 462, 463, 509, 510, 511, 487,
	410, 0, 417, 418, 0, 492, 499, 500, 466, 83,
	92, 139, 247, 187, 117, 236, 400, 413, 110, 423,
	0, 0, 435, 440, 441, 453, 455, 456, 457, 458,
	465, 472, 473, 475, 481, 482, 483, 484, 489, 496,
	515, 85, 86, 93, 99, 105, 109, 113, 116, 121,
	124, 127, 129, 130, 131, 134, 144, 147, 148, 149,
	150, 160, 161, 162, 164, 167, 168, 169, 170, 171,
	174, 176, 177, 178, 179, 180, 181, 188, 191, 197,
	198, 199, 200, 201, 202, 203, 205, 206, 207, 208,
	214, 217, 223, 224, 233, 240, 243, 503, 433, 491,
	0, 448, 506, 422, 438, 514, 439, 442, 479, 407,
	461, 166, 436, 0, 426, 402, 432, 403, 424, 450,
	112, 454, 421, 493, 464, 505, 138, 512, 140, 470,
	0, 212, 154, 0, 0, 452, 495, 459, 488, 447,
	480, 412, 469, 507, 437, 477, 508, 0, 0, 0,
	321, 0, 0, 0, 0, 0, 0, 0, 0, 102,
	0, 474, 502, 434, 476, 478, 401, 471, 0, 405,
	408, 513, 498, 429, 430, 0, 0, 0, 0, 0,
	0, 0, 451, 460, 485, 445, 0, 0, 0, 0,
	0, 0, 838, 0, 427, 0, 468, 0, 0, 0,
	409, 406, 0, 0, 449, 0, 0, 0, 411, 0,
	428, 486, 0, 399, 120, 490, 497, 446, 266, 501,
	444, 443, 504, 185, 0, 216, 123, 137, 98, 84,
	94, 0, 122, 163, 192, 196, 494, 425, 106, 431,
	194, 173, 232, 467, 175, 193, 141, 222, 186, 231,
	241, 242, 219, 239, 246, 209, 87, 218, 230, 103,
	204, 89, 228, 215, 152, 132, 133, 88, 0, 190,
	111, 118, 108, 165, 225, 226, 107, 249, 95, 238,
	91, 96, 237, 159, 221, 229, 153, 146, 90, 227,
	151, 145, 136, 115, 125, 183, 143, 184, 126, 156,
	155, 157, 0, 404, 0, 213, 235, 250, 100, 420,
	220, 244, 245, 0, 0, 101, 119, 114, 182, 158,
	97, 128, 210, 135, 142, 189, 248, 172, 195, 104,
	234, 211, 416, 419, 414, 415, 462, 463, 509, 510,
	511, 487, 410, 0, 417, 418, 0, 492, 499, 500,
	466, 83, 92, 139, 247, 187, 117, 236, 400, 413,
	110, 423, 0, 0, 435, 440, 441, 453, 455, 456,
	457, 458, 465, 472, 473, 475, 481, 482, 483, 484,
	489, 496, 515, 85, 86, 93, 99, 105, 109, 113,
	116, 121, 124, 127, 129, 130, 131, 134, 144, 147,
	148, 149, 150, 160, 161, 162, 164, 167, 168, 169,
	170, 171, 174, 176, 177, 178, 179, 180, 181, 188,
	191, 197, 198, 199, 200, 201, 202, 203, 205, 206,
	207, 208, 214, 217, 223, 224, 233, 240, 243, 503,
	433, 491, 0, 448, 506, 422, 438, 514, 439, 442,
	479, 407, 461, 166, 436, 0, 426, 402, 432, 403,
	424, 450, 112, 454, 421, 493, 464, 505, 138, 512,
	140, 470, 0, 212, 154, 0, 0, 452, 495, 459,
	488, 447, 480, 412, 469, 507, 437, 477, 508, 0,
	0, 0, 81, 0, 0, 0, 0, 0, 0, 0,
	0, 102, 0, 474, 502, 434, 476, 478, 401, 471,
	0, 405, 408, 513, 498, 429, 430, 0, 0, 0,
	0, 0, 0, 0, 451, 460, 485, 445, 0, 0,
	0, 0, 0, 0, 0, 0, 427, 0, 468, 0,
	0, 0, 409, 406, 0, 0, 449, 0, 0, 0,
	411, 0, 428, 486, 0, 399, 120, 490, 497, 446,
	266, 501, 444, 443, 504, 185, 0, 216, 123, 137,
	98, 84, 94, 0, 122, 163, 192, 196, 494, 425,
	106, 431, 194, 173, 232, 467, 175, 193, 141, 222,
	186, 231, 241, 242, 219, 239, 246, 209, 87, 218,
	230, 103, 204, 89, 228, 215, 152, 132, 133, 88,
	0, 190, 111, 118, 108, 165, 225, 226, 107, 249,
	95, 238, 91, 96, 237, 159, 221, 229, 153, 146,
	90, 227, 151, 145, 136, 115, 125, 183, 143, 184,
	126, 156, 155, 157, 0, 404, 0, 213, 235, 250,
	100, 420, 220, 244, 245, 0, 0, 101, 119, 114,
	182, 158, 97, 128, 210, 135, 142, 189, 248, 172,
	195, 104, 234, 211, 416, 419, 414, 415, 462, 463,
	509, 510, 511, 487, 410, 0, 417, 418, 0, 492,
	499, 500, 466, 83, 92, 139, 247, 187, 117, 236,
	400, 413, 110, 423, 0, 0, 435, 440, 441, 453,
	455, 456, 457, 458, 465, 472, 473, 475, 481, 482,
	483, 484, 489, 496, 515, 85, 86, 93, 99, 105,
	109, 113, 116, 121, 124, 127, 129, 130, 131, 134,
	144, 147, 148, 149, 150, 160, 161, 162, 164, 167,
	168, 169, 170, 171, 174, 176, 177, 178, 179, 180,
	181, 188, 191, 197, 198, 199, 200, 201, 202, 203,
	205, 206, 207, 208, 214, 217, 223, 224, 233, 240,
	243, 503, 433, 491, 0, 448, 506, 422, 438, 514,
	439, 442, 479, 407, 461, 166, 436, 0, 426, 402,
	432, 403, 424, 450, 112, 454, 421, 493, 464, 505,
	138, 512, 140, 470, 0, 212, 154, 0, 0, 452,
	495, 459, 488, 447, 480, 412, 469, 507, 437, 477,
	508, 0, 0, 0, 321, 0, 0, 0, 0, 0,
	0, 0, 0, 102, 0, 474, 502, 434, 476, 478,
	401, 471, 0, 405, 408, 513, 498, 429, 430, 0,
	0, 0, 0, 0, 0, 0, 451, 460, 485, 445,
	0, 0, 0, 0, 0, 0, 0, 0, 427, 0,
	468, 0, 0, 0, 409, 406, 0, 0, 449, 0,
	0, 0, 411, 0, 428, 486, 0, 399, 120, 490,
	497, 446, 266, 501, 444, 443, 504, 185, 0, 216,
	123, 137, 98, 84, 94, 0, 122, 163, 192, 196,
	494, 425, 106, 431, 194, 173, 232, 467, 175, 193,
	141, 222, 186, 231, 241, 242, 219, 239, 246, 209,
	87, 218, 230, 103, 204, 89, 228, 215, 152, 132,
	133, 88, 0, 190, 111, 118, 108, 165, 225, 226,
	107, 249, 95, 238, 91, 96, 237, 159, 221, 229,
	153, 146, 90, 227, 151, 145, 136, 115, 125, 183,
	143, 184, 126, 156, 155, 157, 0, 404, 0, 213,
	235, 250, 100, 420, 220, 244, 245, 0, 0, 101,
	119, 114, 182, 158, 97, 128, 210, 135, 142, 189,
	248, 172, 195, 104, 234, 211, 416, 419, 414, 415,
	462, 463, 509, 510, 511, 487, 410, 0, 417, 418,
	0, 492, 499, 500, 466, 83, 92, 139, 247, 187,
	117, 236, 400, 413, 110, 423, 0, 0, 435, 440,
	441, 453, 455, 456, 457, 458, 465, 472, 473, 475,
	481, 482, 483, 484, 489, 496, 515, 85, 86, 93,
	99, 105, 109, 113, 116, 121, 124, 127, 129, 130,
	131, 134, 144, 147, 148, 149, 150, 160, 161, 162,
	164, 167, 168, 169, 170, 171, 174, 176, 177, 178,
	179, 180, 181, 188, 191, 197, 198, 199, 200, 201,
	202, 203, 205, 206, 207, 208, 214, 217, 223, 224,
	233, 240, 243, 503, 433, 491, 0, 448, 506, 422,
	438, 514, 439, 442, 479, 407, 461, 166, 436, 0,
	426, 402, 432, 403, 424, 450, 112, 454, 421, 493,
	464, 505, 138, 512, 140, 470, 0, 212, 154, 0,
	0, 452, 495, 459, 488, 447, 480, 412, 469, 507,
	437, 477, 508, 0, 0, 0, 81, 0, 0, 0,
	0, 0, 0, 0, 0, 102, 0, 474, 502, 434,
	476, 478, 401, 471, 0, 405, 408, 513, 498, 429,
	430, 0, 0, 0, 0, 0, 0, 0, 451, 460,
	485, 445, 0, 0, 0, 0, 0, 0, 0, 0,
	427, 0, 468, 0, 0, 0, 409, 406, 0, 0,
	449, 0, 0, 0, 411, 0, 428, 486, 0, 399,
	120, 490, 497, 446, 266, 501, 444, 443, 504, 185,
	0, 216, 123, 137, 98, 84, 94, 0, 122, 163,
	192, 196, 494, 425, 106, 431, 194, 173, 232, 467,
	175, 193, 141, 222, 186, 231, 241, 242, 219, 239,
	246, 209, 87, 218, 230, 103, 204, 89, 228, 215,
	152, 132, 133, 88, 0, 190, 111, 118, 108, 165,
	225, 226, 107, 249, 95, 238, 91, 397, 237, 159,
	221, 229, 153, 146, 90, 227, 151, 145, 136, 115,
	125, 183, 143, 184, 126, 156, 155, 157, 0, 404,
	0, 213, 235, 250, 100, 420, 220, 244, 245, 0,
	0, 101, 119, 114, 182, 398, 396, 128, 210, 135,
	142, 189, 248, 172, 195, 104, 234, 211, 416, 419,
	414, 415, 462, 463, 509, 510, 511, 487, 410, 0,
	417, 418, 0, 492, 499, 500, 466, 83, 92, 139,
	247, 187, 117, 236, 400, 413, 110, 423, 0, 0,
	435, 440, 441, 453, 455, 456, 457, 458, 465, 472,
	473, 475, 481, 482, 483, 484, 489, 496, 515, 85,
	86, 93, 99, 105, 109, 113, 116, 121, 124, 127,
	129, 130, 131, 134, 144, 147, 148, 149, 150, 160,
	161, 162, 164, 167, 168, 169, 170, 171, 174, 176,
	177, 178, 179, 180, 181, 188, 191, 197, 198, 199,
	200, 201, 202, 203, 205, 206, 207, 208, 214, 217,
	223, 224, 233, 240, 243, 503, 433, 491, 0, 448,
	506, 422, 438, 514, 439, 442, 479, 407, 461, 166,
	436, 0, 426, 402, 432, 403, 424, 450, 112, 454,
	421, 493, 464, 505, 138, 512, 140, 470, 0, 212,
	154, 0, 0, 452, 495, 459, 488, 447, 480, 412,
	469, 507, 437, 477, 508, 0, 0, 0, 264, 0,
	0, 0, 0, 0, 0, 0, 0, 102, 0, 474,
	502, 434, 476, 478, 401, 471, 0, 405, 408, 513,
	498, 429, 430, 0, 0, 0, 0, 0, 0, 0,
	451, 460, 485, 445, 0, 0, 0, 0, 0, 0,
	0, 0, 427, 0, 468, 0, 0, 0, 409, 406,
	0, 0, 449, 0, 0, 0, 411, 0, 428, 486,
	0, 399, 120, 490, 497, 446, 266, 501, 444, 443,
	504, 185, 0, 216, 123, 137, 98, 84, 94, 0,
	122, 163, 192, 196, 494, 425, 106, 431, 194, 173,
	232, 467, 175, 193, 141, 222, 186, 231, 241, 242,
	219, 239, 246, 209, 87, 218, 230, 103, 204, 89,
	228, 215, 152, 132, 133, 88, 0, 190, 111, 118,
	108, 165, 225, 226, 107, 249, 95, 238, 91, 96,
	237, 159, 221, 229, 153, 146, 90, 227, 151, 145,
	136, 115, 125, 183, 143, 184, 126, 156, 155, 157,
	0, 404, 0, 213, 235, 250, 100, 420, 220, 244,
	245, 0, 0, 101, 119, 114, 182, 158, 97, 128,
	210, 135, 142, 189, 248, 172, 195, 104, 234, 211,
	416, 419, 414, 415, 462, 463, 509, 510, 511, 487,
	410, 0, 417, 418, 0, 492, 499, 500, 466, 83,
	92, 139, 247, 187, 117, 236, 400, 413, 110, 423,
	0, 0, 435, 440, 441, 453, 455, 456, 457, 458,
	465, 472, 473, 475, 481, 482, 483, 484, 489, 496,
	515, 85, 86, 93, 99, 105, 109, 113, 116, 121,
	124, 127, 129, 130, 131, 134, 144, 147, 148, 149,
	150, 160, 161, 162, 164, 167, 168, 169, 170, 171,
	174, 176, 177, 178, 179, 180, 181, 188, 191, 197,
	198, 199, 200, 201, 202, 203, 205, 206, 207, 208,
	214, 217, 223, 224, 233, 240, 243, 503, 433, 491,
	0, 448, 506, 422, 438, 514, 439, 442, 479, 407,
	461, 166, 436, 0, 426, 402, 432, 403, 424, 450,
	112, 454, 421, 493, 464, 505, 138, 512, 140, 470,
	0, 212, 154, 0, 0, 452, 495, 459, 488, 447,
	480, 412, 469, 507, 437, 477, 508, 0, 0, 0,
	81, 0, 0, 0, 0, 0, 0, 0, 0, 102,
	0, 474, 502, 434, 476, 478, 401, 471, 0, 405,
	408, 513, 498, 429, 430, 0, 0, 0, 0, 0,
	0, 0, 451, 460, 485, 445, 0, 0, 0, 0,
	0, 0, 0, 0, 427, 0, 468, 0, 0, 0,
	409, 406, 0, 0, 449, 0, 0, 0, 411, 0,
	428, 486, 0, 399, 120, 490, 497, 446, 266, 501,
	444, 443, 504, 185, 0, 216, 123, 137, 98, 84,
	94, 0, 122, 163, 192, 196, 494, 425, 106, 431,
	194, 173, 232, 467, 175, 193, 141, 222, 186, 231,
	241, 242, 219, 239, 246, 209, 87, 218, 704, 103,
	204, 89, 228, 215, 152, 132, 133, 88, 0, 190,
	111, 118, 108, 165, 225, 226, 107, 249, 95, 238,
	91, 397, 237, 159, 221, 229, 153, 146, 90, 227,
	151, 145, 136, 115, 125, 183, 143, 184, 126, 156,
	155, 157, 0, 404, 0, 213, 235, 250, 100, 420,
	220, 244, 245, 0, 0, 101, 119, 114, 182, 398,
	396, 128, 210, 135, 142, 189, 248, 172, 195, 104,
	234, 211, 416, 419, 414, 415, 462, 463, 509, 510,
	511, 487, 410, 0, 417, 418, 0, 492, 499, 500,
	466, 83, 92, 139, 247, 187, 117, 236, 400, 413,
	110, 423, 0, 0, 435, 440, 441, 453, 455, 456,
	457, 458, 465, 472, 473, 475, 481, 482, 483, 484,
	489, 496, 515, 85, 86, 93, 99, 105, 109, 113,
	116, 121, 124, 127, 129, 130, 131, 134, 144, 147,
	148, 149, 150, 160, 161, 162, 164, 167, 168, 169,
	170, 171, 174, 176, 177, 178, 179, 180, 181, 188,
	191, 197, 198, 199, 200, 201, 202, 203, 205, 206,
	207, 208, 214, 217, 223, 224, 233, 240, 243, 503,
	433, 491, 0, 448, 506, 422, 438, 514, 439, 442,
	479, 407, 461, 166, 436, 0, 426, 402, 432, 403,
	424, 450, 112, 454, 421, 493, 464, 505, 138, 512,
	140, 470, 0, 212, 154, 0, 0, 452, 495, 459,
	488, 447, 480, 412, 469, 507, 437, 477, 508, 0,
	0, 0, 81, 0, 0, 0, 0, 0, 0, 0,
	0, 102, 0, 474, 502, 434, 476, 478, 401, 471,
	0, 405, 408, 513, 498, 429, 430, 0, 0, 0,
	0, 0, 0, 0, 451, 460, 485, 445, 0, 0,
	0, 0, 0, 0, 0, 0, 427, 0, 468, 0,
	0, 0, 409, 406, 0, 0, 449, 0, 0, 0,
	411, 0, 428, 486, 0, 399, 120, 490, 497, 446,
	266, 501, 444, 443, 504, 185, 0, 216, 123, 137,
	98, 84, 94, 0, 122, 163, 192, 196, 494, 425,
	106, 431, 194, 173, 232, 467, 175, 193, 141, 222,
	186, 231, 241, 242, 219, 239, 246, 209, 87, 218,
	388, 103, 204, 89, 228, 215, 152, 132, 133, 88,
	0, 190, 111, 118, 108, 165, 225, 226, 107, 249,
	95, 238, 91, 397, 237, 159, 221, 229, 153, 146,
	90, 227, 151, 145, 136, 115, 125, 183, 143, 184,
	126, 156, 155, 157, 0, 404, 0, 213, 235, 250,
	100, 420, 220, 244, 245, 0, 0, 101, 119, 114,
	182, 398, 396, 391, 390, 135, 142, 189, 248, 172,
	195, 104, 234, 211, 416, 419, 414, 415, 462, 463,
	509, 510, 511, 487, 410, 0, 417, 418, 0, 492,
	499, 500, 466, 83, 92, 139, 247, 187, 117, 236,
	400, 413, 110, 423, 0, 0, 435, 440, 441, 453,
	455, 456, 457, 458, 465, 472, 473, 475, 481, 482,
	483, 484, 489, 496, 515, 85, 86, 93, 99, 105,
	109, 113, 116, 121, 124, 127, 129, 130, 131, 134,
	144, 147, 148, 149, 150, 160, 161, 162, 164, 167,
	168, 169, 170, 171, 174, 176, 177, 178, 179, 180,
	181, 188, 191, 197, 198, 199, 200, 201, 202, 203,
	205, 206, 207, 208, 214, 217, 223, 224, 233, 240,
	243, 166, 0, 0, 0, 0, 323, 0, 0, 0,
	112, 0, 320, 0, 0, 0, 138, 363, 140, 0,
	0, 212, 154, 0, 0, 0, 0, 354, 355, 0,
	0, 0, 0, 0, 0, 947, 0, 55, 0, 0,
	321, 342, 341, 344, 345, 346, 347, 0, 0, 102,
	343, 348, 349, 350, 948, 0, 0, 318, 335, 0,
	362, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	332, 333, 0, 0, 0, 0, 376, 0, 334, 0,
	0, 329, 330, 331, 336, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 120, 0, 0, 0, 266, 0,
	0, 374, 0, 185, 0, 216, 123, 137, 98, 84,
	94, 0, 122, 163, 192, 196, 0, 0, 106, 0,
	194, 173, 232, 0, 175, 193, 141, 222, 186, 231,
	241, 242, 219, 239, 246, 209, 87, 218, 230, 103,
	204, 89, 228, 215, 152, 132, 133, 88, 0, 190,
	111, 118, 108, 165, 225, 226, 107, 249, 95, 238,
	91, 96, 237, 159, 221, 229, 153, 146, 90, 227,
	151, 145, 136, 115, 125, 183, 143, 184, 126, 156,
	155, 157, 0, 0, 0, 213, 235, 250, 100, 0,
	220, 244, 245, 0, 0, 101, 119, 114, 182, 158,
	97, 128, 210, 135, 142, 189, 248, 172, 195, 104,
	234, 211, 364, 375, 370, 371, 368, 369, 367, 366,
	365, 377, 356, 357, 358, 359, 361, 0, 372, 373,
	360, 83, 92, 139, 247, 187, 117, 236, 0, 0,
	110, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 85, 86, 93, 99, 105, 109, 113,
	116, 121, 124, 127, 129, 130, 131, 134, 144, 147,
	148, 149, 150, 160, 161, 162, 164, 167, 168, 169,
	170, 171, 174, 176, 177, 178, 179, 180, 181, 188,
	191, 197, 198, 199, 200, 201, 202, 203, 205, 206,
	207, 208, 214, 217, 223, 224, 233, 240, 243, 166,
	0, 0, 874, 0, 323, 0, 0, 0, 112, 0,
	320, 0, 0, 0, 138, 363, 140, 0, 0, 212,
	154, 0, 0, 0, 0, 354, 355, 0, 0, 0,
	0, 0, 0, 0, 0, 55, 0, 0, 321, 342,
	341, 344, 345, 346, 347, 0, 0, 102, 343, 348,
	349, 350, 0, 0, 0, 318, 335, 0, 362, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 332, 333,
	314, 0, 0, 0, 376, 0, 334, 0, 0, 329,
	330, 331, 336, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 120, 0, 0, 0, 266, 0, 0, 374,
	0, 185, 0, 216, 123, 137, 98, 84, 94, 0,
	122, 163, 192, 196, 0, 0, 106, 0, 194, 173,
	232, 0, 175, 193, 141, 222, 186, 231, 241, 242,
	219, 239, 246, 209, 87, 218, 230, 103, 204, 89,
	228, 215, 152, 132, 133, 88, 0, 190, 111, 118,
	108, 165, 225, 226, 107, 249, 95, 238, 91, 96,
	237, 159, 221, 229, 153, 146, 90, 227, 151, 145,
	136, 115, 125, 183, 143, 184, 126, 156, 155, 157,
	0, 0, 0, 213, 235, 250, 100, 0, 220, 244,
	245, 0, 0, 101, 119, 114, 182, 158, 97, 128,
	210, 135, 142, 189, 248, 172, 195, 104, 234, 211,
	364, 375, 370, 371, 368, 369, 367, 366, 365, 377,
	356, 357, 358, 359, 361, 0, 372, 373, 360, 83,
	92, 139, 247, 187, 117, 236, 0, 0, 110, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 85, 86, 93, 99, 105, 109, 113, 116, 121,
	124, 127, 129, 130, 131, 134, 144, 147, 148, 149,
	150, 160, 161, 162, 164, 167, 168, 169, 170, 171,
	174, 176, 177, 178, 179, 180, 181, 188, 191, 197,
	198, 199, 200, 201, 202, 203, 205, 206, 207, 208,
	214, 217, 223, 224, 233, 240, 243, 166, 0, 0,
	0, 0, 323, 0, 0, 0, 112, 0, 320, 0,
	0, 0, 138, 363, 140, 0, 0, 212, 154, 0,
	0, 0, 0, 354, 355, 0, 0, 0, 0, 0,
	0, 0, 0, 55, 0, 577, 321, 342, 341, 344,
	345, 346, 347, 0, 0, 102, 343, 348, 349, 350,
	0, 0, 0, 318, 335, 0, 362, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 332, 333, 0, 0,
	0, 0, 376, 0, 334, 0, 0, 329, 330, 331,
	336, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	120, 0, 0, 0, 266, 0, 0, 374, 0, 185,
	0, 216, 123, 137, 98, 84, 94, 0, 122, 163,
	192, 196, 0, 0, 106, 0, 194, 173, 232, 0,
	175, 193, 141, 222, 186, 231, 241, 242, 219, 239,
	246, 209, 87, 218, 230, 103, 204, 89, 228, 215,
	152, 132, 133, 88, 0, 190, 111, 118, 108, 165,
	225, 226, 107, 249, 95, 238, 91, 96, 237, 159,
	221, 229, 153, 146, 90, 227, 151, 145, 136, 115,
	125, 183, 143, 184, 126, 156, 155, 157, 0, 0,
	0, 213, 235, 250, 100, 0, 220, 244, 245, 0,
	0, 101, 119, 114, 182, 158, 97, 128, 210, 135,
	142, 189, 248, 172, 195, 104, 234, 211, 364, 375,
	370, 371, 368, 369, 367, 366, 365, 377, 356, 357,
	358, 359, 361, 0, 372, 373, 360, 83, 92, 139,
	247, 187, 117, 236, 0, 0, 110, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 85,
	86, 93, 99, 105, 109, 113, 116, 121, 124, 127,
	129, 130, 131, 134, 144, 147, 148, 149, 150, 160,
	161, 162, 164, 167, 168, 169, 170, 171, 174, 176,
	177, 178, 179, 180, 181, 188, 191, 197, 198, 199,
	200, 201, 202, 203, 205, 206, 207, 208, 214, 217,
	223, 224, 233, 240, 243, 166, 0, 0, 0, 0,
	323, 0, 0, 0, 112, 0, 320, 0, 0, 0,
	138, 363, 140, 0, 0, 212, 154, 0, 0, 0,
	0, 354, 355, 0, 0, 0, 0, 0, 0, 0,
	0, 55, 0, 0, 321, 342, 341, 344, 345, 346,
	347, 0, 0, 102, 343, 348, 349, 350, 0, 0,
	0, 318, 335, 0, 362, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 332, 333, 314, 0, 0, 0,
	376, 0, 334, 0, 0, 329, 330, 331, 336, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 120, 0,
	0, 0, 266, 0, 0, 374, 0, 185, 0, 216,
	123, 137, 98, 84, 94, 0, 122, 163, 192, 196,
	0, 0, 106, 0, 194, 173, 232, 0, 175, 193,
	141, 222, 186, 231, 241, 242, 219, 239, 246, 209,
	87, 218, 230, 103, 204, 89, 228, 215, 152, 132,
	133, 88, 0, 190, 111, 118, 108, 165, 225, 226,
	107, 249, 95, 238, 91, 96, 237, 159, 221, 229,
	153, 146, 90, 227, 151, 145, 136, 115, 125, 183,
	143, 184, 126, 156, 155, 157, 0, 0, 0, 213,
	235, 250, 100, 0, 220, 244, 245, 0, 0, 101,
	119, 114, 182, 158, 97, 128, 210, 135, 142, 189,
	248, 172, 195, 104, 234, 211, 364, 375, 370, 371,
	368, 369, 367, 366, 365, 377, 356, 357, 358, 359,
	361, 0, 372, 373, 360, 83, 92, 139, 247, 187,
	117, 236, 0, 0, 110, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 85, 86, 93,
	99, 105, 109, 113, 116, 121, 124, 127, 129, 130,
	131, 134, 144, 147, 148, 149, 150, 160, 161, 162,
	164, 167, 168, 169, 170, 171, 174, 176, 177, 178,
	179, 180, 181, 188, 191, 197, 198, 199, 200, 201,
	202, 203, 205, 206, 207, 208, 214, 217, 223, 224,
	233, 240, 243, 166, 0, 0, 0, 0, 323, 0,
	0, 0, 112, 0, 320, 0, 0, 0, 138, 363,
	140, 0, 0, 212, 154, 0, 0, 0, 0, 354,
	355, 0, 0, 0, 0, 0, 0, 0, 0, 55,
	0, 0, 321, 342, 889, 344, 345, 346, 347, 0,
	0, 102, 343, 348, 349, 350, 0, 0, 0, 318,
	335, 0, 362, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 332, 333, 314, 0, 0, 0, 376, 0,
	334, 0, 0, 329, 330, 331, 336, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 120, 0, 0, 0,
	266, 0, 0, 374, 0, 185, 0, 216, 123, 137,
	98, 84, 94, 0, 122, 163, 192, 196, 0, 0,
	106, 0, 194, 173, 232, 0, 175, 193, 141, 222,
	186, 231, 241, 242, 219, 239, 246, 209, 87, 218,
	230, 103, 204, 89, 228, 215, 152, 132, 133, 88,
	0, 190, 111, 118, 108, 165, 225, 226, 107, 249,
	95, 238, 91, 96, 237, 159, 221, 229, 153, 146,
	90, 227, 151, 145, 136, 115, 125, 183, 143, 184,
	126, 156, 155, 157, 0, 0, 0, 213, 235, 250,
	100, 0, 220, 244, 245, 0, 0, 101, 119, 114,
	182, 158, 97, 128, 210, 135, 142, 189, 248, 172,
	195, 104, 234, 211, 364, 375, 370, 371, 368, 369,
	367, 366, 365, 377, 356, 357, 358, 359, 361, 0,
	372, 373, 360, 83, 92, 139, 247, 187, 117, 236,
	0, 0, 110, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 85, 86, 93, 99, 105,
	109, 113, 116, 121, 124, 127, 129, 130, 131, 134,
	144, 147, 148, 149, 150, 160, 161, 162, 164, 167,
	168, 169, 170, 171, 174, 176, 177, 178, 179, 180,
	181, 188, 191, 197, 198, 199, 200, 201, 202, 203,
	205, 206, 207, 208, 214, 217, 223, 224, 233, 240,
	243, 166, 0, 0, 0, 0, 323, 0, 0, 0,
	112, 0, 320, 0, 0, 0, 138, 363, 140, 0,
	0, 212, 154, 0, 0, 0, 0, 354, 355, 0,
	0, 0, 0, 0, 0, 0, 0, 55, 0, 0,
	321, 342, 886, 344, 345, 346, 347, 0, 0, 102,
	343, 348, 349, 350, 0, 0, 0, 318, 335, 0,
	362, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	332, 333, 314, 0, 0, 0, 376, 0, 334, 0,
	0, 329, 330, 331, 336, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 120, 0, 0, 0, 266, 0,
	0, 374, 0, 185, 0, 216, 123, 137, 98, 84,
	94, 0, 122, 163, 192, 196, 0, 0, 106, 0,
	194, 173, 232, 0, 175, 193, 141, 222, 186, 231,
	241, 242, 219, 239, 246, 209, 87, 218, 230, 103,
	204, 89, 228, 215, 152, 132, 133, 88, 0, 190,
	111, 118, 108, 165, 225, 226, 107, 249, 95, 238,
	91, 96, 237, 159, 221, 229, 153, 146, 90, 227,
	151, 145, 136, 115, 125, 183, 143, 184, 126, 156,
	155, 157, 0, 0, 0, 213, 235, 250, 100, 0,
	220, 244, 245, 0, 0, 101, 119, 114, 182, 158,
	97, 128, 210, 135, 142, 189, 248, 172, 195, 104,
	234, 211, 364, 375, 370, 371, 368, 369, 367, 366,
	365, 377, 356, 357, 358, 359, 361, 0, 372, 373,
	360, 83, 92, 139, 247, 187, 117, 236, 0, 0,
	110, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 85, 86, 93, 99, 105, 109, 113,
	116, 121, 124, 127, 129, 130, 131, 134, 144, 147,
	148, 149, 150, 160, 161, 162, 164, 167, 168, 169,
	170, 171, 174, 176, 177, 178, 179, 180, 181, 188,
	191, 197, 198, 199, 200, 201, 202, 203, 205, 206,
	207, 208, 214, 217, 223, 224, 233, 240, 243, 25,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 166, 0, 0, 0, 0, 323, 0, 0, 0,
	112, 0, 320, 0, 0, 0, 138, 363, 140, 0,
	0, 212, 154, 0, 0, 0, 0, 354, 355, 0,
	0, 0, 0, 0, 0, 0, 0, 55, 0, 0,
	321, 342, 341, 344, 345, 346, 347, 0, 0, 102,
	343, 348, 349, 350, 0, 0, 0, 318, 335, 0,
	362, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	332, 333, 0, 0, 0, 0, 376, 0, 334, 0,
	0, 329, 330, 331, 336, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 120, 0, 0, 0, 266, 0,
	0, 374, 0, 185, 0, 216, 123, 137, 98, 84,
	94, 0, 122, 163, 192, 196, 0, 0, 106, 0,
	194, 173, 232, 0, 175, 193, 141, 222, 186, 231,
	241, 242, 219, 239, 246, 209, 87, 218, 230, 103,
	204, 89, 228, 215, 152, 132, 133, 88, 0, 190,
	111, 118, 108, 165, 225, 226, 107, 249, 95, 238,
	91, 96, 237, 159, 221, 229, 153, 146, 90, 227,
	151, 145, 136, 115, 125, 183, 143, 184, 126, 156,
	155, 157, 0, 0, 0, 213, 235, 250, 100, 0,
	220, 244, 245, 0, 0, 101, 119, 114, 182, 158,
	97, 128, 210, 135, 142, 189, 248, 172, 195, 104,
	234, 211, 364, 375, 370, 371, 368, 369, 367, 366,
	365, 377, 356, 357, 358, 359, 361, 0, 372, 373,
	360, 83, 92, 139, 247, 187, 117, 236, 0, 0,
	110, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 85, 86, 93, 99, 105, 109, 113,
	116, 121, 124, 127, 129, 130, 131, 134, 144, 147,
	148, 149, 150, 160, 161, 162, 164, 167, 168, 169,
	170, 171, 174, 176, 177, 178, 179, 180, 181, 188,
	191, 197, 198, 199, 200, 201, 202, 203, 205, 206,
	207, 208, 214, 217, 223, 224, 233, 240, 243, 166,
	0, 0, 0, 0, 323, 0, 0, 0, 112, 0,
	320, 0, 0, 0, 138, 363, 140, 0, 0, 212,
	154, 0, 0, 0, 0, 354, 355, 0, 0, 0,
	0, 0, 0, 0, 0, 55, 0, 0, 321, 342,
	341, 344, 345, 346, 347, 0, 0, 102, 343, 348,
	349, 350, 0, 0, 0, 318, 335, 0, 362, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 332, 333,
	0, 0, 0, 0, 376, 0, 334, 0, 0, 329,
	330, 331, 336, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 120, 0, 0, 0, 266, 0, 0, 374,
	0, 185, 0, 216, 123, 137, 98, 84, 94, 0,
	122, 163, 192, 196, 0, 0, 106, 0, 194, 173,
	232, 0, 175, 193, 141, 222, 186, 231, 241, 242,
	219, 239, 246, 209, 87, 218, 230, 103, 204, 89,
	228, 215, 152, 132, 133, 88, 0, 190, 111, 118,
	108, 165, 225, 226, 107, 249, 95, 238, 91, 96,
	237, 159, 221, 229, 153, 146, 90, 227, 151, 145,
	136, 115, 125, 183, 143, 184, 126, 156, 155, 157,
	0, 0, 0, 213, 235, 250, 100, 0, 220, 244,
	245, 0, 0, 101, 119, 114, 182, 158, 97, 128,
	210, 135, 142, 189, 248, 172, 195, 104, 234, 211,
	364, 375, 370, 371, 368, 369, 367, 366, 365, 377,
	356, 357, 358, 359, 361, 0, 372, 373, 360, 83,
	92, 139, 247, 187, 117, 236, 0, 0, 110, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 85, 86, 93, 99, 105, 109, 113, 116, 121,
	124, 127, 129, 130, 131, 134, 144, 147, 148, 149,
	150, 160, 161, 162, 164, 167, 168, 169, 170, 171,
	174, 176, 177, 178, 179, 180, 181, 188, 191, 197,
	198, 199, 200, 201, 202, 203, 205, 206, 207, 208,
	214, 217, 223, 224, 233, 240, 243, 166, 0, 0,
	0, 0, 0, 0, 0, 0, 112, 0, 0, 0,
	0, 0, 138, 363, 140, 0, 0, 212, 154, 0,
	0, 0, 0, 354, 355, 0, 0, 0, 0, 0,
	0, 0, 0, 55, 0, 0, 321, 342, 341, 344,
	345, 346, 347, 0, 0, 102, 343, 348, 349, 350,
	0, 0, 0, 0, 335, 0, 362, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 332, 333, 0, 0,
	0, 0, 376, 0, 334, 0, 0, 329, 330, 331,
	336, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	120, 0, 0, 0, 266, 0, 0, 374, 0, 185,
	0, 216, 123, 137, 98, 84, 94, 0, 122, 163,
	192, 196, 0, 0, 106, 0, 194, 173, 232, 1509,
	175, 193, 141, 222, 186, 231, 241, 242, 219, 239,
	246, 209, 87, 218, 230, 103, 204, 89, 228, 215,
	152, 132, 133, 88, 0, 190, 111, 118, 108, 165,
	225, 226, 107, 249, 95, 238, 91, 96, 237, 159,
	221, 229, 153, 146, 90, 227, 151, 145, 136, 115,
	125, 183, 143, 184, 126, 156, 155, 157, 0, 0,
	0, 213, 235, 250, 100, 0, 220, 244, 245, 0,
	0, 101, 119, 114, 182, 158, 97, 128, 210, 135,
	142, 189, 248, 172, 195, 104, 234, 211, 364, 375,
	370, 371, 368, 369, 367, 366, 365, 377, 356, 357,
	358, 359, 361, 0, 372, 373, 360, 83, 92, 139,
	247, 187, 117, 236, 0, 0, 110, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 85,
	86, 93, 99, 105, 109, 113, 116, 121, 124, 127,
	129, 130, 131, 134, 144, 147, 148, 149, 150, 160,
	161, 162, 164, 167, 168, 169, 170, 171, 174, 176,
	177, 178, 179, 180, 181, 188, 191, 197, 198, 199,
	200, 201, 202, 203, 205, 206, 207, 208, 214, 217,
	223, 224, 233, 240, 243, 166, 0, 0, 0, 0,
	0, 0, 0, 0, 112, 0, 0, 0, 0, 0,
	138, 363, 140, 0, 0, 212, 154, 0, 0, 0,
	0, 354, 355, 0, 0, 0, 0, 0, 0, 0,
	0, 55, 0, 577, 321, 342, 341, 344, 345, 346,
	347, 0, 0, 102, 343, 348, 349, 350, 0, 0,
	0, 0, 335, 0, 362, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 332, 333, 0, 0, 0, 0,
	376, 0, 334, 0, 0, 329, 330, 331, 336, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 120, 0,
	0, 0, 266, 0, 0, 374, 0, 185, 0, 216,
	123, 137, 98, 84, 94, 0, 122, 163, 192, 196,
	0, 0, 106, 0, 194, 173, 232, 0, 175, 193,
	141, 222, 186, 231, 241, 242, 219, 239, 246, 209,
	87, 218, 230, 103, 204, 89, 228, 215, 152, 132,
	133, 88, 0, 190, 111, 118, 108, 165, 225, 226,
	107, 249, 95, 238, 91, 96, 237, 159, 221, 229,
	153, 146, 90, 227, 151, 145, 136, 115, 125, 183,
	143, 184, 126, 156, 155, 157, 0, 0, 0, 213,
	235, 250, 100, 0, 220, 244, 245, 0, 0, 101,
	119, 114, 182, 158, 97, 128, 210, 135, 142, 189,
	248, 172, 195, 104, 234, 211, 364, 375, 370, 371,
	368, 369, 367, 366, 365, 377, 356, 357, 358, 359,
	361, 0, 372, 373, 360, 83, 92, 139, 247, 187,
	117, 236, 0, 0, 110, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 85, 86, 93,
	99, 105, 109, 113, 116, 121, 124, 127, 129, 130,
	131, 134, 144, 147, 148, 149, 150, 160, 161, 162,
	164, 167, 168, 169, 170, 171, 174, 176, 177, 178,
	179, 180, 181, 188, 191, 197, 198, 199, 200, 201,
	202, 203, 205, 206, 207, 208, 214, 217, 223, 224,
	233, 240, 243, 166, 0, 0, 0, 0, 0, 0,
	0, 0, 112, 0, 0, 0, 0, 0, 138, 363,
	140, 0, 0, 212, 154, 0, 0, 0, 0, 354,
	355, 0, 0, 0, 0, 0, 0, 0, 0, 55,
	0, 0, 321, 342, 341, 344, 345, 346, 347, 0,
	0, 102, 343, 348, 349, 350, 0, 0, 0, 0,
	335, 0, 362, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 332, 333, 0, 0, 0, 0, 376, 0,
	334, 0, 0, 329, 330, 331, 336, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 120, 0, 0, 0,
	266, 0, 0, 374, 0, 185, 0, 216, 123, 137,
	98, 84, 94, 0, 122, 163, 192, 196, 0, 0,
	106, 0, 194, 173, 232, 0, 175, 193, 141, 222,
	186, 231, 241, 242, 219, 239, 246, 209, 87, 218,
	230, 103, 204, 89, 228, 215, 152, 132, 133, 88,
	0, 190, 111, 118, 108, 165, 225, 226, 107, 249,
	95, 238, 91, 96, 237, 159, 221, 229, 153, 146,
	90, 227, 151, 145, 136, 115, 125, 183, 143, 184,
	126, 156, 155, 157, 0, 0, 0, 213, 235, 250,
	100, 0, 220, 244, 245, 0, 0, 101, 119, 114,
	182, 158, 97, 128, 210, 135, 142, 189, 248, 172,
	195, 104, 234, 211, 364, 375, 370, 371, 368, 369,
	367, 366, 365, 377, 356, 357, 358, 359, 361, 0,
	372, 373, 360, 83, 92, 139, 247, 187, 117, 236,
	0, 0, 110, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 85, 86, 93, 99, 105,
	109, 113, 116, 121, 124, 127, 129, 130, 131, 134,
	144, 147, 148, 149, 150, 160, 161, 162, 164, 167,
	168, 169, 170, 171, 174, 176, 177, 178, 179, 180,
	181, 188, 191, 197, 198, 199, 200, 201, 202, 203,
	205, 206, 207, 208, 214, 217, 223, 224, 233, 240,
	243, 166, 0, 0, 0, 0, 0, 0, 0, 0,
	112, 0, 0, 0, 0, 0, 138, 0, 140, 0,
	0, 212, 154, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	81, 0, 0, 0, 0, 0, 0, 0, 0, 102,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 611, 610, 620, 621,
	613, 614, 615, 616, 617, 618, 619, 612, 0, 0,
	622, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 120, 0, 0, 0, 266, 0,
	0, 0, 0, 185, 0, 216, 123, 137, 98, 84,
	94, 0, 122, 163, 192, 196, 0, 0, 106, 0,
	194, 173, 232, 0, 175, 193, 141, 222, 186, 231,
	241, 242, 219, 239, 246, 209, 87, 218, 230, 103,
	204, 89, 228, 215, 152, 132, 133, 88, 0, 190,
	111, 118, 108, 165, 225, 226, 107, 249, 95, 238,
	91, 96, 237, 159, 221, 229, 153, 146, 90, 227,
	151, 145, 136, 115, 125, 183, 143, 184, 126, 156,
	155, 157, 0, 0, 0, 213, 235, 250, 100, 0,
	220, 244, 245, 0, 0, 101, 119, 114, 182, 158,
	97, 128, 210, 135, 142, 189, 248, 172, 195, 104,
	234, 211, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 83, 92, 139, 247, 187, 117, 236, 0, 0,
	110, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 85, 86, 93, 99, 105, 109, 113,
	116, 121, 124, 127, 129, 130, 131, 134, 144, 147,
	148, 149, 150, 160, 161, 162, 164, 167, 168, 169,
	170, 171, 174, 176, 177, 178, 179, 180, 181, 188,
	191, 197, 198, 199, 200, 201, 202, 203, 205, 206,
	207, 208, 214, 217, 223, 224, 233, 240, 243, 166,
	0, 0, 0, 599, 0, 0, 0, 0, 112, 0,
	0, 0, 0, 0, 138, 0, 140, 0, 0, 212,
	154, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 81, 0,
	601, 0, 0, 0, 0, 0, 0, 102, 0, 0,
	0, 0, 0, 596, 595, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	597, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 120, 0, 0, 0, 266, 0, 0, 0,
	0, 185, 0, 216, 123, 137, 98, 84, 94, 0,
	122, 163, 192, 196, 0, 0, 106, 0, 194, 173,
	232, 0, 175, 193, 141, 222, 186, 231, 241, 242,
	219, 239, 246, 209, 87, 218, 230, 103, 204, 89,
	228, 215, 152, 132, 133, 88, 0, 190, 111, 118,
	108, 165, 225, 226, 107, 249, 95, 238, 91, 96,
	237, 159, 221, 229, 153, 146, 90, 227, 151, 145,
	136, 115, 125, 183, 143, 184, 126, 156, 155, 157,
	0, 0, 0, 213, 235, 250, 100, 0, 220, 244,
	245, 0, 0, 101, 119, 114, 182, 158, 97, 128,
	210, 135, 142, 189, 248, 172, 195, 104, 234, 211,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 83,
	92, 139, 247, 187, 117, 236, 0, 0, 110, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 85, 86, 93, 99, 105, 109, 113, 116, 121,
	124, 127, 129, 130, 131, 134, 144, 147, 148, 149,
	150, 160, 161, 162, 164, 167, 168, 169, 170, 171,
	174, 176, 177, 178, 179, 180, 181, 188, 191, 197,
	198, 199, 200, 201, 202, 203, 205, 206, 207, 208,
	214, 217, 223, 224, 233, 240, 243, 166, 0, 0,
	0, 0, 0, 0, 0, 0, 112, 0, 0, 0,
	0, 0, 138, 0, 140, 0, 0, 212, 154, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 81, 0, 0, 0,
	0, 0, 0, 0, 0, 102, 0, 0, 0, 0,
	0, 75, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	120, 77, 78, 0, 74, 0, 0, 0, 79, 185,
	0, 216, 123, 137, 98, 84, 94, 0, 122, 163,
	192, 196, 0, 0, 106, 0, 194, 173, 232, 0,
	175, 193, 141, 222, 186, 231, 241, 242, 219, 239,
	246, 209, 87, 218, 230, 103, 204, 89, 228, 215,
	152, 132, 133, 88, 0, 190, 111, 118, 108, 165,
	225, 226, 107, 249, 95, 238, 91, 96, 237, 159,
	221, 229, 153, 146, 90, 227, 151, 145, 136, 115,
	125, 183, 143, 184, 126, 156, 155, 157, 0, 0,
	0, 213, 235, 250, 100, 0, 220, 244, 245, 0,
	0, 101, 119, 114, 182, 158, 97, 128, 210, 135,
	142, 189, 248, 172, 195, 104, 234, 211, 0, 76,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 83, 92, 139,
	247, 187, 117, 236, 0, 0, 110, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 85,
	86, 93, 99, 105, 109, 113, 116, 121, 124, 127,
	129, 130, 131, 134, 144, 147, 148, 149, 150, 160,
	161, 162, 164, 167, 168, 169, 170, 171, 174, 176,
	177, 178, 179, 180, 181, 188, 191, 197, 198, 199,
	200, 201, 202, 203, 205, 206, 207, 208, 214, 217,
	223, 224, 233, 240, 243, 166, 0, 0, 0, 930,
	0, 0, 0, 0, 112, 0, 0, 0, 0, 0,
	138, 0, 140, 0, 0, 212, 154, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 264, 0, 932, 0, 0, 0,
	0, 0, 0, 102, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 120, 0,
	0, 0, 266, 0, 0, 0, 0, 185, 0, 216,
	123, 137, 98, 84, 94, 0, 122, 163, 192, 196,
	0, 0, 106, 0, 194, 173, 232, 0, 175, 193,
	141, 222, 186, 231, 241, 242, 219, 239, 246, 209,
	87, 218, 230, 103, 204, 89, 228, 215, 152, 132,
	133, 88, 0, 190, 111, 118, 108, 165, 225, 226,
	107, 249, 95, 238, 91, 96, 237, 159, 221, 229,
	153, 146, 90, 227, 151, 145, 136, 115, 125, 183,
	143, 184, 126, 156, 155, 157, 0, 0, 0, 213,
	235, 250, 100, 0, 220, 244, 245, 0, 0, 101,
	119, 114, 182, 158, 97, 128, 210, 135, 142, 189,
	248, 172, 195, 104, 234, 211, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 83, 92, 139, 247, 187,
	117, 236, 0, 0, 110, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 85, 86, 93,
	99, 105, 109, 113, 116, 121, 124, 127, 129, 130,
	131, 134, 144, 147, 148, 149, 150, 160, 161, 162,
	164, 167, 168, 169, 170, 171, 174, 176, 177, 178,
	179, 180, 181, 188, 191, 197, 198, 199, 200, 201,
	202, 203, 205, 206, 207, 208, 214, 217, 223, 224,
	233, 240, 243, 25, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 166, 0, 0, 0, 0,
	0, 0, 0, 0, 112, 0, 0, 0, 0, 0,
	138, 0, 140, 0, 0, 212, 154, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 55, 0, 0, 81, 0, 0, 0, 0, 0,
	0, 0, 0, 102, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 120, 0,
	0, 0, 266, 0, 0, 0, 0, 185, 0, 216,
	123, 137, 98, 84, 94, 0, 122, 163, 192, 196,
	0, 0, 106, 0, 194, 173, 232, 0, 175, 193,
	141, 222, 186, 231, 241, 242, 219, 239, 246, 209,
	87, 218, 230, 103, 204, 89, 228, 215, 152, 132,
	133, 88, 0, 190, 111, 118, 108, 165, 225, 226,
	107, 249, 95, 238, 91, 96, 237, 159, 221, 229,
	153, 146, 90, 227, 151, 145, 136, 115, 125, 183,
	143, 184, 126, 156, 155, 157, 0, 0, 0, 213,
	235, 250, 100, 0, 220, 244, 245, 0, 0, 101,
	119, 114, 182, 158, 97, 128, 210, 135, 142, 189,
	248, 172, 195, 104, 234, 211, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 83, 92, 139, 247, 187,
	117, 236, 0, 0, 110, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 85, 86, 93,
	99, 105, 109, 113, 116, 121, 124, 127, 129, 130,
	131, 134, 144, 147, 148, 149, 150, 160, 161, 162,
	164, 167, 168, 169, 170, 171, 174, 176, 177, 178,
	179, 180, 181, 188, 191, 197, 198, 199, 200, 201,
	202, 203, 205, 206, 207, 208, 214, 217, 223, 224,
	233, 240, 243, 25, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 166, 0, 0, 0, 0,
	0, 0, 0, 0, 112, 0, 0, 0, 0, 0,
	138, 0, 140, 0, 0, 212, 154, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 55, 0, 0, 264, 0, 0, 0, 0, 0,
	0, 0, 0, 102, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 120, 0,
	0, 0, 266, 0, 0, 0, 0, 185, 0, 216,
	123, 137, 98, 84, 94, 0, 122, 163, 192, 196,
	0, 0, 106, 0, 194, 173, 232, 0, 175, 193,
	141, 222, 186, 231, 241, 242, 219, 239, 246, 209,
	87, 218, 230, 103, 204, 89, 228, 215, 152, 132,
	133, 88, 0, 190, 111, 118, 108, 165, 225, 226,
	107, 249, 95, 238, 91, 96, 237, 159, 221, 229,
	153, 146, 90, 227, 151, 145, 136, 115, 125, 183,
	143, 184, 126, 156, 155, 157, 0, 0, 0, 213,
	235, 250, 100, 0, 220, 244, 245, 0, 0, 101,
	119, 114, 182, 158, 97, 128, 210, 135, 142, 189,
	248, 172, 195, 104, 234, 211, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 83, 92, 139, 247, 187,
	117, 236, 0, 0, 110, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 85, 86, 93,
	99, 105, 109, 113, 116, 121, 124, 127, 129, 130,
	131, 134, 144, 147, 148, 149, 150, 160, 161, 162,
	164, 167, 168, 169, 170, 171, 174, 176, 177, 178,
	179, 180, 181, 188, 191, 197, 198, 199, 200, 201,
	202, 203, 205, 206, 207, 208, 214, 217, 223, 224,
	233, 240, 243, 166, 0, 0, 0, 930, 0, 0,
	0, 0, 112, 0, 0, 0, 0, 0, 138, 0,
	140, 0, 0, 212, 154, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 264, 0, 932, 0, 0, 0, 0, 0,
	0, 102, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 120, 0, 0, 0,
	266, 0, 0, 0, 0, 185, 0, 216, 123, 137,
	98, 84, 94, 0, 122, 163, 192, 196, 0, 0,
	106, 0, 194, 173, 232, 0, 928, 193, 141, 222,
	186, 231, 241, 242, 219, 239, 246, 209, 87, 218,
	230, 103, 204, 89, 228, 215, 152, 132, 133, 88,
	0, 190, 111, 118, 108, 165, 225, 226, 107, 249,
	95, 238, 91, 96, 237, 159, 221, 229, 153, 146,
	90, 227, 151, 145, 136, 115, 125, 183, 143, 184,
	126, 156, 155, 157, 0, 0, 0, 213, 235, 250,
	100, 0, 220, 244, 245, 0, 0, 101, 119, 114,
	182, 158, 97, 128, 210, 135, 142, 189, 248, 172,
	195, 104, 234, 211, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 83, 92, 139, 247, 187, 117, 236,
	0, 0, 110, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 85, 86, 93, 99, 105,
	109, 113, 116, 121, 124, 127, 129, 130, 131, 134,
	144, 147, 148, 149, 150, 160, 161, 162, 164, 167,
	168, 169, 170, 171, 174, 176, 177, 178, 179, 180,
	181, 188, 191, 197, 198, 199, 200, 201, 202, 203,
	205, 206, 207, 208, 214, 217, 223, 224, 233, 240,
	243, 166, 0, 0, 0, 0, 0, 0, 0, 0,
	112, 0, 0, 0, 0, 0, 138, 0, 140, 0,
	0, 212, 154, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	81, 0, 0, 825, 0, 0, 826, 0, 0, 102,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 120, 0, 0, 0, 266, 0,
	0, 0, 0, 185, 0, 216, 123, 137, 98, 84,
	94, 0, 122, 163, 192, 196, 0, 0, 106, 0,
	194, 173, 232, 0, 175, 193, 141, 222, 186, 231,
	241, 242, 219, 239, 246, 209, 87, 218, 230, 103,
	204, 89, 228, 215, 152, 132, 133, 88, 0, 190,
	111, 118, 108, 165, 225, 226, 107, 249, 95, 238,
	91, 96, 237, 159, 221, 229, 153, 146, 90, 227,
	151, 145, 136, 115, 125, 183, 143, 184, 126, 156,
	155, 157, 0, 0, 0, 213, 235, 250, 100, 0,
	220, 244, 245, 0, 0, 101, 119, 114, 182, 158,
	97, 128, 210, 135, 142, 189, 248, 172, 195, 104,
	234, 211, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 83, 92, 139, 247, 187, 117, 236, 0, 0,
	110, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 85, 86, 93, 99, 105, 109, 113,
	116, 121, 124, 127, 129, 130, 131, 134, 144, 147,
	148, 149, 150, 160, 161, 162, 164, 167, 168, 169,
	170, 171, 174, 176, 177, 178, 179, 180, 181, 188,
	191, 197, 198, 199, 200, 201, 202, 203, 205, 206,
	207, 208, 214, 217, 223, 224, 233, 240, 243, 166,
	0, 0, 0, 0, 0, 0, 0, 0, 112, 0,
	713, 0, 0, 0, 138, 0, 140, 0, 0, 212,
	154, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 81, 0,
	712, 0, 0, 0, 0, 0, 0, 102, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 120, 0, 0, 0, 266, 0, 0, 0,
	0, 185, 0, 216, 123, 137, 98, 84, 94, 0,
	122, 163, 192, 196, 0, 0, 106, 0, 194, 173,
	232, 0, 175, 193, 141, 222, 186, 231, 241, 242,
	219, 239, 246, 209, 87, 218, 230, 103, 204, 89,
	228, 215, 152, 132, 133, 88, 0, 190, 111, 118,
	108, 165, 225, 226, 107, 249, 95, 238, 91, 96,
	237, 159, 221, 229, 153, 146, 90, 227, 151, 145,
	136, 115, 125, 183, 143, 184, 126, 156, 155, 157,
	0, 0, 0, 213, 235, 250, 100, 0, 220, 244,
	245, 0, 0, 101, 119, 114, 182, 158, 97, 128,
	210, 135, 142, 189, 248, 172, 195, 104, 234, 211,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 83,
	92, 139, 247, 187, 117, 236, 0, 0, 110, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 85, 86, 93, 99, 105, 109, 113, 116, 121,
	124, 127, 129, 130, 131, 134, 144, 147, 148, 149,
	150, 160, 161, 162, 164, 167, 168, 169, 170, 171,
	174, 176, 177, 178, 179, 180, 181, 188, 191, 197,
	198, 199, 200, 201, 202, 203, 205, 206, 207, 208,
	214, 217, 223, 224, 233, 240, 243, 166, 0, 0,
	0, 0, 0, 0, 0, 0, 112, 0, 0, 0,
	0, 0, 138, 0, 140, 0, 0, 212, 154, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 55, 0, 0, 264, 0, 0, 0,
	0, 0, 0, 0, 0, 102, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	120, 0, 0, 0, 266, 0, 0, 0, 0, 185,
	0, 216, 123, 137, 98, 84, 94, 0, 122, 163,
	192, 196, 0, 0, 106, 0, 194, 173, 232, 0,
	175, 193, 141, 222, 186, 231, 241, 242, 219, 239,
	246, 209, 87, 218, 230, 103, 204, 89, 228, 215,
	152, 132, 133, 88, 0, 190, 111, 118, 108, 165,
	225, 226, 107, 249, 95, 238, 91, 96, 237, 159,
	221, 229, 153, 146, 90, 227, 151, 145, 136, 115,
	125, 183, 143, 184, 126, 156, 155, 157, 0, 0,
	0, 213, 235, 250, 100, 0, 220, 244, 245, 0,
	0, 101, 119, 114, 182, 158, 97, 128, 210, 135,
	142, 189, 248, 172, 195, 104, 234, 211, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 83, 92, 139,
	247, 187, 117, 236, 0, 0, 110, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 85,
	86, 93, 99, 105, 109, 113, 116, 121, 124, 127,
	129, 130, 131, 134, 144, 147, 148, 149, 150, 160,
	161, 162, 164, 167, 168, 169, 170, 171, 174, 176,
	177, 178, 179, 180, 181, 188, 191, 197, 198, 199,
	200, 201, 202, 203, 205, 206, 207, 208, 214, 217,
	223, 224, 233, 240, 243, 166, 0, 0, 0, 0,
	0, 0, 0, 0, 112, 0, 0, 0, 0, 0,
	138, 0, 140, 0, 0, 212, 154, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 264, 0, 932, 0, 0, 0,
	0, 0, 0, 102, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 120, 0,
	0, 0, 266, 0, 0, 0, 0, 185, 0, 216,
	123, 137, 98, 84, 94, 0, 122, 163, 192, 196,
	0, 0, 106, 0, 194, 173, 232, 0, 175, 193,
	141, 222, 186, 231, 241, 242, 219, 239, 246, 209,
	87, 218, 230, 103, 204, 89, 228, 215, 152, 132,
	133, 88, 0, 190, 111, 118, 108, 165, 225, 226,
	107, 249, 95, 238, 91, 96, 237, 159, 221, 229,
	153, 146, 90, 227, 151, 145, 136, 115, 125, 183,
	143, 184, 126, 156, 155, 157, 0, 0, 0, 213,
	235, 250, 100, 0, 220, 244, 245, 0, 0, 101,
	119, 114, 182, 158, 97, 128, 210, 135, 142, 189,
	248, 172, 195, 104, 234, 211, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 83, 92, 139, 247, 187,
	117, 236, 0, 0, 110, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 85, 86, 93,
	99, 105, 109, 113, 116, 121, 124, 127, 129, 130,
	131, 134, 144, 147, 148, 149, 150, 160, 161, 162,
	164, 167, 168, 169, 170, 171, 174, 176, 177, 178,
	179, 180, 181, 188, 191, 197, 198, 199, 200, 201,
	202, 203, 205, 206, 207, 208, 214, 217, 223, 224,
	233, 240, 243, 166, 0, 0, 0, 0, 0, 0,
	0, 0, 112, 0, 0, 0, 0, 0, 138, 0,
	140, 0, 0, 212, 154, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 81, 0, 601, 0, 0, 0, 0, 0,
	0, 102, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 120, 0, 0, 0,
	266, 0, 0, 0, 0, 185, 0, 216, 123, 137,
	98, 84, 94, 0, 122, 163, 192, 196, 0, 0,
	106, 0, 194, 173, 232, 0, 175, 193, 141, 222,
	186, 231, 241, 242, 219, 239, 246, 209, 87, 218,
	230, 103, 204, 89, 228, 215, 152, 132, 133, 88,
	0, 190, 111, 118, 108, 165, 225, 226, 107, 249,
	95, 238, 91, 96, 237, 159, 221, 229, 153, 146,
	90, 227, 151, 145, 136, 115, 125, 183, 143, 184,
	126, 156, 155, 157, 0, 0, 0, 213, 235, 250,
	100, 0, 220, 244, 245, 0, 0, 101, 119, 114,
	182, 158, 97, 128, 210, 135, 142, 189, 248, 172,
	195, 104, 234, 211, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 83, 92, 139, 247, 187, 117, 236,
	0, 0, 110, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 85, 86, 93, 99, 105,
	109, 113, 116, 121, 124, 127, 129, 130, 131, 134,
	144, 147, 148, 149, 150, 160, 161, 162, 164, 167,
	168, 169, 170, 171, 174, 176, 177, 178, 179, 180,
	181, 188, 191, 197, 198, 199, 200, 201, 202, 203,
	205, 206, 207, 208, 214, 217, 223, 224, 233, 240,
	243, 166, 0, 0, 0, 0, 0, 0, 0, 683,
	112, 0, 0, 0, 0, 0, 138, 0, 140, 0,
	0, 212, 154, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	264, 0, 0, 0, 0, 0, 0, 0, 0, 102,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 120, 0, 0, 0, 266, 0,
	0, 0, 0, 185, 0, 216, 123, 137, 98, 84,
	94, 0, 122, 163, 192, 196, 0, 0, 106, 0,
	194, 173, 232, 0, 175, 193, 141, 222, 186, 231,
	241, 242, 219, 239, 246, 209, 87, 218, 230, 103,
	204, 89, 228, 215, 152, 132, 133, 88, 0, 190,
	111, 118, 108, 165, 225, 226, 107, 249, 95, 238,
	91, 96, 237, 159, 221, 229, 153, 146, 90, 227,
	151, 145, 136, 115, 125, 183, 143, 184, 126, 156,
	155, 157, 0, 0, 0, 213, 235, 250, 100, 0,
	220, 244, 245, 0, 0, 101, 119, 114, 182, 158,
	97, 128, 210, 135, 142, 189, 248, 172, 195, 104,
	234, 211, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 83, 92, 139, 247, 187, 117, 236, 0, 0,
	110, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 85, 86, 93, 99, 105, 109, 113,
	116, 121, 124, 127, 129, 130, 131, 134, 144, 147,
	148, 149, 150, 160, 161, 162, 164, 167, 168, 169,
	170, 171, 174, 176, 177, 178, 179, 180, 181, 188,
	191, 197, 198, 199, 200, 201, 202, 203, 205, 206,
	207, 208, 214, 217, 223, 224, 233, 240, 243, 380,
	0, 0, 0, 0, 0, 0, 166, 0, 0, 0,
	0, 0, 0, 0, 0, 112, 0, 0, 0, 0,
	0, 138, 0, 140, 0, 0, 212, 154, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 264, 0, 0, 0, 0,
	0, 0, 0, 0, 102, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 120,
	0, 0, 0, 266, 0, 0, 0, 0, 185, 0,
	216, 123, 137, 98, 84, 94, 0, 122, 163, 192,
	196, 0, 0, 106, 0, 194, 173, 232, 0, 175,
	193, 141, 222, 186, 231, 241, 242, 219, 239, 246,
	209, 87, 218, 230, 103, 204, 89, 228, 215, 152,
	132, 133, 88, 0, 190, 111, 118, 108, 165, 225,
	226, 107, 249, 95, 238, 91, 96, 237, 159, 221,
	229, 153, 146, 90, 227, 151, 145, 136, 115, 125,
	183, 143, 184, 126, 156, 155, 157, 0, 0, 0,
	213, 235, 250, 100, 0, 220, 244, 245, 0, 0,
	101, 119, 114, 182, 158, 97, 128, 210, 135, 142,
	189, 248, 172, 195, 104, 234, 211, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 83, 92, 139, 247,
	187, 117, 236, 0, 0, 110, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 85, 86,
	93, 99, 105, 109, 113, 116, 121, 124, 127, 129,
	130, 131, 134, 144, 147, 148, 149, 150, 160, 161,
	162, 164, 167, 168, 169, 170, 171, 174, 176, 177,
	178, 179, 180, 181, 188, 191, 197, 198, 199, 200,
	201, 202, 203, 205, 206, 207, 208, 214, 217, 223,
	224, 233, 240, 243, 166, 0, 0, 0, 0, 0,
	0, 0, 0, 112, 0, 0, 0, 0, 0, 138,
	0, 140, 0, 0, 212, 154, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 264, 0, 0, 0, 0, 0, 0,
	0, 0, 102, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 120, 0, 261,
	0, 266, 0, 0, 0, 0, 185, 0, 216, 123,
	137, 98, 84, 94, 0, 122, 163, 192, 196, 0,
	0, 106, 0, 194, 173, 232, 0, 175, 193, 141,
	222, 186, 231, 241, 242, 219, 239, 246, 209, 87,
	218, 230, 103, 204, 89, 228, 215, 152, 132, 133,
	88, 0, 190, 111, 118, 108, 165, 225, 226, 107,
	249, 95, 238, 91, 96, 237, 159, 221, 229, 153,
	146, 90, 227, 151, 145, 136, 115, 125, 183, 143,
	184, 126, 156, 155, 157, 0, 0, 0, 213, 235,
	250, 100, 0, 220, 244, 245, 0, 0, 101, 119,
	114, 182, 158, 97, 128, 210, 135, 142, 189, 248,
	172, 195, 104, 234, 211, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 83, 92, 139, 247, 187, 117,
	236, 0, 0, 110, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 85, 86, 93, 99,
	105, 109, 113, 116, 121, 124, 127, 129, 130, 131,
	134, 144, 147, 148, 149, 150, 160, 161, 162, 164,
	167, 168, 169, 170, 171, 174, 176, 177, 178, 179,
	180, 181, 188, 191, 197, 198, 199, 200, 201, 202,
	203, 205, 206, 207, 208, 214, 217, 223, 224, 233,
	240, 243, 166, 0, 0, 0, 0, 0, 0, 0,
	0, 112, 0, 0, 0, 0, 0, 138, 0, 140,
	0, 0, 212, 154, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 81, 0, 0, 0, 0, 0, 0, 0, 0,
	102, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 120, 0, 0, 0, 266,
	0, 0, 0, 0, 185, 0, 216, 123, 137, 98,
	84, 94, 0, 122, 163, 192, 196, 0, 0, 106,
	0, 194, 173, 232, 0, 175, 193, 141, 222, 186,
	231, 241, 242, 219, 239, 246, 209, 87, 218, 230,
	103, 204, 89, 228, 215, 152, 132, 133, 88, 0,
	190, 111, 118, 108, 165, 225, 226, 107, 249, 95,
	238, 91, 96, 237, 159, 221, 229, 153, 146, 90,
	227, 151, 145, 136, 115, 125, 183, 143, 184, 126,
	156, 155, 157, 0, 0, 0, 213, 235, 250, 100,
	0, 220, 244, 245, 0, 0, 101, 119, 114, 182,
	158, 97, 128, 210, 135, 142, 189, 248, 172, 195,
	104, 234, 211, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 83, 92, 139, 247, 187, 117, 236, 0,
	0, 110, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 85, 86, 93, 99, 105, 109,
	113, 116, 121, 124, 127, 129, 130, 131, 134, 144,
	147, 148, 149, 150, 160, 161, 162, 164, 167, 168,
	169, 170, 171, 174, 176, 177, 178, 179, 180, 181,
	188, 191, 197, 198, 199, 200, 201, 202, 203, 205,
	206, 207, 208, 214, 217, 223, 224, 233, 240, 243,
	166, 0, 0, 0, 0, 0, 0, 0, 0, 112,
	0, 0, 0, 0, 0, 138, 0, 140, 0, 0,
	212, 154, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 264,
	0, 0, 0, 0, 0, 0, 0, 0, 102, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 120, 0, 0, 0, 266, 0, 0,
	0, 0, 185, 0, 216, 123, 137, 98, 84, 94,
	0, 122, 163, 192, 196, 0, 0, 106, 0, 194,
	173, 232, 0, 175, 193, 141, 222, 186, 231, 241,
	242, 219, 239, 246, 209, 87, 218, 230, 103, 204,
	89, 228, 215, 152, 132, 133, 88, 0, 190, 111,
	118, 108, 165, 225, 226, 107, 249, 95, 238, 91,
	96, 237, 159, 221, 229, 153, 146, 90, 227, 151,
	145, 136, 115, 125, 183, 143, 184, 126, 156, 155,
	157, 0, 0, 0, 213, 235, 250, 100, 0, 220,
	244, 245, 0, 0, 101, 119, 114, 182, 158, 97,
	128, 210, 135, 142, 189, 248, 172, 195, 104, 234,
	211, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	83, 92, 139, 247, 187, 117, 236, 0, 0, 110,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 85, 86, 93, 99, 105, 109, 113, 116,
	121, 124, 127, 129, 130, 131, 134, 144, 147, 148,
	149, 150, 160, 161, 162, 164, 167, 168, 169, 170,
	171, 174, 176, 177, 178, 179, 180, 181, 188, 191,
	197, 198, 199, 200, 201, 202, 203, 205, 206, 207,
	208, 214, 217, 223, 224, 233, 240, 243, 166, 0,
	0, 0, 0, 0, 0, 0, 0, 112, 0, 0,
	0, 0, 0, 138, 0, 140, 0, 0, 212, 154,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 321, 0, 0,
	0, 0, 0, 0, 0, 0, 102, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 120, 0, 0, 0, 266, 0, 0, 0, 0,
	185, 0, 216, 123, 137, 98, 84, 94, 0, 122,
	163, 192, 196, 0, 0, 106, 0, 194, 173, 232,
	0, 175, 193, 141, 222, 186, 231, 241, 242, 219,
	239, 246, 209, 87, 218, 230, 103, 204, 89, 228,
	215, 152, 132, 133, 88, 0, 190, 111, 118, 108,
	165, 225, 226, 107, 249, 95, 238, 91, 96, 237,
	159, 221, 229, 153, 146, 90, 227, 151, 145, 136,
	115, 125, 183, 143, 184, 126, 156, 155, 157, 0,
	0, 0, 213, 235, 250, 100, 0, 220, 244, 245,
	0, 0, 101, 119, 114, 182, 158, 97, 128, 210,
	135, 142, 189, 248, 172, 195, 104, 234, 211, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 83, 92,
	139, 247, 187, 117, 236, 0, 0, 110, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	85, 86, 93, 99, 105, 109, 113, 116, 121, 124,
	127, 129, 130, 131, 134, 144, 147, 148, 149, 150,
	160, 161, 162, 164, 167, 168, 169, 170, 171, 174,
	176, 177, 178, 179, 180, 181, 188, 191, 197, 198,
	199, 200, 201, 202, 203, 205, 206, 207, 208, 214,
	217, 223, 224, 233, 240, 243,
}
var yyPact = [...]int{

	2251, -1000, -267, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 994, 1017, -1000, -1000, -1000, -1000, -1000,
	-1000, 236, 11258, 31, 116, 18, 15225, 113, 1515, 15881,
	-1000, 15, -1000, -1000, -1000, -1000, -1000, -1000, -50, -56,
	-1000, 2251, 744, -1000, -1000, -1000, -1000, -1000, 988, 992,
	829, 983, 879, -1000, 7966, 89, 89, 14897, 6654, -1000,
	-1000, 227, 15881, 107, 15881, -146, 79, 79, 79, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 111, 15881, 183, -1000, 15881, 76, 563, 76, 76,
	76, 15881, -1000, 154, -1000, -1000, -1000, 15881, 557, 928,
	3576, 47, 3576, -1000, 3576, 3576, -1000, 3576, 23, 3576,
	-57, 1005, 19, 1, -1000, 3576, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 536,
	935, 9290, 9290, 994, -1000, 744, -1000, -1000, -1000, 950,
	-1000, -1000, 294, 1019, -1000, 10930, 152, -1000, 9290, 408,
	772, -1000, -1000, 772, -1000, -1000, 132, -1000, -1000, 10274,
	10274, 10274, 10274, 10274, 10274, 10274, 10274, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 772, -1000, 8962, 772, 772, 772, 772, 772, 772,
	772, 772, 9290, 772, 772, 772, 772, 772, 772, 772,
	772, 772, 772, 772, 772, 772, 772, 772, 14562, 13578,
	15881, 762, 671, -1000, -1000, 151, 758, 6312, -75, -1000,
	-1000, -1000, 247, 13250, -1000, -1000, -1000, 927, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 661, 15881, -1000, 2047,
	-1000, 537, 3576, 98, 523, 263, 519, 15881, 15881, 3576,
	28, 64, 58, 15881, 770, 96, 15881, 975, 837, 15881,
	509, 505, -1000, 5970, -1000, 3576, 3576, -1000, -1000, -1000,
	3576, 3576, 3576, 15881, 3576, 3576, -1000, -1000, -1000, -1000,
	3576, 3576, -1000, 1016, 277, -1000, -1000, -1000, -1000, 9290,
	196, -1000, 828, -1000, -1000, -1000, -1000, -1000, -1000, 1029,
	191, 469, 148, 764, -1000, 495, 988, 536, 879, 12922,
	838, -1000, -1000, 15881, -1000, 9290, 9290, 501, -1000, 14234,
	-1000, -1000, 4602, 200, 10274, 462, 281, 10274, 10274, 10274,
	10274, 10274, 10274, 10274, 10274, 10274, 10274, 10274, 10274, 10274,
	10274, 10274, 354, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 502, -1000, 744, 733, 733, 171, 171, 171, 171,
	171, 171, 171, 10602, 7310, 536, 657, 318, 8962, 7966,
	7966, 9290, 9290, 8622, 8294, 7966, 979, 219, 318, 16209,
	-1000, -1000, 9946, -1000, -1000, -1000, -1000, -1000, 536, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 15553, 15553, 7966, 7966,
	7966, 7966, 40, 15881, -1000, 703, 854, -1000, -1000, -1000,
	977, 12266, 12594, 40, 674, 13578, 15881, -1000, -1000, 13578,
	15881, 4260, 5628, 758, -75, 710, -1000, -111, -89, 6982,
	169, -1000, -1000, -1000, -1000, 3234, 181, 584, 320, -44,
	-1000, -1000, -1000, 775, -1000, 775, 775, 775, 775, -13,
	-13, -13, -13, -1000, -1000, -1000, -1000, -1000, 801, 799,
	-1000, 775, 775, 775, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 795, 795, 795, 780, 780, 809, -1000, 15881,
	3576, 974, 3576, -1000, 81, -1000, 15881, 15881, 15881, 15881,
	15881, 127, 15881, 15881, 756, -1000, 15881, 3576, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 15881, 280, 15881, 15881, 318, -1000, 464,
	15881, -1000, 891, 9290, 9290, 5286, 9290, -1000, -1000, -1000,
	935, -1000, 979, 996, -1000, 918, 898, 7966, -1000, -1000,
	200, 243, -1000, -1000, 340, -1000, -1000, -1000, -1000, 145,
	772, -1000, 1997, -1000, -1000, -1000, -1000, 462, 10274, 10274,
	10274, 372, 1997, 1885, 549, 1552, 171, 586, 586, 164,
	164, 164, 164, 164, 299, 299, -1000, -1000, -1000, 536,
	-1000, -1000, -1000, 536, 7966, 754, -1000, -1000, 9290, -1000,
	536, 652, 652, 388, 459, 254, 1012, 652, 251, 1011,
	652, 652, 7966, 305, -1000, 9290, 536, -1000, 144, -1000,
	535, 747, 730, 652, 536, 652, 652, 782, 772, -1000,
	16209, 13578, 13578, 13578, 13578, 13578, -1000, 876, 874, -1000,
	875, 863, 864, 15881, -1000, 655, 12266, 155, 772, -1000,
	13906, -1000, -1000, 1004, 13578, 643, -1000, 643, -1000, 141,
	-1000, -1000, 710, -75, -127, -1000, -1000, -1000, -1000, 318,
	-1000, 421, 700, 2892, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 785, 490, -1000, 965, 199, 197, 487, 962, -1000,
	-1000, -1000, 936, -1000, 276, -46, -1000, -1000, 391, -13,
	-13, -1000, -1000, 169, 925, 169, 169, 169, 438, 438,
	-1000, -1000, -1000, -1000, 382, -1000, -1000, -1000, 379, -1000,
	821, 15553, 3576, -1000, -1000, -1000, -1000, 223, 223, 215,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 39, 806, -1000, -1000, -1000, -1000, 14, 27, 91,
	-1000, 3576, -1000, 277, -1000, 430, 9290, -1000, -1000, -1000,
	-1000, 889, 318, 318, 137, -1000, -1000, 15881, -1000, -1000,
	-1000, -1000, 707, -1000, -1000, -1000, 3918, 7966, -1000, 372,
	1997, 1826, -1000, 10274, 10274, -1000, -1000, 652, 7966, 318,
	-1000, -1000, -1000, 29, 354, 29, 10274, 10274, -1000, 10274,
	10274, -1000, -158, 699, 237, -1000, 9290, 303, -1000, 5286,
	-1000, 10274, 10274, -1000, -1000, -1000, -1000, 820, 16209, 772,
	-1000, 11926, 15553, 692, -1000, 232, 854, 792, 818, 842,
	-1000, -1000, -1000, -1000, 865, -1000, 850, -1000, -1000, -1000,
	-1000, -1000, 106, 105, 102, 15553, -1000, 994, 9290, 643,
	-1000, -1000, 160, -1000, -1000, -129, -114, -1000, -1000, -1000,
	3234, -1000, 3234, 15553, 54, -1000, 487, 487, -1000, -1000,
	-1000, 783, 817, 10274, -1000, -1000, -1000, 568, 169, 169,
	-1000, 216, -1000, -1000, -1000, 625, -1000, 619, 696, 617,
	15881, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 15881, -1000,
	-1000, -1000, -1000, -1000, 15553, -166, 483, 15553, 15553, 15553,
	15881, -1000, 280, -1000, 318, -1000, 4944, -1000, 1004, 13578,
	-1000, -1000, 536, -1000, 10274, 1997, 1997, -1000, -1000, 536,
	775, 775, -1000, 775, 780, -1000, 775, 5, 775, 4,
	536, 536, 1843, 1717, 1654, 1499, 772, -153, -1000, 318,
	9290, -1000, 1219, 642, -1000, 951, 668, 676, -1000, -1000,
	7638, 536, 614, 136, 612, -1000, 994, 16209, 9290, -1000,
	-1000, 9290, 776, -1000, 9290, -1000, -1000, -1000, 772, 772,
	772, 612, 988, 318, -1000, -1000, -1000, -1000, 2892, -1000,
	571, -1000, 775, -1000, -1000, -1000, 15553, -37, 1028, 1997,
	-1000, -1000, -1000, -1000, -1000, -13, 427, -13, 329, -1000,
	326, 3576, -1000, -1000, -1000, -1000, 968, -1000, 4944, -1000,
	-1000, 774, 808, -1000, -1000, -1000, 997, 693, -1000, 1997,
	-1000, -1000, 119, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 10274, 10274, 10274, 10274, 10274, 536, 424, 318, 10274,
	10274, 960, -1000, 772, -1000, -1000, 784, 15553, 15553, -1000,
	15553, 988, -1000, 318, 318, 15553, 318, 15553, 15553, 15553,
	11586, -1000, 147, 15553, -1000, 562, -1000, 166, -1000, -93,
	169, -1000, 169, 548, 542, -1000, 772, 679, -1000, 226,
	15553, 15881, 998, 990, -1000, -1000, 535, 535, 535, 535,
	32, -1000, -1000, 535, 535, 1027, -1000, 772, -1000, 744,
	128, -1000, -1000, -1000, 553, 547, 547, 547, 155, 147,
	-1000, 478, 212, 398, -1000, 51, 15553, 282, 956, -1000,
	949, -1000, -1000, -1000, -1000, -1000, 38, 4944, 3234, 541,
	-1000, -1000, 9290, 9290, -1000, -1000, -1000, -1000, 536, 50,
	-175, -1000, -1000, 16209, 676, 536, 15553, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 317, -1000, -1000, 15881, -1000, -1000,
	304, -1000, -1000, 530, -1000, 15553, -1000, -1000, 806, 318,
	673, -1000, 888, -162, -181, 602, -1000, -1000, -1000, 773,
	-1000, -1000, 38, 897, -166, -1000, 885, -1000, 15553, -1000,
	33, -1000, -170, 482, 34, -178, 816, 772, -182, 814,
	-1000, 1010, 9618, -1000, -1000, 1023, 185, 185, 535, 536,
	-1000, -1000, -1000, 59, 394, -1000, -1000, -1000, -1000, -1000,
	-1000,
}
var yyPgo = [...]int{

	0, 905, 55, 465, 1238, 1234, 1232, 1230, 1229, 1228,
	1227, 1226, 1223, 1221, 1220, 1219, 1218, 1217, 1216, 1215,
	1213, 1212, 1211, 1209, 1208, 1206, 1204, 89, 1203, 1202,
	1197, 66, 1194, 78, 1193, 1191, 41, 197, 51, 45,
	212, 1190, 26, 53, 70, 1187, 35, 1186, 1185, 74,
	1184, 1183, 57, 1182, 1181, 1188, 1174, 84, 1172, 11,
	24, 1170, 1169, 1168, 1165, 71, 329, 1164, 1156, 15,
	1155, 1152, 87, 1151, 46, 6, 14, 18, 22, 1150,
	872, 25, 1148, 58, 1147, 1146, 1140, 1139, 31, 1138,
	63, 1137, 19, 54, 1136, 9, 64, 36, 21, 7,
	76, 67, 1135, 20, 65, 49, 1134, 1132, 535, 1131,
	1130, 42, 1127, 1125, 28, 1123, 91, 486, 1122, 1121,
	1120, 1119, 52, 0, 489, 17, 72, 1117, 1116, 1112,
	1510, 39, 50, 16, 1111, 47, 27, 38, 1105, 1104,
	34, 1100, 1099, 1098, 1097, 1096, 1095, 1094, 115, 1088,
	1087, 1086, 90, 81, 1085, 1084, 60, 23, 1083, 1082,
	1081, 44, 59, 1080, 1078, 48, 29, 1077, 1075, 1073,
	1066, 1063, 32, 10, 1062, 12, 1061, 13, 1060, 30,
	1058, 5, 1056, 8, 1055, 2, 1053, 4, 43, 3,
	1049, 1, 1047, 1046, 61, 626, 77, 1043, 79,
}
var yyR1 = [...]int{

	0, 192, 193, 193, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 11, 2, 2, 2, 6,
	3, 4, 4, 5, 5, 7, 7, 30, 30, 8,
	9, 9, 9, 9, 196, 196, 49, 49, 50, 50,
	96, 96, 10, 10, 10, 10, 101, 101, 105, 105,
	105, 106, 106, 106, 106, 138, 138, 12, 12, 12,
	12, 12, 12, 12, 187, 187, 186, 185, 185, 184,
	184, 183, 18, 168, 170, 170, 169, 169, 169, 169,
	162, 141, 141, 141, 141, 144, 144, 142, 142, 142,
	142, 142, 142, 142, 142, 142, 143, 143, 143, 143,
	143, 145, 145, 145, 145, 145, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 147, 147, 147, 147, 147, 147, 147, 147, 161,
	161, 148, 148, 156, 156, 157, 157, 157, 154, 154,
	155, 155, 158, 158, 158, 150, 150, 151, 151, 159,
	159, 152, 152, 152, 153, 153, 153, 160, 160, 160,
	160, 160, 149, 149, 163, 163, 178, 178, 177, 177,
	177, 167, 167, 174, 174, 174, 174, 174, 165, 165,
	166, 166, 176, 176, 175, 164, 164, 179, 179, 179,
	179, 190, 191, 189, 189, 189, 189, 189, 171, 171,
	171, 172, 172, 172, 173, 173, 173, 13, 13, 13,
	13, 13, 13, 13, 13, 13, 13, 13, 13, 13,
	13, 13, 188, 188, 188, 188, 188, 188, 188, 188,
	188, 188, 188, 188, 182, 180, 180, 181, 181, 14,
	19, 19, 15, 15, 15, 15, 15, 16, 16, 20,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 112, 112,
	110, 110, 113, 113, 111, 111, 111, 114, 114, 114,
	115, 115, 139, 139, 139, 22, 22, 24, 24, 25,
	26, 23, 23, 23, 23, 23, 23, 17, 197, 27,
	28, 28, 29, 29, 29, 33, 33, 33, 31, 31,
	32, 32, 38, 38, 37, 37, 39, 39, 39, 39,
	127, 127, 127, 126, 126, 41, 41, 42, 42, 43,
	43, 44, 44, 44, 44, 58, 58, 95, 95, 97,
	97, 45, 45, 45, 45, 46, 46, 47, 47, 48,
	48, 134, 134, 133, 133, 133, 132, 132, 51, 51,
	51, 53, 52, 52, 52, 52, 54, 54, 56, 56,
	55, 55, 57, 59, 59, 59, 59, 60, 60, 40,
	40, 40, 40, 40, 40, 40, 109, 109, 62, 62,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	73, 73, 73, 73, 73, 73, 63, 63, 63, 63,
	63, 63, 63, 36, 36, 74, 74, 74, 80, 75,
	75, 66, 66, 66, 66, 66, 66, 66, 66, 66,
	66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
	66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
	66, 66, 66, 70, 70, 70, 68, 68, 68, 68,
	68, 68, 68, 68, 68, 68, 68, 68, 68, 69,
	69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
	69, 69, 69, 69, 69, 198, 198, 72, 71, 71,
	71, 71, 71, 71, 34, 34, 34, 34, 34, 137,
	137, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 84, 84, 35, 35, 82, 82,
	83, 85, 85, 81, 81, 81, 65, 65, 65, 65,
	65, 65, 65, 65, 67, 67, 67, 86, 86, 87,
	87, 88, 88, 89, 89, 90, 91, 91, 91, 92,
	92, 92, 92, 93, 93, 93, 64, 64, 64, 64,
	64, 64, 94, 94, 94, 94, 98, 98, 76, 76,
	78, 78, 77, 79, 99, 99, 103, 100, 100, 104,
	104, 104, 104, 102, 102, 102, 129, 129, 129, 107,
	107, 116, 116, 117, 117, 108, 108, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 119, 119, 119,
	120, 120, 121, 121, 121, 128, 128, 124, 124, 125,
	125, 130, 130, 131, 131, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 194, 195, 135, 136, 136, 136,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 2, 4, 6, 7, 5,
	10, 1, 3, 1, 3, 7, 8, 1, 1, 9,
	8, 7, 6, 6, 1, 1, 1, 3, 1, 3,
	0, 4, 3, 4, 5, 4, 1, 3, 3, 2,
	2, 2, 2, 2, 1, 1, 1, 2, 2, 8,
	4, 6, 5, 5, 0, 2, 1, 0, 2, 1,
	3, 3, 4, 4, 2, 4, 1, 3, 3, 3,
	8, 3, 1, 1, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 2, 2,
	2, 1, 2, 2, 2, 1, 4, 4, 2, 2,
	3, 3, 3, 3, 1, 1, 1, 1, 1, 6,
	6, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 0, 3, 0, 5, 0, 3, 5, 0, 1,
	0, 1, 0, 1, 2, 0, 2, 0, 3, 0,
	1, 0, 3, 3, 0, 2, 2, 0, 2, 1,
	2, 1, 0, 2, 5, 4, 1, 2, 2, 3,
	2, 0, 1, 2, 3, 3, 2, 2, 1, 1,
	0, 1, 1, 3, 2, 3, 1, 10, 11, 11,
	12, 3, 3, 1, 1, 2, 2, 2, 0, 1,
	3, 1, 2, 3, 1, 1, 1, 6, 7, 7,
	7, 7, 4, 5, 7, 5, 5, 5, 12, 7,
	5, 9, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 7, 1, 3, 8, 8, 3,
	3, 5, 4, 6, 5, 4, 4, 3, 2, 3,
	4, 4, 3, 4, 4, 4, 4, 4, 4, 3,
	2, 3, 3, 2, 3, 4, 3, 7, 5, 4,
	2, 4, 4, 3, 3, 5, 2, 3, 1, 1,
	0, 1, 1, 1, 0, 2, 2, 0, 2, 2,
	0, 2, 0, 1, 1, 2, 1, 1, 2, 1,
	1, 2, 2, 2, 2, 3, 3, 2, 0, 2,
	0, 2, 1, 2, 2, 0, 1, 1, 0, 1,
	0, 1, 0, 1, 1, 3, 1, 2, 3, 5,
	0, 1, 2, 1, 1, 0, 2, 1, 3, 1,
	1, 1, 3, 1, 3, 3, 7, 1, 3, 1,
	3, 4, 4, 4, 3, 2, 4, 0, 1, 0,
	2, 0, 1, 0, 1, 2, 1, 1, 1, 2,
	2, 1, 2, 3, 2, 3, 2, 2, 2, 1,
	1, 3, 3, 0, 5, 5, 5, 0, 2, 1,
	3, 3, 2, 3, 1, 2, 0, 3, 1, 1,
	3, 3, 4, 4, 5, 3, 4, 5, 6, 2,
	1, 2, 1, 2, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 0, 2, 1, 1, 1, 3, 1,
	3, 1, 1, 1, 1, 1, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 2, 2, 2, 2, 2, 2, 2, 3, 1,
	1, 1, 1, 4, 5, 6, 4, 4, 6, 6,
	6, 8, 8, 8, 8, 9, 7, 5, 4, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 8, 8, 0, 2, 3, 4, 4,
	4, 4, 4, 4, 0, 3, 4, 7, 3, 1,
	1, 2, 3, 3, 1, 2, 2, 1, 2, 1,
	2, 2, 1, 2, 0, 1, 0, 2, 1, 2,
	4, 0, 2, 1, 3, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 0, 3, 0,
	2, 0, 3, 1, 3, 2, 0, 1, 1, 0,
	2, 4, 4, 0, 2, 4, 2, 1, 3, 5,
	4, 6, 1, 3, 3, 5, 0, 5, 1, 3,
	1, 2, 3, 1, 1, 3, 3, 1, 3, 3,
	3, 3, 3, 1, 2, 1, 1, 1, 1, 1,
	1, 0, 2, 0, 3, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 1, 1,
	1, 1, 0, 1, 1, 0, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -192, -1, -2, -6, -7, -8, -9, -10, -12,
	-13, -14, -15, -16, -20, -21, -22, -24, -25, -26,
	-23, -17, -11, -3, -4, 7, 8, -30, 10, 11,
	31, -18, 116, 117, 119, 118, 150, 120, 144, 51,
	164, 165, 167, 168, 26, 145, 148, 149, 32, 33,
	122, 6, -194, 9, 249, 55, -193, 347, -88, 16,
	-29, 5, -27, -197, -27, -27, -27, -27, -27, -168,
	-170, 55, 91, -121, 126, 73, 241, 123, 124, 130,
	-124, 58, -123, 259, 137, 291, 292, 164, 175, 169,
	196, 188, 260, 293, 138, 186, 189, 228, 136, 294,
	216, 223, 67, 167, 237, 295, 146, 184, 180, 296,
	268, 178, 28, 297, 225, 201, 298, 264, 179, 224,
	122, 299, 140, 134, 300, 202, 206, 301, 229, 302,
	303, 304, 173, 174, 305, 231, 200, 135, 34, 261,
	36, 154, 232, 204, 306, 199, 195, 307, 308, 309,
	310, 198, 172, 194, 40, 208, 207, 209, 227, 191,
	311, 312, 313, 141, 314, 181, 19, 315, 316, 317,
	318, 319, 235, 149, 320, 152, 321, 322, 323, 324,
	325, 326, 226, 203, 205, 131, 156, 263, 327, 233,
	177, 328, 142, 153, 148, 236, 143, 329, 330, 331,
	332, 333, 334, 335, 168, 336, 337, 338, 339, 163,
	230, 239, 39, 213, 340, 171, 133, 341, 165, 160,
	218, 192, 155, 342, 343, 182, 183, 197, 170, 193,
	166, 157, 150, 344, 238, 214, 265, 190, 187, 161,
	345, 158, 159, 346, 219, 220, 162, 262, 234, 185,
	215, -108, 126, 220, 128, 124, 124, 125, 126, 241,
	123, 124, -55, -130, 58, -123, 126, 124, 109, 189,
	228, 116, 217, 225, 125, 34, 226, 156, -139, 124,
	-110, 216, 219, 220, 162, 58, 230, 229, 221, -130,
	166, -135, -135, -135, -135, 218, 218, -135, -1, -2,
	-92, 18, 17, -5, -3, -194, 7, 21, 22, -33,
	41, 42, -28, -39, 100, -40, -130, -61, 75, -66,
	30, 58, -123, 24, -65, -62, -81, -79, -80, 109,
	110, 111, 98, 99, 106, 76, 112, -70, -68, -69,
	-71, 60, 59, 68, 61, 62, 63, 64, 69, 70,
	71, -124, -77, -194, 45, 46, 250, 251, 252, 253,
	258, 254, 78, 35, 240, 248, 247, 246, 244, 245,
	242, 243, 256, 257, 129, 241, 104, 249, -108, -108,
	12, -49, -50, -55, -57, -130, -100, -138, 166, -104,
	230, 229, -125, -102, -124, -122, 228, 189, 227, 121,
	266, 74, 23, 25, 211, 77, 109, 17, 78, 108,
	250, 116, 49, 267, 242, 243, 240, 252, 253, 241,
	217, 30, 11, 269, 26, 145, 22, 102, 118, 81,
	82, 147, 24, 6, 71, 272, 20, 52, 12, 14,
	273, 274, 15, 129, 128, 93, 125, 47, 9, 112,
	27, 90, 43, 275, 29, 276, 277, 278, 279, 45,
	91, 18, 244, 245, 32, 280, 258, 151, 104, 50,
	37, 75, 281, 282, 69, 283, 72, 53, 73, 16,
	48, 284, 285, 286, 287, 92, 119, 249, 46, 288,
	123, 7, 255, 31, 144, 44, 289, 124, 80, 256,
	257, 127, 70, 5, 130, 33, 10, 51, 54, 246,
	247, 248, 35, 79, 13, 290, -169, 91, -162, 58,
	-55, 125, -55, 249, -117, 129, -117, -117, 124, -55,
	116, 118, 121, 53, -19, -55, -116, 129, 58, -116,
	-116, -116, -55, 113, -55, 58, 31, -136, -194, -125,
	241, 58, 156, 124, 157, 126, -136, -136, -136, -136,
	160, 161, -136, -113, -112, 223, 224, 218, 222, 13,
	161, 218, 159, -136, -135, -135, -195, 57, -93, 20,
	32, -40, -130, -89, -90, -40, -88, -2, -27, 37,
	-31, 22, 66, 12, -127, 74, 73, 90, -126, 23,
	-124, 60, 113, -40, -63, 93, 75, 91, 92, 77,
	95, 94, 105, 98, 99, 100, 101, 102, 103, 104,
	96, 97, 108, 83, 84, 85, 86, 87, 88, 89,
	-109, -194, -80, -194, 114, 115, -66, -66, -66, -66,
	-66, -66, -66, -66, -194, -2, -75, -40, -194, -194,
	-194, -194, -194, -194, -194, -194, -194, -84, -40, -194,
	-198, -72, -194, -198, -72, -198, -72, -198, -194, -198,
	-72, -198, -72, -198, -198, -72, -194, -194, -194, -194,
	-194, -194, -56, 27, -55, -42, -43, -44, -45, -58,
	-80, -194, -55, -55, -49, -196, 56, 12, 54, -196,
	56, 113, 56, -100, 166, -101, -105, 231, 233, 83,
	-129, -124, 60, 30, 31, 57, 56, -55, -141, -144,
	-146, -145, -147, -142, -143, 186, 187, 109, 190, 192,
	193, 194, 195, 196, 197, 198, 199, 200, 201, 31,
	146, 182, 183, 184, 185, 202, 203, 204, 205, 206,
	207, 208, 209, 169, 188, 260, 170, 171, 172, 173,
	174, 175, 177, 178, 179, 180, 181, 58, -136, 126,
	58, 75, 58, -55, -55, -136, 158, 158, 124, 124,
	163, -55, 56, 127, -49, 24, 53, -55, 58, 58,
	-131, -130, -122, -136, -136, -136, -136, -136, -55, -136,
	-136, -136, -136, 12, -111, 12, 93, -40, -115, 91,
	53, 10, 93, 56, 19, 113, 56, -91, 25, 26,
	-92, -195, -33, -67, -124, 61, 64, -32, 44, -55,
	-40, -40, -73, 69, 75, 70, 71, -126, 100, -131,
	-125, -122, -66, -74, -77, -80, 65, 93, 91, 92,
	77, -66, -66, -66, -66, -66, -66, -66, -66, -66,
	-66, -66, -66, -66, -66, -66, -137, 58, 60, 58,
	-65, -65, -124, -38, 22, -37, -39, -195, 56, -195,
	-2, -37, -37, -40, -40, -81, 60, -37, -81, 60,
	-37, -37, -31, -82, -83, 79, -81, -124, -130, -195,
	-66, -124, -124, -37, -38, -37, -37, -96, 152, -55,
	31, 56, -51, -53, -52, -54, 43, 47, 49, 44,
	45, 46, 50, -134, 23, -42, -194, -133, 152, -132,
	23, -130, 60, -96, 54, -42, -55, -42, -57, -130,
	100, -104, -101, 56, 232, 234, 235, 53, 72, -40,
	-153, 108, -171, -172, -173, -125, 60, 61, -162, -163,
	-164, -174, 139, -179, 131, 133, 130, -165, 140, 125,
	29, 57, -158, 69, 75, -154, 214, -148, 55, -148,
	-148, -148, -148, -152, 189, -152, -152, -152, 55, 55,
	-148, -148, -148, -156, 55, -156, -156, -157, 55, -157,
	-128, 54, -55, -136, 24, -136, -118, 121, 118, 119,
	-182, 117, 211, 189, 67, 30, 16, 250, 152, 265,
	58, 153, -55, -55, -55, -55, -55, 121, 118, -55,
	-55, -55, -136, -55, -114, 91, 13, -130, -130, 60,
	-55, 39, -40, -40, -131, -90, -93, -107, 20, 12,
	35, 35, -37, 69, 70, 71, 113, -194, -74, -66,
	-66, -66, -36, 147, 74, -195, -195, -37, 56, -40,
	-195, -195, -195, 56, 54, 23, 12, 12, -195, 12,
	12, -195, -195, -37, -85, -83, 81, -40, -195, 113,
	-195, 56, 56, -195, -195, -195, -195, -64, 31, 35,
	-2, -194, -194, -99, -103, -81, -43, -44, -44, -43,
	-44, 43, 43, 43, 48, 43, 48, 43, -52, -130,
	-195, -59, 51, 128, 52, -194, -132, -60, 13, -42,
	-60, -60, 113, -105, -106, 236, 233, 239, 58, 60,
	56, -173, 83, 55, 58, 29, -165, -165, -166, 58,
	-166, 29, -150, 30, 69, -155, 215, 61, -152, -152,
	-153, 31, -153, -153, -153, -161, 60, -161, 61, 61,
	53, -124, -136, -135, -188, 136, 132, 139, 140, 134,
	58, 125, 29, 131, 133, 152, 130, -188, -119, -120,
	127, 23, 125, 29, 152, -187, 54, 158, 211, 158,
	127, -136, -111, 60, -40, 40, 113, -55, -41, 12,
	100, -125, -38, -36, 74, -66, -66, -195, -39, -140,
	109, 186, 146, 184, 180, 200, 191, 213, 182, 214,
	-137, -140, -66, -66, -66, -66, 259, -88, 82, -40,
	80, -125, -66, -66, -98, 53, -99, -76, -78, -77,
	-194, -2, -94, -124, -97, -124, -60, 56, 83, -47,
	-46, 53, 54, -48, 53, -46, 43, 43, 125, 125,
	125, -97, -88, -40, -60, 233, 237, 238, -172, -173,
	-176, -175, -124, -179, -166, -166, 55, -151, 53, -66,
	57, -153, -153, 58, 109, 57, 56, 57, 56, 57,
	56, -55, -135, -135, -55, -135, -124, -185, 262, -186,
	58, -124, -124, -124, -55, -114, -60, -42, -195, -66,
	-195, -148, -148, -148, -157, -148, 174, -148, 174, -195,
	-195, 20, 20, 20, 20, -194, -35, 255, -40, 56,
	56, 28, -98, 56, -195, -195, -195, 56, 113, -195,
	56, -88, -103, -40, -40, 55, -40, -194, -194, -194,
	-195, -92, 57, 56, -148, -95, -124, -159, 211, 10,
	-152, 60, -152, 61, 61, -136, 27, -184, -183, -125,
	55, 54, -86, 14, -152, 58, -66, -66, -66, -66,
	-66, -195, 60, -66, -66, 29, -78, 35, -2, -194,
	-124, -124, -124, -92, -95, -95, -95, -95, -133, -178,
	-177, 54, 135, 67, -175, 57, 56, -160, 131, 29,
	130, -69, -153, -153, 57, 57, -194, 56, 83, -95,
	-55, -87, 15, 17, -195, -195, -195, -195, -34, 93,
	262, -195, -195, 10, -76, -2, 113, 57, -195, -195,
	-195, -59, -177, 58, -167, 83, 60, 142, -124, -149,
	67, 29, 29, -180, -181, 152, -183, -173, 57, -40,
	-75, -195, 260, 50, 263, -99, -195, -124, 61, -55,
	60, -195, 56, -124, -187, 40, 261, 264, 55, -181,
	35, -185, 40, -95, 154, 262, 57, 155, 263, -190,
	-191, 53, -194, 264, -191, 53, 11, 10, -66, 151,
	-189, 143, 138, 141, 31, -189, -195, -195, 137, 30,
	69,
}
var yyDef = [...]int{

	24, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 561, 0, 318, 318, 318, 318, 318,
	318, 0, 632, 615, 0, 0, 0, 0, -2, 306,
	307, 0, 309, 310, 933, 933, 933, 933, 0, 0,
	933, 24, 0, 37, 38, 931, 1, 3, 569, 0,
	0, 322, 325, 320, 0, 615, 615, 0, 0, 67,
	68, 0, 0, 0, 920, 0, 613, 613, 613, 633,
	634, 637, 638, 762, 763, 764, 765, 766, 767, 768,
	769, 770, 771, 772, 773, 774, 775, 776, 777, 778,
	779, 780, 781, 782, 783, 784, 785, 786, 787, 788,
	789, 790, 791, 792, 793, 794, 795, 796, 797, 798,
	799, 800, 801, 802, 803, 804, 805, 806, 807, 808,
	809, 810, 811, 812, 813, 814, 815, 816, 817, 818,
	819, 820, 821, 822, 823, 824, 825, 826, 827, 828,
	829, 830, 831, 832, 833, 834, 835, 836, 837, 838,
	839, 840, 841, 842, 843, 844, 845, 846, 847, 848,
	849, 850, 851, 852, 853, 854, 855, 856, 857, 858,
	859, 860, 861, 862, 863, 864, 865, 866, 867, 868,
	869, 870, 871, 872, 873, 874, 875, 876, 877, 878,
	879, 880, 881, 882, 883, 884, 885, 886, 887, 888,
	889, 890, 891, 892, 893, 894, 895, 896, 897, 898,
	899, 900, 901, 902, 903, 904, 905, 906, 907, 908,
	909, 910, 911, 912, 913, 914, 915, 916, 917, 918,
	919, 921, 922, 923, 924, 925, 926, 927, 928, 929,
	930, 0, 0, 0, 616, 0, 611, 0, 611, 611,
	611, 0, 258, 390, 641, 642, 920, 0, 0, 0,
	934, 0, 934, 270, 934, 934, 273, 934, 0, 934,
	0, 280, 0, 0, 286, 934, 303, 304, 291, 305,
	308, 311, 312, 313, 314, 933, 933, 317, 25, 31,
	573, 0, 0, 561, 33, 0, 318, 323, 324, 328,
	326, 327, 319, 0, 336, 340, 0, 399, 0, 404,
	406, -2, -2, 0, 441, 442, 443, 444, 445, 0,
	0, 0, 0, 0, 0, 0, 0, 469, 470, 471,
	472, 546, 547, 548, 549, 550, 551, 552, 553, 408,
	409, 543, 593, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 534, 0, 505, 505, 505, 505, 505, 505,
	505, 505, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 46, 48, 390, 52, 0, 909, 597,
	-2, -2, 0, 0, 639, 640, -2, 775, -2, 645,
	646, 647, 648, 649, 650, 651, 652, 653, 654, 655,
	656, 657, 658, 659, 660, 661, 662, 663, 664, 665,
	666, 667, 668, 669, 670, 671, 672, 673, 674, 675,
	676, 677, 678, 679, 680, 681, 682, 683, 684, 685,
	686, 687, 688, 689, 690, 691, 692, 693, 694, 695,
	696, 697, 698, 699, 700, 701, 702, 703, 704, 705,
	706, 707, 708, 709, 710, 711, 712, 713, 714, 715,
	716, 717, 718, 719, 720, 721, 722, 723, 724, 725,
	726, 727, 728, 729, 730, 731, 732, 733, 734, 735,
	736, 737, 738, 739, 740, 741, 742, 743, 744, 745,
	746, 747, 748, 749, 750, 751, 752, 753, 754, 755,
	756, 757, 758, 759, 760, 761, 0, 0, 86, 0,
	84, 0, 934, 0, 0, 0, 0, 0, 0, 934,
	0, 0, 0, 0, 249, 0, 0, 0, 0, 0,
	0, 0, 257, 0, 259, 934, 934, 262, 935, 936,
	934, 934, 934, 0, 934, 934, 269, 271, 272, 274,
	934, 934, 276, 0, 294, 292, 293, 288, 289, 0,
	300, 283, 284, 287, 315, 316, 32, 932, 26, 0,
	0, 570, 0, 562, 563, 566, 569, 31, 325, 0,
	330, 329, 321, 0, 337, 0, 0, 0, 341, 0,
	343, 344, 0, 402, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 426, 427, 428, 429, 430, 431, 432,
	405, 0, 419, 0, 0, 0, 461, 462, 463, 464,
	465, 466, 467, 0, 332, 31, 0, 439, 0, 0,
	0, 0, 0, 0, 0, 0, 328, 0, 535, 0,
	489, 497, 0, 490, 498, 491, 499, 492, 0, 493,
	500, 494, 501, 495, 496, 502, 0, 0, 0, 332,
	0, 0, 50, 0, 389, 0, 347, 349, 350, 351,
	-2, 0, 373, -2, 0, 0, 0, 44, 45, 0,
	0, 0, 0, 53, 909, 55, 56, 0, 0, 0,
	164, 606, 607, 608, 604, 208, 0, 0, 152, 148,
	92, 93, 94, 141, 96, 141, 141, 141, 141, 161,
	161, 161, 161, 124, 125, 126, 127, 128, 0, 0,
	111, 141, 141, 141, 115, 131, 132, 133, 134, 135,
	136, 137, 138, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 143, 143, 143, 145, 145, 635, 70, 0,
	934, 0, 934, 82, 0, 222, 0, 0, 0, 0,
	0, 0, 0, 0, 252, 612, 0, 934, 255, 256,
	391, 643, 644, 260, 261, 263, 264, 265, 266, 267,
	268, 275, 279, 0, 297, 0, 0, 281, 282, 0,
	0, 574, 0, 0, 0, 0, 0, 565, 567, 568,
	573, 34, 328, 0, 554, 0, 0, 0, 331, 29,
	400, 401, 403, 420, 0, 422, 424, 342, 338, 0,
	544, -2, 410, 411, 435, 436, 437, 0, 0, 0,
	0, 433, 415, 0, 446, 447, 448, 449, 450, 451,
	452, 453, 454, 455, 456, 457, 460, 519, 520, 0,
	458, 459, 468, 0, 0, 333, 334, 438, 0, 592,
	31, 0, 0, 0, 0, 443, 546, 0, 443, 546,
	0, 0, 0, 541, 538, 0, 0, 543, 0, 506,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 388,
	0, 0, 0, 0, 0, 0, 378, 0, 0, 381,
	0, 0, 0, 0, 372, 0, 0, 393, 854, 374,
	0, 376, 377, 397, 0, 397, 47, 397, 49, 0,
	392, 598, 54, 0, 0, 59, 60, 599, 600, 601,
	602, 0, 83, 209, 211, 214, 215, 216, 87, 88,
	89, 0, 0, 196, 0, 0, 190, 190, 0, 188,
	189, 85, 155, 153, 0, 150, 149, 95, 0, 161,
	161, 118, 119, 164, 0, 164, 164, 164, 0, 0,
	112, 113, 114, 106, 0, 107, 108, 109, 0, 110,
	0, 0, 934, 72, 614, 73, 933, 0, 0, 627,
	223, 617, 618, 619, 620, 621, 622, 623, 624, 625,
	626, 0, 74, 225, 227, 226, 230, 0, 0, 0,
	250, 934, 254, 294, 278, 0, 0, 295, 296, 301,
	285, 0, 571, 572, 0, 564, 27, 0, 609, 610,
	555, 556, 345, 421, 423, 425, 0, 332, 412, 433,
	416, 0, 413, 0, 0, 407, 473, 0, 0, 440,
	-2, 476, 477, 0, 0, 0, 0, 0, 512, 0,
	0, 513, 0, 561, 0, 539, 0, 0, 488, 0,
	507, 0, 0, 508, 509, 510, 511, 586, 0, 0,
	-2, 0, 0, 397, 594, 0, 348, 367, 369, 0,
	364, 379, 380, 382, 0, 384, 0, 386, 387, 352,
	354, 355, 0, 0, 0, 0, 375, 561, 0, 397,
	42, 43, 0, 57, 58, 0, 0, 64, 165, 166,
	0, 212, 0, 0, 0, 183, 190, 190, 186, 191,
	187, 0, 157, 0, 154, 91, 151, 0, 164, 164,
	120, 0, 121, 122, 123, 0, 139, 0, 0, 0,
	0, 636, 71, 217, 933, 232, 233, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 933, 0, 933,
	628, 629, 630, 631, 0, 77, 0, 0, 0, 0,
	0, 253, 297, 298, 299, 575, 0, 28, 397, 0,
	339, 545, 0, 414, 0, 434, 417, 474, 335, 0,
	141, 141, 524, 141, 145, 527, 141, 529, 141, 532,
	0, 0, 0, 0, 0, 0, 0, 536, 487, 542,
	0, 544, 0, 0, 35, 0, 586, 576, 588, 590,
	0, 31, 0, 582, 0, 359, 561, 0, 0, 361,
	368, 0, 0, 362, 0, 363, 383, 385, 0, 0,
	0, 0, 569, 398, 41, 61, 62, 63, 210, 213,
	0, 192, 141, 195, 184, 185, 0, 159, 0, 156,
	142, 116, 117, 162, 163, 161, 0, 161, 0, 146,
	0, 934, 218, 219, 220, 221, 0, 224, 0, 75,
	76, 0, 0, 229, 251, 277, 557, 346, 475, 418,
	478, 521, 161, 525, 526, 528, 530, 531, 533, 480,
	479, 0, 0, 0, 0, 0, 0, 0, 540, 0,
	0, 0, 36, 0, 591, -2, 0, 0, 0, 51,
	0, 569, 595, 596, 365, 0, 370, 0, 0, 0,
	373, 40, 175, 0, 194, 0, 357, 167, 160, 0,
	164, 140, 164, 0, 0, 69, 0, 78, 79, 0,
	0, 0, 559, 0, 522, 523, 0, 0, 0, 0,
	514, 486, 537, 0, 0, 0, 589, 0, -2, 0,
	584, 583, 360, 39, 0, 0, 0, 0, 393, 174,
	176, 0, 181, 0, 193, 0, 0, 172, 0, 169,
	171, 158, 129, 130, 144, 147, 0, 0, 0, 0,
	231, 30, 0, 0, 481, 483, 482, 484, 0, 0,
	0, 503, 504, 0, 579, 31, 0, 366, 394, 395,
	396, 356, 177, 178, 0, 182, 180, 0, 358, 90,
	0, 168, 170, 0, 245, 0, 80, 81, 74, 560,
	558, 485, 0, 0, 0, 587, -2, 585, 179, 0,
	173, 244, 0, 0, 77, 515, 0, 518, 0, 246,
	0, 228, 516, 0, 0, 0, 197, 0, 0, 198,
	199, 0, 0, 517, 200, 0, 0, 0, 0, 0,
	201, 203, 204, 0, 0, 202, 247, 248, 205, 206,
	207,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 76, 3, 3, 3, 103, 95, 3,
	55, 57, 100, 98, 56, 99, 113, 101, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 347,
	84, 83, 85, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 105, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 94, 3, 106,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 77, 78, 79, 80, 81, 82, 86, 87, 88,
	89, 90, 91, 92, 93, 96, 97, 102, 104, 107,
	108, 109, 110, 111, 112, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}
var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:323
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:328
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:329
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:333
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 24:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:356
		{
			setParseTree(yylex, nil)
		}
	case 25:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:362
		{
			yyVAL.statement = NewExplain(yyDollar[2].statement)
		}
	case 26:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:368
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 27:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:376
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 28:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:380
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 29:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:386
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 30:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:393
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:399
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:403
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:409
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 34:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:413
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 35:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:420
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:432
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:444
		{
			yyVAL.str = InsertStr
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:448
		{
			yyVAL.str = ReplaceStr
		}
	case 39:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:454
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].updateExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 40:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:460
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 41:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:464
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 42:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:468
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 43:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:472
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:477
		{
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:478
		{
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:482
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:486
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:492
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:496
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 50:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:501
		{
			yyVAL.partitions = nil
		}
	case 51:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:505
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:511
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 53:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:515
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 54:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:519
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 55:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:523
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:529
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:533
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 58:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:539
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(yyDollar[3].str))}
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:543
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(TxReadWrite))}
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:547
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(TxReadOnly))}
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:553
		{
			yyVAL.str = IsolationLevelRepeatableRead
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:557
		{
			yyVAL.str = IsolationLevelReadCommitted
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:561
		{
			yyVAL.str = IsolationLevelReadUncommitted
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:565
		{
			yyVAL.str = IsolationLevelSerializable
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:571
		{
			yyVAL.str = SessionStr
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:575
		{
			yyVAL.str = GlobalStr
		}
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:581
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:586
		{
			// Create table [name] like [name]
			yyDollar[1].ddl.OptLike = yyDollar[2].optLike
			yyVAL.statement = yyDollar[1].ddl
		}
	case 69:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:592
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName}
		}
	case 70:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:597
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 71:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:601
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[5].tableName.ToViewName()}
		}
	case 72:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:605
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 73:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:609
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 74:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:614
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:618
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:624
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 77:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:629
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:634
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:640
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 80:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:645
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:651
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 82:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:657
		{
			yyVAL.ddl = &DDL{Action: CreateStr, Table: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 83:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:664
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:671
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[2].tableName}
		}
	case 85:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:675
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[3].tableName}
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:681
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:686
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:690
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:694
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 90:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:700
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].sqlVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:711
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:722
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].sqlVal
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:727
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:733
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:737
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:741
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:745
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:749
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:753
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:757
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:761
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:765
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:771
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:777
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:783
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:789
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:795
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:803
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:807
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:811
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:815
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:819
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 116:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:825
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 117:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:829
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:833
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:837
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:841
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:845
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:849
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:853
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:857
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:861
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:865
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:869
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:873
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 129:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:877
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 130:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:882
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:888
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:892
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:896
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:900
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:904
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:908
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:912
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:916
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:922
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:927
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 141:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:932
		{
			yyVAL.sqlVal = nil
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:936
		{
			yyVAL.sqlVal = NewIntVal(yyDollar[2].bytes)
		}
	case 143:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:941
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 144:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:945
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 145:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:953
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:957
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 147:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:963
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 148:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:971
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:975
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 150:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:980
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:984
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 152:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:990
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:994
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:998
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 155:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1003
		{
			yyVAL.optVal = nil
		}
	case 156:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1007
		{
			yyVAL.optVal = yyDollar[2].expr
		}
	case 157:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1012
		{
			yyVAL.optVal = nil
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1016
		{
			yyVAL.optVal = yyDollar[3].expr
		}
	case 159:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1021
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1025
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 161:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1030
		{
			yyVAL.str = ""
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1034
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1038
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1043
		{
			yyVAL.str = ""
		}
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1047
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1051
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 167:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1056
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1060
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1064
		{
			yyVAL.colKeyOpt = colKey
		}
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1068
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1072
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 172:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1077
		{
			yyVAL.sqlVal = nil
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1081
		{
			yyVAL.sqlVal = NewStrVal(yyDollar[2].bytes)
		}
	case 174:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1087
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 175:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1091
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1097
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1101
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1107
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 179:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1111
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1116
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 181:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1122
		{
			yyVAL.str = ""
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1126
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1132
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1136
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 185:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1140
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1144
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1148
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1154
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1158
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 190:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1163
		{
			yyVAL.str = ""
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1167
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1173
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1177
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 194:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1183
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].sqlVal}
		}
	case 195:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1189
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].bytes), Details: yyDollar[3].constraintInfo}
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1193
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 197:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1200
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 198:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1204
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 199:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1208
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 200:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1212
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 201:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1218
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 202:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1224
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1230
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1234
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1238
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1242
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1246
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 208:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1251
		{
			yyVAL.str = ""
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1255
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 210:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1259
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1267
		{
			yyVAL.str = yyDollar[1].str
		}
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1271
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 213:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1275
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1281
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1285
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1289
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 217:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1295
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 218:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1299
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 219:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1303
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 220:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1307
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[4].tableName}, ToTables: TableNames{yyDollar[7].tableName}}
		}
	case 221:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1312
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 222:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1317
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 223:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1321
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 224:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1325
		{
			yyVAL.statement = &DDL{
				Action: CreateVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name:   NewColIdent(yyDollar[5].tableName.Name.String()),
					Type:   yyDollar[6].colIdent,
					Params: yyDollar[7].vindexParams,
				},
			}
		}
	case 225:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1337
		{
			yyVAL.statement = &DDL{
				Action: DropVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name: NewColIdent(yyDollar[5].tableName.Name.String()),
				},
			}
		}
	case 226:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1347
		{
			yyVAL.statement = &DDL{Action: AddVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 227:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1351
		{
			yyVAL.statement = &DDL{Action: DropVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 228:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1355
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 229:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1368
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 230:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1378
		{
			yyVAL.statement = &DDL{Action: AddSequenceStr, Table: yyDollar[5].tableName}
		}
	case 231:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1382
		{
			yyVAL.statement = &DDL{
				Action: AddAutoIncStr,
				Table:  yyDollar[4].tableName,
				AutoIncSpec: &AutoIncSpec{
					Column:   yyDollar[7].colIdent,
					Sequence: yyDollar[9].tableName,
				},
			}
		}
	case 244:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1409
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1415
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 246:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1419
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 247:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1425
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 248:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1429
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 249:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1435
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 250:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1441
		{
			yyVAL.ddl = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 251:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1445
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 252:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1453
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 253:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1461
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName}
		}
	case 254:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1466
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: TableNames{yyDollar[4].tableName.ToViewName()}, IfExists: exists}
		}
	case 255:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1474
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 256:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1478
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 257:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1484
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 258:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1488
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 259:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1493
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName}
		}
	case 260:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1499
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 261:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1504
		{
			yyVAL.statement = &Show{Type: CharsetStr}
		}
	case 262:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1508
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 263:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1512
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 264:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1517
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 265:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1521
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 266:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1525
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 267:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1529
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 268:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1533
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 269:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1537
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1541
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 271:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1545
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 272:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1549
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 273:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1553
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 274:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1557
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 275:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1561
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 276:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1565
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 277:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1569
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 278:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1574
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[3].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 279:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1584
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1588
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 281:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1592
		{
			// Cannot dereference $4 directly, or else the parser stackcannot be pooled. See yyParsePooled
			showCollationFilterOpt := yyDollar[4].expr
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: &showCollationFilterOpt}
		}
	case 282:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1598
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Scope: string(yyDollar[2].bytes), Type: string(yyDollar[3].bytes), ShowTablesOpt: showTablesOpt}
		}
	case 283:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1603
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 284:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1607
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 285:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1611
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName}
		}
	case 286:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1615
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 287:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1629
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1635
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1639
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 290:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1645
		{
			yyVAL.str = ""
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1649
		{
			yyVAL.str = "full "
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1655
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1659
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 294:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1665
		{
			yyVAL.str = ""
		}
	case 295:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1669
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 296:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1673
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 297:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1679
		{
			yyVAL.showFilter = nil
		}
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1683
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1687
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 300:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1693
		{
			yyVAL.showFilter = nil
		}
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1697
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 302:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1703
		{
			yyVAL.str = ""
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1707
		{
			yyVAL.str = SessionStr
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1711
		{
			yyVAL.str = GlobalStr
		}
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1717
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1721
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1727
		{
			yyVAL.statement = &Begin{}
		}
	case 308:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1731
		{
			yyVAL.statement = &Begin{}
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1737
		{
			yyVAL.statement = &Commit{}
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1743
		{
			yyVAL.statement = &Rollback{}
		}
	case 311:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1749
		{
			yyVAL.statement = &OtherRead{}
		}
	case 312:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1753
		{
			yyVAL.statement = &OtherRead{}
		}
	case 313:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1757
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 314:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1761
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 315:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1765
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 316:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1769
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 317:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1775
		{
			yyVAL.statement = &DDL{Action: FlushStr}
		}
	case 318:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1779
		{
			setAllowComments(yylex, true)
		}
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1783
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 320:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1789
		{
			yyVAL.bytes2 = nil
		}
	case 321:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1793
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1799
		{
			yyVAL.str = UnionStr
		}
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1803
		{
			yyVAL.str = UnionAllStr
		}
	case 324:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1807
		{
			yyVAL.str = UnionDistinctStr
		}
	case 325:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1812
		{
			yyVAL.str = ""
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1816
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1820
		{
			yyVAL.str = SQLCacheStr
		}
	case 328:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1825
		{
			yyVAL.str = ""
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1829
		{
			yyVAL.str = DistinctStr
		}
	case 330:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1834
		{
			yyVAL.str = ""
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1838
		{
			yyVAL.str = StraightJoinHint
		}
	case 332:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1843
		{
			yyVAL.selectExprs = nil
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1847
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1853
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 335:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1857
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1863
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 337:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1867
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 338:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1871
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 339:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1875
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 340:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1880
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1884
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 342:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1888
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1895
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 345:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1900
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 346:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1904
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1910
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 348:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1914
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1924
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 352:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1928
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1932
		{
			// missed alias for subquery
			yylex.Error("Every derived table must have its own alias")
			return 1
		}
	case 354:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1938
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1944
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 356:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1948
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1954
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 358:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1958
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1964
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 360:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1968
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 361:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1981
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 362:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1985
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 363:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1989
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1993
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 365:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1999
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 366:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2001
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 367:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2005
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2007
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 369:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2011
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 370:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2013
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 371:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2016
		{
			yyVAL.empty = struct{}{}
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2018
		{
			yyVAL.empty = struct{}{}
		}
	case 373:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2021
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2025
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 375:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2029
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2036
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2042
		{
			yyVAL.str = JoinStr
		}
	case 379:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2046
		{
			yyVAL.str = JoinStr
		}
	case 380:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2050
		{
			yyVAL.str = JoinStr
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2056
		{
			yyVAL.str = StraightJoinStr
		}
	case 382:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2062
		{
			yyVAL.str = LeftJoinStr
		}
	case 383:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2066
		{
			yyVAL.str = LeftJoinStr
		}
	case 384:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2070
		{
			yyVAL.str = RightJoinStr
		}
	case 385:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2074
		{
			yyVAL.str = RightJoinStr
		}
	case 386:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2080
		{
			yyVAL.str = NaturalJoinStr
		}
	case 387:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2084
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 388:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2094
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2098
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2104
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 391:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2108
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 392:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2114
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 393:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2119
		{
			yyVAL.indexHints = nil
		}
	case 394:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2123
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 395:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2127
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 396:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2131
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 397:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2136
		{
			yyVAL.expr = nil
		}
	case 398:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2140
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2146
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 400:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2150
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 401:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2154
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 402:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2158
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 403:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2162
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2166
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 405:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2170
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 406:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2176
		{
			yyVAL.str = ""
		}
	case 407:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2180
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2186
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2190
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 410:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2196
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 411:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2200
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 412:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2204
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 413:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2208
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 414:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2212
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 415:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2216
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 416:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2220
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 417:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2224
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 418:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2228
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 419:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2232
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2238
		{
			yyVAL.str = IsNullStr
		}
	case 421:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2242
		{
			yyVAL.str = IsNotNullStr
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2246
		{
			yyVAL.str = IsTrueStr
		}
	case 423:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2250
		{
			yyVAL.str = IsNotTrueStr
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2254
		{
			yyVAL.str = IsFalseStr
		}
	case 425:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2258
		{
			yyVAL.str = IsNotFalseStr
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2264
		{
			yyVAL.str = EqualStr
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2268
		{
			yyVAL.str = LessThanStr
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2272
		{
			yyVAL.str = GreaterThanStr
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2276
		{
			yyVAL.str = LessEqualStr
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2280
		{
			yyVAL.str = GreaterEqualStr
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2284
		{
			yyVAL.str = NotEqualStr
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2288
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 433:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2293
		{
			yyVAL.expr = nil
		}
	case 434:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2297
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2303
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2307
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2311
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 438:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2317
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2323
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 440:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2327
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2333
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2337
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2341
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2345
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2349
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 446:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2353
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 447:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2357
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 448:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2361
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 449:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2365
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 450:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2369
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 451:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2373
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 452:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2377
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 453:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2381
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 454:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2385
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 455:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2389
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 456:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2393
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2397
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 458:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2401
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 459:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2405
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 460:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2409
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 461:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2413
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 462:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2417
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 463:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2421
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Str, Expr: yyDollar[2].expr}
		}
	case 464:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2425
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 465:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2433
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 466:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2447
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 467:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2451
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 468:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2455
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 473:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2473
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 474:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2477
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 475:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2481
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 476:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2491
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 477:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2495
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 478:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2499
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 479:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2503
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 480:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2507
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 481:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2511
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 482:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2515
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 483:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2519
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 484:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2523
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 485:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2527
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 486:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2531
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 487:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2535
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 488:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2539
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 489:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2549
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 490:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2553
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 491:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2557
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 492:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2562
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 493:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2567
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 494:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2572
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 495:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2578
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 496:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2583
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 497:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2588
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 498:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2592
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 499:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2596
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_time"), Fsp: yyDollar[2].expr}
		}
	case 500:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2601
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtime"), Fsp: yyDollar[2].expr}
		}
	case 501:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2606
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtimestamp"), Fsp: yyDollar[2].expr}
		}
	case 502:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2611
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_time"), Fsp: yyDollar[2].expr}
		}
	case 503:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2615
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampadd"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 504:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2619
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampdiff"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 507:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2629
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 508:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2639
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 509:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2643
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 510:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2647
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 511:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2651
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 512:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2655
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 513:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2659
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 514:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2665
		{
			yyVAL.str = ""
		}
	case 515:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2669
		{
			yyVAL.str = BooleanModeStr
		}
	case 516:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2673
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 517:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2677
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 518:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2681
		{
			yyVAL.str = QueryExpansionStr
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2687
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2691
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 521:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2697
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 522:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2701
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 523:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2705
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: string(yyDollar[3].bytes)}
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2709
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 525:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2713
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 526:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2717
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2723
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 528:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2727
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2731
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 530:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2735
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 531:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2739
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2743
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 533:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2747
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 534:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2752
		{
			yyVAL.expr = nil
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2756
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 536:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2761
		{
			yyVAL.str = string("")
		}
	case 537:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2765
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2771
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 539:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2775
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 540:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2781
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 541:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2786
		{
			yyVAL.expr = nil
		}
	case 542:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2790
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2796
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 544:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2800
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 545:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2804
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2810
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2814
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2818
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2822
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2826
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2830
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2834
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2838
		{
			yyVAL.expr = &NullVal{}
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2844
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 555:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2853
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 556:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2857
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 557:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2862
		{
			yyVAL.exprs = nil
		}
	case 558:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2866
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 559:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2871
		{
			yyVAL.expr = nil
		}
	case 560:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2875
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 561:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2880
		{
			yyVAL.orderBy = nil
		}
	case 562:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2884
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2890
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 564:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2894
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 565:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2900
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 566:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2905
		{
			yyVAL.str = AscScr
		}
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2909
		{
			yyVAL.str = AscScr
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2913
		{
			yyVAL.str = DescScr
		}
	case 569:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2918
		{
			yyVAL.limit = nil
		}
	case 570:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2922
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 571:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2926
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 572:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2930
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 573:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2935
		{
			yyVAL.str = ""
		}
	case 574:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2939
		{
			yyVAL.str = ForUpdateStr
		}
	case 575:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2943
		{
			yyVAL.str = ShareModeStr
		}
	case 576:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2956
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2960
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 578:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2964
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 579:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2969
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 580:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2973
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 581:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2977
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2984
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 583:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2988
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 584:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2992
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 585:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2996
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 586:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3001
		{
			yyVAL.updateExprs = nil
		}
	case 587:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3005
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3011
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 589:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3015
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3021
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 591:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3025
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 592:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3031
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3037
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3047
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 595:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3051
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 596:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3057
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3063
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 598:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3067
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 599:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3073
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 600:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3077
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 601:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3081
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 602:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3085
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 604:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3092
		{
			yyVAL.bytes = []byte("charset")
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3099
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3103
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3107
		{
			yyVAL.expr = &Default{}
		}
	case 611:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3116
		{
			yyVAL.byt = 0
		}
	case 612:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3118
		{
			yyVAL.byt = 1
		}
	case 613:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3121
		{
			yyVAL.empty = struct{}{}
		}
	case 614:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3123
		{
			yyVAL.empty = struct{}{}
		}
	case 615:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3126
		{
			yyVAL.str = ""
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3128
		{
			yyVAL.str = IgnoreStr
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3132
		{
			yyVAL.empty = struct{}{}
		}
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3134
		{
			yyVAL.empty = struct{}{}
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3136
		{
			yyVAL.empty = struct{}{}
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3138
		{
			yyVAL.empty = struct{}{}
		}
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3140
		{
			yyVAL.empty = struct{}{}
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3142
		{
			yyVAL.empty = struct{}{}
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3144
		{
			yyVAL.empty = struct{}{}
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3146
		{
			yyVAL.empty = struct{}{}
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3148
		{
			yyVAL.empty = struct{}{}
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3150
		{
			yyVAL.empty = struct{}{}
		}
	case 627:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3153
		{
			yyVAL.empty = struct{}{}
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3155
		{
			yyVAL.empty = struct{}{}
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3157
		{
			yyVAL.empty = struct{}{}
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3161
		{
			yyVAL.empty = struct{}{}
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3163
		{
			yyVAL.empty = struct{}{}
		}
	case 632:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3166
		{
			yyVAL.empty = struct{}{}
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3168
		{
			yyVAL.empty = struct{}{}
		}
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3170
		{
			yyVAL.empty = struct{}{}
		}
	case 635:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3173
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 636:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3175
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3179
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3183
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3190
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3196
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3200
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3207
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 931:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3519
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 932:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3528
		{
			decNesting(yylex)
		}
	case 933:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3533
		{
			skipToEnd(yylex)
		}
	case 934:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3538
		{
			skipToEnd(yylex)
		}
	case 935:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3542
		{
			skipToEnd(yylex)
		}
	case 936:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3546
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
