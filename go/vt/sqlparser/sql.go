// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line sql.y:53
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	sqlVal               *SQLVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	colIdent             ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	colKeyOpt            ColumnKeyOption
	optVal               Expr
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexColumn          *IndexColumn
	indexColumns         []*IndexColumn
	constraintDefinition *ConstraintDefinition
	constraintInfo       ConstraintInfo
	ReferenceAction      ReferenceAction
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
	optLike              *OptLike
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const KEY = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const UNLOCK = 57374
const KEYS = 57375
const VALUES = 57376
const LAST_INSERT_ID = 57377
const NEXT = 57378
const VALUE = 57379
const SHARE = 57380
const MODE = 57381
const SQL_NO_CACHE = 57382
const SQL_CACHE = 57383
const JOIN = 57384
const STRAIGHT_JOIN = 57385
const LEFT = 57386
const RIGHT = 57387
const INNER = 57388
const OUTER = 57389
const CROSS = 57390
const NATURAL = 57391
const USE = 57392
const FORCE = 57393
const ON = 57394
const USING = 57395
const ID = 57396
const HEX = 57397
const STRING = 57398
const INTEGRAL = 57399
const FLOAT = 57400
const HEXNUM = 57401
const VALUE_ARG = 57402
const LIST_ARG = 57403
const COMMENT = 57404
const COMMENT_KEYWORD = 57405
const BIT_LITERAL = 57406
const NULL = 57407
const TRUE = 57408
const FALSE = 57409
const OFF = 57410
const OR = 57411
const AND = 57412
const NOT = 57413
const BETWEEN = 57414
const CASE = 57415
const WHEN = 57416
const THEN = 57417
const ELSE = 57418
const END = 57419
const LE = 57420
const GE = 57421
const NE = 57422
const NULL_SAFE_EQUAL = 57423
const IS = 57424
const LIKE = 57425
const REGEXP = 57426
const IN = 57427
const SHIFT_LEFT = 57428
const SHIFT_RIGHT = 57429
const DIV = 57430
const MOD = 57431
const UNARY = 57432
const COLLATE = 57433
const BINARY = 57434
const UNDERSCORE_BINARY = 57435
const UNDERSCORE_UTF8MB4 = 57436
const INTERVAL = 57437
const JSON_EXTRACT_OP = 57438
const JSON_UNQUOTE_EXTRACT_OP = 57439
const CREATE = 57440
const ALTER = 57441
const DROP = 57442
const RENAME = 57443
const ANALYZE = 57444
const ADD = 57445
const FLUSH = 57446
const SCHEMA = 57447
const TABLE = 57448
const INDEX = 57449
const VIEW = 57450
const TO = 57451
const IGNORE = 57452
const IF = 57453
const UNIQUE = 57454
const PRIMARY = 57455
const COLUMN = 57456
const SPATIAL = 57457
const FULLTEXT = 57458
const KEY_BLOCK_SIZE = 57459
const ACTION = 57460
const CASCADE = 57461
const CONSTRAINT = 57462
const FOREIGN = 57463
const NO = 57464
const REFERENCES = 57465
const RESTRICT = 57466
const SHOW = 57467
const DESCRIBE = 57468
const EXPLAIN = 57469
const DATE = 57470
const ESCAPE = 57471
const REPAIR = 57472
const OPTIMIZE = 57473
const TRUNCATE = 57474
const MAXVALUE = 57475
const PARTITION = 57476
const REORGANIZE = 57477
const LESS = 57478
const THAN = 57479
const PROCEDURE = 57480
const TRIGGER = 57481
const VINDEX = 57482
const VINDEXES = 57483
const STATUS = 57484
const VARIABLES = 57485
const WARNINGS = 57486
const SEQUENCE = 57487
const BEGIN = 57488
const START = 57489
const TRANSACTION = 57490
const COMMIT = 57491
const ROLLBACK = 57492
const BIT = 57493
const TINYINT = 57494
const SMALLINT = 57495
const MEDIUMINT = 57496
const INT = 57497
const INTEGER = 57498
const BIGINT = 57499
const INTNUM = 57500
const REAL = 57501
const DOUBLE = 57502
const FLOAT_TYPE = 57503
const DECIMAL = 57504
const NUMERIC = 57505
const TIME = 57506
const TIMESTAMP = 57507
const DATETIME = 57508
const YEAR = 57509
const CHAR = 57510
const VARCHAR = 57511
const BOOL = 57512
const CHARACTER = 57513
const VARBINARY = 57514
const NCHAR = 57515
const TEXT = 57516
const TINYTEXT = 57517
const MEDIUMTEXT = 57518
const LONGTEXT = 57519
const BLOB = 57520
const TINYBLOB = 57521
const MEDIUMBLOB = 57522
const LONGBLOB = 57523
const JSON = 57524
const ENUM = 57525
const GEOMETRY = 57526
const POINT = 57527
const LINESTRING = 57528
const POLYGON = 57529
const GEOMETRYCOLLECTION = 57530
const MULTIPOINT = 57531
const MULTILINESTRING = 57532
const MULTIPOLYGON = 57533
const NULLX = 57534
const AUTO_INCREMENT = 57535
const APPROXNUM = 57536
const SIGNED = 57537
const UNSIGNED = 57538
const ZEROFILL = 57539
const COLLATION = 57540
const DATABASES = 57541
const TABLES = 57542
const VITESS_METADATA = 57543
const VSCHEMA = 57544
const FULL = 57545
const PROCESSLIST = 57546
const COLUMNS = 57547
const FIELDS = 57548
const ENGINES = 57549
const PLUGINS = 57550
const NAMES = 57551
const CHARSET = 57552
const GLOBAL = 57553
const SESSION = 57554
const ISOLATION = 57555
const LEVEL = 57556
const READ = 57557
const WRITE = 57558
const ONLY = 57559
const REPEATABLE = 57560
const COMMITTED = 57561
const UNCOMMITTED = 57562
const SERIALIZABLE = 57563
const CURRENT_TIMESTAMP = 57564
const DATABASE = 57565
const CURRENT_DATE = 57566
const CURRENT_TIME = 57567
const LOCALTIME = 57568
const LOCALTIMESTAMP = 57569
const UTC_DATE = 57570
const UTC_TIME = 57571
const UTC_TIMESTAMP = 57572
const REPLACE = 57573
const CONVERT = 57574
const CAST = 57575
const SUBSTR = 57576
const SUBSTRING = 57577
const GROUP_CONCAT = 57578
const SEPARATOR = 57579
const TIMESTAMPADD = 57580
const TIMESTAMPDIFF = 57581
const MATCH = 57582
const AGAINST = 57583
const BOOLEAN = 57584
const LANGUAGE = 57585
const WITH = 57586
const QUERY = 57587
const EXPANSION = 57588
const UNUSED = 57589

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"SEQUENCE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"TABLES",
	"VITESS_METADATA",
	"VSCHEMA",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"PLUGINS",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 29,
	-2, 4,
	-1, 37,
	159, 299,
	160, 299,
	-2, 287,
	-1, 262,
	112, 639,
	-2, 635,
	-1, 263,
	112, 640,
	-2, 636,
	-1, 331,
	82, 814,
	-2, 63,
	-1, 332,
	82, 770,
	-2, 64,
	-1, 337,
	82, 749,
	-2, 601,
	-1, 339,
	82, 791,
	-2, 603,
	-1, 609,
	1, 351,
	5, 351,
	12, 351,
	13, 351,
	14, 351,
	15, 351,
	17, 351,
	19, 351,
	30, 351,
	31, 351,
	42, 351,
	43, 351,
	44, 351,
	45, 351,
	46, 351,
	48, 351,
	49, 351,
	52, 351,
	53, 351,
	55, 351,
	56, 351,
	265, 351,
	-2, 369,
	-1, 612,
	53, 44,
	55, 44,
	-2, 48,
	-1, 760,
	112, 642,
	-2, 638,
	-1, 989,
	5, 30,
	-2, 436,
	-1, 1019,
	5, 29,
	-2, 575,
	-1, 1263,
	5, 30,
	-2, 576,
	-1, 1316,
	5, 29,
	-2, 578,
	-1, 1394,
	5, 30,
	-2, 579,
}

const yyPrivate = 57344

const yyLast = 12449

var yyAct = [...]int{

	263, 1428, 1418, 1225, 1382, 1022, 267, 565, 1165, 1283,
	873, 1040, 1199, 1328, 1296, 280, 1023, 1113, 846, 241,
	466, 869, 1166, 896, 953, 564, 3, 844, 1162, 882,
	916, 902, 81, 1172, 293, 1137, 206, 872, 57, 206,
	1178, 785, 336, 709, 795, 723, 1093, 625, 1067, 981,
	1084, 886, 232, 848, 792, 833, 1046, 813, 762, 497,
	503, 294, 51, 912, 624, 437, 826, 206, 81, 330,
	265, 509, 206, 325, 206, 517, 250, 240, 322, 327,
	614, 56, 579, 1421, 606, 1405, 1416, 1392, 305, 605,
	311, 312, 309, 310, 308, 307, 306, 233, 234, 235,
	236, 1413, 580, 239, 313, 314, 1226, 1404, 254, 1391,
	1154, 1255, 442, 51, 1194, 1195, 1055, 61, 626, 1054,
	627, 246, 1056, 269, 1357, 530, 529, 539, 540, 532,
	533, 534, 535, 536, 537, 538, 531, 864, 865, 541,
	1193, 863, 491, 63, 64, 65, 66, 67, 201, 197,
	198, 199, 486, 238, 470, 237, 487, 484, 485, 1075,
	193, 895, 195, 1286, 1303, 1115, 903, 1246, 1244, 231,
	489, 698, 479, 480, 697, 1117, 695, 1415, 1412, 1383,
	1112, 827, 1375, 887, 1436, 455, 1329, 1041, 1043, 456,
	444, 195, 1109, 1432, 206, 1118, 889, 206, 1111, 1331,
	702, 490, 611, 206, 688, 1188, 794, 889, 696, 206,
	699, 1337, 81, 889, 81, 1187, 81, 81, 1116, 81,
	472, 81, 474, 1186, 440, 438, 447, 81, 208, 1100,
	1364, 196, 947, 468, 475, 946, 476, 477, 203, 478,
	1266, 481, 1068, 553, 554, 859, 1124, 492, 998, 870,
	1051, 1008, 471, 473, 194, 975, 734, 81, 1098, 620,
	521, 462, 541, 731, 1042, 1211, 200, 1330, 531, 324,
	769, 541, 506, 467, 439, 467, 441, 467, 467, 70,
	467, 452, 467, 505, 767, 768, 766, 728, 467, 516,
	493, 494, 888, 1358, 1110, 903, 1108, 885, 883, 1430,
	884, 333, 1431, 888, 1429, 881, 887, 438, 51, 888,
	515, 514, 1338, 1336, 256, 71, 1212, 724, 1373, 1390,
	206, 206, 206, 550, 995, 1099, 552, 516, 1346, 81,
	1104, 1101, 1094, 1102, 1097, 81, 955, 469, 1095, 1096,
	436, 1176, 628, 1156, 449, 814, 450, 1138, 604, 451,
	553, 554, 1103, 814, 563, 1005, 567, 568, 569, 570,
	571, 572, 573, 574, 575, 507, 578, 581, 581, 581,
	587, 581, 581, 587, 581, 595, 596, 597, 598, 599,
	600, 514, 610, 690, 1140, 458, 459, 460, 551, 582,
	584, 586, 588, 590, 592, 593, 448, 516, 725, 454,
	613, 443, 1073, 1378, 618, 461, 733, 1437, 622, 583,
	585, 463, 589, 591, 954, 594, 1396, 994, 1142, 892,
	1146, 993, 1141, 992, 1139, 893, 553, 554, 511, 1144,
	1292, 534, 535, 536, 537, 538, 531, 206, 1143, 541,
	515, 514, 81, 732, 609, 1291, 1438, 206, 206, 81,
	1088, 1145, 1147, 206, 54, 192, 206, 516, 1087, 206,
	515, 514, 687, 206, 765, 81, 81, 515, 514, 694,
	81, 81, 81, 206, 81, 81, 1076, 516, 445, 446,
	81, 81, 515, 514, 516, 712, 713, 1371, 1398, 1158,
	714, 715, 716, 1374, 718, 719, 752, 754, 755, 516,
	720, 721, 753, 467, 1310, 711, 737, 738, 22, 81,
	467, 1289, 1121, 206, 972, 973, 974, 1085, 958, 81,
	319, 320, 603, 1228, 612, 739, 467, 467, 786, 818,
	787, 467, 467, 467, 703, 467, 467, 1057, 1068, 1058,
	1063, 467, 467, 1334, 1414, 292, 532, 533, 534, 535,
	536, 537, 538, 531, 515, 514, 541, 500, 504, 763,
	1400, 496, 333, 81, 760, 758, 1334, 1386, 245, 1334,
	496, 516, 1334, 1365, 522, 1334, 1333, 79, 788, 804,
	807, 1281, 1280, 496, 741, 815, 1268, 496, 1265, 496,
	1218, 1217, 1343, 799, 756, 708, 81, 81, 1214, 1215,
	1214, 1213, 1342, 206, 987, 496, 830, 496, 1208, 566,
	707, 206, 206, 335, 51, 206, 206, 691, 577, 206,
	206, 206, 81, 689, 789, 790, 797, 496, 890, 567,
	835, 838, 839, 840, 836, 81, 837, 841, 686, 636,
	1179, 1180, 854, 464, 635, 634, 856, 811, 764, 692,
	693, 457, 1047, 823, 1163, 700, 1175, 1175, 324, 797,
	1261, 706, 1047, 711, 1127, 1345, 24, 616, 898, 899,
	900, 901, 845, 58, 24, 717, 610, 616, 830, 852,
	610, 904, 905, 906, 909, 910, 911, 1216, 861, 206,
	81, 860, 81, 857, 1315, 830, 206, 206, 206, 206,
	206, 877, 206, 206, 24, 1175, 206, 81, 987, 617,
	922, 619, 924, 987, 54, 748, 918, 1059, 853, 617,
	615, 615, 54, 206, 829, 206, 206, 951, 1017, 862,
	206, 1011, 1018, 1010, 609, 987, 615, 621, 609, 735,
	701, 54, 609, 1406, 1298, 1114, 914, 915, 1299, 830,
	897, 467, 54, 467, 1273, 759, 917, 335, 1204, 335,
	1062, 335, 335, 913, 335, 908, 335, 920, 467, 907,
	495, 247, 335, 1179, 1180, 800, 801, 760, 963, 806,
	809, 810, 1423, 1419, 530, 529, 539, 540, 532, 533,
	534, 535, 536, 537, 538, 531, 964, 1206, 541, 965,
	1182, 763, 519, 726, 822, 828, 824, 825, 539, 540,
	532, 533, 534, 535, 536, 537, 538, 531, 855, 54,
	541, 976, 1163, 1089, 729, 977, 705, 747, 1185, 749,
	750, 206, 206, 206, 206, 206, 1024, 982, 835, 838,
	839, 840, 836, 206, 837, 841, 206, 1184, 1034, 1031,
	206, 1030, 1019, 1035, 206, 333, 283, 282, 285, 286,
	287, 288, 260, 1410, 1032, 284, 289, 1403, 874, 1033,
	1004, 799, 960, 81, 335, 1036, 1123, 839, 840, 1408,
	630, 1048, 566, 1060, 970, 802, 803, 969, 1020, 1021,
	764, 921, 610, 610, 610, 610, 610, 1037, 941, 942,
	943, 944, 945, 1045, 948, 949, 498, 845, 950, 1044,
	1052, 1049, 1080, 1050, 633, 610, 1026, 1027, 499, 1029,
	1025, 81, 81, 1028, 1079, 952, 1081, 1082, 1083, 510,
	1077, 1078, 959, 251, 252, 1069, 1065, 1066, 1380, 465,
	1072, 1379, 1091, 868, 508, 1313, 1070, 1064, 1259, 1294,
	923, 81, 704, 971, 609, 609, 609, 609, 609, 1086,
	843, 248, 249, 510, 968, 242, 1351, 206, 759, 609,
	243, 1119, 967, 58, 1105, 1350, 81, 609, 1092, 1301,
	1047, 488, 999, 467, 1425, 1424, 60, 335, 996, 722,
	512, 1425, 1361, 1287, 335, 730, 62, 55, 1120, 1,
	986, 1417, 1227, 1295, 929, 1381, 1327, 1198, 880, 871,
	335, 335, 467, 69, 435, 335, 335, 335, 1002, 335,
	335, 81, 81, 1164, 1024, 335, 335, 68, 1131, 1372,
	1149, 1130, 1136, 879, 878, 1148, 740, 1335, 1285, 891,
	1074, 1155, 894, 1205, 1071, 81, 1169, 961, 962, 1377,
	504, 760, 963, 1167, 743, 641, 639, 640, 638, 643,
	81, 642, 81, 81, 519, 637, 219, 335, 328, 1183,
	842, 629, 1197, 919, 513, 72, 1107, 1106, 1189, 1174,
	1168, 925, 51, 727, 482, 1190, 483, 221, 549, 966,
	206, 1053, 334, 1201, 796, 798, 1170, 1196, 736, 1209,
	1210, 502, 1349, 1300, 1003, 1192, 874, 206, 791, 576,
	812, 268, 988, 81, 1202, 1203, 81, 81, 81, 206,
	751, 281, 278, 279, 816, 81, 742, 1016, 206, 1006,
	523, 266, 258, 555, 556, 557, 558, 559, 560, 561,
	562, 820, 821, 608, 601, 1233, 1220, 834, 832, 831,
	323, 1181, 1177, 607, 1126, 1235, 1254, 1356, 1221, 746,
	1223, 26, 1239, 1240, 59, 1241, 253, 335, 1243, 1125,
	1245, 19, 18, 1242, 17, 20, 16, 15, 14, 453,
	335, 30, 1024, 1234, 21, 13, 12, 11, 10, 610,
	9, 8, 1270, 1260, 7, 6, 5, 81, 4, 244,
	23, 2, 0, 0, 0, 81, 0, 1060, 0, 1129,
	1279, 0, 0, 1269, 0, 0, 1253, 496, 0, 0,
	81, 0, 0, 0, 1282, 0, 0, 81, 0, 0,
	0, 0, 0, 0, 0, 335, 0, 335, 0, 0,
	1293, 0, 1159, 0, 0, 1288, 0, 1290, 1275, 1276,
	1277, 609, 335, 0, 530, 529, 539, 540, 532, 533,
	534, 535, 536, 537, 538, 531, 81, 81, 541, 81,
	1122, 0, 1302, 0, 81, 0, 81, 81, 81, 206,
	335, 467, 81, 1322, 1314, 1323, 1324, 1325, 0, 1321,
	1316, 0, 1219, 874, 1332, 874, 1167, 1326, 0, 81,
	206, 0, 0, 1339, 0, 0, 0, 0, 1347, 1222,
	1340, 0, 1341, 0, 0, 0, 0, 0, 984, 0,
	1157, 1232, 985, 1168, 1362, 0, 1317, 0, 0, 989,
	990, 991, 0, 0, 0, 81, 997, 0, 1369, 1000,
	1001, 1370, 0, 1363, 0, 1007, 81, 81, 0, 1009,
	1167, 0, 1012, 1013, 1014, 1015, 1344, 1385, 1129, 1388,
	1384, 0, 1191, 0, 0, 81, 0, 1393, 1024, 0,
	0, 0, 0, 0, 1039, 816, 206, 1168, 0, 51,
	0, 0, 0, 0, 81, 0, 761, 0, 0, 770,
	771, 772, 773, 774, 775, 776, 777, 778, 779, 780,
	781, 782, 783, 784, 1402, 1407, 1409, 81, 0, 0,
	0, 1132, 0, 0, 0, 0, 1411, 0, 335, 0,
	1422, 0, 0, 0, 0, 0, 0, 1433, 0, 0,
	874, 530, 529, 539, 540, 532, 533, 534, 535, 536,
	537, 538, 531, 0, 819, 541, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 935, 0, 0, 0,
	1297, 24, 25, 52, 27, 28, 1090, 335, 0, 0,
	934, 0, 0, 1256, 0, 0, 0, 1420, 501, 0,
	43, 0, 0, 566, 1258, 29, 48, 49, 0, 0,
	0, 1271, 0, 0, 1272, 0, 335, 1274, 939, 0,
	0, 0, 1348, 0, 0, 38, 0, 933, 0, 54,
	0, 0, 0, 0, 204, 0, 1135, 230, 0, 0,
	0, 335, 530, 529, 539, 540, 532, 533, 534, 535,
	536, 537, 538, 531, 0, 0, 541, 0, 0, 0,
	0, 0, 257, 0, 0, 326, 0, 0, 0, 0,
	204, 0, 204, 0, 335, 0, 0, 930, 927, 928,
	0, 926, 0, 816, 0, 0, 1171, 1173, 0, 0,
	31, 32, 34, 33, 36, 0, 50, 0, 1397, 1297,
	874, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1173, 0, 937, 940, 0, 1257, 0, 37, 44, 45,
	0, 0, 46, 47, 35, 335, 0, 335, 1200, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 39, 40,
	0, 41, 42, 0, 0, 0, 0, 0, 0, 932,
	978, 979, 980, 530, 529, 539, 540, 532, 533, 534,
	535, 536, 537, 538, 531, 0, 0, 541, 1252, 0,
	0, 931, 0, 0, 0, 0, 0, 0, 1224, 0,
	1236, 1229, 1230, 1231, 0, 1387, 566, 1238, 0, 0,
	335, 0, 204, 0, 0, 204, 0, 0, 1247, 1248,
	0, 204, 0, 0, 0, 0, 983, 204, 0, 0,
	936, 0, 0, 0, 0, 0, 0, 0, 1262, 1263,
	1264, 0, 1267, 53, 0, 938, 530, 529, 539, 540,
	532, 533, 534, 535, 536, 537, 538, 531, 0, 1278,
	541, 816, 530, 529, 539, 540, 532, 533, 534, 535,
	536, 537, 538, 531, 0, 0, 541, 0, 0, 0,
	0, 0, 335, 0, 0, 0, 0, 0, 0, 0,
	1284, 0, 530, 529, 539, 540, 532, 533, 534, 535,
	536, 537, 538, 531, 0, 335, 541, 0, 0, 0,
	0, 0, 335, 0, 0, 0, 0, 0, 0, 0,
	0, 216, 0, 0, 1309, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 204, 204,
	204, 0, 0, 0, 0, 226, 0, 0, 0, 0,
	0, 1318, 1319, 0, 1320, 0, 0, 0, 0, 1284,
	0, 1284, 1284, 1284, 0, 0, 0, 1200, 0, 0,
	0, 0, 0, 0, 1352, 1353, 1354, 1355, 0, 0,
	0, 1359, 1360, 0, 1284, 1133, 1134, 0, 0, 0,
	0, 0, 0, 1366, 1367, 1368, 209, 0, 1150, 1151,
	0, 1152, 1153, 212, 0, 0, 0, 0, 0, 0,
	0, 220, 215, 1160, 1161, 0, 0, 0, 0, 0,
	1376, 0, 0, 0, 0, 0, 1389, 0, 0, 0,
	0, 335, 335, 1394, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 218, 0, 0, 0, 816, 0, 225,
	1395, 1399, 0, 0, 0, 204, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 204, 204, 0, 0, 1401,
	0, 204, 0, 0, 204, 1207, 210, 204, 0, 0,
	0, 710, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 204, 1284, 0, 0, 1251, 1434, 1435, 0, 0,
	0, 0, 0, 222, 213, 0, 223, 224, 229, 0,
	0, 0, 214, 217, 0, 211, 228, 227, 0, 0,
	0, 0, 0, 0, 0, 658, 0, 0, 0, 0,
	0, 204, 0, 0, 525, 1237, 528, 0, 0, 0,
	710, 0, 542, 543, 544, 545, 546, 547, 548, 0,
	526, 527, 524, 530, 529, 539, 540, 532, 533, 534,
	535, 536, 537, 538, 531, 0, 0, 541, 0, 530,
	529, 539, 540, 532, 533, 534, 535, 536, 537, 538,
	531, 0, 257, 541, 0, 0, 0, 257, 257, 0,
	0, 257, 257, 257, 0, 0, 0, 817, 0, 0,
	0, 0, 0, 646, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 257, 257, 257, 257,
	0, 204, 0, 0, 0, 0, 0, 0, 0, 204,
	850, 0, 0, 204, 204, 0, 0, 204, 858, 710,
	659, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1250, 1304, 1305, 1306, 1307, 1308, 0, 0, 0,
	1311, 1312, 0, 672, 675, 676, 677, 678, 679, 680,
	0, 681, 682, 683, 684, 685, 660, 661, 662, 663,
	644, 645, 673, 0, 647, 0, 648, 649, 650, 651,
	652, 653, 654, 655, 656, 657, 664, 665, 666, 667,
	668, 669, 670, 671, 0, 0, 0, 204, 1249, 0,
	0, 0, 0, 0, 204, 204, 204, 204, 204, 0,
	204, 204, 0, 0, 204, 530, 529, 539, 540, 532,
	533, 534, 535, 536, 537, 538, 531, 0, 0, 541,
	0, 204, 0, 956, 957, 0, 0, 0, 204, 0,
	0, 0, 0, 710, 674, 0, 0, 0, 0, 139,
	0, 0, 0, 849, 0, 257, 0, 0, 103, 0,
	0, 0, 0, 0, 120, 0, 122, 0, 0, 160,
	131, 0, 530, 529, 539, 540, 532, 533, 534, 535,
	536, 537, 538, 531, 0, 0, 541, 0, 205, 0,
	851, 0, 0, 0, 0, 0, 0, 96, 0, 0,
	0, 0, 257, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1426, 0, 0, 0, 0, 0, 0,
	257, 529, 539, 540, 532, 533, 534, 535, 536, 537,
	538, 531, 0, 0, 541, 0, 0, 0, 817, 204,
	204, 204, 204, 204, 0, 0, 0, 0, 0, 0,
	0, 1038, 109, 0, 204, 0, 207, 0, 850, 0,
	0, 146, 204, 163, 111, 119, 83, 90, 0, 110,
	137, 151, 155, 0, 0, 0, 99, 0, 153, 141,
	176, 0, 142, 152, 123, 168, 147, 175, 183, 184,
	165, 182, 187, 157, 84, 164, 174, 97, 156, 86,
	172, 162, 129, 115, 116, 85, 0, 150, 102, 107,
	101, 138, 169, 170, 100, 190, 91, 181, 88, 92,
	180, 136, 167, 173, 130, 127, 87, 171, 128, 126,
	118, 105, 112, 144, 125, 145, 113, 133, 132, 134,
	0, 0, 0, 161, 178, 191, 94, 0, 166, 185,
	186, 0, 0, 95, 108, 104, 143, 135, 93, 114,
	158, 117, 124, 149, 189, 140, 154, 98, 177, 159,
	0, 0, 0, 0, 0, 204, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 257, 0, 0, 0, 82,
	89, 121, 188, 148, 106, 179, 257, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 710, 0, 0,
	0, 0, 0, 0, 0, 0, 817, 139, 0, 0,
	0, 0, 264, 0, 0, 0, 103, 0, 261, 0,
	0, 0, 120, 304, 122, 0, 0, 160, 131, 0,
	0, 0, 0, 295, 296, 0, 0, 0, 0, 0,
	0, 866, 0, 54, 0, 0, 262, 283, 282, 285,
	286, 287, 288, 0, 0, 96, 284, 289, 290, 291,
	867, 0, 0, 259, 276, 0, 303, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 204, 0,
	0, 0, 0, 0, 0, 0, 273, 274, 0, 0,
	0, 0, 317, 0, 275, 204, 0, 270, 271, 272,
	277, 0, 0, 0, 0, 0, 0, 204, 0, 0,
	109, 0, 0, 0, 207, 0, 204, 315, 0, 146,
	0, 163, 111, 119, 83, 90, 0, 110, 137, 151,
	155, 0, 0, 0, 99, 0, 153, 141, 176, 0,
	142, 152, 123, 168, 147, 175, 183, 184, 165, 182,
	187, 157, 84, 164, 174, 97, 156, 86, 172, 162,
	129, 115, 116, 85, 817, 150, 102, 107, 101, 138,
	169, 170, 100, 190, 91, 181, 88, 92, 180, 136,
	167, 173, 130, 127, 87, 171, 128, 126, 118, 105,
	112, 144, 125, 145, 113, 133, 132, 134, 0, 0,
	0, 161, 178, 191, 94, 0, 166, 185, 186, 0,
	0, 95, 108, 104, 143, 135, 93, 114, 158, 117,
	124, 149, 189, 140, 154, 98, 177, 159, 305, 316,
	311, 312, 309, 310, 308, 307, 306, 318, 297, 298,
	299, 300, 302, 0, 313, 314, 301, 82, 89, 121,
	188, 148, 106, 179, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 850, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 204, 0,
	0, 0, 0, 0, 423, 412, 0, 383, 426, 361,
	375, 434, 376, 377, 405, 347, 391, 139, 373, 0,
	364, 342, 370, 343, 362, 385, 103, 388, 360, 414,
	394, 425, 120, 432, 122, 399, 0, 160, 131, 0,
	0, 387, 416, 389, 410, 382, 406, 352, 398, 427,
	374, 403, 428, 0, 0, 0, 80, 0, 875, 876,
	817, 0, 0, 0, 0, 96, 0, 401, 422, 372,
	402, 404, 341, 400, 204, 345, 348, 433, 418, 367,
	368, 1061, 0, 0, 0, 0, 0, 0, 386, 390,
	407, 380, 0, 0, 0, 0, 0, 0, 0, 0,
	365, 0, 397, 0, 0, 0, 349, 346, 0, 0,
	384, 0, 0, 0, 351, 0, 366, 408, 0, 340,
	109, 411, 417, 381, 207, 421, 379, 378, 424, 146,
	0, 163, 111, 119, 83, 90, 0, 110, 137, 151,
	155, 415, 363, 371, 99, 369, 153, 141, 176, 396,
	142, 152, 123, 168, 147, 175, 183, 184, 165, 182,
	187, 157, 84, 164, 174, 97, 156, 86, 172, 162,
	129, 115, 116, 85, 0, 150, 102, 107, 101, 138,
	169, 170, 100, 190, 91, 181, 88, 92, 180, 136,
	167, 173, 130, 127, 87, 171, 128, 126, 118, 105,
	112, 144, 125, 145, 113, 133, 132, 134, 0, 344,
	0, 161, 178, 191, 94, 359, 166, 185, 186, 0,
	0, 95, 108, 104, 143, 135, 93, 114, 158, 117,
	124, 149, 189, 140, 154, 98, 177, 159, 355, 358,
	353, 354, 392, 393, 429, 430, 431, 409, 350, 0,
	356, 357, 0, 413, 419, 420, 395, 82, 89, 121,
	188, 148, 106, 179, 423, 412, 0, 383, 426, 361,
	375, 434, 376, 377, 405, 347, 391, 139, 373, 0,
	364, 342, 370, 343, 362, 385, 103, 388, 360, 414,
	394, 425, 120, 432, 122, 399, 0, 160, 131, 0,
	0, 387, 416, 389, 410, 382, 406, 352, 398, 427,
	374, 403, 428, 0, 0, 0, 80, 0, 875, 876,
	0, 0, 0, 0, 0, 96, 0, 401, 422, 372,
	402, 404, 341, 400, 0, 345, 348, 433, 418, 367,
	368, 0, 0, 0, 0, 0, 0, 0, 386, 390,
	407, 380, 0, 0, 0, 0, 0, 0, 0, 0,
	365, 0, 397, 0, 0, 0, 349, 346, 0, 0,
	384, 0, 0, 0, 351, 0, 366, 408, 0, 340,
	109, 411, 417, 381, 207, 421, 379, 378, 424, 146,
	0, 163, 111, 119, 83, 90, 0, 110, 137, 151,
	155, 415, 363, 371, 99, 369, 153, 141, 176, 396,
	142, 152, 123, 168, 147, 175, 183, 184, 165, 182,
	187, 157, 84, 164, 174, 97, 156, 86, 172, 162,
	129, 115, 116, 85, 0, 150, 102, 107, 101, 138,
	169, 170, 100, 190, 91, 181, 88, 92, 180, 136,
	167, 173, 130, 127, 87, 171, 128, 126, 118, 105,
	112, 144, 125, 145, 113, 133, 132, 134, 0, 344,
	0, 161, 178, 191, 94, 359, 166, 185, 186, 0,
	0, 95, 108, 104, 143, 135, 93, 114, 158, 117,
	124, 149, 189, 140, 154, 98, 177, 159, 355, 358,
	353, 354, 392, 393, 429, 430, 431, 409, 350, 0,
	356, 357, 0, 413, 419, 420, 395, 82, 89, 121,
	188, 148, 106, 179, 423, 412, 0, 383, 426, 361,
	375, 434, 376, 377, 405, 347, 391, 139, 373, 0,
	364, 342, 370, 343, 362, 385, 103, 388, 360, 414,
	394, 425, 120, 432, 122, 399, 0, 160, 131, 0,
	0, 387, 416, 389, 410, 382, 406, 352, 398, 427,
	374, 403, 428, 54, 0, 0, 80, 0, 0, 0,
	0, 0, 0, 0, 0, 96, 0, 401, 422, 372,
	402, 404, 341, 400, 0, 345, 348, 433, 418, 367,
	368, 0, 0, 0, 0, 0, 0, 0, 386, 390,
	407, 380, 0, 0, 0, 0, 0, 0, 0, 0,
	365, 0, 397, 0, 0, 0, 349, 346, 0, 0,
	384, 0, 0, 0, 351, 0, 366, 408, 0, 340,
	109, 411, 417, 381, 207, 421, 379, 378, 424, 146,
	0, 163, 111, 119, 83, 90, 0, 110, 137, 151,
	155, 415, 363, 371, 99, 369, 153, 141, 176, 396,
	142, 152, 123, 168, 147, 175, 183, 184, 165, 182,
	187, 157, 84, 164, 174, 97, 156, 86, 172, 162,
	129, 115, 116, 85, 0, 150, 102, 107, 101, 138,
	169, 170, 100, 190, 91, 181, 88, 92, 180, 136,
	167, 173, 130, 127, 87, 171, 128, 126, 118, 105,
	112, 144, 125, 145, 113, 133, 132, 134, 0, 344,
	0, 161, 178, 191, 94, 359, 166, 185, 186, 0,
	0, 95, 108, 104, 143, 135, 93, 114, 158, 117,
	124, 149, 189, 140, 154, 98, 177, 159, 355, 358,
	353, 354, 392, 393, 429, 430, 431, 409, 350, 0,
	356, 357, 0, 413, 419, 420, 395, 82, 89, 121,
	188, 148, 106, 179, 423, 412, 0, 383, 426, 361,
	375, 434, 376, 377, 405, 347, 391, 139, 373, 0,
	364, 342, 370, 343, 362, 385, 103, 388, 360, 414,
	394, 425, 120, 432, 122, 399, 0, 160, 131, 0,
	0, 387, 416, 389, 410, 382, 406, 352, 398, 427,
	374, 403, 428, 0, 0, 0, 80, 0, 0, 0,
	0, 0, 0, 0, 0, 96, 0, 401, 422, 372,
	402, 404, 341, 400, 0, 345, 348, 433, 418, 367,
	368, 0, 0, 0, 0, 0, 0, 0, 386, 390,
	407, 380, 0, 0, 0, 0, 0, 0, 1128, 0,
	365, 0, 397, 0, 0, 0, 349, 346, 0, 0,
	384, 0, 0, 0, 351, 0, 366, 408, 0, 340,
	109, 411, 417, 381, 207, 421, 379, 378, 424, 146,
	0, 163, 111, 119, 83, 90, 0, 110, 137, 151,
	155, 415, 363, 371, 99, 369, 153, 141, 176, 396,
	142, 152, 123, 168, 147, 175, 183, 184, 165, 182,
	187, 157, 84, 164, 174, 97, 156, 86, 172, 162,
	129, 115, 116, 85, 0, 150, 102, 107, 101, 138,
	169, 170, 100, 190, 91, 181, 88, 92, 180, 136,
	167, 173, 130, 127, 87, 171, 128, 126, 118, 105,
	112, 144, 125, 145, 113, 133, 132, 134, 0, 344,
	0, 161, 178, 191, 94, 359, 166, 185, 186, 0,
	0, 95, 108, 104, 143, 135, 93, 114, 158, 117,
	124, 149, 189, 140, 154, 98, 177, 159, 355, 358,
	353, 354, 392, 393, 429, 430, 431, 409, 350, 0,
	356, 357, 0, 413, 419, 420, 395, 82, 89, 121,
	188, 148, 106, 179, 423, 412, 0, 383, 426, 361,
	375, 434, 376, 377, 405, 347, 391, 139, 373, 0,
	364, 342, 370, 343, 362, 385, 103, 388, 360, 414,
	394, 425, 120, 432, 122, 399, 0, 160, 131, 0,
	0, 387, 416, 389, 410, 382, 406, 352, 398, 427,
	374, 403, 428, 0, 0, 0, 205, 0, 0, 0,
	0, 0, 0, 0, 0, 96, 0, 401, 422, 372,
	402, 404, 341, 400, 0, 345, 348, 433, 418, 367,
	368, 0, 0, 0, 0, 0, 0, 0, 386, 390,
	407, 380, 0, 0, 0, 0, 0, 0, 859, 0,
	365, 0, 397, 0, 0, 0, 349, 346, 0, 0,
	384, 0, 0, 0, 351, 0, 366, 408, 0, 340,
	109, 411, 417, 381, 207, 421, 379, 378, 424, 146,
	0, 163, 111, 119, 83, 90, 0, 110, 137, 151,
	155, 415, 363, 371, 99, 369, 153, 141, 176, 396,
	142, 152, 123, 168, 147, 175, 183, 184, 165, 182,
	187, 157, 84, 164, 174, 97, 156, 86, 172, 162,
	129, 115, 116, 85, 0, 150, 102, 107, 101, 138,
	169, 170, 100, 190, 91, 181, 88, 92, 180, 136,
	167, 173, 130, 127, 87, 171, 128, 126, 118, 105,
	112, 144, 125, 145, 113, 133, 132, 134, 0, 344,
	0, 161, 178, 191, 94, 359, 166, 185, 186, 0,
	0, 95, 108, 104, 143, 135, 93, 114, 158, 117,
	124, 149, 189, 140, 154, 98, 177, 159, 355, 358,
	353, 354, 392, 393, 429, 430, 431, 409, 350, 0,
	356, 357, 0, 413, 419, 420, 395, 82, 89, 121,
	188, 148, 106, 179, 423, 412, 0, 383, 426, 361,
	375, 434, 376, 377, 405, 347, 391, 139, 373, 0,
	364, 342, 370, 343, 362, 385, 103, 388, 360, 414,
	394, 425, 120, 432, 122, 399, 0, 160, 131, 0,
	0, 387, 416, 389, 410, 382, 406, 352, 398, 427,
	374, 403, 428, 0, 0, 0, 262, 0, 0, 0,
	0, 0, 0, 0, 0, 96, 0, 401, 422, 372,
	402, 404, 341, 400, 0, 345, 348, 433, 418, 367,
	368, 0, 0, 0, 0, 0, 0, 0, 386, 390,
	407, 380, 0, 0, 0, 0, 0, 0, 757, 0,
	365, 0, 397, 0, 0, 0, 349, 346, 0, 0,
	384, 0, 0, 0, 351, 0, 366, 408, 0, 340,
	109, 411, 417, 381, 207, 421, 379, 378, 424, 146,
	0, 163, 111, 119, 83, 90, 0, 110, 137, 151,
	155, 415, 363, 371, 99, 369, 153, 141, 176, 396,
	142, 152, 123, 168, 147, 175, 183, 184, 165, 182,
	187, 157, 84, 164, 174, 97, 156, 86, 172, 162,
	129, 115, 116, 85, 0, 150, 102, 107, 101, 138,
	169, 170, 100, 190, 91, 181, 88, 92, 180, 136,
	167, 173, 130, 127, 87, 171, 128, 126, 118, 105,
	112, 144, 125, 145, 113, 133, 132, 134, 0, 344,
	0, 161, 178, 191, 94, 359, 166, 185, 186, 0,
	0, 95, 108, 104, 143, 135, 93, 114, 158, 117,
	124, 149, 189, 140, 154, 98, 177, 159, 355, 358,
	353, 354, 392, 393, 429, 430, 431, 409, 350, 0,
	356, 357, 0, 413, 419, 420, 395, 82, 89, 121,
	188, 148, 106, 179, 423, 412, 0, 383, 426, 361,
	375, 434, 376, 377, 405, 347, 391, 139, 373, 0,
	364, 342, 370, 343, 362, 385, 103, 388, 360, 414,
	394, 425, 120, 432, 122, 399, 0, 160, 131, 0,
	0, 387, 416, 389, 410, 382, 406, 352, 398, 427,
	374, 403, 428, 0, 0, 0, 80, 0, 0, 0,
	0, 0, 0, 0, 0, 96, 0, 401, 422, 372,
	402, 404, 341, 400, 0, 345, 348, 433, 418, 367,
	368, 0, 0, 0, 0, 0, 0, 0, 386, 390,
	407, 380, 0, 0, 0, 0, 0, 0, 0, 0,
	365, 0, 397, 0, 0, 0, 349, 346, 0, 0,
	384, 0, 0, 0, 351, 0, 366, 408, 0, 340,
	109, 411, 417, 381, 207, 421, 379, 378, 424, 146,
	0, 163, 111, 119, 83, 90, 0, 110, 137, 151,
	155, 415, 363, 371, 99, 369, 153, 141, 176, 396,
	142, 152, 123, 168, 147, 175, 183, 184, 165, 182,
	187, 157, 84, 164, 174, 97, 156, 86, 172, 162,
	129, 115, 116, 85, 0, 150, 102, 107, 101, 138,
	169, 170, 100, 190, 91, 181, 88, 92, 180, 136,
	167, 173, 130, 127, 87, 171, 128, 126, 118, 105,
	112, 144, 125, 145, 113, 133, 132, 134, 0, 344,
	0, 161, 178, 191, 94, 359, 166, 185, 186, 0,
	0, 95, 108, 104, 143, 135, 93, 114, 158, 117,
	124, 149, 189, 140, 154, 98, 177, 159, 355, 358,
	353, 354, 392, 393, 429, 430, 431, 409, 350, 0,
	356, 357, 0, 413, 419, 420, 395, 82, 89, 121,
	188, 148, 106, 179, 423, 412, 0, 383, 426, 361,
	375, 434, 376, 377, 405, 347, 391, 139, 373, 0,
	364, 342, 370, 343, 362, 385, 103, 388, 360, 414,
	394, 425, 120, 432, 122, 399, 0, 160, 131, 0,
	0, 387, 416, 389, 410, 382, 406, 352, 398, 427,
	374, 403, 428, 0, 0, 0, 262, 0, 0, 0,
	0, 0, 0, 0, 0, 96, 0, 401, 422, 372,
	402, 404, 341, 400, 0, 345, 348, 433, 418, 367,
	368, 0, 0, 0, 0, 0, 0, 0, 386, 390,
	407, 380, 0, 0, 0, 0, 0, 0, 0, 0,
	365, 0, 397, 0, 0, 0, 349, 346, 0, 0,
	384, 0, 0, 0, 351, 0, 366, 408, 0, 340,
	109, 411, 417, 381, 207, 421, 379, 378, 424, 146,
	0, 163, 111, 119, 83, 90, 0, 110, 137, 151,
	155, 415, 363, 371, 99, 369, 153, 141, 176, 396,
	142, 152, 123, 168, 147, 175, 183, 184, 165, 182,
	187, 157, 84, 164, 174, 97, 156, 86, 172, 162,
	129, 115, 116, 85, 0, 150, 102, 107, 101, 138,
	169, 170, 100, 190, 91, 181, 88, 92, 180, 136,
	167, 173, 130, 127, 87, 171, 128, 126, 118, 105,
	112, 144, 125, 145, 113, 133, 132, 134, 0, 344,
	0, 161, 178, 191, 94, 359, 166, 185, 186, 0,
	0, 95, 108, 104, 143, 135, 93, 114, 158, 117,
	124, 149, 189, 140, 154, 98, 177, 159, 355, 358,
	353, 354, 392, 393, 429, 430, 431, 409, 350, 0,
	356, 357, 0, 413, 419, 420, 395, 82, 89, 121,
	188, 148, 106, 179, 423, 412, 0, 383, 426, 361,
	375, 434, 376, 377, 405, 347, 391, 139, 373, 0,
	364, 342, 370, 343, 362, 385, 103, 388, 360, 414,
	394, 425, 120, 432, 122, 399, 0, 160, 131, 0,
	0, 387, 416, 389, 410, 382, 406, 352, 398, 427,
	374, 403, 428, 0, 0, 0, 80, 0, 0, 0,
	0, 0, 0, 0, 0, 96, 0, 401, 422, 372,
	402, 404, 341, 400, 0, 345, 348, 433, 418, 367,
	368, 0, 0, 0, 0, 0, 0, 0, 386, 390,
	407, 380, 0, 0, 0, 0, 0, 0, 0, 0,
	365, 0, 397, 0, 0, 0, 349, 346, 0, 0,
	384, 0, 0, 0, 351, 0, 366, 408, 0, 340,
	109, 411, 417, 381, 207, 421, 379, 378, 424, 146,
	0, 163, 111, 119, 83, 90, 0, 110, 137, 151,
	155, 415, 363, 371, 99, 369, 153, 141, 176, 396,
	142, 152, 123, 168, 147, 175, 183, 184, 165, 182,
	187, 157, 84, 164, 174, 97, 156, 86, 172, 162,
	129, 115, 116, 85, 0, 150, 102, 107, 101, 138,
	169, 170, 100, 190, 91, 181, 88, 338, 180, 136,
	167, 173, 130, 127, 87, 171, 128, 126, 118, 105,
	112, 144, 125, 145, 113, 133, 132, 134, 0, 344,
	0, 161, 178, 191, 94, 359, 166, 185, 186, 0,
	0, 95, 108, 104, 143, 339, 337, 114, 158, 117,
	124, 149, 189, 140, 154, 98, 177, 159, 355, 358,
	353, 354, 392, 393, 429, 430, 431, 409, 350, 0,
	356, 357, 0, 413, 419, 420, 395, 82, 89, 121,
	188, 148, 106, 179, 423, 412, 0, 383, 426, 361,
	375, 434, 376, 377, 405, 347, 391, 139, 373, 0,
	364, 342, 370, 343, 362, 385, 103, 388, 360, 414,
	394, 425, 120, 432, 122, 399, 0, 160, 131, 0,
	0, 387, 416, 389, 410, 382, 406, 352, 398, 427,
	374, 403, 428, 0, 0, 0, 205, 0, 0, 0,
	0, 0, 0, 0, 0, 96, 0, 401, 422, 372,
	402, 404, 341, 400, 0, 345, 348, 433, 418, 367,
	368, 0, 0, 0, 0, 0, 0, 0, 386, 390,
	407, 380, 0, 0, 0, 0, 0, 0, 0, 0,
	365, 0, 397, 0, 0, 0, 349, 346, 0, 0,
	384, 0, 0, 0, 351, 0, 366, 408, 0, 340,
	109, 411, 417, 381, 207, 421, 379, 378, 424, 146,
	0, 163, 111, 119, 83, 90, 0, 110, 137, 151,
	155, 415, 363, 371, 99, 369, 153, 141, 176, 396,
	142, 152, 123, 168, 147, 175, 183, 184, 165, 182,
	187, 157, 84, 164, 174, 97, 156, 86, 172, 162,
	129, 115, 116, 85, 0, 150, 102, 107, 101, 138,
	169, 170, 100, 190, 91, 181, 88, 92, 180, 136,
	167, 173, 130, 127, 87, 171, 128, 126, 118, 105,
	112, 144, 125, 145, 113, 133, 132, 134, 0, 344,
	0, 161, 178, 191, 94, 359, 166, 185, 186, 0,
	0, 95, 108, 104, 143, 135, 93, 114, 158, 117,
	124, 149, 189, 140, 154, 98, 177, 159, 355, 358,
	353, 354, 392, 393, 429, 430, 431, 409, 350, 0,
	356, 357, 0, 413, 419, 420, 395, 82, 89, 121,
	188, 148, 106, 179, 423, 412, 0, 383, 426, 361,
	375, 434, 376, 377, 405, 347, 391, 139, 373, 0,
	364, 342, 370, 343, 362, 385, 103, 388, 360, 414,
	394, 425, 120, 432, 122, 399, 0, 160, 131, 0,
	0, 387, 416, 389, 410, 382, 406, 352, 398, 427,
	374, 403, 428, 0, 0, 0, 80, 0, 0, 0,
	0, 0, 0, 0, 0, 96, 0, 401, 422, 372,
	402, 404, 341, 400, 0, 345, 348, 433, 418, 367,
	368, 0, 0, 0, 0, 0, 0, 0, 386, 390,
	407, 380, 0, 0, 0, 0, 0, 0, 0, 0,
	365, 0, 397, 0, 0, 0, 349, 346, 0, 0,
	384, 0, 0, 0, 351, 0, 366, 408, 0, 340,
	109, 411, 417, 381, 207, 421, 379, 378, 424, 146,
	0, 163, 111, 119, 83, 90, 0, 110, 137, 151,
	155, 415, 363, 371, 99, 369, 153, 141, 176, 396,
	142, 152, 123, 168, 147, 175, 183, 184, 165, 182,
	187, 157, 84, 164, 623, 97, 156, 86, 172, 162,
	129, 115, 116, 85, 0, 150, 102, 107, 101, 138,
	169, 170, 100, 190, 91, 181, 88, 338, 180, 136,
	167, 173, 130, 127, 87, 171, 128, 126, 118, 105,
	112, 144, 125, 145, 113, 133, 132, 134, 0, 344,
	0, 161, 178, 191, 94, 359, 166, 185, 186, 0,
	0, 95, 108, 104, 143, 339, 337, 114, 158, 117,
	124, 149, 189, 140, 154, 98, 177, 159, 355, 358,
	353, 354, 392, 393, 429, 430, 431, 409, 350, 0,
	356, 357, 0, 413, 419, 420, 395, 82, 89, 121,
	188, 148, 106, 179, 423, 412, 0, 383, 426, 361,
	375, 434, 376, 377, 405, 347, 391, 139, 373, 0,
	364, 342, 370, 343, 362, 385, 103, 388, 360, 414,
	394, 425, 120, 432, 122, 399, 0, 160, 131, 0,
	0, 387, 416, 389, 410, 382, 406, 352, 398, 427,
	374, 403, 428, 0, 0, 0, 80, 0, 0, 0,
	0, 0, 0, 0, 0, 96, 0, 401, 422, 372,
	402, 404, 341, 400, 0, 345, 348, 433, 418, 367,
	368, 0, 0, 0, 0, 0, 0, 0, 386, 390,
	407, 380, 0, 0, 0, 0, 0, 0, 0, 0,
	365, 0, 397, 0, 0, 0, 349, 346, 0, 0,
	384, 0, 0, 0, 351, 0, 366, 408, 0, 340,
	109, 411, 417, 381, 207, 421, 379, 378, 424, 146,
	0, 163, 111, 119, 83, 90, 0, 110, 137, 151,
	155, 415, 363, 371, 99, 369, 153, 141, 176, 396,
	142, 152, 123, 168, 147, 175, 183, 184, 165, 182,
	187, 157, 84, 164, 329, 97, 156, 86, 172, 162,
	129, 115, 116, 85, 0, 150, 102, 107, 101, 138,
	169, 170, 100, 190, 91, 181, 88, 338, 180, 136,
	167, 173, 130, 127, 87, 171, 128, 126, 118, 105,
	112, 144, 125, 145, 113, 133, 132, 134, 0, 344,
	0, 161, 178, 191, 94, 359, 166, 185, 186, 0,
	0, 95, 108, 104, 143, 339, 337, 332, 331, 117,
	124, 149, 189, 140, 154, 98, 177, 159, 355, 358,
	353, 354, 392, 393, 429, 430, 431, 409, 350, 0,
	356, 357, 0, 413, 419, 420, 395, 82, 89, 121,
	188, 148, 106, 179, 139, 0, 0, 793, 0, 264,
	0, 0, 0, 103, 0, 261, 0, 0, 0, 120,
	304, 122, 0, 0, 160, 131, 0, 0, 0, 0,
	295, 296, 0, 0, 0, 0, 0, 0, 0, 0,
	54, 0, 0, 262, 283, 282, 285, 286, 287, 288,
	0, 0, 96, 284, 289, 290, 291, 0, 0, 0,
	259, 276, 0, 303, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 273, 274, 255, 0, 0, 0, 317,
	0, 275, 0, 0, 270, 271, 272, 277, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 109, 0, 0,
	0, 207, 0, 0, 315, 0, 146, 0, 163, 111,
	119, 83, 90, 0, 110, 137, 151, 155, 0, 0,
	0, 99, 0, 153, 141, 176, 0, 142, 152, 123,
	168, 147, 175, 183, 184, 165, 182, 187, 157, 84,
	164, 174, 97, 156, 86, 172, 162, 129, 115, 116,
	85, 0, 150, 102, 107, 101, 138, 169, 170, 100,
	190, 91, 181, 88, 92, 180, 136, 167, 173, 130,
	127, 87, 171, 128, 126, 118, 105, 112, 144, 125,
	145, 113, 133, 132, 134, 0, 0, 0, 161, 178,
	191, 94, 0, 166, 185, 186, 0, 0, 95, 108,
	104, 143, 135, 93, 114, 158, 117, 124, 149, 189,
	140, 154, 98, 177, 159, 305, 316, 311, 312, 309,
	310, 308, 307, 306, 318, 297, 298, 299, 300, 302,
	0, 313, 314, 301, 82, 89, 121, 188, 148, 106,
	179, 139, 0, 0, 0, 0, 264, 0, 0, 0,
	103, 0, 261, 0, 0, 0, 120, 304, 122, 0,
	0, 160, 131, 0, 0, 0, 0, 295, 296, 0,
	0, 0, 0, 0, 0, 0, 0, 54, 0, 496,
	262, 283, 282, 285, 286, 287, 288, 0, 0, 96,
	284, 289, 290, 291, 0, 0, 0, 259, 276, 0,
	303, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	273, 274, 0, 0, 0, 0, 317, 0, 275, 0,
	0, 270, 271, 272, 277, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 109, 0, 0, 0, 207, 0,
	0, 315, 0, 146, 0, 163, 111, 119, 83, 90,
	0, 110, 137, 151, 155, 0, 0, 0, 99, 0,
	153, 141, 176, 0, 142, 152, 123, 168, 147, 175,
	183, 184, 165, 182, 187, 157, 84, 164, 174, 97,
	156, 86, 172, 162, 129, 115, 116, 85, 0, 150,
	102, 107, 101, 138, 169, 170, 100, 190, 91, 181,
	88, 92, 180, 136, 167, 173, 130, 127, 87, 171,
	128, 126, 118, 105, 112, 144, 125, 145, 113, 133,
	132, 134, 0, 0, 0, 161, 178, 191, 94, 0,
	166, 185, 186, 0, 0, 95, 108, 104, 143, 135,
	93, 114, 158, 117, 124, 149, 189, 140, 154, 98,
	177, 159, 305, 316, 311, 312, 309, 310, 308, 307,
	306, 318, 297, 298, 299, 300, 302, 0, 313, 314,
	301, 82, 89, 121, 188, 148, 106, 179, 139, 0,
	0, 0, 0, 264, 0, 0, 0, 103, 0, 261,
	0, 0, 0, 120, 304, 122, 0, 0, 160, 131,
	0, 0, 0, 0, 295, 296, 0, 0, 0, 0,
	0, 0, 0, 0, 54, 0, 0, 262, 283, 282,
	285, 286, 287, 288, 0, 0, 96, 284, 289, 290,
	291, 0, 0, 0, 259, 276, 0, 303, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 273, 274, 255,
	0, 0, 0, 317, 0, 275, 0, 0, 270, 271,
	272, 277, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 109, 0, 0, 0, 207, 0, 0, 315, 0,
	146, 0, 163, 111, 119, 83, 90, 0, 110, 137,
	151, 155, 0, 0, 0, 99, 0, 153, 141, 176,
	0, 142, 152, 123, 168, 147, 175, 183, 184, 165,
	182, 187, 157, 84, 164, 174, 97, 156, 86, 172,
	162, 129, 115, 116, 85, 0, 150, 102, 107, 101,
	138, 169, 170, 100, 190, 91, 181, 88, 92, 180,
	136, 167, 173, 130, 127, 87, 171, 128, 126, 118,
	105, 112, 144, 125, 145, 113, 133, 132, 134, 0,
	0, 0, 161, 178, 191, 94, 0, 166, 185, 186,
	0, 0, 95, 108, 104, 143, 135, 93, 114, 158,
	117, 124, 149, 189, 140, 154, 98, 177, 159, 305,
	316, 311, 312, 309, 310, 308, 307, 306, 318, 297,
	298, 299, 300, 302, 0, 313, 314, 301, 82, 89,
	121, 188, 148, 106, 179, 139, 0, 0, 0, 0,
	264, 0, 0, 0, 103, 0, 261, 0, 0, 0,
	120, 304, 122, 0, 0, 160, 131, 0, 0, 0,
	0, 295, 296, 0, 0, 0, 0, 0, 0, 0,
	0, 54, 0, 0, 262, 283, 808, 285, 286, 287,
	288, 0, 0, 96, 284, 289, 290, 291, 0, 0,
	0, 259, 276, 0, 303, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 273, 274, 255, 0, 0, 0,
	317, 0, 275, 0, 0, 270, 271, 272, 277, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 109, 0,
	0, 0, 207, 0, 0, 315, 0, 146, 0, 163,
	111, 119, 83, 90, 0, 110, 137, 151, 155, 0,
	0, 0, 99, 0, 153, 141, 176, 0, 142, 152,
	123, 168, 147, 175, 183, 184, 165, 182, 187, 157,
	84, 164, 174, 97, 156, 86, 172, 162, 129, 115,
	116, 85, 0, 150, 102, 107, 101, 138, 169, 170,
	100, 190, 91, 181, 88, 92, 180, 136, 167, 173,
	130, 127, 87, 171, 128, 126, 118, 105, 112, 144,
	125, 145, 113, 133, 132, 134, 0, 0, 0, 161,
	178, 191, 94, 0, 166, 185, 186, 0, 0, 95,
	108, 104, 143, 135, 93, 114, 158, 117, 124, 149,
	189, 140, 154, 98, 177, 159, 305, 316, 311, 312,
	309, 310, 308, 307, 306, 318, 297, 298, 299, 300,
	302, 0, 313, 314, 301, 82, 89, 121, 188, 148,
	106, 179, 139, 0, 0, 0, 0, 264, 0, 0,
	0, 103, 0, 261, 0, 0, 0, 120, 304, 122,
	0, 0, 160, 131, 0, 0, 0, 0, 295, 296,
	0, 0, 0, 0, 0, 0, 0, 0, 54, 0,
	0, 262, 283, 805, 285, 286, 287, 288, 0, 0,
	96, 284, 289, 290, 291, 0, 0, 0, 259, 276,
	0, 303, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 273, 274, 255, 0, 0, 0, 317, 0, 275,
	0, 0, 270, 271, 272, 277, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 109, 0, 0, 0, 207,
	0, 0, 315, 0, 146, 0, 163, 111, 119, 83,
	90, 0, 110, 137, 151, 155, 0, 0, 0, 99,
	0, 153, 141, 176, 0, 142, 152, 123, 168, 147,
	175, 183, 184, 165, 182, 187, 157, 84, 164, 174,
	97, 156, 86, 172, 162, 129, 115, 116, 85, 0,
	150, 102, 107, 101, 138, 169, 170, 100, 190, 91,
	181, 88, 92, 180, 136, 167, 173, 130, 127, 87,
	171, 128, 126, 118, 105, 112, 144, 125, 145, 113,
	133, 132, 134, 0, 0, 0, 161, 178, 191, 94,
	0, 166, 185, 186, 0, 0, 95, 108, 104, 143,
	135, 93, 114, 158, 117, 124, 149, 189, 140, 154,
	98, 177, 159, 305, 316, 311, 312, 309, 310, 308,
	307, 306, 318, 297, 298, 299, 300, 302, 24, 313,
	314, 301, 82, 89, 121, 188, 148, 106, 179, 0,
	139, 0, 0, 0, 0, 264, 0, 0, 0, 103,
	0, 261, 0, 0, 0, 120, 304, 122, 0, 0,
	160, 131, 0, 0, 0, 0, 295, 296, 0, 0,
	0, 0, 0, 0, 0, 0, 54, 0, 0, 262,
	283, 282, 285, 286, 287, 288, 0, 0, 96, 284,
	289, 290, 291, 0, 0, 0, 259, 276, 0, 303,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 273,
	274, 0, 0, 0, 0, 317, 0, 275, 0, 0,
	270, 271, 272, 277, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 109, 0, 0, 0, 207, 0, 0,
	315, 0, 146, 0, 163, 111, 119, 83, 90, 0,
	110, 137, 151, 155, 0, 0, 0, 99, 0, 153,
	141, 176, 0, 142, 152, 123, 168, 147, 175, 183,
	184, 165, 182, 187, 157, 84, 164, 174, 97, 156,
	86, 172, 162, 129, 115, 116, 85, 0, 150, 102,
	107, 101, 138, 169, 170, 100, 190, 91, 181, 88,
	92, 180, 136, 167, 173, 130, 127, 87, 171, 128,
	126, 118, 105, 112, 144, 125, 145, 113, 133, 132,
	134, 0, 0, 0, 161, 178, 191, 94, 0, 166,
	185, 186, 0, 0, 95, 108, 104, 143, 135, 93,
	114, 158, 117, 124, 149, 189, 140, 154, 98, 177,
	159, 305, 316, 311, 312, 309, 310, 308, 307, 306,
	318, 297, 298, 299, 300, 302, 0, 313, 314, 301,
	82, 89, 121, 188, 148, 106, 179, 139, 0, 0,
	0, 0, 264, 0, 0, 0, 103, 0, 261, 0,
	0, 0, 120, 304, 122, 0, 0, 160, 131, 0,
	0, 0, 0, 295, 296, 0, 0, 0, 0, 0,
	0, 0, 0, 54, 0, 0, 262, 283, 282, 285,
	286, 287, 288, 0, 0, 96, 284, 289, 290, 291,
	0, 0, 0, 259, 276, 0, 303, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 273, 274, 0, 0,
	0, 0, 317, 0, 275, 0, 0, 270, 271, 272,
	277, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	109, 0, 0, 0, 207, 0, 0, 315, 0, 146,
	0, 163, 111, 119, 83, 90, 0, 110, 137, 151,
	155, 0, 0, 0, 99, 0, 153, 141, 176, 0,
	142, 152, 123, 168, 147, 175, 183, 184, 165, 182,
	187, 157, 84, 164, 174, 97, 156, 86, 172, 162,
	129, 115, 116, 85, 0, 150, 102, 107, 101, 138,
	169, 170, 100, 190, 91, 181, 88, 92, 180, 136,
	167, 173, 130, 127, 87, 171, 128, 126, 118, 105,
	112, 144, 125, 145, 113, 133, 132, 134, 0, 0,
	0, 161, 178, 191, 94, 0, 166, 185, 186, 0,
	0, 95, 108, 104, 143, 135, 93, 114, 158, 117,
	124, 149, 189, 140, 154, 98, 177, 159, 305, 316,
	311, 312, 309, 310, 308, 307, 306, 318, 297, 298,
	299, 300, 302, 0, 313, 314, 301, 82, 89, 121,
	188, 148, 106, 179, 139, 0, 0, 0, 0, 0,
	0, 0, 0, 103, 0, 0, 0, 0, 0, 120,
	304, 122, 0, 0, 160, 131, 0, 0, 0, 0,
	295, 296, 0, 0, 0, 0, 0, 0, 0, 0,
	54, 0, 0, 262, 283, 282, 285, 286, 287, 288,
	0, 0, 96, 284, 289, 290, 291, 0, 0, 0,
	0, 276, 0, 303, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 273, 274, 0, 0, 0, 0, 317,
	0, 275, 0, 0, 270, 271, 272, 277, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 109, 0, 0,
	0, 207, 0, 0, 315, 0, 146, 0, 163, 111,
	119, 83, 90, 0, 110, 137, 151, 155, 0, 0,
	0, 99, 0, 153, 141, 176, 1427, 142, 152, 123,
	168, 147, 175, 183, 184, 165, 182, 187, 157, 84,
	164, 174, 97, 156, 86, 172, 162, 129, 115, 116,
	85, 0, 150, 102, 107, 101, 138, 169, 170, 100,
	190, 91, 181, 88, 92, 180, 136, 167, 173, 130,
	127, 87, 171, 128, 126, 118, 105, 112, 144, 125,
	145, 113, 133, 132, 134, 0, 0, 0, 161, 178,
	191, 94, 0, 166, 185, 186, 0, 0, 95, 108,
	104, 143, 135, 93, 114, 158, 117, 124, 149, 189,
	140, 154, 98, 177, 159, 305, 316, 311, 312, 309,
	310, 308, 307, 306, 318, 297, 298, 299, 300, 302,
	0, 313, 314, 301, 82, 89, 121, 188, 148, 106,
	179, 139, 0, 0, 0, 0, 0, 0, 0, 0,
	103, 0, 0, 0, 0, 0, 120, 304, 122, 0,
	0, 160, 131, 0, 0, 0, 0, 295, 296, 0,
	0, 0, 0, 0, 0, 0, 0, 54, 0, 496,
	262, 283, 282, 285, 286, 287, 288, 0, 0, 96,
	284, 289, 290, 291, 0, 0, 0, 0, 276, 0,
	303, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	273, 274, 0, 0, 0, 0, 317, 0, 275, 0,
	0, 270, 271, 272, 277, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 109, 0, 0, 0, 207, 0,
	0, 315, 0, 146, 0, 163, 111, 119, 83, 90,
	0, 110, 137, 151, 155, 0, 0, 0, 99, 0,
	153, 141, 176, 0, 142, 152, 123, 168, 147, 175,
	183, 184, 165, 182, 187, 157, 84, 164, 174, 97,
	156, 86, 172, 162, 129, 115, 116, 85, 0, 150,
	102, 107, 101, 138, 169, 170, 100, 190, 91, 181,
	88, 92, 180, 136, 167, 173, 130, 127, 87, 171,
	128, 126, 118, 105, 112, 144, 125, 145, 113, 133,
	132, 134, 0, 0, 0, 161, 178, 191, 94, 0,
	166, 185, 186, 0, 0, 95, 108, 104, 143, 135,
	93, 114, 158, 117, 124, 149, 189, 140, 154, 98,
	177, 159, 305, 316, 311, 312, 309, 310, 308, 307,
	306, 318, 297, 298, 299, 300, 302, 0, 313, 314,
	301, 82, 89, 121, 188, 148, 106, 179, 139, 0,
	0, 0, 0, 0, 0, 0, 0, 103, 0, 0,
	0, 0, 0, 120, 304, 122, 0, 0, 160, 131,
	0, 0, 0, 0, 295, 296, 0, 0, 0, 0,
	0, 0, 0, 0, 54, 0, 0, 262, 283, 282,
	285, 286, 287, 288, 0, 0, 96, 284, 289, 290,
	291, 0, 0, 0, 0, 276, 0, 303, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 273, 274, 0,
	0, 0, 0, 317, 0, 275, 0, 0, 270, 271,
	272, 277, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 109, 0, 0, 0, 207, 0, 0, 315, 0,
	146, 0, 163, 111, 119, 83, 90, 0, 110, 137,
	151, 155, 0, 0, 0, 99, 0, 153, 141, 176,
	0, 142, 152, 123, 168, 147, 175, 183, 184, 165,
	182, 187, 157, 84, 164, 174, 97, 156, 86, 172,
	162, 129, 115, 116, 85, 0, 150, 102, 107, 101,
	138, 169, 170, 100, 190, 91, 181, 88, 92, 180,
	136, 167, 173, 130, 127, 87, 171, 128, 126, 118,
	105, 112, 144, 125, 145, 113, 133, 132, 134, 0,
	0, 0, 161, 178, 191, 94, 0, 166, 185, 186,
	0, 0, 95, 108, 104, 143, 135, 93, 114, 158,
	117, 124, 149, 189, 140, 154, 98, 177, 159, 305,
	316, 311, 312, 309, 310, 308, 307, 306, 318, 297,
	298, 299, 300, 302, 0, 313, 314, 301, 82, 89,
	121, 188, 148, 106, 179, 139, 0, 0, 0, 0,
	0, 0, 0, 0, 103, 0, 0, 0, 0, 0,
	120, 0, 122, 0, 0, 160, 131, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 80, 0, 0, 0, 0, 0,
	0, 0, 0, 96, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	530, 529, 539, 540, 532, 533, 534, 535, 536, 537,
	538, 531, 0, 0, 541, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 109, 0,
	0, 0, 207, 0, 0, 0, 0, 146, 0, 163,
	111, 119, 83, 90, 0, 110, 137, 151, 155, 0,
	0, 0, 99, 0, 153, 141, 176, 0, 142, 152,
	123, 168, 147, 175, 183, 184, 165, 182, 187, 157,
	84, 164, 174, 97, 156, 86, 172, 162, 129, 115,
	116, 85, 0, 150, 102, 107, 101, 138, 169, 170,
	100, 190, 91, 181, 88, 92, 180, 136, 167, 173,
	130, 127, 87, 171, 128, 126, 118, 105, 112, 144,
	125, 145, 113, 133, 132, 134, 0, 0, 0, 161,
	178, 191, 94, 0, 166, 185, 186, 0, 0, 95,
	108, 104, 143, 135, 93, 114, 158, 117, 124, 149,
	189, 140, 154, 98, 177, 159, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 82, 89, 121, 188, 148,
	106, 179, 139, 0, 0, 0, 518, 0, 0, 0,
	0, 103, 0, 0, 0, 0, 0, 120, 0, 122,
	0, 0, 160, 131, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 80, 0, 520, 0, 0, 0, 0, 0, 0,
	96, 0, 0, 0, 0, 0, 515, 514, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 516, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 109, 0, 0, 0, 207,
	0, 0, 0, 0, 146, 0, 163, 111, 119, 83,
	90, 0, 110, 137, 151, 155, 0, 0, 0, 99,
	0, 153, 141, 176, 0, 142, 152, 123, 168, 147,
	175, 183, 184, 165, 182, 187, 157, 84, 164, 174,
	97, 156, 86, 172, 162, 129, 115, 116, 85, 0,
	150, 102, 107, 101, 138, 169, 170, 100, 190, 91,
	181, 88, 92, 180, 136, 167, 173, 130, 127, 87,
	171, 128, 126, 118, 105, 112, 144, 125, 145, 113,
	133, 132, 134, 0, 0, 0, 161, 178, 191, 94,
	0, 166, 185, 186, 0, 0, 95, 108, 104, 143,
	135, 93, 114, 158, 117, 124, 149, 189, 140, 154,
	98, 177, 159, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	139, 0, 82, 89, 121, 188, 148, 106, 179, 103,
	0, 0, 0, 0, 0, 120, 0, 122, 0, 0,
	160, 131, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 80,
	0, 0, 0, 0, 0, 0, 0, 0, 96, 0,
	0, 0, 0, 0, 74, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 109, 76, 77, 0, 73, 0, 0,
	0, 78, 146, 0, 163, 111, 119, 83, 90, 0,
	110, 137, 151, 155, 0, 0, 0, 99, 0, 153,
	141, 176, 0, 142, 152, 123, 168, 147, 175, 183,
	184, 165, 182, 187, 157, 84, 164, 174, 97, 156,
	86, 172, 162, 129, 115, 116, 85, 0, 150, 102,
	107, 101, 138, 169, 170, 100, 190, 91, 181, 88,
	92, 180, 136, 167, 173, 130, 127, 87, 171, 128,
	126, 118, 105, 112, 144, 125, 145, 113, 133, 132,
	134, 0, 0, 0, 161, 178, 191, 94, 0, 166,
	185, 186, 0, 0, 95, 108, 104, 143, 135, 93,
	114, 158, 117, 124, 149, 189, 140, 154, 98, 177,
	159, 0, 75, 0, 0, 0, 24, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 139, 0,
	82, 89, 121, 188, 148, 106, 179, 103, 0, 0,
	0, 0, 0, 120, 0, 122, 0, 0, 160, 131,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 54, 0, 0, 80, 0, 0,
	0, 0, 0, 0, 0, 0, 96, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 109, 0, 0, 0, 207, 0, 0, 0, 0,
	146, 0, 163, 111, 119, 83, 90, 0, 110, 137,
	151, 155, 0, 0, 0, 99, 0, 153, 141, 176,
	0, 142, 152, 123, 168, 147, 175, 183, 184, 165,
	182, 187, 157, 84, 164, 174, 97, 156, 86, 172,
	162, 129, 115, 116, 85, 0, 150, 102, 107, 101,
	138, 169, 170, 100, 190, 91, 181, 88, 92, 180,
	136, 167, 173, 130, 127, 87, 171, 128, 126, 118,
	105, 112, 144, 125, 145, 113, 133, 132, 134, 0,
	0, 0, 161, 178, 191, 94, 0, 166, 185, 186,
	0, 0, 95, 108, 104, 143, 135, 93, 114, 158,
	117, 124, 149, 189, 140, 154, 98, 177, 159, 0,
	0, 0, 0, 0, 24, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 139, 0, 82, 89,
	121, 188, 148, 106, 179, 103, 0, 0, 0, 0,
	0, 120, 0, 122, 0, 0, 160, 131, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 54, 0, 0, 205, 0, 0, 0, 0,
	0, 0, 0, 0, 96, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 109,
	0, 0, 0, 207, 0, 0, 0, 0, 146, 0,
	163, 111, 119, 83, 90, 0, 110, 137, 151, 155,
	0, 0, 0, 99, 0, 153, 141, 176, 0, 142,
	152, 123, 168, 147, 175, 183, 184, 165, 182, 187,
	157, 84, 164, 174, 97, 156, 86, 172, 162, 129,
	115, 116, 85, 0, 150, 102, 107, 101, 138, 169,
	170, 100, 190, 91, 181, 88, 92, 180, 136, 167,
	173, 130, 127, 87, 171, 128, 126, 118, 105, 112,
	144, 125, 145, 113, 133, 132, 134, 0, 0, 0,
	161, 178, 191, 94, 0, 166, 185, 186, 0, 0,
	95, 108, 104, 143, 135, 93, 114, 158, 117, 124,
	149, 189, 140, 154, 98, 177, 159, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 82, 89, 121, 188,
	148, 106, 179, 139, 0, 0, 0, 849, 0, 0,
	0, 0, 103, 0, 0, 0, 0, 0, 120, 0,
	122, 0, 0, 160, 131, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 205, 0, 851, 0, 0, 0, 0, 0,
	0, 96, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 109, 0, 0, 0,
	207, 0, 0, 0, 0, 146, 0, 163, 111, 119,
	83, 90, 0, 110, 137, 151, 155, 0, 0, 0,
	99, 0, 153, 141, 176, 0, 847, 152, 123, 168,
	147, 175, 183, 184, 165, 182, 187, 157, 84, 164,
	174, 97, 156, 86, 172, 162, 129, 115, 116, 85,
	0, 150, 102, 107, 101, 138, 169, 170, 100, 190,
	91, 181, 88, 92, 180, 136, 167, 173, 130, 127,
	87, 171, 128, 126, 118, 105, 112, 144, 125, 145,
	113, 133, 132, 134, 0, 0, 0, 161, 178, 191,
	94, 0, 166, 185, 186, 0, 0, 95, 108, 104,
	143, 135, 93, 114, 158, 117, 124, 149, 189, 140,
	154, 98, 177, 159, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 139, 0, 82, 89, 121, 188, 148, 106, 179,
	103, 0, 0, 0, 0, 0, 120, 0, 122, 0,
	0, 160, 131, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	80, 0, 0, 744, 0, 0, 745, 0, 0, 96,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 109, 0, 0, 0, 207, 0,
	0, 0, 0, 146, 0, 163, 111, 119, 83, 90,
	0, 110, 137, 151, 155, 0, 0, 0, 99, 0,
	153, 141, 176, 0, 142, 152, 123, 168, 147, 175,
	183, 184, 165, 182, 187, 157, 84, 164, 174, 97,
	156, 86, 172, 162, 129, 115, 116, 85, 0, 150,
	102, 107, 101, 138, 169, 170, 100, 190, 91, 181,
	88, 92, 180, 136, 167, 173, 130, 127, 87, 171,
	128, 126, 118, 105, 112, 144, 125, 145, 113, 133,
	132, 134, 0, 0, 0, 161, 178, 191, 94, 0,
	166, 185, 186, 0, 0, 95, 108, 104, 143, 135,
	93, 114, 158, 117, 124, 149, 189, 140, 154, 98,
	177, 159, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 139,
	0, 82, 89, 121, 188, 148, 106, 179, 103, 0,
	632, 0, 0, 0, 120, 0, 122, 0, 0, 160,
	131, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 80, 0,
	631, 0, 0, 0, 0, 0, 0, 96, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 109, 0, 0, 0, 207, 0, 0, 0,
	0, 146, 0, 163, 111, 119, 83, 90, 0, 110,
	137, 151, 155, 0, 0, 0, 99, 0, 153, 141,
	176, 0, 142, 152, 123, 168, 147, 175, 183, 184,
	165, 182, 187, 157, 84, 164, 174, 97, 156, 86,
	172, 162, 129, 115, 116, 85, 0, 150, 102, 107,
	101, 138, 169, 170, 100, 190, 91, 181, 88, 92,
	180, 136, 167, 173, 130, 127, 87, 171, 128, 126,
	118, 105, 112, 144, 125, 145, 113, 133, 132, 134,
	0, 0, 0, 161, 178, 191, 94, 0, 166, 185,
	186, 0, 0, 95, 108, 104, 143, 135, 93, 114,
	158, 117, 124, 149, 189, 140, 154, 98, 177, 159,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 139, 0, 82,
	89, 121, 188, 148, 106, 179, 103, 0, 0, 0,
	0, 0, 120, 0, 122, 0, 0, 160, 131, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 54, 0, 0, 205, 0, 0, 0,
	0, 0, 0, 0, 0, 96, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	109, 0, 0, 0, 207, 0, 0, 0, 0, 146,
	0, 163, 111, 119, 83, 90, 0, 110, 137, 151,
	155, 0, 0, 0, 99, 0, 153, 141, 176, 0,
	142, 152, 123, 168, 147, 175, 183, 184, 165, 182,
	187, 157, 84, 164, 174, 97, 156, 86, 172, 162,
	129, 115, 116, 85, 0, 150, 102, 107, 101, 138,
	169, 170, 100, 190, 91, 181, 88, 92, 180, 136,
	167, 173, 130, 127, 87, 171, 128, 126, 118, 105,
	112, 144, 125, 145, 113, 133, 132, 134, 0, 0,
	0, 161, 178, 191, 94, 0, 166, 185, 186, 0,
	0, 95, 108, 104, 143, 135, 93, 114, 158, 117,
	124, 149, 189, 140, 154, 98, 177, 159, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 139, 0, 82, 89, 121,
	188, 148, 106, 179, 103, 0, 0, 0, 0, 0,
	120, 0, 122, 0, 0, 160, 131, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 205, 0, 851, 0, 0, 0,
	0, 0, 0, 96, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 109, 0,
	0, 0, 207, 0, 0, 0, 0, 146, 0, 163,
	111, 119, 83, 90, 0, 110, 137, 151, 155, 0,
	0, 0, 99, 0, 153, 141, 176, 0, 142, 152,
	123, 168, 147, 175, 183, 184, 165, 182, 187, 157,
	84, 164, 174, 97, 156, 86, 172, 162, 129, 115,
	116, 85, 0, 150, 102, 107, 101, 138, 169, 170,
	100, 190, 91, 181, 88, 92, 180, 136, 167, 173,
	130, 127, 87, 171, 128, 126, 118, 105, 112, 144,
	125, 145, 113, 133, 132, 134, 0, 0, 0, 161,
	178, 191, 94, 0, 166, 185, 186, 0, 0, 95,
	108, 104, 143, 135, 93, 114, 158, 117, 124, 149,
	189, 140, 154, 98, 177, 159, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 139, 0, 82, 89, 121, 188, 148,
	106, 179, 103, 0, 0, 0, 0, 0, 120, 0,
	122, 0, 0, 160, 131, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 80, 0, 520, 0, 0, 0, 0, 0,
	0, 96, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 109, 0, 0, 0,
	207, 0, 0, 0, 0, 146, 0, 163, 111, 119,
	83, 90, 0, 110, 137, 151, 155, 0, 0, 0,
	99, 0, 153, 141, 176, 0, 142, 152, 123, 168,
	147, 175, 183, 184, 165, 182, 187, 157, 84, 164,
	174, 97, 156, 86, 172, 162, 129, 115, 116, 85,
	0, 150, 102, 107, 101, 138, 169, 170, 100, 190,
	91, 181, 88, 92, 180, 136, 167, 173, 130, 127,
	87, 171, 128, 126, 118, 105, 112, 144, 125, 145,
	113, 133, 132, 134, 0, 0, 0, 161, 178, 191,
	94, 0, 166, 185, 186, 0, 0, 95, 108, 104,
	143, 135, 93, 114, 158, 117, 124, 149, 189, 140,
	154, 98, 177, 159, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 139, 82, 89, 121, 188, 148, 106, 179,
	602, 103, 0, 0, 0, 0, 0, 120, 0, 122,
	0, 0, 160, 131, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 205, 0, 0, 0, 0, 0, 0, 0, 0,
	96, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 109, 0, 0, 0, 207,
	0, 0, 0, 0, 146, 0, 163, 111, 119, 83,
	90, 0, 110, 137, 151, 155, 0, 0, 0, 99,
	0, 153, 141, 176, 0, 142, 152, 123, 168, 147,
	175, 183, 184, 165, 182, 187, 157, 84, 164, 174,
	97, 156, 86, 172, 162, 129, 115, 116, 85, 0,
	150, 102, 107, 101, 138, 169, 170, 100, 190, 91,
	181, 88, 92, 180, 136, 167, 173, 130, 127, 87,
	171, 128, 126, 118, 105, 112, 144, 125, 145, 113,
	133, 132, 134, 0, 0, 0, 161, 178, 191, 94,
	0, 166, 185, 186, 0, 0, 95, 108, 104, 143,
	135, 93, 114, 158, 117, 124, 149, 189, 140, 154,
	98, 177, 159, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 321, 0, 0, 0, 0, 0, 0,
	139, 0, 82, 89, 121, 188, 148, 106, 179, 103,
	0, 0, 0, 0, 0, 120, 0, 122, 0, 0,
	160, 131, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 205,
	0, 0, 0, 0, 0, 0, 0, 0, 96, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 109, 0, 0, 0, 207, 0, 0,
	0, 0, 146, 0, 163, 111, 119, 83, 90, 0,
	110, 137, 151, 155, 0, 0, 0, 99, 0, 153,
	141, 176, 0, 142, 152, 123, 168, 147, 175, 183,
	184, 165, 182, 187, 157, 84, 164, 174, 97, 156,
	86, 172, 162, 129, 115, 116, 85, 0, 150, 102,
	107, 101, 138, 169, 170, 100, 190, 91, 181, 88,
	92, 180, 136, 167, 173, 130, 127, 87, 171, 128,
	126, 118, 105, 112, 144, 125, 145, 113, 133, 132,
	134, 0, 0, 0, 161, 178, 191, 94, 0, 166,
	185, 186, 0, 0, 95, 108, 104, 143, 135, 93,
	114, 158, 117, 124, 149, 189, 140, 154, 98, 177,
	159, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 139, 0,
	82, 89, 121, 188, 148, 106, 179, 103, 0, 0,
	0, 0, 0, 120, 0, 122, 0, 0, 160, 131,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 205, 0, 0,
	0, 0, 0, 0, 0, 0, 96, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 109, 0, 202, 0, 207, 0, 0, 0, 0,
	146, 0, 163, 111, 119, 83, 90, 0, 110, 137,
	151, 155, 0, 0, 0, 99, 0, 153, 141, 176,
	0, 142, 152, 123, 168, 147, 175, 183, 184, 165,
	182, 187, 157, 84, 164, 174, 97, 156, 86, 172,
	162, 129, 115, 116, 85, 0, 150, 102, 107, 101,
	138, 169, 170, 100, 190, 91, 181, 88, 92, 180,
	136, 167, 173, 130, 127, 87, 171, 128, 126, 118,
	105, 112, 144, 125, 145, 113, 133, 132, 134, 0,
	0, 0, 161, 178, 191, 94, 0, 166, 185, 186,
	0, 0, 95, 108, 104, 143, 135, 93, 114, 158,
	117, 124, 149, 189, 140, 154, 98, 177, 159, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 139, 0, 82, 89,
	121, 188, 148, 106, 179, 103, 0, 0, 0, 0,
	0, 120, 0, 122, 0, 0, 160, 131, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 80, 0, 0, 0, 0,
	0, 0, 0, 0, 96, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 109,
	0, 0, 0, 207, 0, 0, 0, 0, 146, 0,
	163, 111, 119, 83, 90, 0, 110, 137, 151, 155,
	0, 0, 0, 99, 0, 153, 141, 176, 0, 142,
	152, 123, 168, 147, 175, 183, 184, 165, 182, 187,
	157, 84, 164, 174, 97, 156, 86, 172, 162, 129,
	115, 116, 85, 0, 150, 102, 107, 101, 138, 169,
	170, 100, 190, 91, 181, 88, 92, 180, 136, 167,
	173, 130, 127, 87, 171, 128, 126, 118, 105, 112,
	144, 125, 145, 113, 133, 132, 134, 0, 0, 0,
	161, 178, 191, 94, 0, 166, 185, 186, 0, 0,
	95, 108, 104, 143, 135, 93, 114, 158, 117, 124,
	149, 189, 140, 154, 98, 177, 159, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 139, 0, 82, 89, 121, 188,
	148, 106, 179, 103, 0, 0, 0, 0, 0, 120,
	0, 122, 0, 0, 160, 131, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 205, 0, 0, 0, 0, 0, 0,
	0, 0, 96, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 109, 0, 0,
	0, 207, 0, 0, 0, 0, 146, 0, 163, 111,
	119, 83, 90, 0, 110, 137, 151, 155, 0, 0,
	0, 99, 0, 153, 141, 176, 0, 142, 152, 123,
	168, 147, 175, 183, 184, 165, 182, 187, 157, 84,
	164, 174, 97, 156, 86, 172, 162, 129, 115, 116,
	85, 0, 150, 102, 107, 101, 138, 169, 170, 100,
	190, 91, 181, 88, 92, 180, 136, 167, 173, 130,
	127, 87, 171, 128, 126, 118, 105, 112, 144, 125,
	145, 113, 133, 132, 134, 0, 0, 0, 161, 178,
	191, 94, 0, 166, 185, 186, 0, 0, 95, 108,
	104, 143, 135, 93, 114, 158, 117, 124, 149, 189,
	140, 154, 98, 177, 159, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 139, 0, 82, 89, 121, 188, 148, 106,
	179, 103, 0, 0, 0, 0, 0, 120, 0, 122,
	0, 0, 160, 131, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 262, 0, 0, 0, 0, 0, 0, 0, 0,
	96, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 109, 0, 0, 0, 207,
	0, 0, 0, 0, 146, 0, 163, 111, 119, 83,
	90, 0, 110, 137, 151, 155, 0, 0, 0, 99,
	0, 153, 141, 176, 0, 142, 152, 123, 168, 147,
	175, 183, 184, 165, 182, 187, 157, 84, 164, 174,
	97, 156, 86, 172, 162, 129, 115, 116, 85, 0,
	150, 102, 107, 101, 138, 169, 170, 100, 190, 91,
	181, 88, 92, 180, 136, 167, 173, 130, 127, 87,
	171, 128, 126, 118, 105, 112, 144, 125, 145, 113,
	133, 132, 134, 0, 0, 0, 161, 178, 191, 94,
	0, 166, 185, 186, 0, 0, 95, 108, 104, 143,
	135, 93, 114, 158, 117, 124, 149, 189, 140, 154,
	98, 177, 159, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 82, 89, 121, 188, 148, 106, 179,
}
var yyPact = [...]int{

	1455, -1000, -184, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 958, 981, -1000, -1000, -1000, -1000, -1000, -1000,
	225, 8842, 35, 108, 26, 11470, 105, 1748, 11946, -1000,
	4, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -62, -64,
	-1000, 668, -1000, -1000, -1000, -1000, -1000, 948, 954, 765,
	941, 893, -1000, 6380, 64, 64, 11232, 5639, -1000, -1000,
	250, 11946, 100, 11946, -136, 62, 62, 62, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 103, 11946, 229, -1000, 11946, 61, 594, 61,
	61, 61, 11946, -1000, 149, -1000, -1000, -1000, 11946, 586,
	909, 3299, 97, 3299, -1000, 3299, 3299, -1000, 3299, 13,
	3299, -65, 969, 10, -16, -1000, 3299, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	527, 887, 7369, 7369, 958, -1000, 668, -1000, -1000, -1000,
	908, -1000, -1000, 363, 979, -1000, 8604, 148, -1000, 7369,
	1920, 687, -1000, -1000, 687, -1000, -1000, 130, -1000, -1000,
	8110, 8110, 8110, 8110, 8110, 8110, 8110, 8110, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 687, -1000, 7122, 687, 687, 687, 687, 687,
	687, 687, 687, 7369, 687, 687, 687, 687, 687, 687,
	687, 687, 687, 687, 687, 687, 687, 687, 687, 10994,
	10279, 11946, 666, 656, -1000, -1000, 147, 682, 5379, -112,
	-1000, -1000, -1000, 260, 10041, -1000, -1000, -1000, 884, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 589, 11946, -1000, 1955, -1000,
	581, 3299, 79, 566, 309, 560, 11946, 11946, 3299, 19,
	51, 48, 11946, 685, 74, 11946, 929, 774, 11946, 553,
	538, -1000, 5119, -1000, 3299, 3299, -1000, -1000, -1000, 3299,
	3299, 3299, 11946, 3299, 3299, -1000, -1000, -1000, -1000, 3299,
	3299, -1000, 978, 306, -1000, -1000, -1000, -1000, 7369, 197,
	-1000, 772, -1000, -1000, -1000, -1000, -1000, -1000, 986, 171,
	388, 144, 684, -1000, 482, 948, 527, 893, 9803, 784,
	-1000, -1000, 11946, -1000, 7369, 7369, 428, -1000, 10755, -1000,
	-1000, 4079, 200, 8110, 400, 194, 8110, 8110, 8110, 8110,
	8110, 8110, 8110, 8110, 8110, 8110, 8110, 8110, 8110, 8110,
	8110, 471, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	521, -1000, 668, 798, 798, 155, 155, 155, 155, 155,
	155, 155, 8357, 5886, 527, 571, 238, 7122, 6380, 6380,
	7369, 7369, 6874, 6627, 6380, 942, 267, 238, 12184, -1000,
	-1000, 7863, -1000, -1000, -1000, -1000, -1000, 527, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 11708, 11708, 6380, 6380, 6380,
	6380, 30, 11946, -1000, 694, 796, -1000, -1000, -1000, 938,
	9318, 9565, 30, 665, 10279, 11946, -1000, -1000, 10279, 11946,
	3819, 4859, 682, -112, 674, -1000, -90, -96, 2479, 142,
	-1000, -1000, -1000, -1000, 3039, 168, 572, 351, -52, -1000,
	-1000, -1000, 696, -1000, 696, 696, 696, 696, -22, -22,
	-22, -22, -1000, -1000, -1000, -1000, -1000, 715, 711, -1000,
	696, 696, 696, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 709, 709, 709, 702, 702, 714, -1000, 11946, 3299,
	927, 3299, -1000, 1441, -1000, 11946, 11946, 11946, 11946, 11946,
	115, 11946, 11946, 681, -1000, 11946, 3299, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 11946, 324, 11946, 11946, 238, -1000, 459, 11946,
	-1000, 834, 7369, 7369, 4599, 7369, -1000, -1000, -1000, 887,
	-1000, 942, 953, -1000, 853, 850, 6380, -1000, -1000, 200,
	308, -1000, -1000, 446, -1000, -1000, -1000, -1000, 143, 687,
	-1000, 1659, -1000, -1000, -1000, -1000, 400, 8110, 8110, 8110,
	691, 1659, 1613, 713, 2197, 155, 332, 332, 164, 164,
	164, 164, 164, 449, 449, -1000, -1000, -1000, 527, -1000,
	-1000, -1000, 527, 6380, 680, -1000, -1000, 7369, -1000, 527,
	549, 549, 368, 395, 313, 977, 549, 237, 971, 549,
	549, 6380, 275, -1000, 7369, 527, -1000, 139, -1000, 1161,
	678, 676, 549, 527, 549, 549, 698, 687, -1000, 12184,
	10279, 10279, 10279, 10279, 10279, -1000, 809, 807, -1000, 822,
	806, 833, 11946, -1000, 551, 9318, 137, 687, -1000, 10517,
	-1000, -1000, 968, 10279, 640, -1000, 640, -1000, 138, -1000,
	-1000, 674, -112, -116, -1000, -1000, -1000, -1000, 238, -1000,
	480, 662, 2779, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	706, 483, -1000, 919, 179, 185, 481, 918, -1000, -1000,
	-1000, 911, -1000, 334, -55, -1000, -1000, 416, -22, -22,
	-1000, -1000, 142, 882, 142, 142, 142, 458, 458, -1000,
	-1000, -1000, -1000, 398, -1000, -1000, -1000, 390, -1000, 771,
	11708, 3299, -1000, -1000, -1000, -1000, 201, 201, 170, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	29, 692, -1000, -1000, -1000, -1000, 8, 18, 69, -1000,
	3299, -1000, 306, -1000, 453, 7369, -1000, -1000, -1000, -1000,
	837, 238, 238, 134, -1000, -1000, 11946, -1000, -1000, -1000,
	-1000, 653, -1000, -1000, -1000, 3559, 6380, -1000, 691, 1659,
	1338, -1000, 8110, 8110, -1000, -1000, 549, 6380, 238, -1000,
	-1000, -1000, 239, 471, 239, 8110, 8110, -1000, 8110, 8110,
	-1000, -148, 658, 262, -1000, 7369, 410, -1000, 4599, -1000,
	8110, 8110, -1000, -1000, -1000, -1000, 770, 12184, 687, -1000,
	9080, 11708, 650, -1000, 259, 796, 721, 748, 588, -1000,
	-1000, -1000, -1000, 805, -1000, 786, -1000, -1000, -1000, -1000,
	-1000, 99, 91, 81, 11708, -1000, 958, 7369, 640, -1000,
	-1000, 146, -1000, -1000, -92, -122, -1000, -1000, -1000, 3039,
	-1000, 3039, 11708, 45, -1000, 481, 481, -1000, -1000, -1000,
	704, 745, 8110, -1000, -1000, -1000, 552, 142, 142, -1000,
	208, -1000, -1000, -1000, 545, -1000, 543, 632, 535, 11946,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 11946, -1000, -1000, -1000,
	-1000, -1000, 11708, -155, 466, 11708, 11708, 11708, 11946, -1000,
	324, -1000, 238, -1000, 4339, -1000, 968, 10279, -1000, -1000,
	527, -1000, 8110, 1659, 1659, -1000, -1000, 527, 696, 696,
	-1000, 696, 702, -1000, 696, -5, 696, -6, 527, 527,
	2149, 2092, 1936, 1629, 687, -143, -1000, 238, 7369, -1000,
	1540, 1429, -1000, 921, 602, 605, -1000, -1000, 6133, 527,
	533, 128, 531, -1000, 958, 12184, 7369, -1000, -1000, 7369,
	700, -1000, 7369, -1000, -1000, -1000, 687, 687, 687, 531,
	948, 238, -1000, -1000, -1000, -1000, 2779, -1000, 526, -1000,
	696, -1000, -1000, -1000, 11708, -47, 984, 1659, -1000, -1000,
	-1000, -1000, -1000, -22, 452, -22, 385, -1000, 370, 3299,
	-1000, -1000, -1000, -1000, 923, -1000, 4339, -1000, -1000, 690,
	695, -1000, -1000, -1000, 966, 623, -1000, 1659, -1000, -1000,
	107, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 8110,
	8110, 8110, 8110, 8110, 527, 445, 238, 8110, 8110, 917,
	-1000, 687, -1000, -1000, 660, 11708, 11708, -1000, 11708, 948,
	-1000, 238, 238, 11708, 238, 11708, 11708, 11708, 2201, -1000,
	133, 11708, -1000, 520, -1000, 183, -1000, -151, 142, -1000,
	142, 546, 536, -1000, 687, 610, -1000, 246, 11708, 11946,
	961, 950, -1000, -1000, 1161, 1161, 1161, 1161, 32, -1000,
	-1000, 1161, 1161, 983, -1000, 687, -1000, 668, 118, -1000,
	-1000, -1000, 517, 514, 514, 514, 137, 133, -1000, 430,
	236, 434, -1000, 42, 11708, 337, 913, -1000, 910, -1000,
	-1000, -1000, -1000, -1000, 28, 4339, 3039, 511, -1000, -1000,
	7369, 7369, -1000, -1000, -1000, -1000, 527, 60, -175, -1000,
	-1000, 12184, 605, 527, 11708, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 356, -1000, -1000, 11946, -1000, -1000, 429, -1000,
	-1000, 505, -1000, 11708, -1000, -1000, 692, 238, 604, -1000,
	828, -153, -178, 601, -1000, -1000, -1000, 689, -1000, -1000,
	28, 845, -155, -1000, 824, -1000, 11708, -1000, 25, -1000,
	-160, 488, 23, -176, 731, 687, -180, 730, -1000, 975,
	7616, -1000, -1000, 982, 163, 163, 1161, 527, -1000, -1000,
	-1000, 49, 378, -1000, -1000, -1000, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 1201, 25, 508, 1200, 1199, 1198, 1196, 1195, 1194,
	1191, 1190, 1188, 1187, 1186, 1185, 1184, 1181, 1179, 1178,
	1177, 1176, 1175, 1174, 1172, 1171, 117, 1166, 1164, 1161,
	71, 1159, 76, 1157, 1156, 49, 206, 54, 44, 314,
	1154, 27, 89, 84, 1153, 40, 1152, 1151, 78, 1150,
	1149, 55, 1148, 1147, 202, 1144, 73, 1143, 11, 56,
	1132, 1131, 1130, 1127, 70, 862, 1126, 1123, 15, 1122,
	1121, 102, 1120, 58, 7, 8, 34, 22, 1111, 123,
	6, 1110, 57, 1109, 1104, 1103, 1102, 38, 1101, 60,
	1098, 19, 59, 1096, 9, 66, 33, 28, 5, 79,
	64, 1092, 16, 69, 47, 1091, 1089, 455, 1088, 1087,
	45, 1086, 1084, 24, 1083, 185, 401, 1081, 1077, 1076,
	1075, 42, 0, 545, 233, 75, 1074, 1073, 1071, 1478,
	43, 53, 18, 1070, 52, 20, 41, 1068, 1066, 35,
	1065, 1061, 1059, 1058, 1057, 1056, 1055, 23, 1049, 1044,
	1043, 31, 21, 1042, 1040, 63, 30, 1039, 1038, 1037,
	50, 65, 1034, 1033, 51, 48, 1029, 1027, 1014, 1013,
	1009, 37, 10, 1008, 12, 1007, 13, 1006, 29, 1005,
	4, 1004, 14, 1003, 3, 1002, 17, 46, 1, 1001,
	2, 999, 997, 61, 529, 80, 996, 82,
}
var yyR1 = [...]int{

	0, 191, 192, 192, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 2, 6, 3, 4,
	4, 5, 5, 7, 7, 29, 29, 8, 9, 9,
	9, 9, 195, 195, 48, 48, 49, 49, 95, 95,
	10, 10, 10, 10, 100, 100, 104, 104, 104, 105,
	105, 105, 105, 137, 137, 11, 11, 11, 11, 11,
	11, 11, 186, 186, 185, 184, 184, 183, 183, 182,
	17, 167, 169, 169, 168, 168, 168, 168, 161, 140,
	140, 140, 140, 143, 143, 141, 141, 141, 141, 141,
	141, 141, 141, 141, 142, 142, 142, 142, 142, 144,
	144, 144, 144, 144, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 146,
	146, 146, 146, 146, 146, 146, 146, 160, 160, 147,
	147, 155, 155, 156, 156, 156, 153, 153, 154, 154,
	157, 157, 157, 149, 149, 150, 150, 158, 158, 151,
	151, 151, 152, 152, 152, 159, 159, 159, 159, 159,
	148, 148, 162, 162, 177, 177, 176, 176, 176, 166,
	166, 173, 173, 173, 173, 173, 164, 164, 165, 165,
	175, 175, 174, 163, 163, 178, 178, 178, 178, 189,
	190, 188, 188, 188, 188, 188, 170, 170, 170, 171,
	171, 171, 172, 172, 172, 12, 12, 12, 12, 12,
	12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
	187, 187, 187, 187, 187, 187, 187, 187, 187, 187,
	187, 181, 179, 179, 180, 180, 13, 18, 18, 14,
	14, 14, 14, 14, 15, 15, 19, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 111, 111, 109, 109, 112,
	112, 110, 110, 110, 113, 113, 113, 114, 114, 138,
	138, 138, 21, 21, 23, 23, 24, 25, 22, 22,
	22, 22, 22, 22, 22, 16, 196, 26, 27, 27,
	28, 28, 28, 32, 32, 32, 30, 30, 31, 31,
	37, 37, 36, 36, 38, 38, 38, 38, 126, 126,
	126, 125, 125, 40, 40, 41, 41, 42, 42, 43,
	43, 43, 43, 57, 57, 94, 94, 96, 96, 44,
	44, 44, 44, 45, 45, 46, 46, 47, 47, 133,
	133, 132, 132, 132, 131, 131, 50, 50, 50, 52,
	51, 51, 51, 51, 53, 53, 55, 55, 54, 54,
	56, 58, 58, 58, 58, 59, 59, 39, 39, 39,
	39, 39, 39, 39, 108, 108, 61, 61, 60, 60,
	60, 60, 60, 60, 60, 60, 60, 60, 72, 72,
	72, 72, 72, 72, 62, 62, 62, 62, 62, 62,
	62, 35, 35, 73, 73, 73, 79, 74, 74, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 69, 69, 69, 67, 67, 67, 67, 67, 67,
	67, 67, 67, 67, 67, 67, 67, 68, 68, 68,
	68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
	68, 68, 68, 197, 197, 71, 70, 70, 70, 70,
	70, 70, 33, 33, 33, 33, 33, 136, 136, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 83, 83, 34, 34, 81, 81, 82, 84,
	84, 80, 80, 80, 64, 64, 64, 64, 64, 64,
	64, 64, 66, 66, 66, 85, 85, 86, 86, 87,
	87, 88, 88, 89, 90, 90, 90, 91, 91, 91,
	91, 92, 92, 92, 63, 63, 63, 63, 63, 63,
	93, 93, 93, 93, 97, 97, 75, 75, 77, 77,
	76, 78, 98, 98, 102, 99, 99, 103, 103, 103,
	103, 101, 101, 101, 128, 128, 128, 106, 106, 115,
	115, 116, 116, 107, 107, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 118, 118, 118, 119, 119,
	120, 120, 120, 127, 127, 123, 123, 124, 124, 129,
	129, 130, 130, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 193,
	194, 134, 135, 135, 135,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 4, 6, 7, 5, 10, 1,
	3, 1, 3, 7, 8, 1, 1, 9, 8, 7,
	6, 6, 1, 1, 1, 3, 1, 3, 0, 4,
	3, 4, 5, 4, 1, 3, 3, 2, 2, 2,
	2, 2, 1, 1, 1, 2, 2, 8, 4, 6,
	5, 5, 0, 2, 1, 0, 2, 1, 3, 3,
	4, 4, 2, 4, 1, 3, 3, 3, 8, 3,
	1, 1, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 2, 2, 2, 1,
	2, 2, 2, 1, 4, 4, 2, 2, 3, 3,
	3, 3, 1, 1, 1, 1, 1, 6, 6, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 0,
	3, 0, 5, 0, 3, 5, 0, 1, 0, 1,
	0, 1, 2, 0, 2, 0, 3, 0, 1, 0,
	3, 3, 0, 2, 2, 0, 2, 1, 2, 1,
	0, 2, 5, 4, 1, 2, 2, 3, 2, 0,
	1, 2, 3, 3, 2, 2, 1, 1, 0, 1,
	1, 3, 2, 3, 1, 10, 11, 11, 12, 3,
	3, 1, 1, 2, 2, 2, 0, 1, 3, 1,
	2, 3, 1, 1, 1, 6, 7, 7, 7, 7,
	4, 5, 7, 5, 5, 5, 12, 7, 5, 9,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 7, 1, 3, 8, 8, 3, 3, 5, 4,
	6, 5, 4, 4, 3, 2, 3, 4, 4, 3,
	4, 4, 4, 4, 4, 4, 3, 2, 3, 3,
	2, 3, 4, 3, 7, 5, 4, 2, 4, 4,
	3, 3, 5, 2, 3, 1, 1, 0, 1, 1,
	1, 0, 2, 2, 0, 2, 2, 0, 2, 0,
	1, 1, 2, 1, 1, 2, 1, 1, 2, 2,
	2, 2, 2, 3, 3, 2, 0, 2, 0, 2,
	1, 2, 2, 0, 1, 1, 0, 1, 0, 1,
	0, 1, 1, 3, 1, 2, 3, 5, 0, 1,
	2, 1, 1, 0, 2, 1, 3, 1, 1, 1,
	3, 1, 3, 3, 7, 1, 3, 1, 3, 4,
	4, 4, 3, 2, 4, 0, 1, 0, 2, 0,
	1, 0, 1, 2, 1, 1, 1, 2, 2, 1,
	2, 3, 2, 3, 2, 2, 2, 1, 1, 3,
	3, 0, 5, 5, 5, 0, 2, 1, 3, 3,
	2, 3, 1, 2, 0, 3, 1, 1, 3, 3,
	4, 4, 5, 3, 4, 5, 6, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 0, 2, 1, 1, 1, 3, 1, 3, 1,
	1, 1, 1, 1, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	2, 2, 2, 2, 2, 2, 3, 1, 1, 1,
	1, 4, 5, 6, 4, 4, 6, 6, 6, 8,
	8, 8, 8, 9, 7, 5, 4, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 8, 8, 0, 2, 3, 4, 4, 4, 4,
	4, 4, 0, 3, 4, 7, 3, 1, 1, 2,
	3, 3, 1, 2, 2, 1, 2, 1, 2, 2,
	1, 2, 0, 1, 0, 2, 1, 2, 4, 0,
	2, 1, 3, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 0, 3, 0, 2, 0,
	3, 1, 3, 2, 0, 1, 1, 0, 2, 4,
	4, 0, 2, 4, 2, 1, 3, 5, 4, 6,
	1, 3, 3, 5, 0, 5, 1, 3, 1, 2,
	3, 1, 1, 3, 3, 1, 3, 3, 3, 3,
	3, 1, 2, 1, 1, 1, 1, 1, 1, 0,
	2, 0, 3, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 1, 1, 1, 1,
	0, 1, 1, 0, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -191, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -19, -20, -21, -23, -24, -25,
	-22, -16, -3, -4, 6, 7, -29, 9, 10, 30,
	-17, 115, 116, 118, 117, 149, 119, 142, 50, 163,
	164, 166, 167, 25, 143, 144, 147, 148, 31, 32,
	121, -193, 8, 248, 54, -192, 265, -87, 15, -28,
	5, -26, -196, -26, -26, -26, -26, -26, -167, -169,
	54, 90, -120, 125, 72, 240, 122, 123, 129, -123,
	57, -122, 258, 135, 163, 174, 168, 195, 187, 259,
	136, 185, 188, 227, 215, 222, 66, 166, 236, 145,
	183, 179, 177, 27, 224, 200, 263, 178, 223, 121,
	138, 133, 201, 205, 228, 172, 173, 230, 199, 134,
	33, 260, 35, 153, 231, 203, 198, 194, 197, 171,
	193, 39, 207, 206, 208, 226, 190, 139, 180, 18,
	234, 148, 151, 225, 202, 204, 130, 155, 262, 232,
	176, 140, 152, 147, 235, 141, 167, 162, 229, 238,
	38, 212, 170, 132, 164, 159, 217, 191, 154, 181,
	182, 196, 169, 192, 165, 156, 149, 237, 213, 264,
	189, 186, 160, 157, 158, 218, 219, 161, 261, 233,
	184, 214, -107, 125, 219, 127, 123, 123, 124, 125,
	240, 122, 123, -54, -129, 57, -122, 125, 123, 108,
	188, 227, 115, 216, 224, 124, 33, 225, 155, -138,
	123, -109, 215, 218, 219, 161, 57, 229, 228, 220,
	-129, 165, -134, -134, -134, -134, -134, 217, 217, -134,
	-2, -91, 17, 16, -5, -3, -193, 6, 20, 21,
	-32, 40, 41, -27, -38, 99, -39, -129, -60, 74,
	-65, 29, 57, -122, 23, -64, -61, -80, -78, -79,
	108, 109, 110, 97, 98, 105, 75, 111, -69, -67,
	-68, -70, 59, 58, 67, 60, 61, 62, 63, 68,
	69, 70, -123, -76, -193, 44, 45, 249, 250, 251,
	252, 257, 253, 77, 34, 239, 247, 246, 245, 243,
	244, 241, 242, 255, 256, 128, 240, 103, 248, -107,
	-107, 11, -48, -49, -54, -56, -129, -99, -137, 165,
	-103, 229, 228, -124, -101, -123, -121, 227, 188, 226,
	120, 73, 22, 24, 210, 76, 108, 16, 77, 107,
	249, 115, 48, 241, 242, 239, 251, 252, 240, 216,
	29, 10, 25, 143, 21, 101, 117, 80, 81, 146,
	23, 144, 70, 19, 51, 11, 13, 14, 128, 127,
	92, 124, 46, 8, 111, 26, 89, 42, 28, 44,
	90, 17, 243, 244, 31, 257, 150, 103, 49, 36,
	74, 68, 71, 52, 72, 15, 47, 91, 118, 248,
	45, 122, 6, 254, 30, 142, 43, 123, 79, 255,
	256, 126, 69, 5, 129, 32, 9, 50, 53, 245,
	246, 247, 34, 78, 12, -168, 90, -161, 57, -54,
	124, -54, 248, -116, 128, -116, -116, 123, -54, 115,
	117, 120, 52, -18, -54, -115, 128, 57, -115, -115,
	-115, -54, 112, -54, 57, 30, -135, -193, -124, 240,
	57, 155, 123, 156, 125, -135, -135, -135, -135, 159,
	160, -135, -112, -111, 222, 223, 217, 221, 12, 160,
	217, 158, -135, -134, -134, -194, 56, -92, 19, 31,
	-39, -129, -88, -89, -39, -87, -2, -26, 36, -30,
	21, 65, 11, -126, 73, 72, 89, -125, 22, -123,
	59, 112, -39, -62, 92, 74, 90, 91, 76, 94,
	93, 104, 97, 98, 99, 100, 101, 102, 103, 95,
	96, 107, 82, 83, 84, 85, 86, 87, 88, -108,
	-193, -79, -193, 113, 114, -65, -65, -65, -65, -65,
	-65, -65, -65, -193, -2, -74, -39, -193, -193, -193,
	-193, -193, -193, -193, -193, -193, -83, -39, -193, -197,
	-71, -193, -197, -71, -197, -71, -197, -193, -197, -71,
	-197, -71, -197, -197, -71, -193, -193, -193, -193, -193,
	-193, -55, 26, -54, -41, -42, -43, -44, -57, -79,
	-193, -54, -54, -48, -195, 55, 11, 53, -195, 55,
	112, 55, -99, 165, -100, -104, 230, 232, 82, -128,
	-123, 59, 29, 30, 56, 55, -54, -140, -143, -145,
	-144, -146, -141, -142, 185, 186, 108, 189, 191, 192,
	193, 194, 195, 196, 197, 198, 199, 200, 30, 145,
	181, 182, 183, 184, 201, 202, 203, 204, 205, 206,
	207, 208, 168, 187, 259, 169, 170, 171, 172, 173,
	174, 176, 177, 178, 179, 180, 57, -135, 125, 57,
	74, 57, -54, -54, -135, 157, 157, 123, 123, 162,
	-54, 55, 126, -48, 23, 52, -54, 57, 57, -130,
	-129, -121, -135, -135, -135, -135, -135, -54, -135, -135,
	-135, -135, 11, -110, 11, 92, -39, -114, 90, 52,
	9, 92, 55, 18, 112, 55, -90, 24, 25, -91,
	-194, -32, -66, -123, 60, 63, -31, 43, -54, -39,
	-39, -72, 68, 74, 69, 70, -125, 99, -130, -124,
	-121, -65, -73, -76, -79, 64, 92, 90, 91, 76,
	-65, -65, -65, -65, -65, -65, -65, -65, -65, -65,
	-65, -65, -65, -65, -65, -136, 57, 59, 57, -64,
	-64, -123, -37, 21, -36, -38, -194, 55, -194, -2,
	-36, -36, -39, -39, -80, 59, -36, -80, 59, -36,
	-36, -30, -81, -82, 78, -80, -123, -129, -194, -65,
	-123, -123, -36, -37, -36, -36, -95, 151, -54, 30,
	55, -50, -52, -51, -53, 42, 46, 48, 43, 44,
	45, 49, -133, 22, -41, -193, -132, 151, -131, 22,
	-129, 59, -95, 53, -41, -54, -41, -56, -129, 99,
	-103, -100, 55, 231, 233, 234, 52, 71, -39, -152,
	107, -170, -171, -172, -124, 59, 60, -161, -162, -163,
	-173, 137, -178, 130, 132, 129, -164, 138, 124, 28,
	56, -157, 68, 74, -153, 213, -147, 54, -147, -147,
	-147, -147, -151, 188, -151, -151, -151, 54, 54, -147,
	-147, -147, -155, 54, -155, -155, -156, 54, -156, -127,
	53, -54, -135, 23, -135, -117, 120, 117, 118, -181,
	116, 210, 188, 66, 29, 15, 249, 151, 264, 57,
	152, -54, -54, -54, -54, -54, 120, 117, -54, -54,
	-54, -135, -54, -113, 90, 12, -129, -129, 59, -54,
	38, -39, -39, -130, -89, -92, -106, 19, 11, 34,
	34, -36, 68, 69, 70, 112, -193, -73, -65, -65,
	-65, -35, 146, 73, -194, -194, -36, 55, -39, -194,
	-194, -194, 55, 53, 22, 11, 11, -194, 11, 11,
	-194, -194, -36, -84, -82, 80, -39, -194, 112, -194,
	55, 55, -194, -194, -194, -194, -63, 30, 34, -2,
	-193, -193, -98, -102, -80, -42, -43, -43, -42, -43,
	42, 42, 42, 47, 42, 47, 42, -51, -129, -194,
	-58, 50, 127, 51, -193, -131, -59, 12, -41, -59,
	-59, 112, -104, -105, 235, 232, 238, 57, 59, 55,
	-172, 82, 54, 57, 28, -164, -164, -165, 57, -165,
	28, -149, 29, 68, -154, 214, 60, -151, -151, -152,
	30, -152, -152, -152, -160, 59, -160, 60, 60, 52,
	-123, -135, -134, -187, 131, 137, 138, 133, 57, 124,
	28, 130, 132, 151, 129, -187, -118, -119, 126, 22,
	124, 28, 151, -186, 53, 157, 210, 157, 126, -135,
	-110, 59, -39, 39, 112, -54, -40, 11, 99, -124,
	-37, -35, 73, -65, -65, -194, -38, -139, 108, 185,
	145, 183, 179, 199, 190, 212, 181, 213, -136, -139,
	-65, -65, -65, -65, 258, -87, 81, -39, 79, -124,
	-65, -65, -97, 52, -98, -75, -77, -76, -193, -2,
	-93, -123, -96, -123, -59, 55, 82, -46, -45, 52,
	53, -47, 52, -45, 42, 42, 124, 124, 124, -96,
	-87, -39, -59, 232, 236, 237, -171, -172, -175, -174,
	-123, -178, -165, -165, 54, -150, 52, -65, 56, -152,
	-152, 57, 108, 56, 55, 56, 55, 56, 55, -54,
	-134, -134, -54, -134, -123, -184, 261, -185, 57, -123,
	-123, -123, -54, -113, -59, -41, -194, -65, -194, -147,
	-147, -147, -156, -147, 173, -147, 173, -194, -194, 19,
	19, 19, 19, -193, -34, 254, -39, 55, 55, 27,
	-97, 55, -194, -194, -194, 55, 112, -194, 55, -87,
	-102, -39, -39, 54, -39, -193, -193, -193, -194, -91,
	56, 55, -147, -94, -123, -158, 210, 9, -151, 59,
	-151, 60, 60, -135, 26, -183, -182, -124, 54, 53,
	-85, 13, -151, 57, -65, -65, -65, -65, -65, -194,
	59, -65, -65, 28, -77, 34, -2, -193, -123, -123,
	-123, -91, -94, -94, -94, -94, -132, -177, -176, 53,
	134, 66, -174, 56, 55, -159, 130, 28, 129, -68,
	-152, -152, 56, 56, -193, 55, 82, -94, -54, -86,
	14, 16, -194, -194, -194, -194, -33, 92, 261, -194,
	-194, 9, -75, -2, 112, 56, -194, -194, -194, -58,
	-176, 57, -166, 82, 59, 140, -123, -148, 66, 28,
	28, -179, -180, 151, -182, -172, 56, -39, -74, -194,
	259, 49, 262, -98, -194, -123, 60, -54, 59, -194,
	55, -123, -186, 39, 260, 263, 54, -180, 34, -184,
	39, -94, 153, 261, 56, 154, 262, -189, -190, 52,
	-193, 263, -190, 52, 10, 9, -65, 150, -188, 141,
	136, 139, 30, -188, -194, -194, 135, 29, 68,
}
var yyDef = [...]int{

	23, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 559, 0, 316, 316, 316, 316, 316, 316,
	0, 630, 613, 0, 0, 0, 0, -2, 303, 304,
	0, 306, 307, 851, 851, 851, 851, 851, 0, 0,
	851, 0, 35, 36, 849, 1, 3, 567, 0, 0,
	320, 323, 318, 0, 613, 613, 0, 0, 65, 66,
	0, 0, 0, 839, 0, 611, 611, 611, 631, 632,
	635, 636, 738, 739, 740, 741, 742, 743, 744, 745,
	746, 747, 748, 749, 750, 751, 752, 753, 754, 755,
	756, 757, 758, 759, 760, 761, 762, 763, 764, 765,
	766, 767, 768, 769, 770, 771, 772, 773, 774, 775,
	776, 777, 778, 779, 780, 781, 782, 783, 784, 785,
	786, 787, 788, 789, 790, 791, 792, 793, 794, 795,
	796, 797, 798, 799, 800, 801, 802, 803, 804, 805,
	806, 807, 808, 809, 810, 811, 812, 813, 814, 815,
	816, 817, 818, 819, 820, 821, 822, 823, 824, 825,
	826, 827, 828, 829, 830, 831, 832, 833, 834, 835,
	836, 837, 838, 840, 841, 842, 843, 844, 845, 846,
	847, 848, 0, 0, 0, 614, 0, 609, 0, 609,
	609, 609, 0, 255, 388, 639, 640, 839, 0, 0,
	0, 852, 0, 852, 267, 852, 852, 270, 852, 0,
	852, 0, 277, 0, 0, 283, 852, 300, 301, 288,
	302, 305, 308, 309, 310, 311, 312, 851, 851, 315,
	29, 571, 0, 0, 559, 31, 0, 316, 321, 322,
	326, 324, 325, 317, 0, 334, 338, 0, 397, 0,
	402, 404, -2, -2, 0, 439, 440, 441, 442, 443,
	0, 0, 0, 0, 0, 0, 0, 0, 467, 468,
	469, 470, 544, 545, 546, 547, 548, 549, 550, 551,
	406, 407, 541, 591, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 532, 0, 503, 503, 503, 503, 503,
	503, 503, 503, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 44, 46, 388, 50, 0, 830,
	595, -2, -2, 0, 0, 637, 638, -2, 748, -2,
	643, 644, 645, 646, 647, 648, 649, 650, 651, 652,
	653, 654, 655, 656, 657, 658, 659, 660, 661, 662,
	663, 664, 665, 666, 667, 668, 669, 670, 671, 672,
	673, 674, 675, 676, 677, 678, 679, 680, 681, 682,
	683, 684, 685, 686, 687, 688, 689, 690, 691, 692,
	693, 694, 695, 696, 697, 698, 699, 700, 701, 702,
	703, 704, 705, 706, 707, 708, 709, 710, 711, 712,
	713, 714, 715, 716, 717, 718, 719, 720, 721, 722,
	723, 724, 725, 726, 727, 728, 729, 730, 731, 732,
	733, 734, 735, 736, 737, 0, 0, 84, 0, 82,
	0, 852, 0, 0, 0, 0, 0, 0, 852, 0,
	0, 0, 0, 246, 0, 0, 0, 0, 0, 0,
	0, 254, 0, 256, 852, 852, 259, 853, 854, 852,
	852, 852, 0, 852, 852, 266, 268, 269, 271, 852,
	852, 273, 0, 291, 289, 290, 285, 286, 0, 297,
	280, 281, 284, 313, 314, 30, 850, 24, 0, 0,
	568, 0, 560, 561, 564, 567, 29, 323, 0, 328,
	327, 319, 0, 335, 0, 0, 0, 339, 0, 341,
	342, 0, 400, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 424, 425, 426, 427, 428, 429, 430, 403,
	0, 417, 0, 0, 0, 459, 460, 461, 462, 463,
	464, 465, 0, 330, 29, 0, 437, 0, 0, 0,
	0, 0, 0, 0, 0, 326, 0, 533, 0, 487,
	495, 0, 488, 496, 489, 497, 490, 0, 491, 498,
	492, 499, 493, 494, 500, 0, 0, 0, 330, 0,
	0, 48, 0, 387, 0, 345, 347, 348, 349, -2,
	0, 371, -2, 0, 0, 0, 42, 43, 0, 0,
	0, 0, 51, 830, 53, 54, 0, 0, 0, 162,
	604, 605, 606, 602, 206, 0, 0, 150, 146, 90,
	91, 92, 139, 94, 139, 139, 139, 139, 159, 159,
	159, 159, 122, 123, 124, 125, 126, 0, 0, 109,
	139, 139, 139, 113, 129, 130, 131, 132, 133, 134,
	135, 136, 95, 96, 97, 98, 99, 100, 101, 102,
	103, 141, 141, 141, 143, 143, 633, 68, 0, 852,
	0, 852, 80, 0, 220, 0, 0, 0, 0, 0,
	0, 0, 0, 249, 610, 0, 852, 252, 253, 389,
	641, 642, 257, 258, 260, 261, 262, 263, 264, 265,
	272, 276, 0, 294, 0, 0, 278, 279, 0, 0,
	572, 0, 0, 0, 0, 0, 563, 565, 566, 571,
	32, 326, 0, 552, 0, 0, 0, 329, 27, 398,
	399, 401, 418, 0, 420, 422, 340, 336, 0, 542,
	-2, 408, 409, 433, 434, 435, 0, 0, 0, 0,
	431, 413, 0, 444, 445, 446, 447, 448, 449, 450,
	451, 452, 453, 454, 455, 458, 517, 518, 0, 456,
	457, 466, 0, 0, 331, 332, 436, 0, 590, 29,
	0, 0, 0, 0, 441, 544, 0, 441, 544, 0,
	0, 0, 539, 536, 0, 0, 541, 0, 504, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 386, 0,
	0, 0, 0, 0, 0, 376, 0, 0, 379, 0,
	0, 0, 0, 370, 0, 0, 391, 798, 372, 0,
	374, 375, 395, 0, 395, 45, 395, 47, 0, 390,
	596, 52, 0, 0, 57, 58, 597, 598, 599, 600,
	0, 81, 207, 209, 212, 213, 214, 85, 86, 87,
	0, 0, 194, 0, 0, 188, 188, 0, 186, 187,
	83, 153, 151, 0, 148, 147, 93, 0, 159, 159,
	116, 117, 162, 0, 162, 162, 162, 0, 0, 110,
	111, 112, 104, 0, 105, 106, 107, 0, 108, 0,
	0, 852, 70, 612, 71, 851, 0, 0, 625, 221,
	615, 616, 617, 618, 619, 620, 621, 622, 623, 624,
	0, 72, 223, 225, 224, 228, 0, 0, 0, 247,
	852, 251, 291, 275, 0, 0, 292, 293, 298, 282,
	0, 569, 570, 0, 562, 25, 0, 607, 608, 553,
	554, 343, 419, 421, 423, 0, 330, 410, 431, 414,
	0, 411, 0, 0, 405, 471, 0, 0, 438, -2,
	474, 475, 0, 0, 0, 0, 0, 510, 0, 0,
	511, 0, 559, 0, 537, 0, 0, 486, 0, 505,
	0, 0, 506, 507, 508, 509, 584, 0, 0, -2,
	0, 0, 395, 592, 0, 346, 365, 367, 0, 362,
	377, 378, 380, 0, 382, 0, 384, 385, 350, 352,
	353, 0, 0, 0, 0, 373, 559, 0, 395, 40,
	41, 0, 55, 56, 0, 0, 62, 163, 164, 0,
	210, 0, 0, 0, 181, 188, 188, 184, 189, 185,
	0, 155, 0, 152, 89, 149, 0, 162, 162, 118,
	0, 119, 120, 121, 0, 137, 0, 0, 0, 0,
	634, 69, 215, 851, 230, 231, 232, 233, 234, 235,
	236, 237, 238, 239, 240, 851, 0, 851, 626, 627,
	628, 629, 0, 75, 0, 0, 0, 0, 0, 250,
	294, 295, 296, 573, 0, 26, 395, 0, 337, 543,
	0, 412, 0, 432, 415, 472, 333, 0, 139, 139,
	522, 139, 143, 525, 139, 527, 139, 530, 0, 0,
	0, 0, 0, 0, 0, 534, 485, 540, 0, 542,
	0, 0, 33, 0, 584, 574, 586, 588, 0, 29,
	0, 580, 0, 357, 559, 0, 0, 359, 366, 0,
	0, 360, 0, 361, 381, 383, 0, 0, 0, 0,
	567, 396, 39, 59, 60, 61, 208, 211, 0, 190,
	139, 193, 182, 183, 0, 157, 0, 154, 140, 114,
	115, 160, 161, 159, 0, 159, 0, 144, 0, 852,
	216, 217, 218, 219, 0, 222, 0, 73, 74, 0,
	0, 227, 248, 274, 555, 344, 473, 416, 476, 519,
	159, 523, 524, 526, 528, 529, 531, 478, 477, 0,
	0, 0, 0, 0, 0, 0, 538, 0, 0, 0,
	34, 0, 589, -2, 0, 0, 0, 49, 0, 567,
	593, 594, 363, 0, 368, 0, 0, 0, 371, 38,
	173, 0, 192, 0, 355, 165, 158, 0, 162, 138,
	162, 0, 0, 67, 0, 76, 77, 0, 0, 0,
	557, 0, 520, 521, 0, 0, 0, 0, 512, 484,
	535, 0, 0, 0, 587, 0, -2, 0, 582, 581,
	358, 37, 0, 0, 0, 0, 391, 172, 174, 0,
	179, 0, 191, 0, 0, 170, 0, 167, 169, 156,
	127, 128, 142, 145, 0, 0, 0, 0, 229, 28,
	0, 0, 479, 481, 480, 482, 0, 0, 0, 501,
	502, 0, 577, 29, 0, 364, 392, 393, 394, 354,
	175, 176, 0, 180, 178, 0, 356, 88, 0, 166,
	168, 0, 242, 0, 78, 79, 72, 558, 556, 483,
	0, 0, 0, 585, -2, 583, 177, 0, 171, 241,
	0, 0, 75, 513, 0, 516, 0, 243, 0, 226,
	514, 0, 0, 0, 195, 0, 0, 196, 197, 0,
	0, 515, 198, 0, 0, 0, 0, 0, 199, 201,
	202, 0, 0, 200, 244, 245, 203, 204, 205,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 75, 3, 3, 3, 102, 94, 3,
	54, 56, 99, 97, 55, 98, 112, 100, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 265,
	83, 82, 84, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 104, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 93, 3, 105,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	76, 77, 78, 79, 80, 81, 85, 86, 87, 88,
	89, 90, 91, 92, 95, 96, 101, 103, 106, 107,
	108, 109, 110, 111, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:317
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:322
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:323
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:327
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:349
		{
			setParseTree(yylex, nil)
		}
	case 24:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:355
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 25:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:363
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 26:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:367
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 27:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:373
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 28:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:380
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:386
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:390
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:396
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:400
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 33:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:407
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 34:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:419
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:431
		{
			yyVAL.str = InsertStr
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:435
		{
			yyVAL.str = ReplaceStr
		}
	case 37:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:441
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].updateExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 38:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:447
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 39:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:451
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 40:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:455
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 41:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:459
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:464
		{
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:465
		{
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:469
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:473
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:479
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:483
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 48:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:488
		{
			yyVAL.partitions = nil
		}
	case 49:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:492
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:498
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 51:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:502
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 52:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:506
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 53:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:510
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:516
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:520
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:526
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(yyDollar[3].str))}
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:530
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(TxReadWrite))}
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:534
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(TxReadOnly))}
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:540
		{
			yyVAL.str = IsolationLevelRepeatableRead
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:544
		{
			yyVAL.str = IsolationLevelReadCommitted
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:548
		{
			yyVAL.str = IsolationLevelReadUncommitted
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:552
		{
			yyVAL.str = IsolationLevelSerializable
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:558
		{
			yyVAL.str = SessionStr
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:562
		{
			yyVAL.str = GlobalStr
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:568
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:573
		{
			// Create table [name] like [name]
			yyDollar[1].ddl.OptLike = yyDollar[2].optLike
			yyVAL.statement = yyDollar[1].ddl
		}
	case 67:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:579
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName}
		}
	case 68:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:584
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 69:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:588
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[5].tableName.ToViewName()}
		}
	case 70:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:592
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 71:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:596
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 72:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:601
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:605
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:611
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 75:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:616
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:621
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:627
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:632
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:638
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 80:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:644
		{
			yyVAL.ddl = &DDL{Action: CreateStr, Table: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 81:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:651
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 82:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:658
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[2].tableName}
		}
	case 83:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:662
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[3].tableName}
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:668
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:673
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:677
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:681
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 88:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:687
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].sqlVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:698
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:709
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].sqlVal
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:714
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:720
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:724
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:728
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:732
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:736
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:740
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:744
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:748
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:752
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:758
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:764
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:770
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:776
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:782
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:790
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:794
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:798
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:802
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:806
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 114:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:812
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 115:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:816
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:820
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:824
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:828
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 119:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:832
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:836
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:840
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:844
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:848
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:852
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:856
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:860
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 127:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:864
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 128:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:869
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:875
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:879
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:883
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:887
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:891
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:895
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:899
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:903
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:909
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:914
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 139:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:919
		{
			yyVAL.sqlVal = nil
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:923
		{
			yyVAL.sqlVal = NewIntVal(yyDollar[2].bytes)
		}
	case 141:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:928
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 142:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:932
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 143:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:940
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:944
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 145:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:950
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 146:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:958
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:962
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 148:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:967
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:971
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 150:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:977
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:981
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:985
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 153:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:990
		{
			yyVAL.optVal = nil
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:994
		{
			yyVAL.optVal = yyDollar[2].expr
		}
	case 155:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:999
		{
			yyVAL.optVal = nil
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1003
		{
			yyVAL.optVal = yyDollar[3].expr
		}
	case 157:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1008
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1012
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 159:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1017
		{
			yyVAL.str = ""
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1021
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1025
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 162:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1030
		{
			yyVAL.str = ""
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1034
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1038
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 165:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1043
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1047
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1051
		{
			yyVAL.colKeyOpt = colKey
		}
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1055
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1059
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 170:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1064
		{
			yyVAL.sqlVal = nil
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1068
		{
			yyVAL.sqlVal = NewStrVal(yyDollar[2].bytes)
		}
	case 172:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1074
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 173:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1078
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1084
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1088
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1094
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1098
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1103
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 179:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1109
		{
			yyVAL.str = ""
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1113
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1119
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1123
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1127
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1131
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1135
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1141
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1145
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 188:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1150
		{
			yyVAL.str = ""
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1154
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1160
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1164
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1170
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].sqlVal}
		}
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1176
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].bytes), Details: yyDollar[3].constraintInfo}
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1180
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 195:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1187
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 196:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1191
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 197:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1195
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 198:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1199
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 199:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1205
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 200:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1211
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1217
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1221
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1225
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1229
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1233
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 206:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1238
		{
			yyVAL.str = ""
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1242
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 208:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1246
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1254
		{
			yyVAL.str = yyDollar[1].str
		}
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1258
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 211:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1262
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1268
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1272
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1276
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 215:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1282
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 216:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1286
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 217:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1290
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 218:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1294
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[4].tableName}, ToTables: TableNames{yyDollar[7].tableName}}
		}
	case 219:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1299
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 220:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1304
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 221:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1308
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 222:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1312
		{
			yyVAL.statement = &DDL{
				Action: CreateVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name:   NewColIdent(yyDollar[5].tableName.Name.String()),
					Type:   yyDollar[6].colIdent,
					Params: yyDollar[7].vindexParams,
				},
			}
		}
	case 223:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1324
		{
			yyVAL.statement = &DDL{
				Action: DropVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name: NewColIdent(yyDollar[5].tableName.Name.String()),
				},
			}
		}
	case 224:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1334
		{
			yyVAL.statement = &DDL{Action: AddVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 225:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1338
		{
			yyVAL.statement = &DDL{Action: DropVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 226:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1342
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 227:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1355
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 228:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1365
		{
			yyVAL.statement = &DDL{Action: AddSequenceStr, Table: yyDollar[5].tableName}
		}
	case 229:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1369
		{
			yyVAL.statement = &DDL{
				Action: AddAutoIncStr,
				Table:  yyDollar[4].tableName,
				AutoIncSpec: &AutoIncSpec{
					Column:   yyDollar[7].colIdent,
					Sequence: yyDollar[9].tableName,
				},
			}
		}
	case 241:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1395
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1401
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 243:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1405
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 244:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1411
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 245:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1415
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 246:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1421
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 247:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1427
		{
			yyVAL.ddl = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 248:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1431
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 249:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1439
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 250:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1447
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName}
		}
	case 251:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1452
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: TableNames{yyDollar[4].tableName.ToViewName()}, IfExists: exists}
		}
	case 252:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1460
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 253:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1464
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 254:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1470
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 255:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1474
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 256:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1479
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName}
		}
	case 257:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1485
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 258:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1490
		{
			yyVAL.statement = &Show{Type: CharsetStr}
		}
	case 259:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1494
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 260:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1498
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 261:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1503
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 262:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1507
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 263:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1511
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 264:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1515
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 265:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1519
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1523
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 267:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1527
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 268:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1531
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 269:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1535
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1539
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 271:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1543
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 272:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1547
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 273:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1551
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 274:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1555
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 275:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1560
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[3].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 276:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1570
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1574
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 278:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1578
		{
			// Cannot dereference $4 directly, or else the parser stackcannot be pooled. See yyParsePooled
			showCollationFilterOpt := yyDollar[4].expr
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: &showCollationFilterOpt}
		}
	case 279:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1584
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Scope: string(yyDollar[2].bytes), Type: string(yyDollar[3].bytes), ShowTablesOpt: showTablesOpt}
		}
	case 280:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1589
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 281:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1593
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 282:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1597
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName}
		}
	case 283:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1601
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 284:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1615
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1621
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1625
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 287:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1631
		{
			yyVAL.str = ""
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1635
		{
			yyVAL.str = "full "
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1641
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1645
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 291:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1651
		{
			yyVAL.str = ""
		}
	case 292:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1655
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1659
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 294:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1665
		{
			yyVAL.showFilter = nil
		}
	case 295:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1669
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 296:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1673
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 297:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1679
		{
			yyVAL.showFilter = nil
		}
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1683
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 299:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1689
		{
			yyVAL.str = ""
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1693
		{
			yyVAL.str = SessionStr
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1697
		{
			yyVAL.str = GlobalStr
		}
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1703
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1707
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1713
		{
			yyVAL.statement = &Begin{}
		}
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1717
		{
			yyVAL.statement = &Begin{}
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1723
		{
			yyVAL.statement = &Commit{}
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1729
		{
			yyVAL.statement = &Rollback{}
		}
	case 308:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1735
		{
			yyVAL.statement = &OtherRead{}
		}
	case 309:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1739
		{
			yyVAL.statement = &OtherRead{}
		}
	case 310:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1743
		{
			yyVAL.statement = &OtherRead{}
		}
	case 311:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1747
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 312:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1751
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 313:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1755
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 314:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1759
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 315:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1765
		{
			yyVAL.statement = &DDL{Action: FlushStr}
		}
	case 316:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1769
		{
			setAllowComments(yylex, true)
		}
	case 317:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1773
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 318:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1779
		{
			yyVAL.bytes2 = nil
		}
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1783
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1789
		{
			yyVAL.str = UnionStr
		}
	case 321:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1793
		{
			yyVAL.str = UnionAllStr
		}
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1797
		{
			yyVAL.str = UnionDistinctStr
		}
	case 323:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1802
		{
			yyVAL.str = ""
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1806
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1810
		{
			yyVAL.str = SQLCacheStr
		}
	case 326:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1815
		{
			yyVAL.str = ""
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1819
		{
			yyVAL.str = DistinctStr
		}
	case 328:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1824
		{
			yyVAL.str = ""
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1828
		{
			yyVAL.str = StraightJoinHint
		}
	case 330:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1833
		{
			yyVAL.selectExprs = nil
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1837
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1843
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 333:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1847
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1853
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 335:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1857
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 336:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1861
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 337:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1865
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 338:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1870
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1874
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1878
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1885
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 343:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1890
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 344:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1894
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1900
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 346:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1904
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1914
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 350:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1918
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1922
		{
			// missed alias for subquery
			yylex.Error("Every derived table must have its own alias")
			return 1
		}
	case 352:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1928
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 353:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1934
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 354:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1938
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1944
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 356:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1948
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1954
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 358:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1958
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 359:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1971
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 360:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1975
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 361:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1979
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 362:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1983
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 363:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1989
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 364:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1991
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 365:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1995
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1997
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 367:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2001
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 368:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2003
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 369:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2006
		{
			yyVAL.empty = struct{}{}
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2008
		{
			yyVAL.empty = struct{}{}
		}
	case 371:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2011
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2015
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 373:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2019
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2026
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2032
		{
			yyVAL.str = JoinStr
		}
	case 377:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2036
		{
			yyVAL.str = JoinStr
		}
	case 378:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2040
		{
			yyVAL.str = JoinStr
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2046
		{
			yyVAL.str = StraightJoinStr
		}
	case 380:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2052
		{
			yyVAL.str = LeftJoinStr
		}
	case 381:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2056
		{
			yyVAL.str = LeftJoinStr
		}
	case 382:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2060
		{
			yyVAL.str = RightJoinStr
		}
	case 383:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2064
		{
			yyVAL.str = RightJoinStr
		}
	case 384:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2070
		{
			yyVAL.str = NaturalJoinStr
		}
	case 385:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2074
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 386:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2084
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2088
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2094
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 389:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2098
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 390:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2104
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 391:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2109
		{
			yyVAL.indexHints = nil
		}
	case 392:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2113
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 393:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2117
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 394:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2121
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 395:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2126
		{
			yyVAL.expr = nil
		}
	case 396:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2130
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2136
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 398:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2140
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 399:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2144
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 400:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2148
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 401:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2152
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2156
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 403:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2160
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 404:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2166
		{
			yyVAL.str = ""
		}
	case 405:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2170
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2176
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2180
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 408:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2186
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 409:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2190
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 410:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2194
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 411:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2198
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 412:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2202
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2206
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 414:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2210
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 415:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2214
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 416:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2218
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 417:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2222
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2228
		{
			yyVAL.str = IsNullStr
		}
	case 419:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2232
		{
			yyVAL.str = IsNotNullStr
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2236
		{
			yyVAL.str = IsTrueStr
		}
	case 421:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2240
		{
			yyVAL.str = IsNotTrueStr
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2244
		{
			yyVAL.str = IsFalseStr
		}
	case 423:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2248
		{
			yyVAL.str = IsNotFalseStr
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2254
		{
			yyVAL.str = EqualStr
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2258
		{
			yyVAL.str = LessThanStr
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2262
		{
			yyVAL.str = GreaterThanStr
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2266
		{
			yyVAL.str = LessEqualStr
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2270
		{
			yyVAL.str = GreaterEqualStr
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2274
		{
			yyVAL.str = NotEqualStr
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2278
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 431:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2283
		{
			yyVAL.expr = nil
		}
	case 432:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2287
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2293
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2297
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2301
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 436:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2307
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2313
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 438:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2317
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2323
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2327
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2331
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2335
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2339
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 444:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2343
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 445:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2347
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 446:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2351
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 447:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2355
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 448:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2359
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 449:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2363
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 450:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2367
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 451:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2371
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 452:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2375
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 453:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2379
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 454:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2383
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 455:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2387
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 456:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2391
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2395
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 458:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2399
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 459:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2403
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 460:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2407
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 461:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2411
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Str, Expr: yyDollar[2].expr}
		}
	case 462:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2415
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 463:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2423
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 464:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2437
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 465:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2441
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 466:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2445
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 471:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2463
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 472:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2467
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 473:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2471
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 474:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2481
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 475:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2485
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 476:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2489
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 477:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2493
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 478:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2497
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 479:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2501
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 480:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2505
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 481:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2509
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 482:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2513
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 483:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2517
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 484:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2521
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 485:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2525
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 486:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2529
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 487:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2539
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 488:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2543
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 489:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2547
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 490:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2552
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 491:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2557
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 492:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2562
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 493:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2568
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 494:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2573
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 495:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2578
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 496:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2582
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 497:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2586
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_time"), Fsp: yyDollar[2].expr}
		}
	case 498:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2591
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtime"), Fsp: yyDollar[2].expr}
		}
	case 499:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2596
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtimestamp"), Fsp: yyDollar[2].expr}
		}
	case 500:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2601
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_time"), Fsp: yyDollar[2].expr}
		}
	case 501:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2605
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampadd"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 502:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2609
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampdiff"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 505:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2619
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 506:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2629
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 507:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2633
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 508:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2637
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 509:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2641
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 510:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2645
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 511:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2649
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 512:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2655
		{
			yyVAL.str = ""
		}
	case 513:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2659
		{
			yyVAL.str = BooleanModeStr
		}
	case 514:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2663
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 515:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2667
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 516:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2671
		{
			yyVAL.str = QueryExpansionStr
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2677
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2681
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 519:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2687
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 520:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2691
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 521:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2695
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: string(yyDollar[3].bytes)}
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2699
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 523:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2703
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 524:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2707
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2713
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 526:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2717
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2721
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 528:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2725
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 529:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2729
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2733
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 531:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2737
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 532:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2742
		{
			yyVAL.expr = nil
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2746
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 534:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2751
		{
			yyVAL.str = string("")
		}
	case 535:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2755
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2761
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 537:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2765
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 538:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2771
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 539:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2776
		{
			yyVAL.expr = nil
		}
	case 540:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2780
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2786
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 542:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2790
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 543:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2794
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2800
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2804
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2808
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2812
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2816
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2820
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2824
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2828
		{
			yyVAL.expr = &NullVal{}
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2834
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 553:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2843
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 554:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2847
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 555:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2852
		{
			yyVAL.exprs = nil
		}
	case 556:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2856
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 557:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2861
		{
			yyVAL.expr = nil
		}
	case 558:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2865
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 559:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2870
		{
			yyVAL.orderBy = nil
		}
	case 560:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2874
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2880
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 562:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2884
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 563:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2890
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 564:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2895
		{
			yyVAL.str = AscScr
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2899
		{
			yyVAL.str = AscScr
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2903
		{
			yyVAL.str = DescScr
		}
	case 567:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2908
		{
			yyVAL.limit = nil
		}
	case 568:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2912
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 569:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2916
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 570:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2920
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 571:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2925
		{
			yyVAL.str = ""
		}
	case 572:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2929
		{
			yyVAL.str = ForUpdateStr
		}
	case 573:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2933
		{
			yyVAL.str = ShareModeStr
		}
	case 574:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2946
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2950
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 576:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2954
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 577:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2959
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 578:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2963
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 579:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2967
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2974
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 581:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2978
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 582:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2982
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 583:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2986
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 584:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2991
		{
			yyVAL.updateExprs = nil
		}
	case 585:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2995
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3001
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 587:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3005
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3011
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 589:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3015
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 590:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3021
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3027
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3037
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 593:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3041
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 594:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3047
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3053
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 596:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3057
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 597:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3063
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 598:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3067
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 599:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3071
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 600:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3075
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 602:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3082
		{
			yyVAL.bytes = []byte("charset")
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3089
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3093
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3097
		{
			yyVAL.expr = &Default{}
		}
	case 609:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3106
		{
			yyVAL.byt = 0
		}
	case 610:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3108
		{
			yyVAL.byt = 1
		}
	case 611:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3111
		{
			yyVAL.empty = struct{}{}
		}
	case 612:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3113
		{
			yyVAL.empty = struct{}{}
		}
	case 613:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3116
		{
			yyVAL.str = ""
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3118
		{
			yyVAL.str = IgnoreStr
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3122
		{
			yyVAL.empty = struct{}{}
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3124
		{
			yyVAL.empty = struct{}{}
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3126
		{
			yyVAL.empty = struct{}{}
		}
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3128
		{
			yyVAL.empty = struct{}{}
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3130
		{
			yyVAL.empty = struct{}{}
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3132
		{
			yyVAL.empty = struct{}{}
		}
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3134
		{
			yyVAL.empty = struct{}{}
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3136
		{
			yyVAL.empty = struct{}{}
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3138
		{
			yyVAL.empty = struct{}{}
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3140
		{
			yyVAL.empty = struct{}{}
		}
	case 625:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3143
		{
			yyVAL.empty = struct{}{}
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3145
		{
			yyVAL.empty = struct{}{}
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3147
		{
			yyVAL.empty = struct{}{}
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3151
		{
			yyVAL.empty = struct{}{}
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3153
		{
			yyVAL.empty = struct{}{}
		}
	case 630:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3156
		{
			yyVAL.empty = struct{}{}
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3158
		{
			yyVAL.empty = struct{}{}
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3160
		{
			yyVAL.empty = struct{}{}
		}
	case 633:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3163
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 634:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3165
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3169
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3173
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3180
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3186
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3190
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3197
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 849:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3429
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 850:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3438
		{
			decNesting(yylex)
		}
	case 851:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3443
		{
			skipToEnd(yylex)
		}
	case 852:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3448
		{
			skipToEnd(yylex)
		}
	case 853:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3452
		{
			skipToEnd(yylex)
		}
	case 854:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3456
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
