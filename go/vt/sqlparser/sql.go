// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, node Statement) {
	yylex.(*Tokenizer).partialDDL = node
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line sql.y:53
type yySymType struct {
	yys                    int
	empty                  struct{}
	statement              Statement
	selStmt                SelectStatement
	ddl                    *DDL
	ins                    *Insert
	byt                    byte
	bytes                  []byte
	bytes2                 [][]byte
	str                    string
	strs                   []string
	selectExprs            SelectExprs
	selectExpr             SelectExpr
	columns                Columns
	partitions             Partitions
	colName                *ColName
	tableExprs             TableExprs
	tableExpr              TableExpr
	joinCondition          JoinCondition
	tableName              TableName
	tableNames             TableNames
	indexHints             *IndexHints
	expr                   Expr
	exprs                  Exprs
	boolVal                BoolVal
	boolean                bool
	literal                *Literal
	colTuple               ColTuple
	values                 Values
	valTuple               ValTuple
	subquery               *Subquery
	derivedTable           *DerivedTable
	whens                  []*When
	when                   *When
	orderBy                OrderBy
	order                  *Order
	limit                  *Limit
	updateExprs            UpdateExprs
	setExprs               SetExprs
	updateExpr             *UpdateExpr
	setExpr                *SetExpr
	characteristic         Characteristic
	characteristics        []Characteristic
	colIdent               ColIdent
	tableIdent             TableIdent
	convertType            *ConvertType
	aliasedTableName       *AliasedTableExpr
	TableSpec              *TableSpec
	columnType             ColumnType
	colKeyOpt              ColumnKeyOption
	optVal                 Expr
	LengthScaleOption      LengthScaleOption
	columnDefinition       *ColumnDefinition
	indexDefinition        *IndexDefinition
	indexInfo              *IndexInfo
	indexOption            *IndexOption
	indexOptions           []*IndexOption
	indexColumn            *IndexColumn
	indexColumns           []*IndexColumn
	constraintDefinition   *ConstraintDefinition
	constraintInfo         ConstraintInfo
	ReferenceAction        ReferenceAction
	partDefs               []*PartitionDefinition
	partDef                *PartitionDefinition
	partSpec               *PartitionSpec
	vindexParam            VindexParam
	vindexParams           []VindexParam
	showFilter             *ShowFilter
	optLike                *OptLike
	isolationLevel         IsolationLevel
	insertAction           InsertAction
	scope                  Scope
	ignore                 Ignore
	lock                   Lock
	joinType               JoinType
	comparisonExprOperator ComparisonExprOperator
	isExprOperator         IsExprOperator
	matchExprOption        MatchExprOption
	orderDirection         OrderDirection
	explainType            ExplainType
	selectInto             *SelectInto
	createIndex            *CreateIndex
	createDatabase         *CreateDatabase
	alterDatabase          *AlterDatabase
	collateAndCharset      CollateAndCharset
	collateAndCharsets     []CollateAndCharset
	createTable            *CreateTable
	tableAndLockTypes      []*TableAndLockType
	tableAndLockType       *TableAndLockType
	lockType               LockType
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const VSTREAM = 57350
const INSERT = 57351
const UPDATE = 57352
const DELETE = 57353
const FROM = 57354
const WHERE = 57355
const GROUP = 57356
const HAVING = 57357
const ORDER = 57358
const BY = 57359
const LIMIT = 57360
const OFFSET = 57361
const FOR = 57362
const ALL = 57363
const DISTINCT = 57364
const AS = 57365
const EXISTS = 57366
const ASC = 57367
const DESC = 57368
const INTO = 57369
const DUPLICATE = 57370
const KEY = 57371
const DEFAULT = 57372
const SET = 57373
const LOCK = 57374
const UNLOCK = 57375
const KEYS = 57376
const DO = 57377
const DISTINCTROW = 57378
const PARSER = 57379
const OUTFILE = 57380
const S3 = 57381
const DATA = 57382
const LOAD = 57383
const LINES = 57384
const TERMINATED = 57385
const ESCAPED = 57386
const ENCLOSED = 57387
const DUMPFILE = 57388
const CSV = 57389
const HEADER = 57390
const MANIFEST = 57391
const OVERWRITE = 57392
const STARTING = 57393
const OPTIONALLY = 57394
const VALUES = 57395
const LAST_INSERT_ID = 57396
const NEXT = 57397
const VALUE = 57398
const SHARE = 57399
const MODE = 57400
const SQL_NO_CACHE = 57401
const SQL_CACHE = 57402
const SQL_CALC_FOUND_ROWS = 57403
const JOIN = 57404
const STRAIGHT_JOIN = 57405
const LEFT = 57406
const RIGHT = 57407
const INNER = 57408
const OUTER = 57409
const CROSS = 57410
const NATURAL = 57411
const USE = 57412
const FORCE = 57413
const ON = 57414
const USING = 57415
const INPLACE = 57416
const COPY = 57417
const ALGORITHM = 57418
const NONE = 57419
const SHARED = 57420
const EXCLUSIVE = 57421
const ID = 57422
const AT_ID = 57423
const AT_AT_ID = 57424
const HEX = 57425
const STRING = 57426
const INTEGRAL = 57427
const FLOAT = 57428
const HEXNUM = 57429
const VALUE_ARG = 57430
const LIST_ARG = 57431
const COMMENT = 57432
const COMMENT_KEYWORD = 57433
const BIT_LITERAL = 57434
const NULL = 57435
const TRUE = 57436
const FALSE = 57437
const OFF = 57438
const OR = 57439
const XOR = 57440
const AND = 57441
const NOT = 57442
const BETWEEN = 57443
const CASE = 57444
const WHEN = 57445
const THEN = 57446
const ELSE = 57447
const END = 57448
const LE = 57449
const GE = 57450
const NE = 57451
const NULL_SAFE_EQUAL = 57452
const IS = 57453
const LIKE = 57454
const REGEXP = 57455
const IN = 57456
const SHIFT_LEFT = 57457
const SHIFT_RIGHT = 57458
const DIV = 57459
const MOD = 57460
const UNARY = 57461
const COLLATE = 57462
const BINARY = 57463
const UNDERSCORE_BINARY = 57464
const UNDERSCORE_UTF8MB4 = 57465
const UNDERSCORE_UTF8 = 57466
const UNDERSCORE_LATIN1 = 57467
const INTERVAL = 57468
const JSON_EXTRACT_OP = 57469
const JSON_UNQUOTE_EXTRACT_OP = 57470
const CREATE = 57471
const ALTER = 57472
const DROP = 57473
const RENAME = 57474
const ANALYZE = 57475
const ADD = 57476
const FLUSH = 57477
const SCHEMA = 57478
const TABLE = 57479
const INDEX = 57480
const VIEW = 57481
const TO = 57482
const IGNORE = 57483
const IF = 57484
const UNIQUE = 57485
const PRIMARY = 57486
const COLUMN = 57487
const SPATIAL = 57488
const FULLTEXT = 57489
const KEY_BLOCK_SIZE = 57490
const CHECK = 57491
const INDEXES = 57492
const ACTION = 57493
const CASCADE = 57494
const CONSTRAINT = 57495
const FOREIGN = 57496
const NO = 57497
const REFERENCES = 57498
const RESTRICT = 57499
const SHOW = 57500
const DESCRIBE = 57501
const EXPLAIN = 57502
const DATE = 57503
const ESCAPE = 57504
const REPAIR = 57505
const OPTIMIZE = 57506
const TRUNCATE = 57507
const MAXVALUE = 57508
const PARTITION = 57509
const REORGANIZE = 57510
const LESS = 57511
const THAN = 57512
const PROCEDURE = 57513
const TRIGGER = 57514
const VINDEX = 57515
const VINDEXES = 57516
const DIRECTORY = 57517
const NAME = 57518
const UPGRADE = 57519
const STATUS = 57520
const VARIABLES = 57521
const WARNINGS = 57522
const CASCADED = 57523
const DEFINER = 57524
const OPTION = 57525
const SQL = 57526
const UNDEFINED = 57527
const SEQUENCE = 57528
const MERGE = 57529
const TEMPTABLE = 57530
const INVOKER = 57531
const SECURITY = 57532
const BEGIN = 57533
const START = 57534
const TRANSACTION = 57535
const COMMIT = 57536
const ROLLBACK = 57537
const SAVEPOINT = 57538
const RELEASE = 57539
const WORK = 57540
const BIT = 57541
const TINYINT = 57542
const SMALLINT = 57543
const MEDIUMINT = 57544
const INT = 57545
const INTEGER = 57546
const BIGINT = 57547
const INTNUM = 57548
const REAL = 57549
const DOUBLE = 57550
const FLOAT_TYPE = 57551
const DECIMAL = 57552
const NUMERIC = 57553
const TIME = 57554
const TIMESTAMP = 57555
const DATETIME = 57556
const YEAR = 57557
const CHAR = 57558
const VARCHAR = 57559
const BOOL = 57560
const CHARACTER = 57561
const VARBINARY = 57562
const NCHAR = 57563
const TEXT = 57564
const TINYTEXT = 57565
const MEDIUMTEXT = 57566
const LONGTEXT = 57567
const BLOB = 57568
const TINYBLOB = 57569
const MEDIUMBLOB = 57570
const LONGBLOB = 57571
const JSON = 57572
const ENUM = 57573
const GEOMETRY = 57574
const POINT = 57575
const LINESTRING = 57576
const POLYGON = 57577
const GEOMETRYCOLLECTION = 57578
const MULTIPOINT = 57579
const MULTILINESTRING = 57580
const MULTIPOLYGON = 57581
const NULLX = 57582
const AUTO_INCREMENT = 57583
const APPROXNUM = 57584
const SIGNED = 57585
const UNSIGNED = 57586
const ZEROFILL = 57587
const COLLATION = 57588
const DATABASES = 57589
const SCHEMAS = 57590
const TABLES = 57591
const VITESS_METADATA = 57592
const VSCHEMA = 57593
const FULL = 57594
const PROCESSLIST = 57595
const COLUMNS = 57596
const FIELDS = 57597
const ENGINES = 57598
const PLUGINS = 57599
const EXTENDED = 57600
const KEYSPACES = 57601
const VITESS_KEYSPACES = 57602
const VITESS_SHARDS = 57603
const VITESS_TABLETS = 57604
const CODE = 57605
const PRIVILEGES = 57606
const FUNCTION = 57607
const NAMES = 57608
const CHARSET = 57609
const GLOBAL = 57610
const SESSION = 57611
const ISOLATION = 57612
const LEVEL = 57613
const READ = 57614
const WRITE = 57615
const ONLY = 57616
const REPEATABLE = 57617
const COMMITTED = 57618
const UNCOMMITTED = 57619
const SERIALIZABLE = 57620
const CURRENT_TIMESTAMP = 57621
const DATABASE = 57622
const CURRENT_DATE = 57623
const CURRENT_TIME = 57624
const LOCALTIME = 57625
const LOCALTIMESTAMP = 57626
const CURRENT_USER = 57627
const UTC_DATE = 57628
const UTC_TIME = 57629
const UTC_TIMESTAMP = 57630
const REPLACE = 57631
const CONVERT = 57632
const CAST = 57633
const SUBSTR = 57634
const SUBSTRING = 57635
const GROUP_CONCAT = 57636
const SEPARATOR = 57637
const TIMESTAMPADD = 57638
const TIMESTAMPDIFF = 57639
const MATCH = 57640
const AGAINST = 57641
const BOOLEAN = 57642
const LANGUAGE = 57643
const WITH = 57644
const QUERY = 57645
const EXPANSION = 57646
const UNUSED = 57647
const ARRAY = 57648
const CUME_DIST = 57649
const DESCRIPTION = 57650
const DENSE_RANK = 57651
const EMPTY = 57652
const EXCEPT = 57653
const FIRST_VALUE = 57654
const GROUPING = 57655
const GROUPS = 57656
const JSON_TABLE = 57657
const LAG = 57658
const LAST_VALUE = 57659
const LATERAL = 57660
const LEAD = 57661
const MEMBER = 57662
const NTH_VALUE = 57663
const NTILE = 57664
const OF = 57665
const OVER = 57666
const PERCENT_RANK = 57667
const RANK = 57668
const RECURSIVE = 57669
const ROW_NUMBER = 57670
const SYSTEM = 57671
const WINDOW = 57672
const ACTIVE = 57673
const ADMIN = 57674
const BUCKETS = 57675
const CLONE = 57676
const COMPONENT = 57677
const DEFINITION = 57678
const ENFORCED = 57679
const EXCLUDE = 57680
const FOLLOWING = 57681
const GEOMCOLLECTION = 57682
const GET_MASTER_PUBLIC_KEY = 57683
const HISTOGRAM = 57684
const HISTORY = 57685
const INACTIVE = 57686
const INVISIBLE = 57687
const LOCKED = 57688
const MASTER_COMPRESSION_ALGORITHMS = 57689
const MASTER_PUBLIC_KEY_PATH = 57690
const MASTER_TLS_CIPHERSUITES = 57691
const MASTER_ZSTD_COMPRESSION_LEVEL = 57692
const NESTED = 57693
const NETWORK_NAMESPACE = 57694
const NOWAIT = 57695
const NULLS = 57696
const OJ = 57697
const OLD = 57698
const OPTIONAL = 57699
const ORDINALITY = 57700
const ORGANIZATION = 57701
const OTHERS = 57702
const PATH = 57703
const PERSIST = 57704
const PERSIST_ONLY = 57705
const PRECEDING = 57706
const PRIVILEGE_CHECKS_USER = 57707
const PROCESS = 57708
const RANDOM = 57709
const REFERENCE = 57710
const REQUIRE_ROW_FORMAT = 57711
const RESOURCE = 57712
const RESPECT = 57713
const RESTART = 57714
const RETAIN = 57715
const REUSE = 57716
const ROLE = 57717
const SECONDARY = 57718
const SECONDARY_ENGINE = 57719
const SECONDARY_LOAD = 57720
const SECONDARY_UNLOAD = 57721
const SKIP = 57722
const SRID = 57723
const THREAD_PRIORITY = 57724
const TIES = 57725
const UNBOUNDED = 57726
const VCPU = 57727
const VISIBLE = 57728
const FORMAT = 57729
const TREE = 57730
const VITESS = 57731
const TRADITIONAL = 57732
const LOCAL = 57733
const LOW_PRIORITY = 57734

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"VSTREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"DO",
	"DISTINCTROW",
	"PARSER",
	"OUTFILE",
	"S3",
	"DATA",
	"LOAD",
	"LINES",
	"TERMINATED",
	"ESCAPED",
	"ENCLOSED",
	"DUMPFILE",
	"CSV",
	"HEADER",
	"MANIFEST",
	"OVERWRITE",
	"STARTING",
	"OPTIONALLY",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"SQL_CALC_FOUND_ROWS",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"INPLACE",
	"COPY",
	"ALGORITHM",
	"NONE",
	"SHARED",
	"EXCLUSIVE",
	"'('",
	"','",
	"')'",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"UNDERSCORE_UTF8",
	"UNDERSCORE_LATIN1",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"CHECK",
	"INDEXES",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"DIRECTORY",
	"NAME",
	"UPGRADE",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"CASCADED",
	"DEFINER",
	"OPTION",
	"SQL",
	"UNDEFINED",
	"SEQUENCE",
	"MERGE",
	"TEMPTABLE",
	"INVOKER",
	"SECURITY",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"SAVEPOINT",
	"RELEASE",
	"WORK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"SCHEMAS",
	"TABLES",
	"VITESS_METADATA",
	"VSCHEMA",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"PLUGINS",
	"EXTENDED",
	"KEYSPACES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"CODE",
	"PRIVILEGES",
	"FUNCTION",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"CURRENT_USER",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"ARRAY",
	"CUME_DIST",
	"DESCRIPTION",
	"DENSE_RANK",
	"EMPTY",
	"EXCEPT",
	"FIRST_VALUE",
	"GROUPING",
	"GROUPS",
	"JSON_TABLE",
	"LAG",
	"LAST_VALUE",
	"LATERAL",
	"LEAD",
	"MEMBER",
	"NTH_VALUE",
	"NTILE",
	"OF",
	"OVER",
	"PERCENT_RANK",
	"RANK",
	"RECURSIVE",
	"ROW_NUMBER",
	"SYSTEM",
	"WINDOW",
	"ACTIVE",
	"ADMIN",
	"BUCKETS",
	"CLONE",
	"COMPONENT",
	"DEFINITION",
	"ENFORCED",
	"EXCLUDE",
	"FOLLOWING",
	"GEOMCOLLECTION",
	"GET_MASTER_PUBLIC_KEY",
	"HISTOGRAM",
	"HISTORY",
	"INACTIVE",
	"INVISIBLE",
	"LOCKED",
	"MASTER_COMPRESSION_ALGORITHMS",
	"MASTER_PUBLIC_KEY_PATH",
	"MASTER_TLS_CIPHERSUITES",
	"MASTER_ZSTD_COMPRESSION_LEVEL",
	"NESTED",
	"NETWORK_NAMESPACE",
	"NOWAIT",
	"NULLS",
	"OJ",
	"OLD",
	"OPTIONAL",
	"ORDINALITY",
	"ORGANIZATION",
	"OTHERS",
	"PATH",
	"PERSIST",
	"PERSIST_ONLY",
	"PRECEDING",
	"PRIVILEGE_CHECKS_USER",
	"PROCESS",
	"RANDOM",
	"REFERENCE",
	"REQUIRE_ROW_FORMAT",
	"RESOURCE",
	"RESPECT",
	"RESTART",
	"RETAIN",
	"REUSE",
	"ROLE",
	"SECONDARY",
	"SECONDARY_ENGINE",
	"SECONDARY_LOAD",
	"SECONDARY_UNLOAD",
	"SKIP",
	"SRID",
	"THREAD_PRIORITY",
	"TIES",
	"UNBOUNDED",
	"VCPU",
	"VISIBLE",
	"FORMAT",
	"TREE",
	"VITESS",
	"TRADITIONAL",
	"LOCAL",
	"LOW_PRIORITY",
	"';'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 42,
	155, 806,
	-2, 87,
	-1, 43,
	136, 110,
	236, 110,
	-2, 104,
	-1, 50,
	34, 353,
	155, 353,
	167, 353,
	195, 367,
	196, 367,
	-2, 355,
	-1, 55,
	157, 377,
	-2, 375,
	-1, 79,
	55, 420,
	-2, 428,
	-1, 103,
	136, 110,
	236, 110,
	-2, 105,
	-1, 452,
	143, 817,
	-2, 813,
	-1, 453,
	143, 818,
	-2, 814,
	-1, 470,
	55, 421,
	-2, 433,
	-1, 471,
	55, 422,
	-2, 434,
	-1, 491,
	111, 1108,
	-2, 80,
	-1, 492,
	111, 1007,
	-2, 81,
	-1, 497,
	111, 963,
	-2, 777,
	-1, 499,
	111, 1048,
	-2, 779,
	-1, 654,
	136, 110,
	236, 110,
	-2, 273,
	-1, 1052,
	143, 820,
	-2, 816,
	-1, 1144,
	73, 62,
	81, 62,
	-2, 66,
	-1, 1540,
	5, 674,
	18, 674,
	20, 674,
	32, 674,
	82, 674,
	-2, 459,
	-1, 1750,
	45, 748,
	-2, 746,
}

const yyPrivate = 57344

const yyLast = 20011

var yyAct = [...]int{
	452, 1844, 1833, 1588, 1750, 1457, 1797, 1726, 1650, 396,
	1166, 1365, 425, 1673, 1696, 1217, 1520, 1333, 411, 1091,
	1517, 1366, 1521, 1211, 1410, 78, 3, 1165, 1433, 934,
	631, 771, 1352, 1162, 1434, 634, 815, 1175, 1039, 1532,
	463, 1505, 1477, 981, 822, 496, 113, 1046, 1219, 125,
	1292, 365, 125, 967, 384, 1141, 1426, 377, 628, 125,
	1130, 859, 1123, 843, 472, 820, 852, 1180, 825, 842,
	1093, 809, 31, 811, 1241, 667, 76, 1016, 1072, 457,
	1220, 398, 627, 845, 426, 32, 1106, 377, 858, 1146,
	377, 125, 377, 635, 387, 856, 832, 1207, 924, 394,
	849, 74, 1088, 1089, 984, 104, 105, 784, 1002, 73,
	125, 125, 1331, 706, 1049, 385, 386, 32, 125, 785,
	660, 1808, 123, 125, 1747, 8, 114, 115, 116, 7,
	79, 1573, 380, 1660, 1698, 1837, 1794, 1224, 6, 1196,
	1831, 75, 1773, 1823, 1589, 1793, 1772, 458, 1494, 1618,
	478, 482, 33, 643, 1332, 67, 37, 38, 1222, 459,
	101, 118, 119, 120, 633, 81, 82, 83, 84, 85,
	86, 1448, 1546, 1396, 96, 1447, 1395, 1157, 1158, 1397,
	356, 1156, 490, 648, 649, 677, 114, 115, 116, 357,
	675, 657, 1547, 1548, 704, 456, 663, 354, 437, 455,
	443, 444, 441, 442, 1418, 440, 439, 438, 1190, 645,
	644, 101, 109, 1459, 110, 445, 446, 860, 1653, 861,
	686, 687, 1090, 647, 1775, 1197, 66, 101, 93, 1221,
	1609, 351, 1607, 375, 97, 1077, 1444, 98, 99, 1001,
	363, 1737, 733, 732, 742, 743, 735, 736, 737, 738,
	739, 740, 741, 734, 379, 1478, 744, 695, 688, 697,
	373, 1229, 689, 686, 687, 1829, 1003, 1004, 1005, 703,
	678, 1582, 114, 115, 116, 676, 681, 682, 1583, 342,
	1231, 1460, 1232, 1233, 956, 927, 679, 680, 702, 683,
	655, 694, 696, 1462, 1271, 1461, 1480, 953, 955, 1822,
	1810, 1727, 1756, 1124, 100, 1263, 344, 345, 346, 1215,
	361, 362, 368, 630, 466, 700, 358, 360, 369, 347,
	348, 371, 370, 646, 350, 349, 111, 343, 353, 366,
	1215, 1809, 1821, 957, 954, 1553, 1850, 1215, 1716, 1334,
	1336, 1184, 125, 659, 640, 1482, 484, 1486, 1260, 1481,
	1848, 1479, 1463, 961, 1262, 100, 1484, 690, 693, 709,
	1443, 1504, 1503, 1502, 641, 1483, 377, 653, 1184, 341,
	117, 100, 1270, 1311, 1754, 1269, 756, 757, 1485, 1487,
	377, 377, 1572, 1223, 1639, 692, 708, 1545, 1357, 1321,
	1446, 1300, 1152, 836, 1771, 114, 115, 116, 769, 664,
	691, 737, 738, 739, 740, 741, 734, 715, 1163, 744,
	1308, 114, 115, 116, 744, 665, 1776, 1392, 1102, 998,
	670, 671, 672, 673, 674, 1197, 721, 1335, 735, 736,
	737, 738, 739, 740, 741, 734, 699, 89, 744, 1738,
	705, 650, 724, 651, 734, 1023, 652, 744, 701, 669,
	707, 367, 68, 724, 982, 1788, 125, 985, 1729, 1021,
	1022, 1020, 935, 1530, 1230, 1564, 32, 1183, 658, 1717,
	1715, 928, 1496, 493, 103, 754, 90, 753, 755, 862,
	1261, 377, 1259, 719, 125, 813, 125, 125, 1846, 377,
	684, 1847, 1073, 1845, 1183, 377, 1073, 1187, 1318, 772,
	930, 1416, 812, 1759, 1188, 756, 757, 718, 768, 807,
	829, 716, 773, 774, 775, 776, 777, 778, 779, 780,
	717, 783, 786, 786, 786, 792, 786, 786, 792, 786,
	800, 801, 802, 803, 804, 805, 806, 826, 1824, 810,
	1815, 841, 756, 757, 32, 1659, 787, 789, 791, 793,
	795, 797, 798, 1658, 946, 668, 639, 840, 788, 790,
	851, 794, 796, 983, 799, 1825, 986, 1816, 945, 1307,
	847, 733, 732, 742, 743, 735, 736, 737, 738, 739,
	740, 741, 734, 1251, 824, 744, 728, 654, 731, 661,
	662, 814, 1851, 1578, 745, 746, 747, 748, 749, 750,
	751, 1430, 729, 730, 727, 733, 732, 742, 743, 735,
	736, 737, 738, 739, 740, 741, 734, 66, 1429, 744,
	1227, 114, 115, 116, 1285, 1286, 1287, 125, 1293, 1019,
	467, 920, 944, 722, 723, 721, 1827, 1247, 1248, 1249,
	125, 1498, 931, 932, 723, 721, 722, 723, 721, 950,
	377, 724, 642, 1507, 125, 1826, 1817, 1805, 1852, 125,
	1786, 724, 125, 966, 724, 125, 742, 743, 735, 736,
	737, 738, 739, 740, 741, 734, 1306, 125, 744, 125,
	1686, 722, 723, 721, 1305, 941, 938, 939, 1656, 937,
	1585, 377, 377, 125, 377, 377, 125, 377, 377, 724,
	870, 1508, 1627, 722, 723, 721, 114, 115, 116, 1250,
	969, 1509, 1439, 929, 1255, 1252, 1243, 1253, 1246, 1427,
	1242, 724, 948, 951, 1244, 1245, 1282, 958, 1431, 987,
	971, 1722, 851, 1721, 707, 965, 483, 1670, 1254, 75,
	1017, 77, 970, 1107, 1108, 1040, 722, 723, 721, 1442,
	974, 973, 976, 975, 1042, 977, 978, 979, 980, 962,
	645, 644, 1353, 952, 724, 1386, 990, 857, 377, 993,
	1011, 1013, 1014, 1147, 943, 707, 707, 1012, 707, 707,
	1518, 707, 707, 1185, 1104, 1713, 1828, 1061, 1064, 1529,
	114, 115, 116, 1074, 1041, 1116, 942, 1713, 1769, 66,
	33, 377, 377, 996, 988, 989, 1115, 991, 992, 1018,
	994, 995, 125, 1765, 467, 1052, 467, 1056, 722, 723,
	721, 485, 486, 1051, 377, 114, 115, 116, 772, 1451,
	1127, 125, 1713, 1763, 377, 1529, 724, 1126, 125, 1634,
	125, 1713, 1755, 1713, 467, 947, 1103, 1703, 125, 125,
	720, 1082, 1083, 1097, 488, 377, 1043, 1044, 377, 1728,
	949, 1713, 1712, 1109, 1115, 722, 723, 721, 1568, 377,
	377, 1806, 1053, 1142, 66, 493, 414, 413, 416, 417,
	418, 419, 1052, 724, 1127, 415, 420, 1127, 1057, 1058,
	1121, 1117, 1063, 1066, 1067, 114, 115, 116, 33, 1399,
	1182, 114, 115, 116, 1118, 1239, 923, 1649, 1626, 467,
	1400, 1122, 1148, 1125, 1637, 467, 1155, 1081, 1570, 1569,
	1084, 1085, 1144, 1360, 377, 1566, 1567, 1566, 1565, 1148,
	1119, 1353, 1143, 1115, 467, 1238, 1127, 467, 720, 467,
	1150, 923, 922, 1213, 1154, 1361, 869, 868, 33, 1145,
	1153, 1214, 1170, 1324, 125, 125, 125, 125, 125, 1323,
	1115, 125, 125, 1237, 1147, 125, 377, 460, 1105, 1086,
	960, 1661, 66, 1149, 854, 1191, 1675, 1192, 1193, 1194,
	1195, 1151, 1669, 125, 125, 125, 1645, 925, 1212, 1584,
	1149, 1240, 1557, 1203, 1204, 1205, 1206, 125, 1147, 1529,
	125, 377, 453, 921, 1404, 1208, 1054, 1055, 1202, 1201,
	91, 1226, 1236, 1256, 1209, 1210, 1435, 1225, 1662, 1663,
	1664, 1436, 66, 1198, 1199, 1200, 638, 1264, 1265, 1266,
	1267, 1268, 1458, 1017, 1272, 1273, 1665, 1676, 1274, 1533,
	1534, 66, 1224, 1839, 1834, 1559, 1536, 1518, 1449, 1098,
	707, 126, 999, 964, 126, 1539, 1538, 1276, 1279, 378,
	1436, 126, 1374, 1280, 1373, 1132, 1135, 1136, 1137, 1133,
	1281, 1134, 1138, 1283, 1342, 1533, 1534, 1377, 1375, 1275,
	1666, 1667, 1378, 1376, 823, 1812, 1792, 125, 1379, 378,
	1136, 1137, 378, 126, 378, 125, 1510, 1302, 1288, 1790,
	1638, 1351, 1018, 1132, 1135, 1136, 1137, 1133, 1350, 1134,
	1138, 1781, 126, 126, 1778, 1814, 1796, 125, 1798, 1340,
	126, 1804, 1803, 1751, 1749, 126, 458, 1341, 125, 125,
	125, 125, 125, 1301, 1339, 1299, 1367, 959, 459, 454,
	125, 95, 1440, 1069, 125, 1435, 1346, 125, 125, 1362,
	1317, 125, 125, 125, 1422, 1358, 1050, 1070, 1330, 933,
	867, 391, 1297, 1298, 1398, 1338, 377, 816, 666, 1384,
	810, 1345, 1355, 1415, 107, 1405, 1401, 1337, 1761, 817,
	1411, 1411, 1356, 1315, 1354, 1760, 108, 1701, 1413, 121,
	1406, 1632, 1369, 1370, 1587, 1372, 1100, 1368, 969, 1380,
	1371, 847, 1387, 1107, 1108, 1412, 1389, 1385, 1363, 1364,
	1234, 963, 847, 847, 847, 847, 847, 1393, 1390, 1723,
	1140, 1388, 464, 1050, 1819, 377, 461, 462, 1143, 1403,
	1421, 847, 1423, 1424, 1425, 847, 1818, 77, 1450, 1801,
	1782, 493, 473, 1630, 493, 1407, 1408, 1409, 473, 1349,
	1631, 1438, 465, 1513, 1353, 1167, 474, 1348, 125, 1428,
	1841, 1840, 474, 1312, 377, 1309, 837, 1437, 830, 1841,
	1752, 1654, 1101, 460, 75, 377, 80, 72, 1295, 827,
	828, 476, 1296, 475, 1, 470, 471, 476, 352, 475,
	1087, 808, 364, 1303, 1304, 1832, 1452, 112, 1590, 1310,
	1672, 377, 1313, 1314, 940, 1725, 1235, 1040, 1432, 1218,
	1320, 1453, 1173, 1455, 1322, 1164, 88, 1325, 1326, 1327,
	1328, 1329, 625, 1465, 87, 1466, 698, 1172, 1171, 1714,
	1417, 1454, 1419, 1420, 1189, 1652, 1558, 1414, 377, 1476,
	1467, 1758, 875, 873, 126, 1488, 1475, 1473, 125, 874,
	1489, 872, 877, 876, 871, 1000, 374, 1139, 377, 707,
	1495, 863, 831, 1258, 377, 377, 1257, 1052, 378, 936,
	1367, 1571, 1519, 1186, 1522, 1051, 997, 1382, 1383, 359,
	685, 355, 378, 378, 752, 1347, 1394, 125, 1464, 494,
	487, 1668, 1524, 94, 1802, 1779, 1777, 1748, 1528, 1516,
	1697, 377, 1780, 377, 1746, 377, 1527, 1813, 1411, 1411,
	1411, 1537, 1795, 1550, 1099, 819, 1629, 1512, 1541, 1316,
	1543, 1511, 1544, 1563, 781, 1071, 846, 397, 1549, 1010,
	412, 409, 1554, 1555, 1556, 410, 1182, 1110, 1359, 726,
	1551, 1579, 1542, 1552, 125, 395, 1523, 389, 32, 838,
	125, 1131, 1129, 1561, 1562, 1128, 850, 1535, 126, 1591,
	377, 377, 377, 1575, 125, 1576, 1577, 1531, 1574, 844,
	1114, 847, 732, 742, 743, 735, 736, 737, 738, 739,
	740, 741, 734, 378, 1445, 744, 126, 926, 126, 126,
	1228, 378, 1581, 637, 469, 92, 1068, 378, 1736, 1617,
	468, 58, 36, 381, 1807, 1787, 1605, 711, 477, 30,
	29, 28, 23, 22, 21, 20, 1600, 1580, 19, 25,
	18, 17, 16, 1586, 106, 102, 45, 43, 41, 40,
	656, 27, 26, 1471, 1472, 15, 14, 1595, 13, 1367,
	1633, 1596, 1597, 12, 11, 10, 9, 5, 4, 714,
	377, 1642, 1167, 24, 770, 2, 0, 0, 377, 0,
	1401, 758, 759, 760, 761, 762, 763, 764, 765, 766,
	767, 0, 0, 1641, 0, 1648, 0, 1602, 1603, 1616,
	1604, 0, 0, 1606, 0, 1608, 1647, 1622, 1623, 1624,
	377, 0, 0, 0, 0, 0, 0, 0, 0, 1525,
	0, 0, 0, 0, 1679, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 423, 0, 0, 0, 0, 0,
	1540, 0, 0, 377, 377, 377, 125, 377, 0, 126,
	0, 1689, 1691, 1692, 0, 0, 0, 1677, 377, 0,
	377, 0, 126, 0, 0, 1693, 377, 1522, 1628, 0,
	0, 1522, 378, 0, 1709, 1706, 126, 1702, 1685, 0,
	0, 126, 1704, 1700, 126, 1711, 0, 126, 0, 0,
	377, 376, 1671, 1718, 0, 0, 377, 125, 1724, 126,
	0, 126, 1708, 0, 1730, 0, 0, 1474, 1710, 1719,
	0, 1720, 0, 378, 378, 126, 378, 378, 126, 378,
	378, 495, 0, 0, 629, 1655, 636, 1657, 1499, 1599,
	0, 1745, 0, 1601, 377, 0, 1522, 0, 0, 1523,
	1753, 32, 0, 1523, 1610, 1611, 0, 0, 377, 377,
	377, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1768, 1625, 1767, 1678, 1474, 0, 0, 0, 0, 1762,
	1731, 0, 0, 0, 480, 377, 0, 125, 0, 1635,
	1636, 1774, 1367, 1640, 1783, 0, 0, 1695, 0, 0,
	378, 0, 0, 1789, 0, 1791, 0, 0, 0, 0,
	0, 0, 1800, 1799, 0, 0, 0, 1167, 1523, 1167,
	0, 0, 0, 0, 0, 1811, 0, 0, 0, 0,
	0, 0, 0, 378, 378, 0, 0, 377, 32, 0,
	0, 0, 0, 0, 126, 1820, 0, 388, 0, 0,
	0, 0, 0, 0, 892, 0, 378, 0, 0, 0,
	1785, 0, 1621, 126, 0, 1838, 378, 0, 0, 0,
	126, 0, 126, 1849, 0, 0, 0, 0, 0, 0,
	126, 126, 0, 0, 0, 0, 0, 378, 1690, 0,
	378, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 378, 378, 733, 732, 742, 743, 735, 736, 737,
	738, 739, 740, 741, 734, 0, 0, 744, 1015, 0,
	0, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032,
	1033, 1034, 1035, 1036, 1037, 1038, 0, 1830, 0, 0,
	0, 0, 0, 0, 0, 0, 1732, 1733, 1734, 1735,
	0, 1739, 0, 1740, 1741, 1742, 378, 1743, 1744, 0,
	880, 0, 0, 0, 0, 0, 1167, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1078, 0,
	0, 0, 0, 0, 0, 0, 126, 126, 126, 126,
	126, 1764, 0, 126, 126, 0, 0, 126, 378, 0,
	0, 893, 1770, 0, 0, 0, 1674, 0, 0, 0,
	495, 0, 0, 0, 0, 126, 126, 126, 0, 0,
	0, 0, 0, 0, 710, 712, 0, 0, 0, 126,
	0, 0, 126, 378, 0, 0, 0, 0, 0, 906,
	909, 910, 911, 912, 913, 914, 0, 915, 916, 917,
	918, 919, 894, 895, 896, 897, 878, 879, 907, 0,
	881, 0, 882, 883, 884, 885, 886, 887, 888, 889,
	890, 891, 898, 899, 900, 901, 902, 903, 904, 905,
	0, 0, 0, 1468, 1615, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 33, 34, 35, 67, 37,
	38, 1842, 1843, 733, 732, 742, 743, 735, 736, 737,
	738, 739, 740, 741, 734, 71, 0, 744, 0, 126,
	39, 64, 65, 0, 62, 834, 0, 126, 0, 0,
	63, 0, 0, 495, 0, 0, 0, 0, 0, 864,
	908, 0, 0, 0, 0, 1674, 1167, 0, 0, 126,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 51,
	126, 126, 126, 126, 126, 0, 0, 0, 0, 66,
	0, 0, 126, 0, 0, 725, 126, 0, 0, 126,
	126, 0, 0, 126, 126, 126, 733, 732, 742, 743,
	735, 736, 737, 738, 739, 740, 741, 734, 378, 0,
	744, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 388, 0, 1289, 1290, 1291, 0, 0, 0, 0,
	782, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 467, 0, 0, 42, 44, 47, 46, 49,
	0, 61, 0, 0, 0, 0, 0, 0, 0, 818,
	821, 0, 0, 1614, 0, 0, 0, 378, 0, 0,
	0, 0, 0, 0, 50, 70, 69, 1620, 0, 59,
	60, 48, 733, 732, 742, 743, 735, 736, 737, 738,
	739, 740, 741, 734, 0, 0, 744, 0, 0, 0,
	126, 0, 0, 0, 495, 424, 378, 52, 53, 0,
	54, 55, 56, 57, 0, 0, 0, 378, 733, 732,
	742, 743, 735, 736, 737, 738, 739, 740, 741, 734,
	0, 0, 744, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 378, 0, 495, 495, 0, 495, 495,
	0, 495, 495, 0, 124, 0, 0, 372, 0, 0,
	0, 0, 0, 1613, 124, 733, 732, 742, 743, 735,
	736, 737, 738, 739, 740, 741, 734, 0, 0, 744,
	378, 0, 0, 0, 0, 0, 0, 481, 481, 0,
	126, 0, 0, 0, 0, 0, 124, 0, 0, 0,
	378, 0, 0, 0, 0, 68, 378, 378, 0, 0,
	0, 0, 0, 0, 0, 124, 124, 0, 0, 0,
	0, 0, 1045, 124, 495, 1612, 0, 0, 124, 126,
	0, 0, 0, 0, 0, 0, 0, 0, 1075, 0,
	0, 0, 0, 378, 0, 378, 0, 378, 0, 0,
	0, 0, 0, 0, 0, 1079, 1080, 0, 0, 0,
	0, 0, 0, 0, 972, 733, 732, 742, 743, 735,
	736, 737, 738, 739, 740, 741, 734, 0, 1111, 744,
	0, 0, 0, 0, 0, 0, 126, 0, 834, 0,
	0, 495, 126, 0, 0, 1469, 1470, 0, 0, 0,
	0, 0, 378, 378, 378, 0, 126, 0, 0, 495,
	1490, 1491, 495, 1492, 1493, 1006, 1007, 1008, 1009, 0,
	0, 0, 1294, 495, 629, 1500, 1501, 733, 732, 742,
	743, 735, 736, 737, 738, 739, 740, 741, 734, 0,
	0, 744, 733, 732, 742, 743, 735, 736, 737, 738,
	739, 740, 741, 734, 0, 0, 744, 0, 733, 732,
	742, 743, 735, 736, 737, 738, 739, 740, 741, 734,
	1059, 1060, 744, 0, 0, 0, 0, 0, 636, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 378, 0, 0, 0, 0, 0, 0, 0,
	378, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1560, 0, 0,
	495, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 378, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 124, 0, 0,
	0, 0, 0, 0, 0, 1284, 0, 1161, 0, 0,
	0, 0, 0, 0, 0, 378, 378, 378, 126, 378,
	1598, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	378, 0, 378, 0, 0, 0, 0, 0, 378, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 378, 0, 0, 0, 1216, 0, 378, 126,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 378, 0, 0, 0,
	0, 124, 0, 0, 0, 0, 0, 0, 0, 0,
	378, 378, 378, 0, 0, 481, 0, 0, 0, 0,
	0, 1075, 0, 0, 0, 0, 0, 0, 0, 124,
	0, 124, 853, 0, 0, 0, 0, 378, 0, 126,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1680, 1681, 1682, 1683, 1684, 0,
	495, 0, 1687, 1688, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 378,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1319, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1441,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1343, 1344,
	821, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1456, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 495,
	0, 0, 124, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 124, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 495, 0, 0, 0, 124,
	0, 0, 0, 0, 124, 0, 0, 124, 0, 0,
	968, 0, 0, 0, 0, 0, 495, 0, 0, 0,
	0, 0, 124, 0, 124, 0, 0, 0, 0, 0,
	0, 0, 1506, 0, 0, 0, 0, 0, 124, 0,
	0, 124, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 495, 0, 0, 1075, 0, 0, 1526, 1506,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1835, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 495, 0, 495, 0, 636,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 481, 968, 0, 0, 0, 481,
	481, 0, 0, 481, 481, 481, 0, 0, 0, 1076,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 481, 481,
	481, 481, 481, 1497, 1592, 1593, 1594, 1095, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 124, 0, 0, 0,
	0, 0, 968, 124, 0, 124, 0, 0, 1514, 0,
	0, 0, 0, 124, 124, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1075, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 495, 0, 0, 0, 0, 0,
	0, 0, 1651, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 495, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 124,
	124, 124, 124, 124, 0, 0, 124, 124, 0, 0,
	124, 0, 0, 0, 0, 0, 0, 1651, 1651, 1651,
	0, 1694, 0, 0, 0, 0, 0, 0, 1277, 1278,
	124, 0, 1705, 1619, 1707, 0, 0, 0, 0, 0,
	1651, 0, 124, 0, 0, 124, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 388, 0,
	0, 0, 0, 0, 1651, 1643, 0, 0, 1644, 0,
	1651, 1646, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 481, 481, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1757, 0,
	0, 0, 0, 0, 481, 0, 0, 0, 0, 0,
	0, 0, 1766, 495, 495, 0, 0, 0, 0, 0,
	0, 0, 124, 0, 0, 0, 0, 0, 0, 0,
	1095, 0, 0, 0, 0, 0, 0, 1075, 0, 1784,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 481, 124, 0, 0, 1699, 388, 0, 0, 0,
	0, 0, 1076, 124, 124, 124, 124, 124, 0, 0,
	0, 0, 0, 0, 0, 1381, 0, 0, 0, 124,
	0, 0, 124, 124, 0, 0, 124, 1391, 968, 0,
	0, 1651, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 124, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 481, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 968, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 124, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1076, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 124, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 124,
	0, 0, 0, 0, 0, 124, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 124,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1076, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 609, 597,
	0, 1095, 550, 612, 523, 540, 621, 541, 544, 582,
	507, 563, 238, 538, 0, 527, 503, 534, 504, 525,
	552, 166, 556, 522, 599, 566, 611, 202, 0, 528,
	250, 584, 282, 156, 210, 208, 304, 171, 167, 165,
	155, 189, 215, 249, 300, 243, 618, 205, 573, 0,
	291, 224, 124, 0, 0, 554, 601, 561, 593, 549,
	583, 512, 572, 613, 539, 580, 614, 193, 154, 131,
	235, 292, 173, 0, 0, 0, 114, 115, 116, 0,
	1168, 1169, 0, 0, 0, 0, 0, 150, 0, 577,
	608, 536, 579, 581, 624, 502, 574, 0, 505, 508,
	620, 604, 531, 532, 1402, 0, 0, 0, 0, 0,
	0, 553, 562, 590, 547, 0, 0, 0, 0, 0,
	0, 0, 0, 529, 0, 571, 0, 0, 1076, 509,
	506, 0, 124, 0, 0, 551, 0, 0, 0, 511,
	0, 530, 591, 0, 500, 178, 595, 603, 548, 328,
	607, 546, 545, 610, 262, 0, 296, 182, 201, 145,
	198, 128, 140, 0, 180, 234, 269, 273, 600, 526,
	535, 157, 533, 271, 247, 317, 570, 251, 270, 206,
	306, 263, 316, 329, 330, 163, 228, 323, 301, 326,
	338, 141, 160, 241, 297, 320, 288, 223, 303, 197,
	287, 133, 299, 314, 151, 281, 0, 0, 0, 135,
	312, 295, 221, 194, 195, 134, 0, 267, 164, 176,
	159, 237, 309, 310, 158, 339, 142, 325, 137, 143,
	324, 230, 305, 313, 222, 214, 136, 311, 220, 213,
	200, 170, 185, 260, 209, 261, 186, 226, 225, 227,
	0, 132, 0, 293, 321, 340, 148, 521, 596, 302,
	334, 337, 0, 264, 149, 177, 169, 259, 175, 203,
	333, 335, 336, 147, 257, 183, 229, 144, 188, 289,
	199, 207, 588, 623, 246, 272, 152, 319, 290, 516,
	520, 514, 515, 564, 565, 517, 615, 616, 617, 592,
	510, 0, 518, 519, 0, 598, 605, 606, 569, 127,
	138, 204, 619, 265, 174, 322, 501, 513, 162, 524,
	0, 0, 537, 542, 543, 555, 557, 558, 559, 560,
	568, 575, 576, 578, 585, 586, 587, 589, 594, 602,
	622, 129, 130, 139, 146, 153, 161, 168, 172, 179,
	184, 187, 190, 191, 192, 196, 212, 216, 217, 218,
	219, 231, 232, 233, 236, 239, 240, 242, 244, 245,
	248, 252, 253, 254, 255, 256, 258, 266, 268, 274,
	275, 276, 277, 278, 279, 280, 283, 284, 285, 286,
	294, 298, 307, 308, 318, 327, 331, 181, 315, 332,
	0, 211, 567, 609, 597, 0, 0, 550, 612, 523,
	540, 621, 541, 544, 582, 507, 563, 238, 538, 0,
	527, 503, 534, 504, 525, 552, 166, 556, 522, 599,
	566, 611, 202, 0, 528, 250, 584, 282, 156, 210,
	208, 304, 171, 167, 165, 155, 189, 215, 249, 300,
	243, 618, 205, 573, 0, 291, 224, 0, 0, 0,
	554, 601, 561, 593, 549, 583, 512, 572, 613, 539,
	580, 614, 193, 154, 131, 235, 292, 173, 0, 0,
	0, 114, 115, 116, 0, 1168, 1169, 0, 0, 0,
	0, 0, 150, 0, 577, 608, 536, 579, 581, 624,
	502, 574, 0, 505, 508, 620, 604, 531, 532, 0,
	0, 0, 0, 0, 0, 0, 553, 562, 590, 547,
	0, 0, 0, 0, 0, 0, 0, 0, 529, 0,
	571, 0, 0, 0, 509, 506, 0, 0, 0, 0,
	551, 0, 0, 0, 511, 0, 530, 591, 0, 500,
	178, 595, 603, 548, 328, 607, 546, 545, 610, 262,
	0, 296, 182, 201, 145, 198, 128, 140, 0, 180,
	234, 269, 273, 600, 526, 535, 157, 533, 271, 247,
	317, 570, 251, 270, 206, 306, 263, 316, 329, 330,
	163, 228, 323, 301, 326, 338, 141, 160, 241, 297,
	320, 288, 223, 303, 197, 287, 133, 299, 314, 151,
	281, 0, 0, 0, 135, 312, 295, 221, 194, 195,
	134, 0, 267, 164, 176, 159, 237, 309, 310, 158,
	339, 142, 325, 137, 143, 324, 230, 305, 313, 222,
	214, 136, 311, 220, 213, 200, 170, 185, 260, 209,
	261, 186, 226, 225, 227, 0, 132, 0, 293, 321,
	340, 148, 521, 596, 302, 334, 337, 0, 264, 149,
	177, 169, 259, 175, 203, 333, 335, 336, 147, 257,
	183, 229, 144, 188, 289, 199, 207, 588, 623, 246,
	272, 152, 319, 290, 516, 520, 514, 515, 564, 565,
	517, 615, 616, 617, 592, 510, 0, 518, 519, 0,
	598, 605, 606, 569, 127, 138, 204, 619, 265, 174,
	322, 501, 513, 162, 524, 0, 0, 537, 542, 543,
	555, 557, 558, 559, 560, 568, 575, 576, 578, 585,
	586, 587, 589, 594, 602, 622, 129, 130, 139, 146,
	153, 161, 168, 172, 179, 184, 187, 190, 191, 192,
	196, 212, 216, 217, 218, 219, 231, 232, 233, 236,
	239, 240, 242, 244, 245, 248, 252, 253, 254, 255,
	256, 258, 266, 268, 274, 275, 276, 277, 278, 279,
	280, 283, 284, 285, 286, 294, 298, 307, 308, 318,
	327, 331, 181, 315, 332, 0, 211, 567, 609, 597,
	0, 0, 550, 612, 523, 540, 621, 541, 544, 582,
	507, 563, 238, 538, 0, 527, 503, 534, 504, 525,
	552, 166, 556, 522, 599, 566, 611, 202, 0, 528,
	250, 584, 282, 156, 210, 208, 304, 171, 167, 165,
	155, 189, 215, 249, 300, 243, 618, 205, 573, 0,
	291, 224, 0, 0, 0, 554, 601, 561, 593, 549,
	583, 512, 572, 613, 539, 580, 614, 193, 154, 131,
	235, 292, 173, 0, 0, 0, 114, 115, 116, 0,
	0, 0, 0, 0, 0, 0, 0, 150, 0, 577,
	608, 536, 579, 581, 624, 502, 574, 0, 505, 508,
	620, 604, 531, 532, 0, 0, 0, 0, 0, 0,
	0, 553, 562, 590, 547, 0, 0, 0, 0, 0,
	0, 1515, 0, 529, 0, 571, 0, 0, 0, 509,
	506, 0, 0, 0, 0, 551, 0, 0, 0, 511,
	0, 530, 591, 0, 500, 178, 595, 603, 548, 328,
	607, 546, 545, 610, 262, 0, 296, 182, 201, 145,
	198, 128, 140, 0, 180, 234, 269, 273, 600, 526,
	535, 157, 533, 271, 247, 317, 570, 251, 270, 206,
	306, 263, 316, 329, 330, 163, 228, 323, 301, 326,
	338, 141, 160, 241, 297, 320, 288, 223, 303, 197,
	287, 133, 299, 314, 151, 281, 0, 0, 0, 135,
	312, 295, 221, 194, 195, 134, 0, 267, 164, 176,
	159, 237, 309, 310, 158, 339, 142, 325, 137, 143,
	324, 230, 305, 313, 222, 214, 136, 311, 220, 213,
	200, 170, 185, 260, 209, 261, 186, 226, 225, 227,
	0, 132, 0, 293, 321, 340, 148, 521, 596, 302,
	334, 337, 0, 264, 149, 177, 169, 259, 175, 203,
	333, 335, 336, 147, 257, 183, 229, 144, 188, 289,
	199, 207, 588, 623, 246, 272, 152, 319, 290, 516,
	520, 514, 515, 564, 565, 517, 615, 616, 617, 592,
	510, 0, 518, 519, 0, 598, 605, 606, 569, 127,
	138, 204, 619, 265, 174, 322, 501, 513, 162, 524,
	0, 0, 537, 542, 543, 555, 557, 558, 559, 560,
	568, 575, 576, 578, 585, 586, 587, 589, 594, 602,
	622, 129, 130, 139, 146, 153, 161, 168, 172, 179,
	184, 187, 190, 191, 192, 196, 212, 216, 217, 218,
	219, 231, 232, 233, 236, 239, 240, 242, 244, 245,
	248, 252, 253, 254, 255, 256, 258, 266, 268, 274,
	275, 276, 277, 278, 279, 280, 283, 284, 285, 286,
	294, 298, 307, 308, 318, 327, 331, 181, 315, 332,
	0, 211, 567, 609, 597, 0, 0, 550, 612, 523,
	540, 621, 541, 544, 582, 507, 563, 238, 538, 0,
	527, 503, 534, 504, 525, 552, 166, 556, 522, 599,
	566, 611, 202, 0, 528, 250, 584, 282, 156, 210,
	208, 304, 171, 167, 165, 155, 189, 215, 249, 300,
	243, 618, 205, 573, 0, 291, 224, 0, 0, 0,
	554, 601, 561, 593, 549, 583, 512, 572, 613, 539,
	580, 614, 193, 154, 131, 235, 292, 173, 66, 0,
	0, 114, 115, 116, 0, 0, 0, 0, 0, 0,
	0, 0, 150, 0, 577, 608, 536, 579, 581, 624,
	502, 574, 0, 505, 508, 620, 604, 531, 532, 0,
	0, 0, 0, 0, 0, 0, 553, 562, 590, 547,
	0, 0, 0, 0, 0, 0, 0, 0, 529, 0,
	571, 0, 0, 0, 509, 506, 0, 0, 0, 0,
	551, 0, 0, 0, 511, 0, 530, 591, 0, 500,
	178, 595, 603, 548, 328, 607, 546, 545, 610, 262,
	0, 296, 182, 201, 145, 198, 128, 140, 0, 180,
	234, 269, 273, 600, 526, 535, 157, 533, 271, 247,
	317, 570, 251, 270, 206, 306, 263, 316, 329, 330,
	163, 228, 323, 301, 326, 338, 141, 160, 241, 297,
	320, 288, 223, 303, 197, 287, 133, 299, 314, 151,
	281, 0, 0, 0, 135, 312, 295, 221, 194, 195,
	134, 0, 267, 164, 176, 159, 237, 309, 310, 158,
	339, 142, 325, 137, 143, 324, 230, 305, 313, 222,
	214, 136, 311, 220, 213, 200, 170, 185, 260, 209,
	261, 186, 226, 225, 227, 0, 132, 0, 293, 321,
	340, 148, 521, 596, 302, 334, 337, 0, 264, 149,
	177, 169, 259, 175, 203, 333, 335, 336, 147, 257,
	183, 229, 144, 188, 289, 199, 207, 588, 623, 246,
	272, 152, 319, 290, 516, 520, 514, 515, 564, 565,
	517, 615, 616, 617, 592, 510, 0, 518, 519, 0,
	598, 605, 606, 569, 127, 138, 204, 619, 265, 174,
	322, 501, 513, 162, 524, 0, 0, 537, 542, 543,
	555, 557, 558, 559, 560, 568, 575, 576, 578, 585,
	586, 587, 589, 594, 602, 622, 129, 130, 139, 146,
	153, 161, 168, 172, 179, 184, 187, 190, 191, 192,
	196, 212, 216, 217, 218, 219, 231, 232, 233, 236,
	239, 240, 242, 244, 245, 248, 252, 253, 254, 255,
	256, 258, 266, 268, 274, 275, 276, 277, 278, 279,
	280, 283, 284, 285, 286, 294, 298, 307, 308, 318,
	327, 331, 181, 315, 332, 0, 211, 567, 609, 597,
	0, 0, 550, 612, 523, 540, 621, 541, 544, 582,
	507, 563, 238, 538, 0, 527, 503, 534, 504, 525,
	552, 166, 556, 522, 599, 566, 611, 202, 0, 528,
	250, 584, 282, 156, 210, 208, 304, 171, 167, 165,
	155, 189, 215, 249, 300, 243, 618, 205, 573, 0,
	291, 224, 0, 0, 0, 554, 601, 561, 593, 549,
	583, 512, 572, 613, 539, 580, 614, 193, 154, 131,
	235, 292, 173, 0, 0, 0, 114, 115, 116, 0,
	0, 0, 0, 0, 0, 0, 0, 150, 0, 577,
	608, 536, 579, 581, 624, 502, 574, 0, 505, 508,
	620, 604, 531, 532, 0, 0, 0, 0, 0, 0,
	0, 553, 562, 590, 547, 0, 0, 0, 0, 0,
	0, 1392, 0, 529, 0, 571, 0, 0, 0, 509,
	506, 0, 0, 0, 0, 551, 0, 0, 0, 511,
	0, 530, 591, 0, 500, 178, 595, 603, 548, 328,
	607, 546, 545, 610, 262, 0, 296, 182, 201, 145,
	198, 128, 140, 0, 180, 234, 269, 273, 600, 526,
	535, 157, 533, 271, 247, 317, 570, 251, 270, 206,
	306, 263, 316, 329, 330, 163, 228, 323, 301, 326,
	338, 141, 160, 241, 297, 320, 288, 223, 303, 197,
	287, 133, 299, 314, 151, 281, 0, 0, 0, 135,
	312, 295, 221, 194, 195, 134, 0, 267, 164, 176,
	159, 237, 309, 310, 158, 339, 142, 325, 137, 143,
	324, 230, 305, 313, 222, 214, 136, 311, 220, 213,
	200, 170, 185, 260, 209, 261, 186, 226, 225, 227,
	0, 132, 0, 293, 321, 340, 148, 521, 596, 302,
	334, 337, 0, 264, 149, 177, 169, 259, 175, 203,
	333, 335, 336, 147, 257, 183, 229, 144, 188, 289,
	199, 207, 588, 623, 246, 272, 152, 319, 290, 516,
	520, 514, 515, 564, 565, 517, 615, 616, 617, 592,
	510, 0, 518, 519, 0, 598, 605, 606, 569, 127,
	138, 204, 619, 265, 174, 322, 501, 513, 162, 524,
	0, 0, 537, 542, 543, 555, 557, 558, 559, 560,
	568, 575, 576, 578, 585, 586, 587, 589, 594, 602,
	622, 129, 130, 139, 146, 153, 161, 168, 172, 179,
	184, 187, 190, 191, 192, 196, 212, 216, 217, 218,
	219, 231, 232, 233, 236, 239, 240, 242, 244, 245,
	248, 252, 253, 254, 255, 256, 258, 266, 268, 274,
	275, 276, 277, 278, 279, 280, 283, 284, 285, 286,
	294, 298, 307, 308, 318, 327, 331, 181, 315, 332,
	0, 211, 567, 609, 597, 0, 0, 550, 612, 523,
	540, 621, 541, 544, 582, 507, 563, 238, 538, 0,
	527, 503, 534, 504, 525, 552, 166, 556, 522, 599,
	566, 611, 202, 0, 528, 250, 584, 282, 156, 210,
	208, 304, 171, 167, 165, 155, 189, 215, 249, 300,
	243, 618, 205, 573, 0, 291, 224, 0, 0, 0,
	554, 601, 561, 593, 549, 583, 512, 572, 613, 539,
	580, 614, 193, 154, 131, 235, 292, 173, 0, 0,
	0, 114, 115, 116, 0, 0, 0, 0, 0, 0,
	0, 0, 150, 0, 577, 608, 536, 579, 581, 624,
	502, 574, 0, 505, 508, 620, 604, 531, 532, 0,
	0, 0, 0, 0, 0, 0, 553, 562, 590, 547,
	0, 0, 0, 0, 0, 0, 1120, 0, 529, 0,
	571, 0, 0, 0, 509, 506, 0, 0, 0, 0,
	551, 0, 0, 0, 511, 0, 530, 591, 0, 500,
	178, 595, 603, 548, 328, 607, 546, 545, 610, 262,
	0, 296, 182, 201, 145, 198, 128, 140, 0, 180,
	234, 269, 273, 600, 526, 535, 157, 533, 271, 247,
	317, 570, 251, 270, 206, 306, 263, 316, 329, 330,
	163, 228, 323, 301, 326, 338, 141, 160, 241, 297,
	320, 288, 223, 303, 197, 287, 133, 299, 314, 151,
	281, 0, 0, 0, 135, 312, 295, 221, 194, 195,
	134, 0, 267, 164, 176, 159, 237, 309, 310, 158,
	339, 142, 325, 137, 143, 324, 230, 305, 313, 222,
	214, 136, 311, 220, 213, 200, 170, 185, 260, 209,
	261, 186, 226, 225, 227, 0, 132, 0, 293, 321,
	340, 148, 521, 596, 302, 334, 337, 0, 264, 149,
	177, 169, 259, 175, 203, 333, 335, 336, 147, 257,
	183, 229, 144, 188, 289, 199, 207, 588, 623, 246,
	272, 152, 319, 290, 516, 520, 514, 515, 564, 565,
	517, 615, 616, 617, 592, 510, 0, 518, 519, 0,
	598, 605, 606, 569, 127, 138, 204, 619, 265, 174,
	322, 501, 513, 162, 524, 0, 0, 537, 542, 543,
	555, 557, 558, 559, 560, 568, 575, 576, 578, 585,
	586, 587, 589, 594, 602, 622, 129, 130, 139, 146,
	153, 161, 168, 172, 179, 184, 187, 190, 191, 192,
	196, 212, 216, 217, 218, 219, 231, 232, 233, 236,
	239, 240, 242, 244, 245, 248, 252, 253, 254, 255,
	256, 258, 266, 268, 274, 275, 276, 277, 278, 279,
	280, 283, 284, 285, 286, 294, 298, 307, 308, 318,
	327, 331, 181, 315, 332, 0, 211, 567, 609, 597,
	0, 0, 550, 612, 523, 540, 621, 541, 544, 582,
	507, 563, 238, 538, 0, 527, 503, 534, 504, 525,
	552, 166, 556, 522, 599, 566, 611, 202, 0, 528,
	250, 584, 282, 156, 210, 208, 304, 171, 167, 165,
	155, 189, 215, 249, 300, 243, 618, 205, 573, 0,
	291, 224, 0, 0, 0, 554, 601, 561, 593, 549,
	583, 512, 572, 613, 539, 580, 614, 193, 154, 131,
	235, 292, 173, 0, 0, 0, 114, 115, 116, 0,
	0, 0, 0, 0, 0, 0, 0, 150, 0, 577,
	608, 536, 579, 581, 624, 502, 574, 0, 505, 508,
	620, 604, 531, 532, 0, 0, 0, 0, 0, 0,
	0, 553, 562, 590, 547, 0, 0, 0, 0, 0,
	0, 0, 0, 529, 0, 571, 0, 0, 0, 509,
	506, 0, 0, 0, 0, 551, 0, 0, 0, 511,
	0, 530, 591, 0, 500, 178, 595, 603, 548, 328,
	607, 546, 545, 610, 262, 0, 296, 182, 201, 145,
	198, 128, 140, 0, 180, 234, 269, 273, 600, 526,
	535, 157, 533, 271, 247, 317, 570, 251, 270, 206,
	306, 263, 316, 329, 330, 163, 228, 323, 301, 326,
	338, 141, 160, 241, 297, 320, 288, 223, 303, 197,
	287, 133, 299, 314, 151, 281, 0, 0, 0, 135,
	312, 295, 221, 194, 195, 134, 0, 267, 164, 176,
	159, 237, 309, 310, 158, 339, 142, 325, 137, 143,
	324, 230, 305, 313, 222, 214, 136, 311, 220, 213,
	200, 170, 185, 260, 209, 261, 186, 226, 225, 227,
	0, 132, 0, 293, 321, 340, 148, 521, 596, 302,
	334, 337, 0, 264, 149, 177, 169, 259, 175, 203,
	333, 335, 336, 147, 257, 183, 229, 144, 188, 289,
	199, 207, 588, 623, 246, 272, 152, 319, 290, 516,
	520, 514, 515, 564, 565, 517, 615, 616, 617, 592,
	510, 0, 518, 519, 0, 598, 605, 606, 569, 127,
	138, 204, 619, 265, 174, 322, 501, 513, 162, 524,
	0, 0, 537, 542, 543, 555, 557, 558, 559, 560,
	568, 575, 576, 578, 585, 586, 587, 589, 594, 602,
	622, 129, 130, 139, 146, 153, 161, 168, 172, 179,
	184, 187, 190, 191, 192, 196, 212, 216, 217, 218,
	219, 231, 232, 233, 236, 239, 240, 242, 244, 245,
	248, 252, 253, 254, 255, 256, 258, 266, 268, 274,
	275, 276, 277, 278, 279, 280, 283, 284, 285, 286,
	294, 298, 307, 308, 318, 327, 331, 181, 315, 332,
	0, 211, 567, 609, 597, 0, 0, 550, 612, 523,
	540, 621, 541, 544, 582, 507, 563, 238, 538, 0,
	527, 503, 534, 504, 525, 552, 166, 556, 522, 599,
	566, 611, 202, 0, 528, 250, 584, 282, 156, 210,
	208, 304, 171, 167, 165, 155, 189, 215, 249, 300,
	243, 618, 205, 573, 0, 291, 224, 0, 0, 0,
	554, 601, 561, 593, 549, 583, 512, 572, 613, 539,
	580, 614, 193, 154, 131, 235, 292, 173, 0, 0,
	0, 114, 115, 116, 0, 0, 0, 0, 0, 0,
	0, 0, 150, 0, 577, 608, 536, 579, 581, 624,
	502, 574, 0, 505, 508, 620, 604, 531, 532, 0,
	0, 0, 0, 0, 0, 0, 553, 562, 590, 547,
	0, 0, 0, 0, 0, 0, 0, 0, 529, 0,
	571, 0, 0, 0, 509, 506, 0, 0, 0, 0,
	551, 0, 0, 0, 511, 0, 530, 591, 0, 500,
	178, 595, 603, 548, 328, 607, 546, 545, 610, 262,
	0, 296, 182, 201, 145, 198, 128, 140, 0, 180,
	234, 269, 273, 600, 526, 535, 157, 533, 271, 247,
	317, 570, 251, 270, 206, 306, 263, 316, 329, 330,
	163, 228, 323, 301, 326, 338, 141, 160, 241, 297,
	320, 288, 223, 303, 197, 287, 133, 299, 314, 151,
	281, 0, 0, 0, 135, 312, 295, 221, 194, 195,
	134, 0, 267, 164, 176, 159, 237, 309, 310, 158,
	339, 142, 325, 137, 498, 324, 230, 305, 313, 222,
	214, 136, 311, 220, 213, 200, 170, 185, 260, 209,
	261, 186, 226, 225, 227, 0, 132, 0, 293, 321,
	340, 148, 521, 596, 302, 334, 337, 0, 264, 149,
	177, 169, 259, 175, 203, 333, 335, 336, 147, 257,
	183, 499, 497, 492, 491, 199, 207, 588, 623, 246,
	272, 152, 319, 290, 516, 520, 514, 515, 564, 565,
	517, 615, 616, 617, 592, 510, 0, 518, 519, 0,
	598, 605, 606, 569, 127, 138, 204, 619, 265, 174,
	322, 501, 513, 162, 524, 0, 0, 537, 542, 543,
	555, 557, 558, 559, 560, 568, 575, 576, 578, 585,
	586, 587, 589, 594, 602, 622, 129, 130, 139, 146,
	153, 161, 168, 172, 179, 184, 187, 190, 191, 192,
	196, 212, 216, 217, 218, 219, 231, 232, 233, 236,
	239, 240, 242, 244, 245, 248, 252, 253, 254, 255,
	256, 258, 266, 268, 274, 275, 276, 277, 278, 279,
	280, 283, 284, 285, 286, 294, 298, 307, 308, 318,
	327, 331, 181, 315, 332, 0, 211, 567, 609, 597,
	0, 0, 550, 612, 523, 540, 621, 541, 544, 582,
	507, 563, 238, 538, 0, 527, 503, 534, 504, 525,
	552, 166, 556, 522, 599, 566, 611, 202, 0, 528,
	250, 584, 282, 156, 210, 208, 304, 171, 167, 165,
	155, 189, 215, 249, 300, 243, 618, 205, 573, 0,
	291, 224, 0, 0, 0, 554, 601, 561, 593, 549,
	583, 512, 572, 613, 539, 580, 614, 193, 154, 131,
	235, 292, 173, 0, 0, 0, 114, 115, 116, 0,
	0, 0, 0, 0, 0, 0, 0, 150, 0, 577,
	608, 536, 579, 581, 624, 502, 574, 0, 505, 508,
	620, 604, 531, 532, 0, 0, 0, 0, 0, 0,
	0, 553, 562, 590, 547, 0, 0, 0, 0, 0,
	0, 0, 0, 529, 0, 571, 0, 0, 0, 509,
	506, 0, 0, 0, 0, 551, 0, 0, 0, 511,
	0, 530, 591, 0, 500, 178, 595, 603, 548, 328,
	607, 546, 545, 610, 262, 0, 296, 182, 201, 145,
	198, 128, 140, 0, 180, 234, 269, 273, 600, 526,
	535, 157, 533, 271, 247, 317, 570, 251, 270, 206,
	306, 263, 316, 329, 330, 163, 228, 323, 301, 326,
	338, 141, 160, 241, 297, 320, 288, 223, 303, 197,
	287, 133, 299, 855, 151, 281, 0, 0, 0, 135,
	312, 295, 221, 194, 195, 134, 0, 267, 164, 176,
	159, 237, 309, 310, 158, 339, 142, 325, 137, 498,
	324, 230, 305, 313, 222, 214, 136, 311, 220, 213,
	200, 170, 185, 260, 209, 261, 186, 226, 225, 227,
	0, 132, 0, 293, 321, 340, 148, 521, 596, 302,
	334, 337, 0, 264, 149, 177, 169, 259, 175, 203,
	333, 335, 336, 147, 257, 183, 499, 497, 492, 491,
	199, 207, 588, 623, 246, 272, 152, 319, 290, 516,
	520, 514, 515, 564, 565, 517, 615, 616, 617, 592,
	510, 0, 518, 519, 0, 598, 605, 606, 569, 127,
	138, 204, 619, 265, 174, 322, 501, 513, 162, 524,
	0, 0, 537, 542, 543, 555, 557, 558, 559, 560,
	568, 575, 576, 578, 585, 586, 587, 589, 594, 602,
	622, 129, 130, 139, 146, 153, 161, 168, 172, 179,
	184, 187, 190, 191, 192, 196, 212, 216, 217, 218,
	219, 231, 232, 233, 236, 239, 240, 242, 244, 245,
	248, 252, 253, 254, 255, 256, 258, 266, 268, 274,
	275, 276, 277, 278, 279, 280, 283, 284, 285, 286,
	294, 298, 307, 308, 318, 327, 331, 181, 315, 332,
	0, 211, 567, 609, 597, 0, 0, 550, 612, 523,
	540, 621, 541, 544, 582, 507, 563, 238, 538, 0,
	527, 503, 534, 504, 525, 552, 166, 556, 522, 599,
	566, 611, 202, 0, 528, 250, 584, 282, 156, 210,
	208, 304, 171, 167, 165, 155, 189, 215, 249, 300,
	243, 618, 205, 573, 0, 291, 224, 0, 0, 0,
	554, 601, 561, 593, 549, 583, 512, 572, 613, 539,
	580, 614, 193, 154, 131, 235, 292, 173, 0, 0,
	0, 114, 115, 116, 0, 0, 0, 0, 0, 0,
	0, 0, 150, 0, 577, 608, 536, 579, 581, 624,
	502, 574, 0, 505, 508, 620, 604, 531, 532, 0,
	0, 0, 0, 0, 0, 0, 553, 562, 590, 547,
	0, 0, 0, 0, 0, 0, 0, 0, 529, 0,
	571, 0, 0, 0, 509, 506, 0, 0, 0, 0,
	551, 0, 0, 0, 511, 0, 530, 591, 0, 500,
	178, 595, 603, 548, 328, 607, 546, 545, 610, 262,
	0, 296, 182, 201, 145, 198, 128, 140, 0, 180,
	234, 269, 273, 600, 526, 535, 157, 533, 271, 247,
	317, 570, 251, 270, 206, 306, 263, 316, 329, 330,
	163, 228, 323, 301, 326, 338, 141, 160, 241, 297,
	320, 288, 223, 303, 197, 287, 133, 299, 489, 151,
	281, 0, 0, 0, 135, 312, 295, 221, 194, 195,
	134, 0, 267, 164, 176, 159, 237, 309, 310, 158,
	339, 142, 325, 137, 498, 324, 230, 305, 313, 222,
	214, 136, 311, 220, 213, 200, 170, 185, 260, 209,
	261, 186, 226, 225, 227, 0, 132, 0, 293, 321,
	340, 148, 521, 596, 302, 334, 337, 0, 264, 149,
	177, 169, 259, 175, 203, 333, 335, 336, 147, 257,
	183, 499, 497, 492, 491, 199, 207, 588, 623, 246,
	272, 152, 319, 290, 516, 520, 514, 515, 564, 565,
	517, 615, 616, 617, 592, 510, 0, 518, 519, 0,
	598, 605, 606, 569, 127, 138, 204, 619, 265, 174,
	322, 501, 513, 162, 524, 0, 0, 537, 542, 543,
	555, 557, 558, 559, 560, 568, 575, 576, 578, 585,
	586, 587, 589, 594, 602, 622, 129, 130, 139, 146,
	153, 161, 168, 172, 179, 184, 187, 190, 191, 192,
	196, 212, 216, 217, 218, 219, 231, 232, 233, 236,
	239, 240, 242, 244, 245, 248, 252, 253, 254, 255,
	256, 258, 266, 268, 274, 275, 276, 277, 278, 279,
	280, 283, 284, 285, 286, 294, 298, 307, 308, 318,
	327, 331, 181, 315, 332, 238, 211, 567, 1047, 0,
	393, 0, 0, 0, 166, 0, 392, 0, 0, 0,
	202, 0, 1048, 250, 0, 282, 156, 210, 208, 304,
	171, 167, 165, 155, 189, 215, 249, 300, 243, 436,
	205, 0, 0, 291, 224, 0, 0, 0, 0, 0,
	427, 428, 0, 0, 0, 0, 0, 0, 0, 0,
	193, 154, 131, 235, 292, 173, 66, 0, 0, 114,
	115, 116, 414, 413, 416, 417, 418, 419, 0, 0,
	150, 415, 420, 421, 422, 0, 0, 0, 0, 390,
	407, 0, 435, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 404, 405, 479, 0, 0, 0, 450, 0,
	406, 0, 0, 399, 400, 402, 401, 403, 408, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 178, 449,
	0, 0, 328, 0, 0, 447, 0, 262, 0, 296,
	182, 201, 145, 198, 128, 140, 0, 180, 234, 269,
	273, 0, 0, 0, 157, 0, 271, 247, 317, 0,
	251, 270, 206, 306, 263, 316, 329, 330, 163, 228,
	323, 301, 326, 338, 141, 160, 241, 297, 320, 288,
	223, 303, 197, 287, 133, 299, 314, 151, 281, 0,
	0, 0, 135, 312, 295, 221, 194, 195, 134, 0,
	267, 164, 176, 159, 237, 309, 310, 158, 339, 142,
	325, 137, 143, 324, 230, 305, 313, 222, 214, 136,
	311, 220, 213, 200, 170, 185, 260, 209, 261, 186,
	226, 225, 227, 0, 132, 0, 293, 321, 340, 148,
	0, 0, 302, 334, 337, 0, 264, 149, 177, 169,
	259, 175, 203, 333, 335, 336, 147, 257, 183, 229,
	144, 188, 289, 199, 207, 0, 0, 246, 272, 152,
	319, 290, 437, 448, 443, 444, 441, 442, 0, 440,
	439, 438, 451, 429, 430, 431, 432, 434, 0, 445,
	446, 433, 127, 138, 204, 0, 265, 174, 322, 0,
	0, 162, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 129, 130, 139, 146, 153, 161,
	168, 172, 179, 184, 187, 190, 191, 192, 196, 212,
	216, 217, 218, 219, 231, 232, 233, 236, 239, 240,
	242, 244, 245, 248, 252, 253, 254, 255, 256, 258,
	266, 268, 274, 275, 276, 277, 278, 279, 280, 283,
	284, 285, 286, 294, 298, 307, 308, 318, 327, 331,
	181, 315, 332, 238, 211, 0, 0, 0, 393, 0,
	0, 0, 166, 0, 392, 0, 0, 0, 202, 0,
	0, 250, 0, 282, 156, 210, 208, 304, 171, 167,
	165, 155, 189, 215, 249, 300, 243, 436, 205, 0,
	0, 291, 224, 0, 0, 0, 0, 0, 427, 428,
	0, 0, 0, 0, 0, 0, 1159, 0, 193, 154,
	131, 235, 292, 173, 66, 0, 0, 114, 115, 116,
	414, 413, 416, 417, 418, 419, 0, 0, 150, 415,
	420, 421, 422, 1160, 0, 0, 0, 390, 407, 0,
	435, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	404, 405, 0, 0, 0, 0, 450, 0, 406, 0,
	0, 399, 400, 402, 401, 403, 408, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 178, 449, 0, 0,
	328, 0, 0, 447, 0, 262, 0, 296, 182, 201,
	145, 198, 128, 140, 0, 180, 234, 269, 273, 0,
	0, 0, 157, 0, 271, 247, 317, 0, 251, 270,
	206, 306, 263, 316, 329, 330, 163, 228, 323, 301,
	326, 338, 141, 160, 241, 297, 320, 288, 223, 303,
	197, 287, 133, 299, 314, 151, 281, 0, 0, 0,
	135, 312, 295, 221, 194, 195, 134, 0, 267, 164,
	176, 159, 237, 309, 310, 158, 339, 142, 325, 137,
	143, 324, 230, 305, 313, 222, 214, 136, 311, 220,
	213, 200, 170, 185, 260, 209, 261, 186, 226, 225,
	227, 0, 132, 0, 293, 321, 340, 148, 0, 0,
	302, 334, 337, 0, 264, 149, 177, 169, 259, 175,
	203, 333, 335, 336, 147, 257, 183, 229, 144, 188,
	289, 199, 207, 0, 0, 246, 272, 152, 319, 290,
	437, 448, 443, 444, 441, 442, 0, 440, 439, 438,
	451, 429, 430, 431, 432, 434, 0, 445, 446, 433,
	127, 138, 204, 0, 265, 174, 322, 0, 0, 162,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 129, 130, 139, 146, 153, 161, 168, 172,
	179, 184, 187, 190, 191, 192, 196, 212, 216, 217,
	218, 219, 231, 232, 233, 236, 239, 240, 242, 244,
	245, 248, 252, 253, 254, 255, 256, 258, 266, 268,
	274, 275, 276, 277, 278, 279, 280, 283, 284, 285,
	286, 294, 298, 307, 308, 318, 327, 331, 181, 315,
	332, 238, 211, 0, 0, 0, 393, 0, 0, 0,
	166, 0, 392, 0, 0, 0, 202, 0, 0, 250,
	0, 282, 156, 210, 208, 304, 171, 167, 165, 155,
	189, 215, 249, 300, 243, 436, 205, 0, 0, 291,
	224, 0, 0, 0, 0, 0, 427, 428, 0, 0,
	0, 0, 0, 0, 0, 0, 193, 154, 131, 235,
	292, 173, 66, 0, 467, 114, 115, 116, 414, 413,
	416, 417, 418, 419, 0, 0, 150, 415, 420, 421,
	422, 0, 0, 0, 0, 390, 407, 0, 435, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 404, 405,
	0, 0, 0, 0, 450, 0, 406, 0, 0, 399,
	400, 402, 401, 403, 408, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 178, 449, 0, 0, 328, 0,
	0, 447, 0, 262, 0, 296, 182, 201, 145, 198,
	128, 140, 0, 180, 234, 269, 273, 0, 0, 0,
	157, 0, 271, 247, 317, 0, 251, 270, 206, 306,
	263, 316, 329, 330, 163, 228, 323, 301, 326, 338,
	141, 160, 241, 297, 320, 288, 223, 303, 197, 287,
	133, 299, 314, 151, 281, 0, 0, 0, 135, 312,
	295, 221, 194, 195, 134, 0, 267, 164, 176, 159,
	237, 309, 310, 158, 339, 142, 325, 137, 143, 324,
	230, 305, 313, 222, 214, 136, 311, 220, 213, 200,
	170, 185, 260, 209, 261, 186, 226, 225, 227, 0,
	132, 0, 293, 321, 340, 148, 0, 0, 302, 334,
	337, 0, 264, 149, 177, 169, 259, 175, 203, 333,
	335, 336, 147, 257, 183, 229, 144, 188, 289, 199,
	207, 0, 0, 246, 272, 152, 319, 290, 437, 448,
	443, 444, 441, 442, 0, 440, 439, 438, 451, 429,
	430, 431, 432, 434, 0, 445, 446, 433, 127, 138,
	204, 0, 265, 174, 322, 0, 0, 162, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	129, 130, 139, 146, 153, 161, 168, 172, 179, 184,
	187, 190, 191, 192, 196, 212, 216, 217, 218, 219,
	231, 232, 233, 236, 239, 240, 242, 244, 245, 248,
	252, 253, 254, 255, 256, 258, 266, 268, 274, 275,
	276, 277, 278, 279, 280, 283, 284, 285, 286, 294,
	298, 307, 308, 318, 327, 331, 181, 315, 332, 238,
	211, 0, 0, 0, 393, 0, 0, 0, 166, 0,
	392, 0, 0, 0, 202, 0, 0, 250, 0, 282,
	156, 210, 208, 304, 171, 167, 165, 155, 189, 215,
	249, 300, 243, 436, 205, 0, 0, 291, 224, 0,
	0, 0, 0, 0, 427, 428, 0, 0, 0, 0,
	0, 0, 0, 0, 193, 154, 131, 235, 292, 173,
	66, 0, 0, 114, 115, 116, 414, 413, 416, 417,
	418, 419, 0, 0, 150, 415, 420, 421, 422, 0,
	0, 0, 0, 390, 407, 0, 435, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 404, 405, 479, 0,
	0, 0, 450, 0, 406, 0, 0, 399, 400, 402,
	401, 403, 408, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 178, 449, 0, 0, 328, 0, 0, 447,
	0, 262, 0, 296, 182, 201, 145, 198, 128, 140,
	0, 180, 234, 269, 273, 0, 0, 0, 157, 0,
	271, 247, 317, 0, 251, 270, 206, 306, 263, 316,
	329, 330, 163, 228, 323, 301, 326, 338, 141, 160,
	241, 297, 320, 288, 223, 303, 197, 287, 133, 299,
	314, 151, 281, 0, 0, 0, 135, 312, 295, 221,
	194, 195, 134, 0, 267, 164, 176, 159, 237, 309,
	310, 158, 339, 142, 325, 137, 143, 324, 230, 305,
	313, 222, 214, 136, 311, 220, 213, 200, 170, 185,
	260, 209, 261, 186, 226, 225, 227, 0, 132, 0,
	293, 321, 340, 148, 0, 0, 302, 334, 337, 0,
	264, 149, 177, 169, 259, 175, 203, 333, 335, 336,
	147, 257, 183, 229, 144, 188, 289, 199, 207, 0,
	0, 246, 272, 152, 319, 290, 437, 448, 443, 444,
	441, 442, 0, 440, 439, 438, 451, 429, 430, 431,
	432, 434, 0, 445, 446, 433, 127, 138, 204, 0,
	265, 174, 322, 0, 0, 162, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 129, 130,
	139, 146, 153, 161, 168, 172, 179, 184, 187, 190,
	191, 192, 196, 212, 216, 217, 218, 219, 231, 232,
	233, 236, 239, 240, 242, 244, 245, 248, 252, 253,
	254, 255, 256, 258, 266, 268, 274, 275, 276, 277,
	278, 279, 280, 283, 284, 285, 286, 294, 298, 307,
	308, 318, 327, 331, 181, 315, 332, 238, 211, 0,
	0, 0, 393, 0, 0, 0, 166, 0, 392, 0,
	0, 0, 202, 0, 0, 250, 0, 282, 156, 210,
	208, 304, 171, 167, 165, 155, 189, 215, 249, 300,
	243, 436, 205, 0, 0, 291, 224, 0, 0, 0,
	0, 0, 427, 428, 0, 0, 0, 0, 0, 0,
	0, 0, 193, 154, 131, 235, 292, 173, 66, 0,
	0, 114, 115, 116, 414, 1065, 416, 417, 418, 419,
	0, 0, 150, 415, 420, 421, 422, 0, 0, 0,
	0, 390, 407, 0, 435, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 404, 405, 479, 0, 0, 0,
	450, 0, 406, 0, 0, 399, 400, 402, 401, 403,
	408, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	178, 449, 0, 0, 328, 0, 0, 447, 0, 262,
	0, 296, 182, 201, 145, 198, 128, 140, 0, 180,
	234, 269, 273, 0, 0, 0, 157, 0, 271, 247,
	317, 0, 251, 270, 206, 306, 263, 316, 329, 330,
	163, 228, 323, 301, 326, 338, 141, 160, 241, 297,
	320, 288, 223, 303, 197, 287, 133, 299, 314, 151,
	281, 0, 0, 0, 135, 312, 295, 221, 194, 195,
	134, 0, 267, 164, 176, 159, 237, 309, 310, 158,
	339, 142, 325, 137, 143, 324, 230, 305, 313, 222,
	214, 136, 311, 220, 213, 200, 170, 185, 260, 209,
	261, 186, 226, 225, 227, 0, 132, 0, 293, 321,
	340, 148, 0, 0, 302, 334, 337, 0, 264, 149,
	177, 169, 259, 175, 203, 333, 335, 336, 147, 257,
	183, 229, 144, 188, 289, 199, 207, 0, 0, 246,
	272, 152, 319, 290, 437, 448, 443, 444, 441, 442,
	0, 440, 439, 438, 451, 429, 430, 431, 432, 434,
	0, 445, 446, 433, 127, 138, 204, 0, 265, 174,
	322, 0, 0, 162, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 129, 130, 139, 146,
	153, 161, 168, 172, 179, 184, 187, 190, 191, 192,
	196, 212, 216, 217, 218, 219, 231, 232, 233, 236,
	239, 240, 242, 244, 245, 248, 252, 253, 254, 255,
	256, 258, 266, 268, 274, 275, 276, 277, 278, 279,
	280, 283, 284, 285, 286, 294, 298, 307, 308, 318,
	327, 331, 181, 315, 332, 238, 211, 0, 0, 0,
	393, 0, 0, 0, 166, 0, 392, 0, 0, 0,
	202, 0, 0, 250, 0, 282, 156, 210, 208, 304,
	171, 167, 165, 155, 189, 215, 249, 300, 243, 436,
	205, 0, 0, 291, 224, 0, 0, 0, 0, 0,
	427, 428, 0, 0, 0, 0, 0, 0, 0, 0,
	193, 154, 131, 235, 292, 173, 66, 0, 0, 114,
	115, 116, 414, 1062, 416, 417, 418, 419, 0, 0,
	150, 415, 420, 421, 422, 0, 0, 0, 0, 390,
	407, 0, 435, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 404, 405, 479, 0, 0, 0, 450, 0,
	406, 0, 0, 399, 400, 402, 401, 403, 408, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 178, 449,
	0, 0, 328, 0, 0, 447, 0, 262, 0, 296,
	182, 201, 145, 198, 128, 140, 0, 180, 234, 269,
	273, 0, 0, 0, 157, 0, 271, 247, 317, 0,
	251, 270, 206, 306, 263, 316, 329, 330, 163, 228,
	323, 301, 326, 338, 141, 160, 241, 297, 320, 288,
	223, 303, 197, 287, 133, 299, 314, 151, 281, 0,
	0, 0, 135, 312, 295, 221, 194, 195, 134, 0,
	267, 164, 176, 159, 237, 309, 310, 158, 339, 142,
	325, 137, 143, 324, 230, 305, 313, 222, 214, 136,
	311, 220, 213, 200, 170, 185, 260, 209, 261, 186,
	226, 225, 227, 0, 132, 0, 293, 321, 340, 148,
	0, 0, 302, 334, 337, 0, 264, 149, 177, 169,
	259, 175, 203, 333, 335, 336, 147, 257, 183, 229,
	144, 188, 289, 199, 207, 0, 0, 246, 272, 152,
	319, 290, 437, 448, 443, 444, 441, 442, 0, 440,
	439, 438, 451, 429, 430, 431, 432, 434, 0, 445,
	446, 433, 127, 138, 204, 0, 265, 174, 322, 0,
	0, 162, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 129, 130, 139, 146, 153, 161,
	168, 172, 179, 184, 187, 190, 191, 192, 196, 212,
	216, 217, 218, 219, 231, 232, 233, 236, 239, 240,
	242, 244, 245, 248, 252, 253, 254, 255, 256, 258,
	266, 268, 274, 275, 276, 277, 278, 279, 280, 283,
	284, 285, 286, 294, 298, 307, 308, 318, 327, 331,
	181, 315, 332, 460, 211, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 238, 0, 0, 0,
	0, 393, 0, 0, 0, 166, 0, 392, 0, 0,
	0, 202, 0, 0, 250, 0, 282, 156, 210, 208,
	304, 171, 167, 165, 155, 189, 215, 249, 300, 243,
	436, 205, 0, 0, 291, 224, 0, 0, 0, 0,
	0, 427, 428, 0, 0, 0, 0, 0, 0, 0,
	0, 193, 154, 131, 235, 292, 173, 66, 0, 0,
	114, 115, 116, 414, 413, 416, 417, 418, 419, 0,
	0, 150, 415, 420, 421, 422, 0, 0, 0, 0,
	390, 407, 0, 435, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 404, 405, 0, 0, 0, 0, 450,
	0, 406, 0, 0, 399, 400, 402, 401, 403, 408,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 178,
	449, 0, 0, 328, 0, 0, 447, 0, 262, 0,
	296, 182, 201, 145, 198, 128, 140, 0, 180, 234,
	269, 273, 0, 0, 0, 157, 0, 271, 247, 317,
	0, 251, 270, 206, 306, 263, 316, 329, 330, 163,
	228, 323, 301, 326, 338, 141, 160, 241, 297, 320,
	288, 223, 303, 197, 287, 133, 299, 314, 151, 281,
	0, 0, 0, 135, 312, 295, 221, 194, 195, 134,
	0, 267, 164, 176, 159, 237, 309, 310, 158, 339,
	142, 325, 137, 143, 324, 230, 305, 313, 222, 214,
	136, 311, 220, 213, 200, 170, 185, 260, 209, 261,
	186, 226, 225, 227, 0, 132, 0, 293, 321, 340,
	148, 0, 0, 302, 334, 337, 0, 264, 149, 177,
	169, 259, 175, 203, 333, 335, 336, 147, 257, 183,
	229, 144, 188, 289, 199, 207, 0, 0, 246, 272,
	152, 319, 290, 437, 448, 443, 444, 441, 442, 0,
	440, 439, 438, 451, 429, 430, 431, 432, 434, 0,
	445, 446, 433, 127, 138, 204, 0, 265, 174, 322,
	0, 0, 162, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 129, 130, 139, 146, 153,
	161, 168, 172, 179, 184, 187, 190, 191, 192, 196,
	212, 216, 217, 218, 219, 231, 232, 233, 236, 239,
	240, 242, 244, 245, 248, 252, 253, 254, 255, 256,
	258, 266, 268, 274, 275, 276, 277, 278, 279, 280,
	283, 284, 285, 286, 294, 298, 307, 308, 318, 327,
	331, 181, 315, 332, 238, 211, 0, 0, 0, 393,
	0, 0, 0, 166, 0, 392, 0, 0, 0, 202,
	0, 0, 250, 0, 282, 156, 210, 208, 304, 171,
	167, 165, 155, 189, 215, 249, 300, 243, 436, 205,
	0, 0, 291, 224, 0, 0, 0, 0, 0, 427,
	428, 0, 0, 0, 0, 0, 0, 0, 0, 193,
	154, 131, 235, 292, 173, 66, 0, 0, 114, 115,
	116, 414, 413, 416, 417, 418, 419, 0, 0, 150,
	415, 420, 421, 422, 0, 0, 0, 0, 390, 407,
	0, 435, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 404, 405, 0, 0, 0, 0, 450, 0, 406,
	0, 0, 399, 400, 402, 401, 403, 408, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 178, 449, 0,
	0, 328, 0, 0, 447, 0, 262, 0, 296, 182,
	201, 145, 198, 128, 140, 0, 180, 234, 269, 273,
	0, 0, 0, 157, 0, 271, 247, 317, 0, 251,
	270, 206, 306, 263, 316, 329, 330, 163, 228, 323,
	301, 326, 338, 141, 160, 241, 297, 320, 288, 223,
	303, 197, 287, 133, 299, 314, 151, 281, 0, 0,
	0, 135, 312, 295, 221, 194, 195, 134, 0, 267,
	164, 176, 159, 237, 309, 310, 158, 339, 142, 325,
	137, 143, 324, 230, 305, 313, 222, 214, 136, 311,
	220, 213, 200, 170, 185, 260, 209, 261, 186, 226,
	225, 227, 0, 132, 0, 293, 321, 340, 148, 0,
	0, 302, 334, 337, 0, 264, 149, 177, 169, 259,
	175, 203, 333, 335, 336, 147, 257, 183, 229, 144,
	188, 289, 199, 207, 0, 0, 246, 272, 152, 319,
	290, 437, 448, 443, 444, 441, 442, 0, 440, 439,
	438, 451, 429, 430, 431, 432, 434, 0, 445, 446,
	433, 127, 138, 204, 0, 265, 174, 322, 0, 0,
	162, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 129, 130, 139, 146, 153, 161, 168,
	172, 179, 184, 187, 190, 191, 192, 196, 212, 216,
	217, 218, 219, 231, 232, 233, 236, 239, 240, 242,
	244, 245, 248, 252, 253, 254, 255, 256, 258, 266,
	268, 274, 275, 276, 277, 278, 279, 280, 283, 284,
	285, 286, 294, 298, 307, 308, 318, 327, 331, 181,
	315, 332, 238, 211, 0, 0, 0, 0, 0, 0,
	0, 166, 0, 0, 0, 0, 0, 202, 0, 0,
	250, 0, 282, 156, 210, 208, 304, 171, 167, 165,
	155, 189, 215, 249, 300, 243, 436, 205, 0, 0,
	291, 224, 0, 0, 0, 0, 0, 427, 428, 0,
	0, 0, 0, 0, 0, 0, 0, 193, 154, 131,
	235, 292, 173, 66, 0, 0, 114, 115, 116, 414,
	413, 416, 417, 418, 419, 0, 0, 150, 415, 420,
	421, 422, 0, 0, 0, 0, 0, 407, 0, 435,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 404,
	405, 0, 0, 0, 0, 450, 0, 406, 0, 0,
	399, 400, 402, 401, 403, 408, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 178, 449, 0, 0, 328,
	0, 0, 447, 0, 262, 0, 296, 182, 201, 145,
	198, 128, 140, 0, 180, 234, 269, 273, 0, 0,
	0, 157, 0, 271, 247, 317, 1836, 251, 270, 206,
	306, 263, 316, 329, 330, 163, 228, 323, 301, 326,
	338, 141, 160, 241, 297, 320, 288, 223, 303, 197,
	287, 133, 299, 314, 151, 281, 0, 0, 0, 135,
	312, 295, 221, 194, 195, 134, 0, 267, 164, 176,
	159, 237, 309, 310, 158, 339, 142, 325, 137, 143,
	324, 230, 305, 313, 222, 214, 136, 311, 220, 213,
	200, 170, 185, 260, 209, 261, 186, 226, 225, 227,
	0, 132, 0, 293, 321, 340, 148, 0, 0, 302,
	334, 337, 0, 264, 149, 177, 169, 259, 175, 203,
	333, 335, 336, 147, 257, 183, 229, 144, 188, 289,
	199, 207, 0, 0, 246, 272, 152, 319, 290, 437,
	448, 443, 444, 441, 442, 0, 440, 439, 438, 451,
	429, 430, 431, 432, 434, 0, 445, 446, 433, 127,
	138, 204, 0, 265, 174, 322, 0, 0, 162, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 129, 130, 139, 146, 153, 161, 168, 172, 179,
	184, 187, 190, 191, 192, 196, 212, 216, 217, 218,
	219, 231, 232, 233, 236, 239, 240, 242, 244, 245,
	248, 252, 253, 254, 255, 256, 258, 266, 268, 274,
	275, 276, 277, 278, 279, 280, 283, 284, 285, 286,
	294, 298, 307, 308, 318, 327, 331, 181, 315, 332,
	238, 211, 0, 0, 0, 0, 0, 0, 0, 166,
	0, 0, 0, 0, 0, 202, 0, 0, 250, 0,
	282, 156, 210, 208, 304, 171, 167, 165, 155, 189,
	215, 249, 300, 243, 436, 205, 0, 0, 291, 224,
	0, 0, 0, 0, 0, 427, 428, 0, 0, 0,
	0, 0, 0, 0, 0, 193, 154, 131, 235, 292,
	173, 66, 0, 467, 114, 115, 116, 414, 413, 416,
	417, 418, 419, 0, 0, 150, 415, 420, 421, 422,
	0, 0, 0, 0, 0, 407, 0, 435, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 404, 405, 0,
	0, 0, 0, 450, 0, 406, 0, 0, 399, 400,
	402, 401, 403, 408, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 178, 449, 0, 0, 328, 0, 0,
	447, 0, 262, 0, 296, 182, 201, 145, 198, 128,
	140, 0, 180, 234, 269, 273, 0, 0, 0, 157,
	0, 271, 247, 317, 0, 251, 270, 206, 306, 263,
	316, 329, 330, 163, 228, 323, 301, 326, 338, 141,
	160, 241, 297, 320, 288, 223, 303, 197, 287, 133,
	299, 314, 151, 281, 0, 0, 0, 135, 312, 295,
	221, 194, 195, 134, 0, 267, 164, 176, 159, 237,
	309, 310, 158, 339, 142, 325, 137, 143, 324, 230,
	305, 313, 222, 214, 136, 311, 220, 213, 200, 170,
	185, 260, 209, 261, 186, 226, 225, 227, 0, 132,
	0, 293, 321, 340, 148, 0, 0, 302, 334, 337,
	0, 264, 149, 177, 169, 259, 175, 203, 333, 335,
	336, 147, 257, 183, 229, 144, 188, 289, 199, 207,
	0, 0, 246, 272, 152, 319, 290, 437, 448, 443,
	444, 441, 442, 0, 440, 439, 438, 451, 429, 430,
	431, 432, 434, 0, 445, 446, 433, 127, 138, 204,
	0, 265, 174, 322, 0, 0, 162, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 129,
	130, 139, 146, 153, 161, 168, 172, 179, 184, 187,
	190, 191, 192, 196, 212, 216, 217, 218, 219, 231,
	232, 233, 236, 239, 240, 242, 244, 245, 248, 252,
	253, 254, 255, 256, 258, 266, 268, 274, 275, 276,
	277, 278, 279, 280, 283, 284, 285, 286, 294, 298,
	307, 308, 318, 327, 331, 181, 315, 332, 238, 211,
	0, 0, 0, 0, 0, 0, 0, 166, 0, 0,
	0, 0, 0, 202, 0, 0, 250, 0, 282, 156,
	210, 208, 304, 171, 167, 165, 155, 189, 215, 249,
	300, 243, 436, 205, 0, 0, 291, 224, 0, 0,
	0, 0, 0, 427, 428, 0, 0, 0, 0, 0,
	0, 0, 0, 193, 154, 131, 235, 292, 173, 66,
	0, 0, 114, 115, 116, 414, 413, 416, 417, 418,
	419, 0, 0, 150, 415, 420, 421, 422, 0, 0,
	0, 0, 0, 407, 0, 435, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 404, 405, 0, 0, 0,
	0, 450, 0, 406, 0, 0, 399, 400, 402, 401,
	403, 408, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 178, 449, 0, 0, 328, 0, 0, 447, 0,
	262, 0, 296, 182, 201, 145, 198, 128, 140, 0,
	180, 234, 269, 273, 0, 0, 0, 157, 0, 271,
	247, 317, 0, 251, 270, 206, 306, 263, 316, 329,
	330, 163, 228, 323, 301, 326, 338, 141, 160, 241,
	297, 320, 288, 223, 303, 197, 287, 133, 299, 314,
	151, 281, 0, 0, 0, 135, 312, 295, 221, 194,
	195, 134, 0, 267, 164, 176, 159, 237, 309, 310,
	158, 339, 142, 325, 137, 143, 324, 230, 305, 313,
	222, 214, 136, 311, 220, 213, 200, 170, 185, 260,
	209, 261, 186, 226, 225, 227, 0, 132, 0, 293,
	321, 340, 148, 0, 0, 302, 334, 337, 0, 264,
	149, 177, 169, 259, 175, 203, 333, 335, 336, 147,
	257, 183, 229, 144, 188, 289, 199, 207, 0, 0,
	246, 272, 152, 319, 290, 437, 448, 443, 444, 441,
	442, 0, 440, 439, 438, 451, 429, 430, 431, 432,
	434, 0, 445, 446, 433, 127, 138, 204, 0, 265,
	174, 322, 0, 0, 162, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 129, 130, 139,
	146, 153, 161, 168, 172, 179, 184, 187, 190, 191,
	192, 196, 212, 216, 217, 218, 219, 231, 232, 233,
	236, 239, 240, 242, 244, 245, 248, 252, 253, 254,
	255, 256, 258, 266, 268, 274, 275, 276, 277, 278,
	279, 280, 283, 284, 285, 286, 294, 298, 307, 308,
	318, 327, 331, 181, 315, 332, 238, 211, 0, 0,
	0, 0, 0, 0, 0, 166, 0, 0, 0, 0,
	0, 202, 0, 0, 250, 0, 282, 156, 210, 208,
	304, 171, 167, 165, 155, 189, 215, 249, 300, 243,
	0, 205, 0, 0, 291, 224, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 193, 154, 131, 235, 292, 173, 0, 0, 0,
	114, 115, 116, 0, 0, 0, 0, 0, 0, 0,
	0, 150, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 733,
	732, 742, 743, 735, 736, 737, 738, 739, 740, 741,
	734, 0, 0, 744, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 178,
	0, 0, 0, 328, 0, 0, 0, 0, 262, 0,
	296, 182, 201, 145, 198, 128, 140, 0, 180, 234,
	269, 273, 0, 0, 0, 157, 0, 271, 247, 317,
	0, 251, 270, 206, 306, 263, 316, 329, 330, 163,
	228, 323, 301, 326, 338, 141, 160, 241, 297, 320,
	288, 223, 303, 197, 287, 133, 299, 314, 151, 281,
	0, 0, 0, 135, 312, 295, 221, 194, 195, 134,
	0, 267, 164, 176, 159, 237, 309, 310, 158, 339,
	142, 325, 137, 143, 324, 230, 305, 313, 222, 214,
	136, 311, 220, 213, 200, 170, 185, 260, 209, 261,
	186, 226, 225, 227, 0, 132, 0, 293, 321, 340,
	148, 0, 0, 302, 334, 337, 0, 264, 149, 177,
	169, 259, 175, 203, 333, 335, 336, 147, 257, 183,
	229, 144, 188, 289, 199, 207, 0, 0, 246, 272,
	152, 319, 290, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 127, 138, 204, 0, 265, 174, 322,
	0, 0, 162, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 129, 130, 139, 146, 153,
	161, 168, 172, 179, 184, 187, 190, 191, 192, 196,
	212, 216, 217, 218, 219, 231, 232, 233, 236, 239,
	240, 242, 244, 245, 248, 252, 253, 254, 255, 256,
	258, 266, 268, 274, 275, 276, 277, 278, 279, 280,
	283, 284, 285, 286, 294, 298, 307, 308, 318, 327,
	331, 181, 315, 332, 238, 211, 0, 0, 833, 0,
	0, 0, 0, 166, 0, 0, 0, 0, 0, 202,
	0, 0, 250, 0, 282, 156, 210, 208, 304, 171,
	167, 165, 155, 189, 215, 249, 300, 243, 0, 205,
	0, 0, 291, 224, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 193,
	154, 131, 235, 292, 173, 0, 0, 0, 114, 115,
	116, 0, 835, 0, 0, 0, 0, 0, 0, 150,
	0, 0, 0, 0, 0, 722, 723, 721, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 724, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 178, 0, 0,
	0, 328, 0, 0, 0, 0, 262, 0, 296, 182,
	201, 145, 198, 128, 140, 0, 180, 234, 269, 273,
	0, 0, 0, 157, 0, 271, 247, 317, 0, 251,
	270, 206, 306, 263, 316, 329, 330, 163, 228, 323,
	301, 326, 338, 141, 160, 241, 297, 320, 288, 223,
	303, 197, 287, 133, 299, 314, 151, 281, 0, 0,
	0, 135, 312, 295, 221, 194, 195, 134, 0, 267,
	164, 176, 159, 237, 309, 310, 158, 339, 142, 325,
	137, 143, 324, 230, 305, 313, 222, 214, 136, 311,
	220, 213, 200, 170, 185, 260, 209, 261, 186, 226,
	225, 227, 0, 132, 0, 293, 321, 340, 148, 0,
	0, 302, 334, 337, 0, 264, 149, 177, 169, 259,
	175, 203, 333, 335, 336, 147, 257, 183, 229, 144,
	188, 289, 199, 207, 0, 0, 246, 272, 152, 319,
	290, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 127, 138, 204, 0, 265, 174, 322, 0, 0,
	162, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 129, 130, 139, 146, 153, 161, 168,
	172, 179, 184, 187, 190, 191, 192, 196, 212, 216,
	217, 218, 219, 231, 232, 233, 236, 239, 240, 242,
	244, 245, 248, 252, 253, 254, 255, 256, 258, 266,
	268, 274, 275, 276, 277, 278, 279, 280, 283, 284,
	285, 286, 294, 298, 307, 308, 318, 327, 331, 181,
	315, 332, 238, 211, 0, 0, 0, 0, 0, 0,
	0, 166, 1184, 0, 0, 0, 0, 202, 0, 0,
	250, 0, 282, 156, 210, 208, 304, 171, 167, 165,
	155, 189, 215, 249, 300, 243, 0, 205, 0, 0,
	291, 224, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 193, 154, 131,
	235, 292, 173, 0, 0, 0, 114, 115, 116, 0,
	0, 0, 0, 0, 0, 0, 0, 150, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 178, 0, 0, 1183, 328,
	0, 0, 0, 1179, 1176, 0, 1177, 1178, 201, 632,
	198, 128, 140, 1174, 1181, 234, 269, 273, 0, 0,
	0, 157, 0, 271, 247, 317, 0, 251, 270, 206,
	306, 263, 316, 329, 330, 163, 228, 323, 301, 326,
	338, 141, 160, 241, 297, 320, 288, 223, 303, 197,
	287, 133, 299, 314, 151, 281, 0, 0, 0, 135,
	312, 295, 221, 194, 195, 134, 0, 267, 164, 176,
	159, 237, 309, 310, 158, 339, 142, 325, 137, 143,
	324, 230, 305, 313, 222, 214, 136, 311, 220, 213,
	200, 170, 185, 260, 209, 261, 186, 226, 225, 227,
	0, 132, 0, 293, 321, 340, 148, 0, 0, 302,
	334, 337, 0, 264, 149, 177, 169, 259, 175, 203,
	333, 335, 336, 147, 257, 183, 229, 144, 188, 289,
	199, 207, 0, 0, 246, 272, 152, 319, 290, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 127,
	138, 204, 0, 265, 174, 322, 0, 0, 162, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 129, 130, 139, 146, 153, 161, 168, 172, 179,
	184, 187, 190, 191, 192, 196, 212, 216, 217, 218,
	219, 231, 232, 233, 236, 239, 240, 242, 244, 245,
	248, 252, 253, 254, 255, 256, 258, 266, 268, 274,
	275, 276, 277, 278, 279, 280, 283, 284, 285, 286,
	294, 298, 307, 308, 318, 327, 331, 181, 315, 332,
	33, 211, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 238, 0, 0, 0, 0, 0, 0,
	0, 0, 166, 0, 0, 0, 0, 0, 202, 0,
	0, 250, 0, 282, 156, 210, 208, 304, 171, 167,
	165, 155, 189, 215, 249, 300, 243, 0, 205, 0,
	0, 291, 224, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 193, 154,
	131, 235, 292, 173, 66, 0, 467, 114, 115, 116,
	0, 0, 0, 0, 0, 0, 0, 0, 150, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 178, 0, 0, 0,
	328, 0, 0, 0, 0, 262, 0, 296, 182, 201,
	145, 198, 128, 140, 0, 180, 234, 269, 273, 0,
	0, 0, 157, 0, 271, 247, 317, 0, 251, 270,
	206, 306, 263, 316, 329, 330, 163, 228, 323, 301,
	326, 338, 141, 160, 241, 297, 320, 288, 223, 303,
	197, 287, 133, 299, 314, 151, 281, 0, 0, 0,
	135, 312, 295, 221, 194, 195, 134, 0, 267, 164,
	176, 159, 237, 309, 310, 158, 339, 142, 325, 137,
	143, 324, 230, 305, 313, 222, 214, 136, 311, 220,
	213, 200, 170, 185, 260, 209, 261, 186, 226, 225,
	227, 0, 132, 0, 293, 321, 340, 148, 0, 0,
	302, 334, 337, 0, 264, 149, 177, 169, 259, 175,
	203, 333, 335, 336, 147, 257, 183, 229, 144, 188,
	289, 199, 207, 0, 0, 246, 272, 152, 319, 290,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	127, 138, 204, 0, 265, 174, 322, 0, 0, 162,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 129, 130, 139, 146, 153, 161, 168, 172,
	179, 184, 187, 190, 191, 192, 196, 212, 216, 217,
	218, 219, 231, 232, 233, 236, 239, 240, 242, 244,
	245, 248, 252, 253, 254, 255, 256, 258, 266, 268,
	274, 275, 276, 277, 278, 279, 280, 283, 284, 285,
	286, 294, 298, 307, 308, 318, 327, 331, 181, 315,
	332, 238, 211, 0, 0, 1094, 0, 0, 0, 0,
	166, 0, 0, 0, 0, 0, 202, 0, 0, 250,
	0, 282, 156, 210, 208, 304, 171, 167, 165, 155,
	189, 215, 249, 300, 243, 0, 205, 0, 0, 291,
	224, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 193, 154, 131, 235,
	292, 173, 0, 0, 0, 114, 115, 116, 0, 1096,
	0, 0, 0, 0, 0, 0, 150, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 178, 0, 0, 0, 328, 0,
	0, 0, 0, 262, 0, 296, 182, 201, 145, 198,
	128, 140, 0, 180, 234, 269, 273, 0, 0, 0,
	157, 0, 271, 247, 317, 0, 251, 270, 206, 306,
	263, 316, 329, 330, 163, 228, 323, 301, 326, 338,
	141, 160, 241, 297, 320, 288, 223, 303, 197, 287,
	133, 299, 314, 151, 281, 0, 0, 0, 135, 312,
	295, 221, 194, 195, 134, 0, 267, 164, 176, 159,
	237, 309, 310, 158, 339, 142, 325, 137, 143, 324,
	230, 305, 313, 222, 214, 136, 311, 220, 213, 200,
	170, 185, 260, 209, 261, 186, 226, 225, 227, 0,
	132, 0, 293, 321, 340, 148, 0, 0, 302, 334,
	337, 0, 264, 149, 177, 169, 259, 175, 203, 333,
	335, 336, 147, 257, 183, 229, 144, 188, 289, 199,
	207, 0, 0, 246, 272, 152, 319, 290, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 127, 138,
	204, 0, 265, 174, 322, 0, 0, 162, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	129, 130, 139, 146, 153, 161, 168, 172, 179, 184,
	187, 190, 191, 192, 196, 212, 216, 217, 218, 219,
	231, 232, 233, 236, 239, 240, 242, 244, 245, 248,
	252, 253, 254, 255, 256, 258, 266, 268, 274, 275,
	276, 277, 278, 279, 280, 283, 284, 285, 286, 294,
	298, 307, 308, 318, 327, 331, 181, 315, 332, 33,
	211, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 238, 0, 0, 0, 0, 0, 0, 0,
	0, 166, 0, 0, 0, 0, 0, 202, 0, 0,
	250, 0, 282, 156, 210, 208, 304, 171, 167, 165,
	155, 189, 215, 249, 300, 243, 0, 205, 0, 0,
	291, 224, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 193, 154, 131,
	235, 292, 173, 66, 0, 0, 114, 115, 116, 0,
	0, 0, 0, 0, 0, 0, 0, 150, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 178, 0, 0, 0, 328,
	0, 0, 0, 0, 262, 0, 296, 182, 201, 145,
	198, 128, 140, 0, 180, 234, 269, 273, 0, 0,
	0, 157, 0, 271, 247, 317, 0, 251, 270, 206,
	306, 263, 316, 329, 330, 163, 228, 323, 301, 326,
	338, 141, 160, 241, 297, 320, 288, 223, 303, 197,
	287, 133, 299, 314, 151, 281, 0, 0, 0, 135,
	312, 295, 221, 194, 195, 134, 0, 267, 164, 176,
	159, 237, 309, 310, 158, 339, 142, 325, 137, 143,
	324, 230, 305, 313, 222, 214, 136, 311, 220, 213,
	200, 170, 185, 260, 209, 261, 186, 226, 225, 227,
	0, 132, 0, 293, 321, 340, 148, 0, 0, 302,
	334, 337, 0, 264, 149, 177, 169, 259, 175, 203,
	333, 335, 336, 147, 257, 183, 229, 144, 188, 289,
	199, 207, 0, 0, 246, 272, 152, 319, 290, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 127,
	138, 204, 0, 265, 174, 322, 0, 0, 162, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 129, 130, 139, 146, 153, 161, 168, 172, 179,
	184, 187, 190, 191, 192, 196, 212, 216, 217, 218,
	219, 231, 232, 233, 236, 239, 240, 242, 244, 245,
	248, 252, 253, 254, 255, 256, 258, 266, 268, 274,
	275, 276, 277, 278, 279, 280, 283, 284, 285, 286,
	294, 298, 307, 308, 318, 327, 331, 181, 315, 332,
	238, 211, 0, 0, 0, 0, 0, 0, 0, 166,
	0, 0, 0, 0, 0, 202, 0, 0, 250, 0,
	282, 156, 210, 208, 304, 171, 167, 165, 155, 189,
	215, 249, 300, 243, 0, 205, 0, 0, 291, 224,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 193, 154, 131, 235, 292,
	173, 0, 0, 0, 114, 115, 116, 0, 0, 1112,
	0, 0, 1113, 0, 0, 150, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 178, 0, 0, 0, 328, 0, 0,
	0, 0, 262, 0, 296, 182, 201, 145, 198, 128,
	140, 0, 180, 234, 269, 273, 0, 0, 0, 157,
	0, 271, 247, 317, 0, 251, 270, 206, 306, 263,
	316, 329, 330, 163, 228, 323, 301, 326, 338, 141,
	160, 241, 297, 320, 288, 223, 303, 197, 287, 133,
	299, 314, 151, 281, 0, 0, 0, 135, 312, 295,
	221, 194, 195, 134, 0, 267, 164, 176, 159, 237,
	309, 310, 158, 339, 142, 325, 137, 143, 324, 230,
	305, 313, 222, 214, 136, 311, 220, 213, 200, 170,
	185, 260, 209, 261, 186, 226, 225, 227, 0, 132,
	0, 293, 321, 340, 148, 0, 0, 302, 334, 337,
	0, 264, 149, 177, 169, 259, 175, 203, 333, 335,
	336, 147, 257, 183, 229, 144, 188, 289, 199, 207,
	0, 0, 246, 272, 152, 319, 290, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 127, 138, 204,
	0, 265, 174, 322, 0, 0, 162, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 129,
	130, 139, 146, 153, 161, 168, 172, 179, 184, 187,
	190, 191, 192, 196, 212, 216, 217, 218, 219, 231,
	232, 233, 236, 239, 240, 242, 244, 245, 248, 252,
	253, 254, 255, 256, 258, 266, 268, 274, 275, 276,
	277, 278, 279, 280, 283, 284, 285, 286, 294, 298,
	307, 308, 318, 327, 331, 181, 315, 332, 238, 211,
	0, 0, 1094, 0, 0, 0, 0, 166, 0, 0,
	0, 0, 0, 202, 0, 0, 250, 0, 282, 156,
	210, 208, 304, 171, 167, 165, 155, 189, 215, 249,
	300, 243, 0, 205, 0, 0, 291, 224, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 193, 154, 131, 235, 292, 173, 0,
	0, 0, 114, 115, 116, 0, 1096, 0, 0, 0,
	0, 0, 0, 150, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 178, 0, 0, 0, 328, 0, 0, 0, 0,
	262, 0, 296, 182, 201, 145, 198, 128, 140, 0,
	180, 234, 269, 273, 0, 0, 0, 157, 0, 271,
	247, 317, 0, 1092, 270, 206, 306, 263, 316, 329,
	330, 163, 228, 323, 301, 326, 338, 141, 160, 241,
	297, 320, 288, 223, 303, 197, 287, 133, 299, 314,
	151, 281, 0, 0, 0, 135, 312, 295, 221, 194,
	195, 134, 0, 267, 164, 176, 159, 237, 309, 310,
	158, 339, 142, 325, 137, 143, 324, 230, 305, 313,
	222, 214, 136, 311, 220, 213, 200, 170, 185, 260,
	209, 261, 186, 226, 225, 227, 0, 132, 0, 293,
	321, 340, 148, 0, 0, 302, 334, 337, 0, 264,
	149, 177, 169, 259, 175, 203, 333, 335, 336, 147,
	257, 183, 229, 144, 188, 289, 199, 207, 0, 0,
	246, 272, 152, 319, 290, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 127, 138, 204, 0, 265,
	174, 322, 0, 0, 162, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 129, 130, 139,
	146, 153, 161, 168, 172, 179, 184, 187, 190, 191,
	192, 196, 212, 216, 217, 218, 219, 231, 232, 233,
	236, 239, 240, 242, 244, 245, 248, 252, 253, 254,
	255, 256, 258, 266, 268, 274, 275, 276, 277, 278,
	279, 280, 283, 284, 285, 286, 294, 298, 307, 308,
	318, 327, 331, 181, 315, 332, 238, 211, 0, 0,
	0, 0, 0, 0, 0, 166, 0, 866, 0, 0,
	0, 202, 0, 0, 250, 0, 282, 156, 210, 208,
	304, 171, 167, 165, 155, 189, 215, 249, 300, 243,
	0, 205, 0, 0, 291, 224, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 193, 154, 131, 235, 292, 173, 0, 0, 0,
	114, 115, 116, 0, 865, 0, 0, 0, 0, 0,
	0, 150, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 178,
	0, 0, 0, 328, 0, 0, 0, 0, 262, 0,
	296, 182, 201, 145, 198, 128, 140, 0, 180, 234,
	269, 273, 0, 0, 0, 157, 0, 271, 247, 317,
	0, 251, 270, 206, 306, 263, 316, 329, 330, 163,
	228, 323, 301, 326, 338, 141, 160, 241, 297, 320,
	288, 223, 303, 197, 287, 133, 299, 314, 151, 281,
	0, 0, 0, 135, 312, 295, 221, 194, 195, 134,
	0, 267, 164, 176, 159, 237, 309, 310, 158, 339,
	142, 325, 137, 143, 324, 230, 305, 313, 222, 214,
	136, 311, 220, 213, 200, 170, 185, 260, 209, 261,
	186, 226, 225, 227, 0, 132, 0, 293, 321, 340,
	148, 0, 0, 302, 334, 337, 0, 264, 149, 177,
	169, 259, 175, 203, 333, 335, 336, 147, 257, 183,
	229, 144, 188, 289, 199, 207, 0, 0, 246, 272,
	152, 319, 290, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 127, 138, 204, 0, 265, 174, 322,
	0, 0, 162, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 129, 130, 139, 146, 153,
	161, 168, 172, 179, 184, 187, 190, 191, 192, 196,
	212, 216, 217, 218, 219, 231, 232, 233, 236, 239,
	240, 242, 244, 245, 248, 252, 253, 254, 255, 256,
	258, 266, 268, 274, 275, 276, 277, 278, 279, 280,
	283, 284, 285, 286, 294, 298, 307, 308, 318, 327,
	331, 181, 315, 332, 238, 211, 0, 0, 0, 0,
	0, 0, 0, 166, 0, 0, 0, 0, 0, 202,
	0, 0, 250, 0, 282, 156, 210, 208, 304, 171,
	167, 165, 155, 189, 215, 249, 300, 243, 0, 205,
	0, 0, 291, 224, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 193,
	154, 131, 235, 292, 173, 0, 0, 0, 114, 115,
	116, 0, 0, 0, 0, 0, 0, 0, 0, 150,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 626, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 178, 0, 0,
	0, 328, 0, 0, 0, 0, 262, 0, 296, 182,
	201, 632, 198, 128, 140, 630, 180, 234, 269, 273,
	0, 0, 0, 157, 0, 271, 247, 317, 0, 251,
	270, 206, 306, 263, 316, 329, 330, 163, 228, 323,
	301, 326, 338, 141, 160, 241, 297, 320, 288, 223,
	303, 197, 287, 133, 299, 314, 151, 281, 0, 0,
	0, 135, 312, 295, 221, 194, 195, 134, 0, 267,
	164, 176, 159, 237, 309, 310, 158, 339, 142, 325,
	137, 143, 324, 230, 305, 313, 222, 214, 136, 311,
	220, 213, 200, 170, 185, 260, 209, 261, 186, 226,
	225, 227, 0, 132, 0, 293, 321, 340, 148, 0,
	0, 302, 334, 337, 0, 264, 149, 177, 169, 259,
	175, 203, 333, 335, 336, 147, 257, 183, 229, 144,
	188, 289, 199, 207, 0, 0, 246, 272, 152, 319,
	290, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 127, 138, 204, 0, 265, 174, 322, 0, 0,
	162, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 129, 130, 139, 146, 153, 161, 168,
	172, 179, 184, 187, 190, 191, 192, 196, 212, 216,
	217, 218, 219, 231, 232, 233, 236, 239, 240, 242,
	244, 245, 248, 252, 253, 254, 255, 256, 258, 266,
	268, 274, 275, 276, 277, 278, 279, 280, 283, 284,
	285, 286, 294, 298, 307, 308, 318, 327, 331, 181,
	315, 332, 238, 211, 0, 0, 0, 0, 0, 0,
	0, 166, 0, 0, 0, 0, 0, 202, 0, 0,
	250, 0, 282, 156, 210, 208, 304, 171, 167, 165,
	155, 189, 215, 249, 300, 243, 0, 205, 0, 0,
	291, 224, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 193, 154, 131,
	235, 292, 173, 0, 0, 467, 114, 115, 116, 0,
	0, 0, 0, 0, 0, 0, 0, 150, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 178, 0, 0, 0, 328,
	0, 0, 0, 0, 262, 0, 296, 182, 201, 145,
	198, 128, 140, 0, 180, 234, 269, 273, 0, 0,
	0, 157, 0, 271, 247, 317, 0, 251, 270, 206,
	306, 263, 316, 329, 330, 163, 228, 323, 301, 326,
	338, 141, 160, 241, 297, 320, 288, 223, 303, 197,
	287, 133, 299, 314, 151, 281, 0, 0, 0, 135,
	312, 295, 221, 194, 195, 134, 0, 267, 164, 176,
	159, 237, 309, 310, 158, 339, 142, 325, 137, 143,
	324, 230, 305, 313, 222, 214, 136, 311, 220, 213,
	200, 170, 185, 260, 209, 261, 186, 226, 225, 227,
	0, 132, 0, 293, 321, 340, 148, 0, 0, 302,
	334, 337, 0, 264, 149, 177, 169, 259, 175, 203,
	333, 335, 336, 147, 257, 183, 229, 144, 188, 289,
	199, 207, 0, 0, 246, 272, 152, 319, 290, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 127,
	138, 204, 0, 265, 174, 322, 0, 0, 162, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 129, 130, 139, 146, 153, 161, 168, 172, 179,
	184, 187, 190, 191, 192, 196, 212, 216, 217, 218,
	219, 231, 232, 233, 236, 239, 240, 242, 244, 245,
	248, 252, 253, 254, 255, 256, 258, 266, 268, 274,
	275, 276, 277, 278, 279, 280, 283, 284, 285, 286,
	294, 298, 307, 308, 318, 327, 331, 181, 315, 332,
	238, 211, 0, 0, 0, 0, 0, 0, 0, 166,
	0, 0, 0, 0, 0, 202, 0, 0, 250, 0,
	282, 156, 210, 208, 304, 171, 167, 165, 155, 189,
	215, 249, 300, 243, 0, 205, 0, 0, 291, 224,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 193, 154, 131, 235, 292,
	173, 66, 0, 0, 114, 115, 116, 0, 0, 0,
	0, 0, 0, 0, 0, 150, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 178, 0, 0, 0, 328, 0, 0,
	0, 0, 262, 0, 296, 182, 201, 145, 198, 128,
	140, 0, 180, 234, 269, 273, 0, 0, 0, 157,
	0, 271, 247, 317, 0, 251, 270, 206, 306, 263,
	316, 329, 330, 163, 228, 323, 301, 326, 338, 141,
	160, 241, 297, 320, 288, 223, 303, 197, 287, 133,
	299, 314, 151, 281, 0, 0, 0, 135, 312, 295,
	221, 194, 195, 134, 0, 267, 164, 176, 159, 237,
	309, 310, 158, 339, 142, 325, 137, 143, 324, 230,
	305, 313, 222, 214, 136, 311, 220, 213, 200, 170,
	185, 260, 209, 261, 186, 226, 225, 227, 0, 132,
	0, 293, 321, 340, 148, 0, 0, 302, 334, 337,
	0, 264, 149, 177, 169, 259, 175, 203, 333, 335,
	336, 147, 257, 183, 229, 144, 188, 289, 199, 207,
	0, 0, 246, 272, 152, 319, 290, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 127, 138, 204,
	0, 265, 174, 322, 0, 0, 162, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 129,
	130, 139, 146, 153, 161, 168, 172, 179, 184, 187,
	190, 191, 192, 196, 212, 216, 217, 218, 219, 231,
	232, 233, 236, 239, 240, 242, 244, 245, 248, 252,
	253, 254, 255, 256, 258, 266, 268, 274, 275, 276,
	277, 278, 279, 280, 283, 284, 285, 286, 294, 298,
	307, 308, 318, 327, 331, 181, 315, 332, 238, 211,
	0, 0, 0, 0, 0, 0, 0, 166, 0, 0,
	0, 0, 0, 202, 0, 0, 250, 0, 282, 156,
	210, 208, 304, 171, 167, 165, 155, 189, 215, 249,
	300, 243, 0, 205, 0, 0, 291, 224, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 193, 154, 131, 235, 292, 173, 0,
	0, 0, 114, 115, 116, 0, 1096, 0, 0, 0,
	0, 0, 0, 150, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 178, 0, 0, 0, 328, 0, 0, 0, 0,
	262, 0, 296, 182, 201, 145, 198, 128, 140, 0,
	180, 234, 269, 273, 0, 0, 0, 157, 0, 271,
	247, 317, 0, 251, 270, 206, 306, 263, 316, 329,
	330, 163, 228, 323, 301, 326, 338, 141, 160, 241,
	297, 320, 288, 223, 303, 197, 287, 133, 299, 314,
	151, 281, 0, 0, 0, 135, 312, 295, 221, 194,
	195, 134, 0, 267, 164, 176, 159, 237, 309, 310,
	158, 339, 142, 325, 137, 143, 324, 230, 305, 313,
	222, 214, 136, 311, 220, 213, 200, 170, 185, 260,
	209, 261, 186, 226, 225, 227, 0, 132, 0, 293,
	321, 340, 148, 0, 0, 302, 334, 337, 0, 264,
	149, 177, 169, 259, 175, 203, 333, 335, 336, 147,
	257, 183, 229, 144, 188, 289, 199, 207, 0, 0,
	246, 272, 152, 319, 290, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 127, 138, 204, 0, 265,
	174, 322, 0, 0, 162, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 129, 130, 139,
	146, 153, 161, 168, 172, 179, 184, 187, 190, 191,
	192, 196, 212, 216, 217, 218, 219, 231, 232, 233,
	236, 239, 240, 242, 244, 245, 248, 252, 253, 254,
	255, 256, 258, 266, 268, 274, 275, 276, 277, 278,
	279, 280, 283, 284, 285, 286, 294, 298, 307, 308,
	318, 327, 331, 181, 315, 332, 238, 211, 0, 0,
	0, 0, 0, 0, 0, 166, 0, 0, 0, 0,
	0, 202, 0, 0, 250, 0, 282, 156, 210, 208,
	304, 171, 167, 165, 155, 189, 215, 249, 300, 243,
	0, 205, 0, 0, 291, 224, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 193, 154, 131, 235, 292, 173, 0, 0, 0,
	114, 115, 116, 0, 835, 0, 0, 0, 0, 0,
	0, 150, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 178,
	0, 0, 0, 328, 0, 0, 0, 0, 262, 0,
	296, 182, 201, 145, 198, 128, 140, 0, 180, 234,
	269, 273, 0, 0, 0, 157, 0, 271, 247, 317,
	0, 251, 270, 206, 306, 263, 316, 329, 330, 163,
	228, 323, 301, 326, 338, 141, 160, 241, 297, 320,
	288, 223, 303, 197, 287, 133, 299, 314, 151, 281,
	0, 0, 0, 135, 312, 295, 221, 194, 195, 134,
	0, 267, 164, 176, 159, 237, 309, 310, 158, 339,
	142, 325, 137, 143, 324, 230, 305, 313, 222, 214,
	136, 311, 220, 213, 200, 170, 185, 260, 209, 261,
	186, 226, 225, 227, 0, 132, 0, 293, 321, 340,
	148, 0, 0, 302, 334, 337, 0, 264, 149, 177,
	169, 259, 175, 203, 333, 335, 336, 147, 257, 183,
	229, 144, 188, 289, 199, 207, 0, 0, 246, 272,
	152, 319, 290, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 127, 138, 204, 0, 265, 174, 322,
	0, 0, 162, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 129, 130, 139, 146, 153,
	161, 168, 172, 179, 184, 187, 190, 191, 192, 196,
	212, 216, 217, 218, 219, 231, 232, 233, 236, 239,
	240, 242, 244, 245, 248, 252, 253, 254, 255, 256,
	258, 266, 268, 274, 275, 276, 277, 278, 279, 280,
	283, 284, 285, 286, 294, 298, 307, 308, 318, 327,
	331, 181, 315, 332, 848, 211, 0, 0, 0, 0,
	0, 238, 0, 0, 0, 0, 0, 0, 0, 0,
	166, 0, 0, 0, 0, 0, 202, 0, 0, 250,
	0, 282, 156, 210, 208, 304, 171, 167, 165, 155,
	189, 215, 249, 300, 243, 0, 205, 0, 0, 291,
	224, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 193, 154, 131, 235,
	292, 173, 0, 0, 0, 114, 115, 116, 0, 0,
	0, 0, 0, 0, 0, 0, 150, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 178, 0, 0, 0, 328, 0,
	0, 0, 0, 262, 0, 296, 182, 201, 145, 198,
	128, 140, 0, 180, 234, 269, 273, 0, 0, 0,
	157, 0, 271, 247, 317, 0, 251, 270, 206, 306,
	263, 316, 329, 330, 163, 228, 323, 301, 326, 338,
	141, 160, 241, 297, 320, 288, 223, 303, 197, 287,
	133, 299, 314, 151, 281, 0, 0, 0, 135, 312,
	295, 221, 194, 195, 134, 0, 267, 164, 176, 159,
	237, 309, 310, 158, 339, 142, 325, 137, 143, 324,
	230, 305, 313, 222, 214, 136, 311, 220, 213, 200,
	170, 185, 260, 209, 261, 186, 226, 225, 227, 0,
	132, 0, 293, 321, 340, 148, 0, 0, 302, 334,
	337, 0, 264, 149, 177, 169, 259, 175, 203, 333,
	335, 336, 147, 257, 183, 229, 144, 188, 289, 199,
	207, 0, 0, 246, 272, 152, 319, 290, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 127, 138,
	204, 0, 265, 174, 322, 0, 0, 162, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	129, 130, 139, 146, 153, 161, 168, 172, 179, 184,
	187, 190, 191, 192, 196, 212, 216, 217, 218, 219,
	231, 232, 233, 236, 239, 240, 242, 244, 245, 248,
	252, 253, 254, 255, 256, 258, 266, 268, 274, 275,
	276, 277, 278, 279, 280, 283, 284, 285, 286, 294,
	298, 307, 308, 318, 327, 331, 181, 315, 332, 238,
	211, 0, 0, 0, 0, 0, 0, 839, 166, 0,
	0, 0, 0, 0, 202, 0, 0, 250, 0, 282,
	156, 210, 208, 304, 171, 167, 165, 155, 189, 215,
	249, 300, 243, 0, 205, 0, 0, 291, 224, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 193, 154, 131, 235, 292, 173,
	0, 0, 0, 114, 115, 116, 0, 0, 0, 0,
	0, 0, 0, 0, 150, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 178, 0, 0, 0, 328, 0, 0, 0,
	0, 262, 0, 296, 182, 201, 145, 198, 128, 140,
	0, 180, 234, 269, 273, 0, 0, 0, 157, 0,
	271, 247, 317, 0, 251, 270, 206, 306, 263, 316,
	329, 330, 163, 228, 323, 301, 326, 338, 141, 160,
	241, 297, 320, 288, 223, 303, 197, 287, 133, 299,
	314, 151, 281, 0, 0, 0, 135, 312, 295, 221,
	194, 195, 134, 0, 267, 164, 176, 159, 237, 309,
	310, 158, 339, 142, 325, 137, 143, 324, 230, 305,
	313, 222, 214, 136, 311, 220, 213, 200, 170, 185,
	260, 209, 261, 186, 226, 225, 227, 0, 132, 0,
	293, 321, 340, 148, 0, 0, 302, 334, 337, 0,
	264, 149, 177, 169, 259, 175, 203, 333, 335, 336,
	147, 257, 183, 229, 144, 188, 289, 199, 207, 0,
	0, 246, 272, 152, 319, 290, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 127, 138, 204, 0,
	265, 174, 322, 0, 0, 162, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 129, 130,
	139, 146, 153, 161, 168, 172, 179, 184, 187, 190,
	191, 192, 196, 212, 216, 217, 218, 219, 231, 232,
	233, 236, 239, 240, 242, 244, 245, 248, 252, 253,
	254, 255, 256, 258, 266, 268, 274, 275, 276, 277,
	278, 279, 280, 283, 284, 285, 286, 294, 298, 307,
	308, 318, 327, 331, 181, 315, 332, 238, 211, 0,
	0, 0, 0, 0, 0, 0, 166, 0, 0, 0,
	0, 0, 202, 0, 0, 250, 0, 282, 156, 210,
	208, 304, 171, 167, 165, 155, 189, 215, 249, 300,
	243, 0, 205, 0, 0, 291, 224, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 193, 154, 131, 235, 292, 173, 0, 0,
	0, 114, 115, 116, 0, 713, 0, 0, 0, 0,
	0, 0, 150, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	178, 0, 0, 0, 328, 0, 0, 0, 0, 262,
	0, 296, 182, 201, 145, 198, 128, 140, 0, 180,
	234, 269, 273, 0, 0, 0, 157, 0, 271, 247,
	317, 0, 251, 270, 206, 306, 263, 316, 329, 330,
	163, 228, 323, 301, 326, 338, 141, 160, 241, 297,
	320, 288, 223, 303, 197, 287, 133, 299, 314, 151,
	281, 0, 0, 0, 135, 312, 295, 221, 194, 195,
	134, 0, 267, 164, 176, 159, 237, 309, 310, 158,
	339, 142, 325, 137, 143, 324, 230, 305, 313, 222,
	214, 136, 311, 220, 213, 200, 170, 185, 260, 209,
	261, 186, 226, 225, 227, 0, 132, 0, 293, 321,
	340, 148, 0, 0, 302, 334, 337, 0, 264, 149,
	177, 169, 259, 175, 203, 333, 335, 336, 147, 257,
	183, 229, 144, 188, 289, 199, 207, 0, 0, 246,
	272, 152, 319, 290, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 127, 138, 204, 0, 265, 174,
	322, 0, 0, 162, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 129, 130, 139, 146,
	153, 161, 168, 172, 179, 184, 187, 190, 191, 192,
	196, 212, 216, 217, 218, 219, 231, 232, 233, 236,
	239, 240, 242, 244, 245, 248, 252, 253, 254, 255,
	256, 258, 266, 268, 274, 275, 276, 277, 278, 279,
	280, 283, 284, 285, 286, 294, 298, 307, 308, 318,
	327, 331, 181, 315, 332, 238, 211, 0, 0, 0,
	0, 0, 0, 0, 166, 0, 0, 0, 0, 0,
	202, 0, 0, 250, 0, 282, 156, 210, 208, 304,
	171, 167, 165, 155, 189, 215, 249, 300, 243, 0,
	205, 0, 0, 291, 224, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	193, 154, 131, 235, 292, 173, 0, 0, 0, 114,
	115, 116, 0, 0, 0, 0, 0, 0, 0, 0,
	150, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 383, 0, 178, 0,
	0, 0, 328, 0, 0, 0, 0, 262, 0, 296,
	182, 201, 145, 198, 128, 140, 0, 180, 234, 269,
	273, 0, 0, 0, 157, 0, 271, 247, 317, 0,
	251, 270, 206, 306, 263, 316, 329, 330, 163, 228,
	323, 301, 326, 338, 141, 160, 241, 297, 320, 288,
	223, 303, 197, 287, 133, 299, 314, 151, 281, 0,
	0, 0, 135, 312, 295, 221, 194, 195, 134, 0,
	267, 164, 176, 159, 237, 309, 310, 158, 339, 142,
	325, 137, 143, 324, 230, 305, 313, 222, 214, 136,
	311, 220, 213, 200, 170, 185, 260, 209, 261, 186,
	226, 225, 227, 0, 132, 0, 293, 321, 340, 148,
	0, 0, 302, 334, 337, 0, 264, 149, 177, 169,
	259, 175, 203, 333, 335, 336, 147, 257, 183, 229,
	144, 188, 289, 199, 207, 0, 0, 246, 272, 152,
	319, 290, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 127, 138, 204, 0, 265, 174, 322, 0,
	0, 162, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 129, 130, 139, 146, 153, 161,
	168, 172, 179, 184, 187, 190, 191, 192, 196, 212,
	216, 217, 218, 219, 231, 232, 233, 236, 239, 240,
	242, 244, 245, 248, 252, 253, 254, 255, 256, 258,
	266, 268, 274, 275, 276, 277, 278, 279, 280, 283,
	284, 285, 286, 294, 298, 307, 308, 318, 327, 331,
	382, 315, 332, 238, 211, 0, 0, 0, 0, 0,
	0, 0, 166, 0, 0, 0, 0, 0, 202, 0,
	0, 250, 0, 282, 156, 210, 208, 304, 171, 167,
	165, 155, 189, 215, 249, 300, 243, 0, 205, 0,
	0, 291, 224, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 193, 154,
	131, 235, 292, 173, 0, 0, 0, 114, 115, 116,
	0, 0, 0, 0, 0, 0, 0, 0, 150, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 178, 0, 122, 0,
	328, 0, 0, 0, 0, 262, 0, 296, 182, 201,
	145, 198, 128, 140, 0, 180, 234, 269, 273, 0,
	0, 0, 157, 0, 271, 247, 317, 0, 251, 270,
	206, 306, 263, 316, 329, 330, 163, 228, 323, 301,
	326, 338, 141, 160, 241, 297, 320, 288, 223, 303,
	197, 287, 133, 299, 314, 151, 281, 0, 0, 0,
	135, 312, 295, 221, 194, 195, 134, 0, 267, 164,
	176, 159, 237, 309, 310, 158, 339, 142, 325, 137,
	143, 324, 230, 305, 313, 222, 214, 136, 311, 220,
	213, 200, 170, 185, 260, 209, 261, 186, 226, 225,
	227, 0, 132, 0, 293, 321, 340, 148, 0, 0,
	302, 334, 337, 0, 264, 149, 177, 169, 259, 175,
	203, 333, 335, 336, 147, 257, 183, 229, 144, 188,
	289, 199, 207, 0, 0, 246, 272, 152, 319, 290,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	127, 138, 204, 0, 265, 174, 322, 0, 0, 162,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 129, 130, 139, 146, 153, 161, 168, 172,
	179, 184, 187, 190, 191, 192, 196, 212, 216, 217,
	218, 219, 231, 232, 233, 236, 239, 240, 242, 244,
	245, 248, 252, 253, 254, 255, 256, 258, 266, 268,
	274, 275, 276, 277, 278, 279, 280, 283, 284, 285,
	286, 294, 298, 307, 308, 318, 327, 331, 181, 315,
	332, 238, 211, 0, 0, 0, 0, 0, 0, 0,
	166, 0, 0, 0, 0, 0, 202, 0, 0, 250,
	0, 282, 156, 210, 208, 304, 171, 167, 165, 155,
	189, 215, 249, 300, 243, 0, 205, 0, 0, 291,
	224, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 193, 154, 131, 235,
	292, 173, 0, 0, 0, 114, 115, 116, 0, 0,
	0, 0, 0, 0, 0, 0, 150, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 178, 0, 0, 0, 328, 0,
	0, 0, 0, 262, 0, 296, 182, 201, 145, 198,
	128, 140, 0, 180, 234, 269, 273, 0, 0, 0,
	157, 0, 271, 247, 317, 0, 251, 270, 206, 306,
	263, 316, 329, 330, 163, 228, 323, 301, 326, 338,
	141, 160, 241, 297, 320, 288, 223, 303, 197, 287,
	133, 299, 314, 151, 281, 0, 0, 0, 135, 312,
	295, 221, 194, 195, 134, 0, 267, 164, 176, 159,
	237, 309, 310, 158, 339, 142, 325, 137, 143, 324,
	230, 305, 313, 222, 214, 136, 311, 220, 213, 200,
	170, 185, 260, 209, 261, 186, 226, 225, 227, 0,
	132, 0, 293, 321, 340, 148, 0, 0, 302, 334,
	337, 0, 264, 149, 177, 169, 259, 175, 203, 333,
	335, 336, 147, 257, 183, 229, 144, 188, 289, 199,
	207, 0, 0, 246, 272, 152, 319, 290, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 127, 138,
	204, 0, 265, 174, 322, 0, 0, 162, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	129, 130, 139, 146, 153, 161, 168, 172, 179, 184,
	187, 190, 191, 192, 196, 212, 216, 217, 218, 219,
	231, 232, 233, 236, 239, 240, 242, 244, 245, 248,
	252, 253, 254, 255, 256, 258, 266, 268, 274, 275,
	276, 277, 278, 279, 280, 283, 284, 285, 286, 294,
	298, 307, 308, 318, 327, 331, 181, 315, 332, 0,
	211,
}

var yyPact = [...]int{
	2059, -1000, -301, 1269, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1221, 942, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	357, 930, 74, 1144, 58, 623, 216, 7, 19214, 215,
	43, 19602, -1000, 50, -1000, 18, 19602, 41, 18826, -1000,
	-1000, -1000, 10645, 1099, -67, -71, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 961, 1205, 1204, 1235, 734, 1226,
	-1000, 9080, 9080, 188, 188, 188, 7528, -1000, -1000, 15715,
	19602, 19602, 950, 185, 209, 185, -153, -1000, -1000, -1000,
	-1000, -1000, -1000, 1144, -1000, -1000, 87, -1000, -1000, 19602,
	19602, 295, 1144, 96, -1000, -1000, -1000, 19602, 184, 623,
	184, 184, 19602, -1000, 256, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 19602, 1137, 436, 436, 436, 436, 436, 436, -5,
	-1000, -10, 91, 81, 94, -8, 623, 103, -1000, 281,
	-1000, 92, 3, -1000, 436, 5098, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 202, -1000, -1000, -1000, -1000, 19602,
	18438, 146, 372, -1000, -1000, -1000, -1000, 769, 581, -1000,
	10645, 483, 719, 719, -1000, -1000, 232, -1000, -1000, 11809,
	11809, 11809, 11809, 11809, 11809, 11809, 11809, 11809, 11809, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 719, 255, -1000, 10257, 719, 719, 719,
	719, 719, 719, 719, 719, 10645, 719, 719, 719, 719,
	719, 719, 719, 719, 719, 719, 719, 719, 719, 719,
	719, 719, -1000, -1000, -1000, 19602, -1000, 1221, -1000, 942,
	-1000, -1000, -1000, 1147, 10645, 10645, 1221, -1000, 1029, 9080,
	-1000, -1000, 1220, -1000, -1000, -1000, -1000, 417, 1256, -1000,
	12585, 250, 1254, 18050, -1000, 16491, 17662, 893, 7123, -70,
	-1000, -1000, -1000, 368, 15327, -1000, -1000, -1000, 1129, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 865, 19602, -1000, -1000, 1793,
	623, -1000, 923, -1000, 860, -1000, 907, 86, 360, 19602,
	397, 623, 623, -1000, -1000, -1000, 1128, 351, 538, 5098,
	107, 144, 130, 19602, 1144, 1097, 889, 196, 19602, 1187,
	981, 19602, 623, -1000, 6313, -1000, 436, -1000, 643, 10645,
	-1000, -1000, -1000, -1000, -1000, 436, 19602, 436, 19602, 436,
	436, 436, 436, 442, 445, 442, -1000, -1000, -1000, -1000,
	5098, 5098, 19602, 5098, 5098, 19602, 5098, 5098, 445, -1000,
	-1000, -1000, 300, -1000, 980, -1000, -1000, -1000, -1000, 26,
	-1000, -1000, -1000, -1000, -1000, 1269, -1000, -1000, -1000, -139,
	10645, 10645, 10645, 10645, 674, 335, 11809, 537, 340, 11809,
	11809, 11809, 11809, 11809, 11809, 11809, 11809, 11809, 11809, 11809,
	11809, 11809, 11809, 11809, 707, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 623, -1000, 1267, 790, 790, 278, 278,
	278, 278, 278, 278, 278, 278, 278, 12197, 7916, 6313,
	734, 857, 1221, 9080, 9080, 10645, 10645, 9856, 9468, 9080,
	1121, 385, 581, 19602, -1000, -1000, 11421, -1000, -1000, -1000,
	-1000, -1000, 548, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	19602, 19602, 9080, 9080, 9080, 9080, 9080, -1000, 888, -1000,
	-187, 14939, 1204, 734, 1220, 1169, 1262, 297, 765, 887,
	-1000, 718, 1204, 14551, 783, -1000, 1220, -1000, -1000, -1000,
	19602, -1000, -1000, 17267, -1000, -1000, 5908, 19602, 119, 19602,
	-1000, 806, 1041, -1000, -1000, -1000, 1197, 14163, 19602, 917,
	900, -1000, -1000, 249, 6718, -70, -1000, 6718, 835, -1000,
	-107, -113, 8304, 272, -1000, -1000, -1000, -1000, 4288, 12973,
	701, 401, -53, -1000, -1000, -1000, 907, -1000, 907, 907,
	907, 907, -11, -11, -11, -11, -1000, -1000, -1000, -1000,
	-1000, 929, 928, -1000, 907, 907, 907, 907, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 925, 925, 925, 908, 908,
	171, 10645, 64, 19602, 1178, 532, 60, 353, 78, -1000,
	1186, 969, -1000, 351, 818, -1000, -1000, 554, 554, 325,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 121, -1000, 19602, 19602, 19602, 19602, 19602, 224, 102,
	19602, 19602, 883, -1000, 19602, 5098, -1000, -1000, -1000, -1000,
	-1000, -1000, 581, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 436, 19602, 19602, 19602, -1000, -1000, 436, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 19602, -1000, 639, 19602,
	19602, -1000, -1000, -1000, -1000, -1000, 581, 335, 543, 324,
	-1000, -1000, 528, -1000, -1000, 2396, -1000, -1000, -1000, -1000,
	537, 11809, 11809, 11809, 449, 2396, 2380, 542, 1349, 278,
	273, 273, 311, 311, 311, 311, 311, 302, 302, -1000,
	-1000, -1000, 548, -1000, -1000, -1000, 548, 9080, 9080, 879,
	719, 248, -1000, 961, -1000, -1000, 1204, 852, 852, 603,
	546, 398, 1253, 852, 361, 1251, 852, 852, 9080, -1000,
	-1000, 389, -1000, 10645, 548, -1000, 246, -1000, 2120, 878,
	872, 852, 548, 548, 852, 852, 19602, -1000, -296, -1000,
	-136, 269, 719, -1000, 16879, -1000, -1000, 1147, -1000, -1000,
	1081, -1000, 1017, 10645, 10645, 10645, -1000, -1000, -1000, 1147,
	1237, -1000, 1055, 1048, 1241, 9080, 16491, 1220, -1000, -1000,
	-1000, 245, 1241, 892, 719, -1000, 19602, 16491, 16491, 16491,
	16491, 16491, -1000, 1002, 1000, -1000, 1016, 1015, 1026, 19602,
	-1000, 855, 734, 14163, 119, 692, 16491, 19602, -1000, -1000,
	16491, 19602, 5503, -1000, 835, -70, -116, -1000, -1000, -1000,
	-1000, 581, -1000, 812, 829, 3883, -1000, -1000, -1000, -1000,
	143, -1000, -1000, 924, 623, -1000, 1161, 339, 339, 312,
	623, 1159, -1000, -1000, -1000, -1000, 1143, -1000, 405, -58,
	-1000, -1000, -11, -11, -1000, -1000, 272, 1123, 272, 272,
	272, 632, 632, -1000, -1000, -1000, -1000, -1000, 530, -1000,
	-1000, -1000, 513, -1000, -1000, 923, 646, 984, 64, -1000,
	-1000, 351, 625, 1105, 19602, -1000, -1000, 667, 204, 29,
	88, -1000, -1000, -1000, -1000, 976, -1000, 742, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 19602, -1000, -1000,
	-1000, -1000, -1000, 19602, 959, -1000, -1000, -1000, -1000, 23,
	105, 100, 195, -1000, 5098, -1000, -1000, -1000, -1000, 442,
	-1000, 442, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 449,
	2396, 1951, -1000, 11809, 11809, -1000, -1000, 852, 852, 9080,
	6313, 1221, 1147, -1000, -1000, 118, 707, 118, 11809, 11809,
	-1000, 11809, 11809, -1000, -168, 725, 362, -1000, 10645, 533,
	-1000, 6313, -1000, 11809, 11809, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 208, 207, 206, 19602, -1000, -1000,
	614, 624, 1038, 581, 581, -1000, -1000, 19602, -1000, -1000,
	-1000, -1000, 1239, 10645, -1000, 803, -1000, 4693, 1204, 975,
	19602, 719, 1269, 13374, 19602, 918, -1000, 352, 1041, 967,
	974, 1003, -1000, -1000, -1000, -1000, 994, -1000, 993, -1000,
	-1000, -1000, -1000, -1000, 734, 1241, 16491, 749, -1000, 749,
	-1000, 244, -1000, -1000, -1000, -117, -101, -1000, -1000, -1000,
	4288, -1000, 4288, -1000, 19602, 164, -1000, 623, 623, 623,
	-1000, -1000, -1000, 912, 973, 11809, -1000, -1000, -1000, 272,
	272, -1000, 328, -1000, -1000, -1000, 846, -1000, 844, 787,
	837, 28, -1000, 945, 1113, 351, 351, -1000, 505, -1000,
	623, -1000, -1000, 19602, 72, -1000, 909, 606, -1000, 19602,
	-1000, -1000, -1000, -1000, -1000, -1000, 1167, -175, 623, 19602,
	19602, 19602, -1000, 19602, -1000, 436, 436, -1000, 11809, 2396,
	2396, -1000, -1000, 548, -1000, 1204, -1000, 548, 907, 907,
	-1000, 907, 908, -1000, 907, 11, 907, 9, 548, 548,
	2365, 2303, 2203, 2034, 719, -163, -1000, 581, 10645, -1000,
	2156, 1751, 719, 719, 719, 827, -1000, 615, -11, -1000,
	-1000, -1000, 1228, 1233, 581, -1000, -1000, -1000, 1163, 708,
	758, -1000, -1000, 8692, 833, 1047, 241, 827, 1221, 19602,
	10645, -1000, -1000, 10645, 906, -1000, 10645, -1000, -1000, -1000,
	1221, 1221, 749, -1000, -1000, 289, -1000, -1000, -1000, 3883,
	-1000, 825, -1000, 1159, -1000, -1000, -1000, 19602, -40, 1261,
	2396, -1000, -1000, -1000, -1000, -11, 601, -11, 465, -1000,
	457, -1000, -1000, -221, -1000, -1000, 941, 1006, -1000, -1000,
	902, -1000, -1000, -1000, 655, -1000, -1000, 719, -1000, 6313,
	-1000, -1000, 896, 964, -1000, -1000, -1000, -1000, 2396, -1000,
	1147, -1000, -1000, 189, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 11809, 11809, 11809, 11809, 11809, 1204, 593, 581,
	11809, 11809, 16103, 19602, 19602, 13762, 19602, -11, -51, -1000,
	10645, 10645, 1158, -1000, 719, -1000, 794, 19602, 719, 19602,
	-1000, 1204, -1000, 581, 581, 19602, 581, 1204, -1000, 64,
	780, -1000, 309, -1000, -98, 272, -1000, 272, 651, 649,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1196, 19602,
	-1000, 117, 778, -1000, 347, 19602, 19602, -1000, -1000, -1000,
	2120, 2120, 2120, 2120, 120, 548, -1000, 2120, 2120, 762,
	-1000, 762, 762, 269, -1000, -280, -1000, 1082, 1080, 581,
	769, 1260, -1000, 719, 1269, 231, 758, -1000, -1000, 760,
	-1000, -1000, 129, 19602, 409, 1156, -1000, 1149, -1000, -1000,
	-1000, -1000, -1000, 942, 751, 732, -1000, 19602, 6313, 4288,
	716, -1000, -1000, -1000, -1000, -1000, 548, 77, -178, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -51, 177, -1000, 1063,
	1059, 1223, 19602, 758, 19602, -1000, 19602, -1000, -1000, 573,
	-1000, -1000, 136, -1000, -1000, 117, 1046, -1000, -1000, 959,
	-1000, 1028, -173, -185, 1067, 1070, 1070, 1080, 1222, 1078,
	1076, -1000, 570, 754, -1000, 791, -1000, -1000, -77, -1000,
	114, -175, -1000, 1027, -1000, 1065, 468, -1000, -1000, -1000,
	-1000, 569, -1000, 1219, 1207, -1000, 19602, 166, -1000, -1000,
	112, -1000, -176, -1000, 466, -1000, -1000, -1000, 568, 549,
	704, 65, 719, -180, -1000, -1000, -1000, -1000, 972, -1000,
	11033, -186, 971, -1000, 1250, 2120, 548, -1000, -1000, 1259,
	319, 319, -1000, -1000, -1000, -1000, -1000, 168, 562, -1000,
	-1000, -1000, -1000,
}

var yyPgo = [...]int{
	0, 1555, 1554, 25, 72, 79, 1553, 1549, 1548, 1547,
	138, 129, 125, 1546, 1545, 1544, 1543, 1538, 1536, 1535,
	1532, 1531, 1530, 1529, 1528, 1527, 1526, 106, 105, 474,
	1525, 1524, 1522, 1521, 1520, 1519, 1518, 1515, 1514, 1513,
	1512, 1511, 1510, 1509, 130, 1508, 1507, 1505, 1504, 1503,
	1502, 1501, 1500, 1499, 1498, 1496, 101, 1495, 50, 114,
	47, 68, 1494, 64, 1493, 1492, 1490, 1487, 1484, 1754,
	1470, 55, 69, 63, 1469, 39, 1467, 1457, 100, 1456,
	1455, 60, 1452, 1451, 73, 1449, 66, 83, 17, 32,
	1447, 1445, 1439, 1438, 99, 1161, 1437, 1435, 18, 1431,
	1430, 119, 1429, 77, 31, 16, 12, 22, 1427, 81,
	1426, 9, 1425, 78, 1424, 1419, 1417, 1416, 44, 1415,
	65, 86, 40, 1414, 6, 14, 1412, 1407, 1404, 1402,
	1400, 1397, 4, 1396, 1395, 1394, 1393, 36, 1392, 8,
	1391, 62, 41, 20, 11, 1390, 1389, 21, 95, 61,
	88, 1386, 1385, 1384, 736, 1381, 43, 1380, 134, 1379,
	75, 1376, 468, 556, 1373, 1371, 1369, 1366, 1363, 45,
	1002, 1614, 386, 96, 1362, 1361, 2265, 53, 70, 19,
	1357, 1356, 1355, 54, 113, 38, 767, 42, 1354, 1353,
	1352, 1351, 1349, 1343, 1342, 98, 1341, 1337, 1336, 139,
	33, 97, 23, 1335, 1334, 1330, 1329, 56, 82, 1328,
	1327, 58, 67, 1326, 104, 24, 29, 1324, 1322, 1316,
	1315, 27, 10, 1312, 93, 35, 48, 28, 34, 80,
	1309, 15, 1308, 1306, 37, 30, 1305, 7, 1304, 13,
	1300, 3, 0, 1298, 5, 1297, 74, 1141, 1, 1295,
	2, 1292, 1291, 71, 1290, 1288, 1284, 1277, 84, 235,
	89, 1276, 107,
}

var yyR1 = [...]int{
	0, 256, 257, 257, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 242, 242, 242, 245, 245, 21, 41,
	3, 3, 3, 3, 2, 2, 8, 9, 4, 5,
	5, 10, 10, 50, 50, 11, 12, 12, 12, 12,
	260, 260, 78, 78, 79, 79, 141, 141, 13, 14,
	14, 150, 150, 149, 149, 149, 151, 151, 151, 151,
	186, 186, 15, 15, 15, 15, 15, 57, 57, 244,
	244, 243, 241, 241, 240, 240, 239, 23, 24, 25,
	26, 247, 247, 217, 30, 30, 29, 29, 29, 29,
	31, 31, 28, 28, 27, 27, 219, 219, 218, 218,
	218, 218, 218, 218, 208, 188, 188, 188, 188, 191,
	191, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	190, 190, 190, 190, 190, 192, 192, 192, 192, 192,
	193, 193, 193, 193, 193, 193, 193, 193, 193, 193,
	193, 193, 193, 193, 193, 194, 194, 194, 194, 194,
	194, 194, 194, 207, 207, 195, 195, 201, 201, 202,
	202, 202, 204, 204, 205, 205, 164, 164, 164, 197,
	197, 198, 198, 203, 203, 199, 199, 199, 200, 200,
	200, 206, 206, 206, 206, 206, 196, 196, 209, 231,
	231, 230, 230, 226, 226, 226, 226, 216, 216, 223,
	223, 223, 223, 223, 223, 213, 213, 213, 214, 214,
	212, 212, 215, 215, 225, 225, 224, 210, 210, 211,
	211, 234, 234, 234, 234, 234, 235, 249, 250, 248,
	248, 248, 248, 248, 165, 165, 165, 220, 220, 220,
	221, 221, 221, 222, 222, 222, 16, 16, 16, 16,
	16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
	16, 16, 16, 246, 246, 246, 246, 246, 246, 246,
	246, 246, 246, 246, 246, 246, 246, 238, 236, 236,
	237, 237, 17, 22, 22, 18, 18, 18, 18, 19,
	19, 32, 33, 33, 33, 33, 33, 33, 33, 33,
	33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
	33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
	33, 33, 33, 33, 33, 33, 33, 33, 33, 157,
	157, 251, 251, 159, 159, 155, 155, 158, 158, 156,
	156, 156, 160, 160, 160, 161, 161, 255, 255, 255,
	34, 34, 36, 36, 37, 38, 38, 181, 181, 182,
	182, 39, 40, 49, 49, 49, 49, 49, 49, 51,
	51, 51, 7, 7, 7, 7, 46, 46, 46, 6,
	6, 35, 35, 42, 252, 252, 253, 254, 254, 254,
	254, 43, 20, 261, 44, 45, 45, 56, 56, 56,
	52, 52, 52, 55, 55, 55, 60, 60, 62, 62,
	62, 62, 62, 63, 63, 63, 63, 63, 63, 59,
	59, 61, 61, 61, 61, 174, 174, 174, 173, 173,
	70, 70, 71, 71, 72, 72, 73, 73, 73, 110,
	87, 87, 140, 140, 139, 139, 142, 142, 74, 74,
	74, 74, 75, 75, 76, 76, 77, 77, 180, 180,
	179, 179, 179, 178, 178, 80, 80, 80, 82, 81,
	81, 81, 81, 83, 83, 85, 85, 84, 84, 86,
	88, 88, 88, 88, 88, 89, 89, 69, 69, 69,
	69, 69, 69, 69, 69, 153, 153, 91, 91, 90,
	90, 90, 90, 90, 90, 90, 90, 90, 90, 102,
	102, 102, 102, 102, 102, 92, 92, 92, 92, 92,
	92, 92, 58, 58, 103, 103, 103, 109, 104, 104,
	95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 99, 99, 99, 99, 97, 97,
	97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
	97, 98, 98, 98, 98, 98, 98, 98, 98, 98,
	98, 98, 98, 98, 98, 98, 98, 262, 262, 101,
	100, 100, 100, 100, 100, 100, 100, 54, 54, 54,
	54, 54, 185, 185, 187, 187, 187, 187, 187, 187,
	187, 187, 187, 187, 187, 187, 187, 114, 114, 53,
	53, 112, 112, 113, 115, 115, 111, 111, 111, 94,
	94, 94, 94, 94, 94, 94, 94, 96, 96, 96,
	116, 116, 117, 117, 118, 118, 119, 119, 120, 121,
	121, 121, 122, 122, 122, 122, 232, 232, 232, 232,
	232, 227, 227, 227, 227, 228, 228, 228, 64, 64,
	64, 64, 66, 66, 65, 65, 47, 47, 48, 48,
	48, 67, 67, 68, 68, 68, 68, 137, 137, 137,
	123, 123, 123, 123, 128, 128, 128, 124, 124, 126,
	126, 126, 127, 127, 127, 125, 131, 131, 133, 133,
	132, 132, 130, 130, 135, 135, 134, 134, 129, 129,
	93, 93, 93, 93, 93, 138, 138, 138, 138, 143,
	143, 105, 105, 107, 107, 106, 108, 144, 144, 147,
	145, 145, 148, 148, 148, 148, 148, 146, 146, 146,
	175, 175, 175, 152, 152, 162, 162, 163, 163, 154,
	154, 166, 166, 166, 166, 166, 166, 166, 166, 166,
	166, 167, 167, 167, 168, 168, 136, 136, 136, 136,
	233, 233, 229, 171, 171, 172, 172, 176, 176, 177,
	177, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	258, 259, 183, 184, 184, 184,
}

var yyR2 = [...]int{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 1, 1, 1, 0, 1, 2, 3,
	5, 6, 6, 7, 4, 6, 5, 7, 8, 1,
	3, 7, 8, 1, 1, 9, 9, 8, 7, 7,
	1, 1, 1, 3, 1, 3, 0, 4, 3, 5,
	4, 1, 3, 3, 2, 2, 2, 2, 2, 1,
	1, 1, 2, 2, 6, 11, 2, 0, 2, 0,
	2, 1, 0, 2, 1, 3, 3, 4, 7, 4,
	2, 1, 1, 4, 0, 1, 1, 1, 2, 2,
	0, 1, 5, 5, 4, 4, 2, 4, 1, 1,
	3, 4, 3, 3, 8, 3, 1, 1, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 2, 2, 2, 1, 2, 2, 2, 2,
	4, 4, 2, 2, 3, 3, 3, 3, 1, 1,
	1, 1, 1, 6, 6, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 0, 3, 0, 5, 0,
	3, 5, 0, 1, 0, 1, 0, 1, 2, 0,
	2, 0, 3, 0, 1, 0, 3, 3, 0, 2,
	2, 0, 2, 1, 2, 1, 0, 2, 5, 0,
	1, 1, 2, 1, 3, 2, 3, 0, 1, 2,
	3, 3, 3, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 0, 1, 1, 3, 3, 3, 1, 3,
	1, 10, 11, 11, 12, 1, 5, 3, 3, 1,
	1, 2, 2, 2, 0, 1, 2, 0, 1, 3,
	1, 2, 3, 1, 1, 1, 5, 6, 6, 6,
	6, 4, 4, 3, 6, 7, 5, 5, 5, 12,
	7, 5, 9, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 7, 1, 3,
	8, 8, 3, 3, 5, 4, 6, 5, 4, 3,
	2, 3, 4, 3, 3, 3, 3, 3, 3, 4,
	2, 4, 4, 4, 4, 4, 5, 7, 4, 4,
	4, 4, 4, 4, 4, 4, 2, 4, 7, 2,
	4, 5, 4, 3, 3, 5, 2, 3, 3, 1,
	1, 1, 1, 0, 1, 0, 1, 1, 1, 0,
	2, 2, 0, 2, 2, 0, 2, 0, 1, 1,
	2, 1, 1, 2, 1, 1, 5, 0, 1, 0,
	1, 2, 3, 0, 3, 3, 3, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 1, 1, 3,
	3, 2, 2, 3, 1, 3, 2, 1, 2, 1,
	2, 2, 2, 0, 2, 0, 2, 1, 2, 2,
	0, 1, 1, 0, 1, 1, 0, 1, 0, 1,
	2, 3, 4, 1, 1, 1, 1, 1, 1, 1,
	3, 1, 2, 3, 5, 0, 1, 2, 1, 1,
	0, 2, 1, 3, 1, 1, 1, 3, 3, 3,
	3, 7, 0, 3, 1, 3, 1, 3, 4, 4,
	4, 3, 2, 4, 0, 1, 0, 2, 0, 1,
	0, 1, 2, 1, 1, 1, 2, 2, 1, 2,
	3, 2, 3, 2, 2, 2, 1, 1, 3, 3,
	0, 5, 4, 5, 5, 0, 2, 1, 3, 3,
	3, 2, 3, 1, 2, 0, 3, 1, 1, 3,
	3, 4, 4, 5, 3, 4, 5, 6, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 0, 2, 1, 1, 1, 3, 1, 3,
	1, 1, 1, 1, 1, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 3,
	1, 1, 1, 1, 4, 5, 5, 6, 4, 4,
	6, 6, 6, 8, 8, 8, 8, 9, 8, 5,
	4, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 8, 8, 0, 2, 3,
	4, 4, 4, 4, 4, 4, 4, 0, 3, 4,
	7, 3, 1, 1, 2, 3, 3, 1, 2, 2,
	1, 2, 1, 2, 2, 1, 2, 0, 1, 0,
	2, 1, 2, 4, 0, 2, 1, 3, 5, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	0, 3, 0, 2, 0, 3, 1, 3, 2, 0,
	1, 1, 0, 2, 4, 4, 0, 2, 2, 1,
	1, 3, 3, 3, 3, 3, 3, 3, 0, 3,
	3, 3, 0, 3, 1, 1, 0, 4, 0, 1,
	1, 0, 3, 1, 3, 2, 1, 0, 2, 4,
	0, 9, 3, 5, 0, 3, 3, 0, 1, 0,
	2, 2, 0, 2, 2, 2, 0, 3, 0, 3,
	0, 3, 0, 4, 0, 3, 0, 4, 0, 1,
	2, 1, 5, 4, 4, 1, 3, 3, 5, 0,
	5, 1, 3, 1, 2, 3, 1, 1, 3, 3,
	1, 3, 3, 3, 3, 3, 2, 1, 2, 1,
	1, 1, 1, 1, 1, 0, 2, 0, 3, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 1, 1, 1, 1, 0, 1, 1, 1,
	0, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 0, 1, 1,
}

var yyChk = [...]int{
	-1000, -256, -1, -3, -8, -9, -10, -11, -12, -13,
	-14, -15, -16, -17, -18, -19, -32, -33, -34, -36,
	-37, -38, -39, -40, -6, -35, -20, -21, -41, -42,
	-43, -4, -258, 6, 7, 8, -50, 10, 11, 31,
	-23, -24, 146, -25, 147, -26, 149, 148, 182, 150,
	175, 70, 208, 209, 211, 212, 213, 214, -51, 180,
	181, 152, 35, 41, 32, 33, 80, 9, 306, 177,
	176, 26, -257, 410, -56, 5, -118, 16, -3, -44,
	-261, -44, -44, -44, -44, -44, -44, -217, -219, 80,
	119, 80, -57, 154, -136, -247, 100, 160, 163, 164,
	297, 153, -30, -29, -28, -27, -31, 30, -247, 154,
	156, 268, -245, -242, 83, 84, 85, 154, 154, 155,
	156, -247, 154, -84, -176, -242, -170, 316, 168, 348,
	349, 76, 258, 208, 222, 216, 243, 235, 317, 350,
	169, 198, 233, 236, 284, 166, 351, 280, 263, 271,
	94, 211, 293, 352, 75, 47, 40, 178, 231, 227,
	199, 353, 325, 192, 225, 46, 28, 45, 354, 273,
	248, 44, 355, 79, 321, 275, 226, 272, 152, 356,
	171, 404, 164, 282, 357, 249, 253, 358, 285, 48,
	359, 360, 361, 74, 220, 221, 362, 206, 167, 287,
	247, 165, 34, 276, 318, 54, 186, 288, 42, 251,
	41, 408, 363, 246, 242, 49, 364, 365, 366, 367,
	245, 219, 241, 204, 58, 255, 254, 256, 193, 283,
	238, 368, 369, 370, 172, 77, 371, 228, 19, 372,
	373, 200, 374, 52, 375, 376, 291, 181, 377, 50,
	37, 184, 378, 379, 380, 381, 382, 281, 383, 274,
	250, 252, 161, 188, 270, 320, 384, 224, 385, 173,
	185, 180, 292, 174, 386, 387, 388, 389, 390, 391,
	392, 212, 39, 393, 394, 395, 396, 207, 203, 286,
	295, 57, 78, 260, 397, 218, 163, 201, 398, 209,
	51, 195, 266, 205, 43, 239, 187, 399, 400, 229,
	230, 244, 217, 240, 210, 405, 189, 182, 401, 294,
	202, 261, 322, 194, 237, 234, 196, 402, 156, 190,
	191, 403, 406, 277, 267, 278, 279, 268, 197, 232,
	262, 154, 236, 284, 263, 264, 265, 276, 277, 282,
	281, 188, -255, 285, 154, -155, 137, 146, 273, -159,
	274, 267, 268, 197, -251, -242, 286, 408, 269, 275,
	279, 278, -176, 210, -181, 215, -171, -242, -170, 213,
	-84, -49, 404, 150, -183, -183, -183, -104, -69, -90,
	103, -95, 30, 24, -94, -91, -111, -108, -109, 137,
	138, 140, 139, 141, 126, 127, 134, 104, 142, -99,
	-97, -98, -100, 87, 86, 95, 88, 89, 90, 91,
	96, 97, 98, -171, -176, -106, -258, 64, 65, 307,
	308, 309, 310, 315, 311, 106, 53, 296, 305, 304,
	303, 300, 301, 298, 299, 313, 314, 159, 297, 153,
	132, 306, -242, -170, 40, 266, 266, -5, -4, -258,
	6, 21, 22, -122, 18, 17, -259, 82, -52, -62,
	59, 60, -63, 22, 36, 63, 61, -45, -61, 128,
	-69, -176, -61, -154, 158, -154, -154, -145, -186, 210,
	-148, 286, 285, -172, -146, -171, -169, 284, 236, 283,
	151, 323, 102, 23, 25, 105, 137, 17, 106, 136,
	307, 146, 68, 324, 298, 299, 296, 302, 309, 310,
	297, 264, 30, 11, 326, 26, 176, 22, 36, 130,
	148, 109, 110, 179, 24, 177, 98, 329, 20, 71,
	12, 14, 330, 331, 15, 159, 158, 121, 155, 66,
	9, 142, 27, 118, 62, 332, 29, 333, 334, 335,
	336, 64, 119, 18, 300, 301, 32, 409, 337, 315,
	183, 132, 69, 55, 103, 338, 339, 96, 340, 99,
	72, 100, 16, 67, 38, 341, 342, 343, 289, 344,
	120, 149, 306, 65, 345, 153, 265, 6, 312, 31,
	175, 63, 346, 154, 108, 313, 314, 157, 97, 5,
	160, 33, 10, 70, 73, 303, 304, 305, 53, 319,
	107, 13, 347, 290, 101, -218, 119, -208, -211, -171,
	170, -235, 166, -84, -225, -224, -171, -64, 76, -163,
	159, 155, -163, 306, -27, -28, 236, 136, -84, -84,
	146, 148, 151, 72, -29, 194, -22, -84, -162, 159,
	-242, -162, -162, -84, 143, -84, 31, -160, 119, 13,
	-160, -160, -160, -160, -160, 195, 280, 195, 280, 195,
	196, 195, 196, 195, -158, -157, 271, 272, 266, 270,
	-242, 297, 282, -242, 188, 154, 189, 156, -213, 155,
	34, 167, 196, 266, 191, -160, -184, -258, -172, 157,
	-171, -46, -171, 87, -7, -3, -11, -10, -12, 111,
	81, 102, 100, 101, 118, -69, -92, 121, 103, 119,
	120, 105, 123, 122, 133, 126, 127, 128, 129, 130,
	131, 132, 124, 125, 136, 111, 112, 113, 114, 115,
	116, 117, -153, -258, -109, -258, 144, 145, -95, -95,
	-95, -95, -95, -95, -95, -95, -95, -95, -258, 143,
	-2, -104, -4, -258, -258, -258, -258, -258, -258, -258,
	-258, -114, -69, -258, -262, -101, -258, -262, -101, -262,
	-101, -262, -258, -262, -101, -262, -101, -262, -262, -101,
	-258, -258, -258, -258, -258, -258, -258, -183, -252, -253,
	-87, -84, -118, -3, -44, -137, 20, 32, -69, -119,
	-120, -69, -118, 55, -59, -61, -63, 59, 60, 93,
	12, -174, -173, 23, -171, 87, 143, 12, -85, 27,
	-84, -71, -72, -73, -74, -87, -110, -258, 12, -78,
	-79, -84, -86, -176, 81, 210, -148, -186, -150, -149,
	287, 289, 111, -175, -171, 87, 30, 31, 82, 81,
	-84, -188, -191, -193, -192, -194, -189, -190, 233, 234,
	137, 237, 239, 240, 241, 242, 243, 244, 245, 246,
	247, 248, 31, 178, 229, 230, 231, 232, 249, 250,
	251, 252, 253, 254, 255, 256, 216, 235, 317, 217,
	218, 219, 220, 221, 222, 224, 225, 226, 227, 228,
	-242, 80, 82, 81, -195, 80, -67, 199, 111, -84,
	103, -242, -242, 31, -216, 111, -166, 151, 148, 149,
	-238, 147, 258, 236, 94, 30, 16, 307, 184, 322,
	-242, 185, -184, 190, 190, 154, 154, 203, -84, 40,
	81, 157, -78, 24, 72, -84, -242, -177, -176, -169,
	-160, 87, -69, -160, -84, -160, -84, -160, -160, -160,
	-160, -156, 12, 121, -214, 12, 121, -156, -184, -184,
	-84, -184, -184, -84, -184, -184, -214, -161, 119, 72,
	-182, 213, 247, 405, 406, 407, -69, -69, -69, -69,
	-102, 96, 103, 97, 98, -95, -103, -106, -109, 92,
	121, 119, 120, 105, -95, -95, -95, -95, -95, -95,
	-95, -95, -95, -95, -95, -95, -95, -95, -95, -185,
	-242, 87, -242, -94, -94, -171, -60, 22, 36, -59,
	-172, -177, -169, -56, -259, -259, -118, -59, -59, -69,
	-69, -111, 87, -59, -111, 87, -59, -59, -55, 22,
	36, -112, -113, 107, -111, -171, -176, -259, -95, -171,
	-171, -59, -60, -60, -59, -59, 81, -254, 289, 290,
	409, -179, 184, -178, 23, -176, 87, -122, -259, -123,
	27, 10, 121, 81, 19, 81, -121, 25, 26, -122,
	-96, -171, 88, 91, -70, 81, 12, -63, -84, -173,
	128, -177, -84, -141, 184, -84, 31, 81, -80, -82,
	-81, -83, 62, 66, 68, 63, 64, 65, 69, -180,
	23, -71, -3, -258, -84, -78, -260, 81, 12, 73,
	-260, 81, 143, -148, -150, 81, 288, 290, 291, 72,
	99, -69, -200, 136, -220, -221, -222, -172, 87, 88,
	-208, -209, -210, -223, 170, -234, 161, 163, 164, 160,
	-212, 171, -235, 155, 29, 82, -164, 96, 103, -204,
	261, -195, -195, -195, -195, -195, -199, 236, -199, -199,
	-199, 80, 80, -195, -195, -195, -195, -201, 80, -201,
	-201, -202, 80, -202, -235, 166, -69, -231, -230, -226,
	-229, 165, 94, 319, 73, -224, -121, 88, -66, 201,
	111, 202, 204, 205, 24, -233, -229, -216, -242, 87,
	-183, -246, 166, 162, 170, 171, 164, 83, 84, 85,
	155, 29, 161, 163, 184, 160, -246, -167, -168, 157,
	23, 155, 29, 184, -84, -84, -84, -84, -84, 151,
	148, 192, -84, -84, -84, -184, -160, -176, -176, -84,
	-160, -84, 87, -84, -171, 96, 97, 98, -103, -95,
	-95, -95, -58, 179, 102, -259, -259, -59, -59, -258,
	143, -5, -122, -259, -259, 81, 73, 23, 12, 12,
	-259, 12, 12, -259, -259, -59, -115, -113, 109, -69,
	-259, 143, -259, 81, 81, -259, -259, -259, -259, -259,
	-253, 408, 290, -88, 70, 158, 71, -258, -178, -137,
	38, 46, 57, -69, -69, -120, -137, -152, 20, 12,
	53, 53, -89, 13, -61, -71, -63, 143, -89, -93,
	31, 53, -3, -258, -258, -144, -147, -111, -72, -73,
	-73, -72, -73, 62, 62, 62, 67, 62, 67, 62,
	-81, -176, -259, -259, -3, -141, 73, -71, -84, -71,
	-86, -176, 128, -149, -151, 292, 289, 295, -242, 87,
	81, -222, 111, -211, 80, -242, 29, -212, -212, -212,
	-215, -242, -215, 29, -197, 30, 96, -205, 262, -199,
	-199, -200, 31, -200, -200, -200, -207, 87, -207, 88,
	88, 82, -232, -227, -228, 32, 76, -226, -216, 87,
	37, -171, 82, 156, 207, -68, 302, 87, 83, 72,
	-242, 87, -183, -183, -84, -183, -171, -244, 73, 190,
	258, 190, 193, 157, -184, -156, -156, -58, 102, -95,
	-95, -259, -259, -60, -172, -118, -137, -187, 137, 233,
	178, 231, 227, 247, 238, 260, 229, 261, -185, -187,
	-95, -95, -95, -95, 316, -118, 110, -69, 108, -172,
	-95, -95, 155, 155, 155, -142, -171, 39, 87, 87,
	58, -84, -116, 14, -69, 128, -122, -143, 72, -144,
	-105, -107, -106, -258, -138, -259, -171, -142, -89, 81,
	111, -76, -75, 72, 73, -77, 72, -75, 62, 62,
	-259, -89, -71, -89, -89, 143, 289, 293, 294, -221,
	-222, -225, -234, 171, -215, -215, -215, 80, -198, 72,
	-95, -200, -200, -242, 137, 82, 81, 82, 81, 82,
	81, -165, 354, 103, -228, -227, -216, -216, 88, -242,
	-84, -65, 199, 206, 80, 84, -84, 27, -241, 319,
	-243, -242, -171, -171, -171, -84, -160, -160, -95, -259,
	-122, -259, -195, -195, -195, -202, -195, 221, -195, 221,
	-259, -259, 20, 20, 20, 20, -258, -53, 312, -69,
	81, 81, -258, -258, -258, -259, 81, 87, -199, -117,
	15, 17, 28, -143, 81, -259, -259, 81, 53, 143,
	-259, -118, -147, -69, -69, 80, -69, -118, -89, 82,
	-139, -171, -203, 258, 10, -199, 87, -199, 88, 88,
	354, 30, 77, 78, 79, 30, 74, 75, -140, 80,
	82, -258, -240, -239, -172, 80, 73, -137, -199, -242,
	-95, -95, -95, -95, -95, -122, 87, -95, -95, -139,
	-259, -139, -139, -179, -171, -199, -125, -130, -158, -69,
	-104, 29, -107, 53, -3, -171, -105, -171, -122, -139,
	-122, -231, 82, 81, -206, 161, 29, 160, -98, -200,
	-200, 82, 82, 23, -139, -236, -237, 184, 81, 111,
	-139, -84, -259, -259, -259, -259, -54, 121, 319, -259,
	-259, -259, -259, -259, -259, -88, -128, 404, -131, 42,
	-132, 43, 10, -105, 143, 82, 173, -171, -196, 94,
	29, 29, -3, 82, -259, 81, -171, -239, -222, 82,
	-259, 317, 69, 320, -125, 47, 239, -133, 51, -134,
	-129, 52, 17, -144, -171, -84, 87, -47, 319, -237,
	53, -244, 58, 318, 321, -126, 49, -124, 48, -124,
	-132, 17, -135, 44, 45, 87, 80, -48, 198, 408,
	186, -241, 58, -127, 50, 72, 99, 87, 17, 17,
	-139, 166, 187, 319, 72, 99, 87, 87, 82, 200,
	-258, 320, -249, -250, 72, -95, 183, 321, -250, 72,
	11, 10, -259, -259, -248, 174, 169, 172, 31, -248,
	168, 30, 96,
}

var yyDef = [...]int{
	32, -2, 2, 4, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
	31, 674, 0, 413, 413, 413, 413, 413, 413, 413,
	0, 0, -2, -2, 0, 36, 0, 0, 0, 0,
	-2, 371, 372, 0, 374, -2, 0, 0, 383, 1162,
	1162, 1162, 0, 0, 0, 0, 1160, 53, 54, 389,
	390, 391, 1, 3, 0, 417, 682, 0, 0, -2,
	415, 0, 0, 789, 789, 789, 0, 82, 83, 0,
	0, 0, 698, 787, 0, 787, 0, 807, 808, 809,
	101, 102, 86, -2, 106, 107, 0, 111, 100, 0,
	0, 0, 110, 37, 33, 34, 35, 0, 785, 0,
	785, 785, 0, 310, 497, 817, 818, 946, 947, 948,
	949, 950, 951, 952, 953, 954, 955, 956, 957, 958,
	959, 960, 961, 962, 963, 964, 965, 966, 967, 968,
	969, 970, 971, 972, 973, 974, 975, 976, 977, 978,
	979, 980, 981, 982, 983, 984, 985, 986, 987, 988,
	989, 990, 991, 992, 993, 994, 995, 996, 997, 998,
	999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008,
	1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018,
	1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028,
	1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038,
	1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048,
	1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058,
	1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068,
	1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078,
	1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088,
	1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098,
	1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108,
	1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118,
	1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128,
	1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138,
	1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148,
	1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158,
	1159, 0, 0, 362, 362, 362, 362, 362, 362, 0,
	320, 0, 0, 0, 0, 0, 0, 0, 336, 0,
	339, 0, 0, 346, 362, 1163, 368, 369, 356, 354,
	351, 352, 370, 373, 0, 378, 381, 813, 814, 0,
	396, 0, 1000, 388, 401, 402, 412, 38, 548, 507,
	0, 513, 515, 0, 550, 551, 552, 553, 554, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 580,
	581, 582, 583, 659, 660, 661, 662, 663, 664, 665,
	666, 517, 518, 656, 0, 766, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 647, 0, 617, 617, 617,
	617, 617, 617, 617, 617, 0, 0, 0, 0, 0,
	0, 0, -2, -2, 1162, 0, 411, 674, 49, 0,
	413, 418, 419, 717, 0, 0, 674, 1161, 0, 0,
	-2, -2, 429, 435, 436, 437, 438, 414, 0, 441,
	445, 0, 0, 0, 790, 0, 0, 68, 0, 1133,
	770, -2, -2, 0, 0, 815, 816, -2, 962, -2,
	821, 822, 823, 824, 825, 826, 827, 828, 829, 830,
	831, 832, 833, 834, 835, 836, 837, 838, 839, 840,
	841, 842, 843, 844, 845, 846, 847, 848, 849, 850,
	851, 852, 853, 854, 855, 856, 857, 858, 859, 860,
	861, 862, 863, 864, 865, 866, 867, 868, 869, 870,
	871, 872, 873, 874, 875, 876, 877, 878, 879, 880,
	881, 882, 883, 884, 885, 886, 887, 888, 889, 890,
	891, 892, 893, 894, 895, 896, 897, 898, 899, 900,
	901, 902, 903, 904, 905, 906, 907, 908, 909, 910,
	911, 912, 913, 914, 915, 916, 917, 918, 919, 920,
	921, 922, 923, 924, 925, 926, 927, 928, 929, 930,
	931, 932, 933, 934, 935, 936, 937, 938, 939, 940,
	941, 942, 943, 944, 945, 0, 0, 118, 119, 0,
	0, 240, 964, 116, 0, 234, 175, 711, 0, 0,
	0, 0, 0, 88, 108, 109, 0, 217, 0, 1163,
	0, 0, 0, 0, -2, 0, 302, 0, 0, 0,
	0, 0, 0, 309, 0, 311, 362, 313, 0, 0,
	314, 315, 316, 317, 318, 362, 0, 362, 0, 362,
	362, 362, 362, 359, 0, 359, 357, 358, 349, 350,
	1163, 1163, 0, 1163, 1163, 0, 1163, 1163, 0, 225,
	226, 227, 365, 343, 344, 347, 348, 1164, 1165, 379,
	382, 399, 397, 398, 400, 392, 393, 394, 395, 0,
	0, 0, 0, 0, 0, 511, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 535, 536, 537, 538, 539,
	540, 541, 514, 0, 528, 0, 0, 0, 570, 571,
	572, 573, 574, 575, 576, 577, 578, 0, 426, 0,
	0, 0, 674, 0, 0, 0, 0, 0, 0, 0,
	423, 0, 648, 0, 601, 609, 0, 602, 610, 603,
	611, 604, 0, 605, 612, 606, 613, 607, 608, 614,
	0, 0, 0, 426, 426, 0, 0, 39, 403, 404,
	0, 480, 682, 0, 428, 720, 0, 0, 683, 675,
	676, 679, 682, 0, 450, 439, 430, 433, 434, 416,
	0, 442, 446, 0, 448, 449, 0, 0, 66, 0,
	496, 0, 452, 454, 455, 456, 478, 0, 0, 0,
	0, 62, 64, 497, 0, 1133, 776, 0, 70, 71,
	0, 0, 0, 198, 780, 781, 782, 778, 257, 0,
	0, 186, 182, 126, 127, 128, 175, 130, 175, 175,
	175, 175, 195, 195, 195, 195, 158, 159, 160, 161,
	162, 0, 0, 145, 175, 175, 175, 175, 165, 166,
	167, 168, 169, 170, 171, 172, 131, 132, 133, 134,
	135, 136, 137, 138, 139, 177, 177, 177, 179, 179,
	0, 0, 209, 0, 679, 0, 702, 0, 0, 97,
	0, 810, 99, 217, 0, 218, 1162, 0, 0, 801,
	272, 791, 792, 793, 794, 795, 796, 797, 798, 799,
	800, 0, 271, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 305, 786, 0, 1163, 308, 498, 819, 820,
	312, 363, 364, 319, 337, 321, 340, 322, 324, 323,
	325, 362, 0, 0, 0, 228, 229, 362, 328, 329,
	330, 331, 332, 333, 334, 335, 0, 342, 0, 0,
	0, 380, 384, 385, 386, 387, 549, 508, 509, 510,
	512, 529, 0, 531, 533, 519, 520, 544, 545, 546,
	0, 0, 0, 0, 542, 524, 0, 555, 556, 557,
	558, 559, 560, 561, 562, 563, 564, 565, 566, 569,
	632, 633, 0, 567, 568, 579, 0, 0, 0, 427,
	657, 0, -2, 0, 547, 765, 682, 0, 0, 0,
	0, 552, 659, 0, 552, 659, 0, 0, 0, 424,
	425, 654, 651, 0, 0, 656, 0, 618, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 406, 407, 409,
	0, 500, 1070, 481, 0, 483, 484, 717, 50, 40,
	0, 718, 0, 0, 0, 0, 678, 680, 681, 717,
	0, 667, 0, 0, 505, 0, 0, 431, 46, 447,
	443, 0, 505, 0, 0, 495, 0, 0, 0, 0,
	0, 0, 485, 0, 0, 488, 0, 0, 0, 0,
	479, 0, 0, 0, -2, 0, 0, 0, 60, 61,
	0, 0, 0, 771, 69, 0, 0, 74, 75, 772,
	773, 774, 775, 0, 103, 258, 260, 263, 264, 265,
	120, 122, 123, 0, 0, 238, 1081, 1115, 1001, 232,
	232, 999, 245, 230, 231, 117, 189, 187, 0, 184,
	183, 129, 195, 195, 152, 153, 198, 0, 198, 198,
	198, 0, 0, 146, 147, 148, 149, 140, 0, 141,
	142, 143, 0, 144, 239, 0, 0, 686, 210, 211,
	213, 217, 0, 0, 0, 235, 236, 0, 0, 0,
	0, 699, 700, 701, 788, 0, 811, 0, 114, 115,
	266, 1162, 283, 284, 285, 286, 287, 288, 289, 290,
	291, 292, 293, 294, 295, 296, 1162, 0, 1162, 802,
	803, 804, 805, 0, 89, 276, 278, 277, 281, 0,
	0, 0, 0, 303, 1163, 307, 326, 360, 361, 359,
	341, 359, 366, 345, 376, 530, 532, 534, 521, 542,
	525, 0, 522, 0, 0, 516, 584, 0, 0, 426,
	0, 674, 717, 588, 589, 0, 0, 0, 0, 0,
	625, 0, 0, 626, 0, 674, 0, 652, 0, 0,
	600, 0, 619, 0, 0, 620, 621, 622, 623, 624,
	405, 408, 410, 460, 0, 0, 0, 0, 482, 42,
	0, 0, 0, 684, 685, 677, 41, 0, 783, 784,
	668, 669, 670, 0, 440, 451, 432, 0, 682, 759,
	0, 0, 751, 0, 0, 505, 767, 0, 453, 474,
	476, 0, 471, 486, 487, 489, 0, 491, 0, 493,
	494, 457, 458, 459, 0, 505, 0, 505, 63, 505,
	65, 0, 499, 72, 73, 0, 0, 79, 199, 200,
	0, 261, 0, 121, 0, 0, 219, 232, 232, 232,
	223, 233, 224, 0, 191, 0, 188, 125, 185, 198,
	198, 154, 0, 155, 156, 157, 0, 173, 0, 0,
	0, 254, 84, 690, 689, 217, 217, 212, 0, 215,
	0, 812, 176, 0, 0, 712, 713, 0, 716, 0,
	112, 113, 267, 268, 269, 270, 0, 92, 0, 0,
	0, 0, 274, 0, 306, 362, 362, 523, 0, 543,
	526, 585, 586, 0, 658, 682, 44, 0, 175, 175,
	637, 175, 179, 640, 175, 642, 175, 645, 0, 0,
	0, 0, 0, 0, 0, 649, 599, 655, 0, 657,
	0, 0, 0, 0, 0, 0, 466, 0, 195, 722,
	719, 43, 672, 0, 506, 444, 47, 51, 0, 759,
	750, 761, 763, 0, 0, 0, 755, 0, 674, 0,
	0, 468, 475, 0, 0, 469, 0, 470, 490, 492,
	-2, 674, 505, 58, 59, 0, 76, 77, 78, 259,
	262, 0, 237, 0, 220, 221, 222, 0, 193, 0,
	190, 150, 151, 196, 197, 195, 0, 195, 0, 180,
	0, 246, 255, 0, 687, 688, 0, 0, 214, 216,
	462, 703, 704, 705, 0, 715, 98, 0, 275, 0,
	90, 91, 0, 0, 280, 304, 327, 338, 527, 587,
	717, 590, 634, 195, 638, 639, 641, 643, 644, 646,
	592, 591, 0, 0, 0, 0, 0, 682, 0, 653,
	0, 0, 0, 0, 0, 480, 0, 195, 742, 48,
	0, 0, 0, 52, 0, 764, 0, 0, 0, 0,
	67, 682, 768, 769, 472, 0, 477, 682, 57, 209,
	0, 464, 201, 194, 0, 198, 174, 198, 0, 0,
	256, 691, 692, 693, 694, 695, 696, 697, 0, 0,
	714, 0, 93, 94, 0, 0, 0, 45, 635, 636,
	0, 0, 0, 0, 627, 0, 650, 0, 0, 0,
	502, 0, 0, 500, 467, 724, 723, 736, 740, 673,
	671, 0, 762, 0, 754, 757, 753, 756, 55, 0,
	56, 208, 0, 0, 206, 0, 203, 205, 192, 163,
	164, 178, 181, 0, 0, 0, 298, 0, 0, 0,
	0, 282, 593, 595, 594, 596, 0, 0, 0, 598,
	615, 616, 501, 503, 504, 461, 742, 0, 735, 738,
	-2, 0, 0, 752, 0, 473, 0, 465, 124, 0,
	202, 204, 706, 463, 297, 0, 0, 95, 96, 89,
	597, 0, 0, 0, 729, 727, 727, 740, 0, 744,
	0, 749, 0, 760, 758, 0, 207, 85, 708, 299,
	0, 92, 628, 0, 631, 732, 0, 725, 728, 726,
	737, 0, 743, 0, 0, 741, 0, 0, 709, 710,
	0, 279, 629, 721, 0, 730, 731, 739, 0, 0,
	0, 0, 0, 0, 733, 734, 745, 747, 241, 707,
	0, 0, 242, 243, 0, 0, 0, 630, 244, 0,
	0, 0, 300, 301, 247, 249, 250, 0, 0, 248,
	251, 252, 253,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 104, 3, 3, 3, 131, 123, 3,
	80, 82, 128, 126, 81, 127, 143, 129, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 410,
	112, 111, 113, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 133, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 122, 3, 134,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 83, 84,
	85, 86, 87, 88, 89, 90, 91, 92, 93, 94,
	95, 96, 97, 98, 99, 100, 101, 102, 103, 105,
	106, 107, 108, 109, 110, 114, 115, 116, 117, 118,
	119, 120, 121, 124, 125, 130, 132, 135, 136, 137,
	138, 139, 140, 141, 142, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 57726, 401, 57727, 402, 57728, 403, 57729, 404,
	57730, 405, 57731, 406, 57732, 407, 57733, 408, 57734, 409,
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:389
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:394
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:395
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:399
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 32:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:430
		{
			setParseTree(yylex, nil)
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:436
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), NoAt)
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:440
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), SingleAt)
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:444
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), DoubleAt)
		}
	case 36:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:449
		{
			yyVAL.colIdent = NewColIdentWithAt("", NoAt)
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:453
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 38:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:459
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 39:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:465
		{
			yyVAL.statement = &Load{}
		}
	case 40:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:471
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].lock
			sel.Into = yyDollar[5].selectInto
			yyVAL.selStmt = sel
		}
	case 41:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:480
		{
			yyVAL.selStmt = &Union{FirstStatement: &ParenSelect{Select: yyDollar[2].selStmt}, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].lock}
		}
	case 42:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:484
		{
			yyVAL.selStmt = Unionize(yyDollar[1].selStmt, yyDollar[3].selStmt, yyDollar[2].boolean, yyDollar[4].orderBy, yyDollar[5].limit, yyDollar[6].lock)
		}
	case 43:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:488
		{
			yyVAL.selStmt = NewSelect(Comments(yyDollar[2].bytes2), SelectExprs{Nextval{Expr: yyDollar[5].expr}}, []string{yyDollar[3].str} /*options*/, TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}, nil /*where*/, nil /*groupBy*/, nil /*having*/)
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:511
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].lock
			yyVAL.selStmt = sel
		}
	case 45:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:519
		{
			yyVAL.selStmt = Unionize(yyDollar[1].selStmt, yyDollar[3].selStmt, yyDollar[2].boolean, yyDollar[4].orderBy, yyDollar[5].limit, yyDollar[6].lock)
		}
	case 46:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:525
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 47:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:531
		{
			yyVAL.statement = &VStream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName, Where: NewWhere(WhereClause, yyDollar[6].expr), Limit: yyDollar[7].limit}
		}
	case 48:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:539
		{
			yyVAL.selStmt = NewSelect(Comments(yyDollar[2].bytes2), yyDollar[4].selectExprs /*SelectExprs*/, yyDollar[3].strs /*options*/, yyDollar[5].tableExprs /*from*/, NewWhere(WhereClause, yyDollar[6].expr), GroupBy(yyDollar[7].exprs), NewWhere(HavingClause, yyDollar[8].expr))
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:545
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:549
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 51:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:556
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].insertAction
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].ignore
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 52:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:568
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].insertAction, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].ignore, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:580
		{
			yyVAL.insertAction = InsertAct
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:584
		{
			yyVAL.insertAction = ReplaceAct
		}
	case 55:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:590
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].ignore, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].updateExprs, Where: NewWhere(WhereClause, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 56:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:596
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].ignore, TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[5].tableName}}, Partitions: yyDollar[6].partitions, Where: NewWhere(WhereClause, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 57:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:600
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].ignore, Targets: yyDollar[5].tableNames, TableExprs: yyDollar[7].tableExprs, Where: NewWhere(WhereClause, yyDollar[8].expr)}
		}
	case 58:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:604
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].ignore, Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereClause, yyDollar[7].expr)}
		}
	case 59:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:608
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].ignore, Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereClause, yyDollar[7].expr)}
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:613
		{
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:614
		{
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:618
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 63:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:622
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:628
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 65:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:632
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 66:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:637
		{
			yyVAL.partitions = nil
		}
	case 67:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:641
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:647
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 69:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:653
		{
			yyVAL.statement = &SetTransaction{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].scope, Characteristics: yyDollar[5].characteristics}
		}
	case 70:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:657
		{
			yyVAL.statement = &SetTransaction{Comments: Comments(yyDollar[2].bytes2), Characteristics: yyDollar[4].characteristics, Scope: ImplicitScope}
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:663
		{
			yyVAL.characteristics = []Characteristic{yyDollar[1].characteristic}
		}
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:667
		{
			yyVAL.characteristics = append(yyVAL.characteristics, yyDollar[3].characteristic)
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:673
		{
			yyVAL.characteristic = yyDollar[3].isolationLevel
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:677
		{
			yyVAL.characteristic = ReadWrite
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:681
		{
			yyVAL.characteristic = ReadOnly
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:687
		{
			yyVAL.isolationLevel = RepeatableRead
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:691
		{
			yyVAL.isolationLevel = ReadCommitted
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:695
		{
			yyVAL.isolationLevel = ReadUncommitted
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:699
		{
			yyVAL.isolationLevel = Serializable
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:705
		{
			yyVAL.scope = SessionScope
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:709
		{
			yyVAL.scope = GlobalScope
		}
	case 82:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:715
		{
			yyDollar[1].createTable.TableSpec = yyDollar[2].TableSpec
			yyDollar[1].createTable.FullyParsed = true
			yyVAL.statement = yyDollar[1].createTable
		}
	case 83:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:721
		{
			// Create table [name] like [name]
			yyDollar[1].createTable.OptLike = yyDollar[2].optLike
			yyDollar[1].createTable.FullyParsed = true
			yyVAL.statement = yyDollar[1].createTable
		}
	case 84:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:728
		{
			yyDollar[1].createIndex.Columns = yyDollar[3].indexColumns
			yyDollar[1].createIndex.Options = append(yyDollar[1].createIndex.Options, yyDollar[5].indexOptions...)
			yyDollar[1].createIndex.Options = append(yyDollar[1].createIndex.Options, yyDollar[6].indexOptions...)
			yyDollar[1].createIndex.FullyParsed = true
			yyVAL.statement = yyDollar[1].createIndex
		}
	case 85:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:736
		{
			yyVAL.statement = &CreateView{ViewName: yyDollar[7].tableName.ToViewName(), IsReplace: yyDollar[2].boolean, Algorithm: yyDollar[3].str, Definer: yyDollar[4].str, Security: yyDollar[5].str, Columns: yyDollar[8].columns, Select: yyDollar[10].selStmt, CheckOption: yyDollar[11].str}
		}
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:740
		{
			yyDollar[1].createDatabase.FullyParsed = true
			yyDollar[1].createDatabase.CreateOptions = yyDollar[2].collateAndCharsets
			yyVAL.statement = yyDollar[1].createDatabase
		}
	case 87:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:747
		{
			yyVAL.boolean = false
		}
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:751
		{
			yyVAL.boolean = true
		}
	case 89:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:756
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 90:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:760
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:766
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 92:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:771
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:776
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:782
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:787
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:793
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 97:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:799
		{
			yyVAL.createTable = &CreateTable{Table: yyDollar[4].tableName, IfNotExists: yyDollar[3].boolean}
			setDDL(yylex, yyVAL.createTable)
		}
	case 98:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:806
		{
			yyVAL.createIndex = &CreateIndex{Constraint: yyDollar[2].str, Name: yyDollar[4].colIdent, Options: yyDollar[5].indexOptions, Table: yyDollar[7].tableName}
			setDDL(yylex, yyVAL.createIndex)
		}
	case 99:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:813
		{
			yyVAL.createDatabase = &CreateDatabase{DBName: string(yyDollar[4].colIdent.String()), IfNotExists: yyDollar[3].boolean}
			setDDL(yylex, yyVAL.createDatabase)
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:820
		{
			yyVAL.alterDatabase = &AlterDatabase{}
			setDDL(yylex, yyVAL.alterDatabase)
		}
	case 103:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:831
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 104:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:837
		{
			yyVAL.collateAndCharsets = nil
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:841
		{
			yyVAL.collateAndCharsets = yyDollar[1].collateAndCharsets
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:847
		{
			yyVAL.collateAndCharsets = []CollateAndCharset{yyDollar[1].collateAndCharset}
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:851
		{
			yyVAL.collateAndCharsets = []CollateAndCharset{yyDollar[1].collateAndCharset}
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:855
		{
			yyVAL.collateAndCharsets = append(yyDollar[1].collateAndCharsets, yyDollar[2].collateAndCharset)
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:859
		{
			yyVAL.collateAndCharsets = append(yyDollar[1].collateAndCharsets, yyDollar[2].collateAndCharset)
		}
	case 110:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:864
		{
			yyVAL.boolean = false
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:868
		{
			yyVAL.boolean = true
		}
	case 112:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:874
		{
			yyVAL.collateAndCharset = CollateAndCharset{Type: CharacterSetType, Value: (yyDollar[5].colIdent.String()), IsDefault: yyDollar[1].boolean}
		}
	case 113:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:878
		{
			yyVAL.collateAndCharset = CollateAndCharset{Type: CharacterSetType, Value: ("'" + string(yyDollar[5].bytes) + "'"), IsDefault: yyDollar[1].boolean}
		}
	case 114:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:884
		{
			yyVAL.collateAndCharset = CollateAndCharset{Type: CollateType, Value: (yyDollar[4].colIdent.String()), IsDefault: yyDollar[1].boolean}
		}
	case 115:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:888
		{
			yyVAL.collateAndCharset = CollateAndCharset{Type: CollateType, Value: ("'" + string(yyDollar[4].bytes) + "'"), IsDefault: yyDollar[1].boolean}
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:895
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[2].tableName}
		}
	case 117:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:899
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[3].tableName}
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:905
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:910
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddConstraint(yyDollar[1].constraintDefinition)
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:915
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 121:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:919
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
			yyVAL.TableSpec.AddConstraint(yyDollar[4].constraintDefinition)
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:924
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:928
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 124:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:934
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolean
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolean
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].literal
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:945
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolean
			yyVAL.columnType.Zerofill = yyDollar[3].boolean
		}
	case 129:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:956
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].literal
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:961
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:967
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:971
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:975
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:979
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:983
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:987
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:991
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:995
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:999
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1005
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 141:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1011
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 142:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1017
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 143:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1023
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 144:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1029
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1037
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 146:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1041
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1045
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 148:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1049
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 149:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1053
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 150:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1059
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 151:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1063
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1067
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 153:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1071
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1075
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1079
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1083
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1087
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1091
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1095
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1099
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1103
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1107
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 163:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1111
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 164:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1116
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1122
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1126
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1130
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1134
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1138
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1142
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1146
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1150
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1156
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 174:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1161
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 175:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1166
		{
			yyVAL.literal = nil
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1170
		{
			yyVAL.literal = NewIntLiteral(yyDollar[2].bytes)
		}
	case 177:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1175
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 178:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1179
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntLiteral(yyDollar[2].bytes),
				Scale:  NewIntLiteral(yyDollar[4].bytes),
			}
		}
	case 179:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1187
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 180:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1191
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntLiteral(yyDollar[2].bytes),
			}
		}
	case 181:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1197
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntLiteral(yyDollar[2].bytes),
				Scale:  NewIntLiteral(yyDollar[4].bytes),
			}
		}
	case 182:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1205
		{
			yyVAL.boolean = false
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1209
		{
			yyVAL.boolean = true
		}
	case 184:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1214
		{
			yyVAL.boolean = false
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1218
		{
			yyVAL.boolean = true
		}
	case 186:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1224
		{
			yyVAL.boolean = false
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1228
		{
			yyVAL.boolean = false
		}
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1232
		{
			yyVAL.boolean = true
		}
	case 189:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1237
		{
			yyVAL.optVal = nil
		}
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1241
		{
			yyVAL.optVal = yyDollar[2].expr
		}
	case 191:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1246
		{
			yyVAL.optVal = nil
		}
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1250
		{
			yyVAL.optVal = yyDollar[3].expr
		}
	case 193:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1255
		{
			yyVAL.boolean = false
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1259
		{
			yyVAL.boolean = true
		}
	case 195:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1264
		{
			yyVAL.str = ""
		}
	case 196:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1268
		{
			yyVAL.str = string(yyDollar[3].colIdent.String())
		}
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1272
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 198:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1277
		{
			yyVAL.str = ""
		}
	case 199:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1281
		{
			yyVAL.str = string(yyDollar[2].colIdent.String())
		}
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1285
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 201:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1290
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1294
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1298
		{
			yyVAL.colKeyOpt = colKey
		}
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1302
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1306
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 206:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1311
		{
			yyVAL.literal = nil
		}
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1315
		{
			yyVAL.literal = NewStrLiteral(yyDollar[2].bytes)
		}
	case 208:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1321
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 209:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1326
		{
			yyVAL.indexOptions = nil
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1330
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1336
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1340
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1346
		{
			yyVAL.indexOption = yyDollar[1].indexOption
		}
	case 214:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1350
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntLiteral(yyDollar[3].bytes)}
		}
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1355
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrLiteral(yyDollar[2].bytes)}
		}
	case 216:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1359
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), String: yyDollar[3].colIdent.String()}
		}
	case 217:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1365
		{
			yyVAL.str = ""
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1369
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 219:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1375
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 220:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1379
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 221:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1383
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Fulltext: true, Unique: false}
		}
	case 222:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1387
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 223:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1391
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1395
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1401
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1405
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1409
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1416
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1420
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1426
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1430
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 232:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1435
		{
			yyVAL.str = ""
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1439
		{
			yyVAL.str = string(yyDollar[1].colIdent.String())
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1445
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 235:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1449
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 236:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1455
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].literal, Direction: yyDollar[3].orderDirection}
		}
	case 237:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1461
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].colIdent.String()), Details: yyDollar[3].constraintInfo}
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1465
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 239:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1471
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].colIdent.String()), Details: yyDollar[3].constraintInfo}
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1475
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 241:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1481
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 242:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1485
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 243:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1489
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 244:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1493
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1497
		{
			yyVAL.constraintInfo = yyDollar[1].constraintInfo
		}
	case 246:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1503
		{
			yyVAL.constraintInfo = &CheckConstraintDefinition{Expr: yyDollar[3].expr, Enforced: yyDollar[5].boolean}
		}
	case 247:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1509
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 248:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1515
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1521
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1525
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1529
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 252:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1533
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1537
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 254:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1542
		{
			yyVAL.boolean = true
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1546
		{
			yyVAL.boolean = true
		}
	case 256:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1550
		{
			yyVAL.boolean = false
		}
	case 257:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1555
		{
			yyVAL.str = ""
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1559
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 259:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1563
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1571
		{
			yyVAL.str = yyDollar[1].str
		}
	case 261:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1575
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 262:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1579
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1585
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1589
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1593
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 266:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1599
		{
			yyVAL.statement = &DDL{Action: AlterDDLAction, Table: yyDollar[3].tableName}
		}
	case 267:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1603
		{
			yyVAL.statement = &DDL{Action: AlterDDLAction, Table: yyDollar[3].tableName}
		}
	case 268:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1607
		{
			yyVAL.statement = &DDL{Action: AlterDDLAction, Table: yyDollar[3].tableName}
		}
	case 269:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1611
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameDDLAction, FromTables: TableNames{yyDollar[3].tableName}, ToTables: TableNames{yyDollar[6].tableName}}
		}
	case 270:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1616
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterDDLAction, Table: yyDollar[3].tableName}
		}
	case 271:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1621
		{
			yyVAL.statement = &DDL{Action: AlterDDLAction, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 272:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1625
		{
			yyVAL.statement = &DDL{Action: AlterDDLAction, Table: yyDollar[3].tableName, PartitionSpec: yyDollar[4].partSpec}
		}
	case 273:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1629
		{
			yyDollar[1].alterDatabase.FullyParsed = true
			yyDollar[1].alterDatabase.DBName = yyDollar[2].colIdent.String()
			yyDollar[1].alterDatabase.AlterOptions = yyDollar[3].collateAndCharsets
			yyVAL.statement = yyDollar[1].alterDatabase
		}
	case 274:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1636
		{
			yyDollar[1].alterDatabase.FullyParsed = true
			yyDollar[1].alterDatabase.DBName = yyDollar[2].colIdent.String()
			yyDollar[1].alterDatabase.UpdateDataDirectory = true
			yyVAL.statement = yyDollar[1].alterDatabase
		}
	case 275:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1643
		{
			yyVAL.statement = &AlterVschema{
				Action: CreateVindexDDLAction,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name:   NewColIdent(yyDollar[5].tableName.Name.String()),
					Type:   yyDollar[6].colIdent,
					Params: yyDollar[7].vindexParams,
				},
			}
		}
	case 276:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1655
		{
			yyVAL.statement = &AlterVschema{
				Action: DropVindexDDLAction,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name: NewColIdent(yyDollar[5].tableName.Name.String()),
				},
			}
		}
	case 277:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1665
		{
			yyVAL.statement = &AlterVschema{Action: AddVschemaTableDDLAction, Table: yyDollar[5].tableName}
		}
	case 278:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1669
		{
			yyVAL.statement = &AlterVschema{Action: DropVschemaTableDDLAction, Table: yyDollar[5].tableName}
		}
	case 279:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1673
		{
			yyVAL.statement = &AlterVschema{
				Action: AddColVindexDDLAction,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 280:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1686
		{
			yyVAL.statement = &AlterVschema{
				Action: DropColVindexDDLAction,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 281:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1696
		{
			yyVAL.statement = &AlterVschema{Action: AddSequenceDDLAction, Table: yyDollar[5].tableName}
		}
	case 282:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1700
		{
			yyVAL.statement = &AlterVschema{
				Action: AddAutoIncDDLAction,
				Table:  yyDollar[4].tableName,
				AutoIncSpec: &AutoIncSpec{
					Column:   yyDollar[7].colIdent,
					Sequence: yyDollar[9].tableName,
				},
			}
		}
	case 297:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1729
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeAction, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1735
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 299:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1739
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 300:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1745
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 301:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1749
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 302:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1755
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 303:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1761
		{
			yyVAL.ddl = &DDL{Action: RenameDDLAction, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 304:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1765
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 305:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1773
		{
			yyVAL.statement = &DDL{Action: DropDDLAction, FromTables: yyDollar[4].tableNames, IfExists: yyDollar[3].boolean}
		}
	case 306:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1777
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterDDLAction, Table: yyDollar[5].tableName}
		}
	case 307:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1782
		{
			yyVAL.statement = &DDL{Action: DropDDLAction, FromTables: TableNames{yyDollar[4].tableName.ToViewName()}, IfExists: yyDollar[3].boolean}
		}
	case 308:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1786
		{
			yyVAL.statement = &DropDatabase{DBName: string(yyDollar[4].colIdent.String()), IfExists: yyDollar[3].boolean}
		}
	case 309:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1792
		{
			yyVAL.statement = &DDL{Action: TruncateDDLAction, Table: yyDollar[3].tableName}
		}
	case 310:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1796
		{
			yyVAL.statement = &DDL{Action: TruncateDDLAction, Table: yyDollar[2].tableName}
		}
	case 311:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1801
		{
			yyVAL.statement = &OtherRead{}
		}
	case 312:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1807
		{
			yyVAL.statement = &Show{&ShowBasic{Command: Charset, Filter: yyDollar[4].showFilter}}
		}
	case 313:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1811
		{
			yyVAL.statement = &Show{&ShowBasic{Command: Charset, Filter: yyDollar[3].showFilter}}
		}
	case 314:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1815
		{
			yyVAL.statement = &Show{&ShowBasic{Command: Collation, Filter: yyDollar[3].showFilter}}
		}
	case 315:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1819
		{
			yyVAL.statement = &Show{&ShowBasic{Command: Database, Filter: yyDollar[3].showFilter}}
		}
	case 316:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1823
		{
			yyVAL.statement = &Show{&ShowBasic{Command: Database, Filter: yyDollar[3].showFilter}}
		}
	case 317:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1827
		{
			yyVAL.statement = &Show{&ShowBasic{Command: Database, Filter: yyDollar[3].showFilter}}
		}
	case 318:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1831
		{
			yyVAL.statement = &Show{&ShowBasic{Command: Database, Filter: yyDollar[3].showFilter}}
		}
	case 319:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1835
		{
			yyVAL.statement = &Show{&ShowBasic{Command: Function, Filter: yyDollar[4].showFilter}}
		}
	case 320:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1839
		{
			yyVAL.statement = &Show{&ShowBasic{Command: Privilege}}
		}
	case 321:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1843
		{
			yyVAL.statement = &Show{&ShowBasic{Command: Procedure, Filter: yyDollar[4].showFilter}}
		}
	case 322:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1847
		{
			yyVAL.statement = &Show{&ShowBasic{Command: StatusSession, Filter: yyDollar[4].showFilter}}
		}
	case 323:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1851
		{
			yyVAL.statement = &Show{&ShowBasic{Command: StatusGlobal, Filter: yyDollar[4].showFilter}}
		}
	case 324:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1855
		{
			yyVAL.statement = &Show{&ShowBasic{Command: VariableSession, Filter: yyDollar[4].showFilter}}
		}
	case 325:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1859
		{
			yyVAL.statement = &Show{&ShowBasic{Command: VariableGlobal, Filter: yyDollar[4].showFilter}}
		}
	case 326:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1863
		{
			yyVAL.statement = &Show{&ShowTableStatus{DatabaseName: yyDollar[4].str, Filter: yyDollar[5].showFilter}}
		}
	case 327:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1867
		{
			yyVAL.statement = &Show{&ShowColumns{Full: yyDollar[2].str, Table: yyDollar[5].tableName, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}}
		}
	case 328:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1871
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].colIdent.String()), Scope: ImplicitScope}}
		}
	case 329:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1875
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Scope: ImplicitScope}}
		}
	case 330:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1879
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName, Scope: ImplicitScope}}
		}
	case 331:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1884
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].colIdent.String()), Scope: ImplicitScope}}
		}
	case 332:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1888
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Scope: ImplicitScope}}
		}
	case 333:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1892
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName, Scope: ImplicitScope}}
		}
	case 334:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1896
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Scope: ImplicitScope}}
		}
	case 335:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1900
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Scope: ImplicitScope}}
		}
	case 336:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1904
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes), Scope: ImplicitScope}}
		}
	case 337:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1908
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName, Scope: ImplicitScope}}
		}
	case 338:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1912
		{
			showTablesOpt := &ShowTablesOpt{DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{&ShowLegacy{Extended: string(yyDollar[2].str), Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName, Scope: ImplicitScope}}
		}
	case 339:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1917
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes), Scope: ImplicitScope}}
		}
	case 340:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1921
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName, Scope: ImplicitScope}}
		}
	case 341:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1925
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{&ShowLegacy{Type: yyDollar[3].str, Scope: ImplicitScope}}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}
				yyVAL.statement = &Show{&ShowLegacy{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt, Scope: ImplicitScope}}
			}
		}
	case 342:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1935
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{&ShowLegacy{Scope: VitessMetadataScope, Type: string(yyDollar[3].bytes), ShowTablesOpt: showTablesOpt}}
		}
	case 343:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1940
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Scope: ImplicitScope}}
		}
	case 344:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1944
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Scope: ImplicitScope}}
		}
	case 345:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1948
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName, Scope: ImplicitScope}}
		}
	case 346:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1952
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes), Scope: ImplicitScope}}
		}
	case 347:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1957
		{
			// This should probably be a different type (ShowVitessTopoOpt), but
			// just getting the thing working for now
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{&ShowLegacy{Type: yyDollar[2].str, ShowTablesOpt: showTablesOpt}}
		}
	case 348:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1971
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].colIdent.String()), Scope: ImplicitScope}}
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1977
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1981
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1987
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1991
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 353:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1997
		{
			yyVAL.str = ""
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2001
		{
			yyVAL.str = "extended "
		}
	case 355:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2007
		{
			yyVAL.str = ""
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2011
		{
			yyVAL.str = "full "
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2017
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2021
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 359:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2027
		{
			yyVAL.str = ""
		}
	case 360:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2031
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 361:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2035
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 362:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2041
		{
			yyVAL.showFilter = nil
		}
	case 363:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2045
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 364:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2049
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 365:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2055
		{
			yyVAL.showFilter = nil
		}
	case 366:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2059
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 367:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2065
		{
			yyVAL.empty = struct{}{}
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2069
		{
			yyVAL.empty = struct{}{}
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2073
		{
			yyVAL.empty = struct{}{}
		}
	case 370:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2079
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2083
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2089
		{
			yyVAL.statement = &Begin{}
		}
	case 373:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2093
		{
			yyVAL.statement = &Begin{}
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2099
		{
			yyVAL.statement = &Commit{}
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2105
		{
			yyVAL.statement = &Rollback{}
		}
	case 376:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2109
		{
			yyVAL.statement = &SRollback{Name: yyDollar[5].colIdent}
		}
	case 377:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2114
		{
			yyVAL.empty = struct{}{}
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2116
		{
			yyVAL.empty = struct{}{}
		}
	case 379:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2119
		{
			yyVAL.empty = struct{}{}
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2121
		{
			yyVAL.empty = struct{}{}
		}
	case 381:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2126
		{
			yyVAL.statement = &Savepoint{Name: yyDollar[2].colIdent}
		}
	case 382:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2132
		{
			yyVAL.statement = &Release{Name: yyDollar[3].colIdent}
		}
	case 383:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2137
		{
			yyVAL.explainType = EmptyType
		}
	case 384:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2141
		{
			yyVAL.explainType = JSONType
		}
	case 385:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2145
		{
			yyVAL.explainType = TreeType
		}
	case 386:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2149
		{
			yyVAL.explainType = VitessType
		}
	case 387:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2153
		{
			yyVAL.explainType = TraditionalType
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2157
		{
			yyVAL.explainType = AnalyzeType
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2163
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2167
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2171
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2177
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2181
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2185
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2189
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 396:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2194
		{
			yyVAL.str = ""
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2198
		{
			yyVAL.str = ""
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2202
		{
			yyVAL.str = ""
		}
	case 399:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2208
		{
			yyVAL.statement = &OtherRead{}
		}
	case 400:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2212
		{
			yyVAL.statement = &Explain{Type: yyDollar[2].explainType, Statement: yyDollar[3].statement}
		}
	case 401:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2218
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 402:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2222
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 403:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2228
		{
			yyVAL.statement = &LockTables{Tables: yyDollar[3].tableAndLockTypes}
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2234
		{
			yyVAL.tableAndLockTypes = TableAndLockTypes{yyDollar[1].tableAndLockType}
		}
	case 405:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2238
		{
			yyVAL.tableAndLockTypes = append(yyDollar[1].tableAndLockTypes, yyDollar[3].tableAndLockType)
		}
	case 406:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2244
		{
			yyVAL.tableAndLockType = &TableAndLockType{Table: yyDollar[1].aliasedTableName, Lock: yyDollar[2].lockType}
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2250
		{
			yyVAL.lockType = Read
		}
	case 408:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2254
		{
			yyVAL.lockType = ReadLocal
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2258
		{
			yyVAL.lockType = Write
		}
	case 410:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2262
		{
			yyVAL.lockType = LowPriorityWrite
		}
	case 411:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2268
		{
			yyVAL.statement = &UnlockTables{}
		}
	case 412:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2274
		{
			yyVAL.statement = &DDL{Action: FlushDDLAction}
		}
	case 413:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2278
		{
			setAllowComments(yylex, true)
		}
	case 414:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2282
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 415:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2288
		{
			yyVAL.bytes2 = nil
		}
	case 416:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2292
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2298
		{
			yyVAL.boolean = true
		}
	case 418:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2302
		{
			yyVAL.boolean = false
		}
	case 419:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2306
		{
			yyVAL.boolean = true
		}
	case 420:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2311
		{
			yyVAL.str = ""
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2315
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2319
		{
			yyVAL.str = SQLCacheStr
		}
	case 423:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2324
		{
			yyVAL.boolean = false
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2328
		{
			yyVAL.boolean = true
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2332
		{
			yyVAL.boolean = true
		}
	case 426:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2337
		{
			yyVAL.selectExprs = nil
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2341
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 428:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2346
		{
			yyVAL.strs = nil
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2350
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 430:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2354
		{ // TODO: This is a hack since I couldn't get it to work in a nicer way. I got 'conflicts: 8 shift/reduce'
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str}
		}
	case 431:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2358
		{
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str, yyDollar[3].str}
		}
	case 432:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2362
		{
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str, yyDollar[3].str, yyDollar[4].str}
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2368
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2372
		{
			yyVAL.str = SQLCacheStr
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2376
		{
			yyVAL.str = DistinctStr
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2380
		{
			yyVAL.str = DistinctStr
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2384
		{
			yyVAL.str = StraightJoinHint
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2388
		{
			yyVAL.str = SQLCalcFoundRowsStr
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2394
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 440:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2398
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2404
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 442:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2408
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 443:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2412
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 444:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2416
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 445:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2421
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2425
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 447:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2429
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2436
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 450:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2441
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 451:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2445
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2451
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 453:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2455
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2465
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2469
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].derivedTable, As: yyDollar[3].tableIdent}
		}
	case 458:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2473
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 459:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2479
		{
			yyVAL.derivedTable = &DerivedTable{yyDollar[2].selStmt}
		}
	case 460:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2485
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 461:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2489
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 462:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2494
		{
			yyVAL.columns = nil
		}
	case 463:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2498
		{
			yyVAL.columns = yyDollar[2].columns
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2504
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 465:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2508
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2514
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 467:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2518
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 468:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2531
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].joinType, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 469:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2535
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].joinType, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 470:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2539
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].joinType, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 471:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2543
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].joinType, RightExpr: yyDollar[3].tableExpr}
		}
	case 472:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2549
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 473:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2551
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 474:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2555
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2557
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 476:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2561
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 477:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2563
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 478:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2566
		{
			yyVAL.empty = struct{}{}
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2568
		{
			yyVAL.empty = struct{}{}
		}
	case 480:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2571
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2575
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 482:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2579
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2586
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2592
		{
			yyVAL.joinType = NormalJoinType
		}
	case 486:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2596
		{
			yyVAL.joinType = NormalJoinType
		}
	case 487:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2600
		{
			yyVAL.joinType = NormalJoinType
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2606
		{
			yyVAL.joinType = StraightJoinType
		}
	case 489:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2612
		{
			yyVAL.joinType = LeftJoinType
		}
	case 490:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2616
		{
			yyVAL.joinType = LeftJoinType
		}
	case 491:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2620
		{
			yyVAL.joinType = RightJoinType
		}
	case 492:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2624
		{
			yyVAL.joinType = RightJoinType
		}
	case 493:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2630
		{
			yyVAL.joinType = NaturalJoinType
		}
	case 494:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2634
		{
			if yyDollar[2].joinType == LeftJoinType {
				yyVAL.joinType = NaturalLeftJoinType
			} else {
				yyVAL.joinType = NaturalRightJoinType
			}
		}
	case 495:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2644
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2648
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2654
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 498:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2658
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 499:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2664
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 500:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2669
		{
			yyVAL.indexHints = nil
		}
	case 501:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2673
		{
			yyVAL.indexHints = &IndexHints{Type: UseOp, Indexes: yyDollar[4].columns}
		}
	case 502:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2677
		{
			yyVAL.indexHints = &IndexHints{Type: UseOp}
		}
	case 503:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2681
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreOp, Indexes: yyDollar[4].columns}
		}
	case 504:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2685
		{
			yyVAL.indexHints = &IndexHints{Type: ForceOp, Indexes: yyDollar[4].columns}
		}
	case 505:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2690
		{
			yyVAL.expr = nil
		}
	case 506:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2694
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2700
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 508:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2704
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 509:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2708
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 510:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2712
		{
			yyVAL.expr = &XorExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 511:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2716
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 512:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2720
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].isExprOperator, Expr: yyDollar[1].expr}
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2724
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 514:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2728
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 515:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2734
		{
			yyVAL.str = ""
		}
	case 516:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2738
		{
			yyVAL.str = string(yyDollar[2].colIdent.String())
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2744
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2748
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 519:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2754
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].comparisonExprOperator, Right: yyDollar[3].expr}
		}
	case 520:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2758
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InOp, Right: yyDollar[3].colTuple}
		}
	case 521:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2762
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInOp, Right: yyDollar[4].colTuple}
		}
	case 522:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2766
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeOp, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 523:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2770
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeOp, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 524:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2774
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpOp, Right: yyDollar[3].expr}
		}
	case 525:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2778
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpOp, Right: yyDollar[4].expr}
		}
	case 526:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2782
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenOp, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 527:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2786
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenOp, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 528:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2790
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2796
		{
			yyVAL.isExprOperator = IsNullOp
		}
	case 530:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2800
		{
			yyVAL.isExprOperator = IsNotNullOp
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2804
		{
			yyVAL.isExprOperator = IsTrueOp
		}
	case 532:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2808
		{
			yyVAL.isExprOperator = IsNotTrueOp
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2812
		{
			yyVAL.isExprOperator = IsFalseOp
		}
	case 534:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2816
		{
			yyVAL.isExprOperator = IsNotFalseOp
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2822
		{
			yyVAL.comparisonExprOperator = EqualOp
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2826
		{
			yyVAL.comparisonExprOperator = LessThanOp
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2830
		{
			yyVAL.comparisonExprOperator = GreaterThanOp
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2834
		{
			yyVAL.comparisonExprOperator = LessEqualOp
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2838
		{
			yyVAL.comparisonExprOperator = GreaterEqualOp
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2842
		{
			yyVAL.comparisonExprOperator = NotEqualOp
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2846
		{
			yyVAL.comparisonExprOperator = NullSafeEqualOp
		}
	case 542:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2851
		{
			yyVAL.expr = nil
		}
	case 543:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2855
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2861
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2865
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2869
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 547:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2875
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2881
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 549:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2885
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2891
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2895
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2899
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2903
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2907
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 555:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2911
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndOp, Right: yyDollar[3].expr}
		}
	case 556:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2915
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrOp, Right: yyDollar[3].expr}
		}
	case 557:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2919
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorOp, Right: yyDollar[3].expr}
		}
	case 558:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2923
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusOp, Right: yyDollar[3].expr}
		}
	case 559:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2927
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusOp, Right: yyDollar[3].expr}
		}
	case 560:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2931
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultOp, Right: yyDollar[3].expr}
		}
	case 561:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2935
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivOp, Right: yyDollar[3].expr}
		}
	case 562:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2939
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivOp, Right: yyDollar[3].expr}
		}
	case 563:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2943
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModOp, Right: yyDollar[3].expr}
		}
	case 564:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2947
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModOp, Right: yyDollar[3].expr}
		}
	case 565:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2951
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftOp, Right: yyDollar[3].expr}
		}
	case 566:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2955
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightOp, Right: yyDollar[3].expr}
		}
	case 567:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2959
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 568:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2963
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 569:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2967
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 570:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2971
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryOp, Expr: yyDollar[2].expr}
		}
	case 571:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2975
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryOp, Expr: yyDollar[2].expr}
		}
	case 572:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2979
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8Op, Expr: yyDollar[2].expr}
		}
	case 573:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2983
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Op, Expr: yyDollar[2].expr}
		}
	case 574:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2987
		{
			yyVAL.expr = &UnaryExpr{Operator: Latin1Op, Expr: yyDollar[2].expr}
		}
	case 575:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2991
		{
			if num, ok := yyDollar[2].expr.(*Literal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusOp, Expr: yyDollar[2].expr}
			}
		}
	case 576:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2999
		{
			if num, ok := yyDollar[2].expr.(*Literal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntLiteral(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusOp, Expr: yyDollar[2].expr}
			}
		}
	case 577:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3013
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaOp, Expr: yyDollar[2].expr}
		}
	case 578:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3017
		{
			yyVAL.expr = &UnaryExpr{Operator: BangOp, Expr: yyDollar[2].expr}
		}
	case 579:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3021
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 584:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3039
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 585:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3043
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 586:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3047
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 587:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3051
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 588:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3061
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 589:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3065
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 590:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3069
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 591:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3073
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 592:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3077
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 593:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3081
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 594:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3085
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 595:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3089
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrLiteral(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 596:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3093
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrLiteral(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 597:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:3097
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].matchExprOption}
		}
	case 598:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3101
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].boolean, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str, Limit: yyDollar[7].limit}
		}
	case 599:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3105
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 600:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3109
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 601:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3119
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 602:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3123
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 603:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3127
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 604:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3132
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 605:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3137
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 606:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3142
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 607:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3148
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 608:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3153
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 609:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3158
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 610:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3162
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 611:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3166
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_time"), Fsp: yyDollar[2].expr}
		}
	case 612:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3171
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtime"), Fsp: yyDollar[2].expr}
		}
	case 613:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3176
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtimestamp"), Fsp: yyDollar[2].expr}
		}
	case 614:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3181
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_time"), Fsp: yyDollar[2].expr}
		}
	case 615:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3185
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampadd"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 616:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3189
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampdiff"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 619:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3199
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 620:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3209
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 621:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3213
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 622:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3217
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("schema"), Exprs: yyDollar[3].selectExprs}
		}
	case 623:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3221
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 624:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3225
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 625:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3229
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 626:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3233
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 627:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3239
		{
			yyVAL.matchExprOption = NoOption
		}
	case 628:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3243
		{
			yyVAL.matchExprOption = BooleanModeOpt
		}
	case 629:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3247
		{
			yyVAL.matchExprOption = NaturalLanguageModeOpt
		}
	case 630:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:3251
		{
			yyVAL.matchExprOption = NaturalLanguageModeWithQueryExpansionOpt
		}
	case 631:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3255
		{
			yyVAL.matchExprOption = QueryExpansionOpt
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3261
		{
			yyVAL.str = string(yyDollar[1].colIdent.String())
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3265
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 634:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3271
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 635:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3275
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal, Charset: yyDollar[3].str, Operator: CharacterSetOp}
		}
	case 636:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3279
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal, Charset: string(yyDollar[3].colIdent.String())}
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3283
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 638:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3287
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 639:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3291
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3297
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 641:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3301
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3305
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 643:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3309
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 644:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3313
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3317
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 646:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3321
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 647:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3326
		{
			yyVAL.expr = nil
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3330
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 649:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3335
		{
			yyVAL.str = string("")
		}
	case 650:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3339
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3345
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 652:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3349
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 653:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3355
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 654:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3360
		{
			yyVAL.expr = nil
		}
	case 655:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3364
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3370
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 657:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3374
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 658:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3378
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3384
		{
			yyVAL.expr = NewStrLiteral(yyDollar[1].bytes)
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3388
		{
			yyVAL.expr = NewHexLiteral(yyDollar[1].bytes)
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3392
		{
			yyVAL.expr = NewBitLiteral(yyDollar[1].bytes)
		}
	case 662:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3396
		{
			yyVAL.expr = NewIntLiteral(yyDollar[1].bytes)
		}
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3400
		{
			yyVAL.expr = NewFloatLiteral(yyDollar[1].bytes)
		}
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3404
		{
			yyVAL.expr = NewHexNumLiteral(yyDollar[1].bytes)
		}
	case 665:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3408
		{
			yyVAL.expr = NewArgument(yyDollar[1].bytes)
		}
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3412
		{
			yyVAL.expr = &NullVal{}
		}
	case 667:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3418
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntLiteral([]byte("1"))
		}
	case 668:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3427
		{
			yyVAL.expr = NewIntLiteral(yyDollar[1].bytes)
		}
	case 669:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3431
		{
			yyVAL.expr = NewArgument(yyDollar[1].bytes)
		}
	case 670:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3436
		{
			yyVAL.exprs = nil
		}
	case 671:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3440
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 672:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3445
		{
			yyVAL.expr = nil
		}
	case 673:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3449
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 674:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3454
		{
			yyVAL.orderBy = nil
		}
	case 675:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3458
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3464
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 677:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3468
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 678:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3474
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].orderDirection}
		}
	case 679:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3479
		{
			yyVAL.orderDirection = AscOrder
		}
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3483
		{
			yyVAL.orderDirection = AscOrder
		}
	case 681:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3487
		{
			yyVAL.orderDirection = DescOrder
		}
	case 682:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3492
		{
			yyVAL.limit = nil
		}
	case 683:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3496
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 684:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3500
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 685:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3504
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 686:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3509
		{
			yyVAL.indexOptions = nil
		}
	case 687:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3513
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption, yyDollar[2].indexOption}
		}
	case 688:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3517
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption, yyDollar[2].indexOption}
		}
	case 689:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3521
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 690:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3525
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 691:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3532
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), String: string(yyDollar[3].bytes)}
		}
	case 692:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3536
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), String: string(yyDollar[3].bytes)}
		}
	case 693:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3540
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), String: string(yyDollar[3].bytes)}
		}
	case 694:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3544
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), String: string(yyDollar[3].bytes)}
		}
	case 695:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3550
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), String: string(yyDollar[3].bytes)}
		}
	case 696:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3554
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), String: string(yyDollar[3].bytes)}
		}
	case 697:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3558
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), String: string(yyDollar[3].bytes)}
		}
	case 698:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3563
		{
			yyVAL.str = ""
		}
	case 699:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3567
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 700:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3571
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 701:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3575
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 702:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3580
		{
			yyVAL.str = ""
		}
	case 703:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3584
		{
			yyVAL.str = yyDollar[3].str
		}
	case 704:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3590
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 705:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3594
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 706:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3599
		{
			yyVAL.str = ""
		}
	case 707:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3603
		{
			yyVAL.str = yyDollar[2].str
		}
	case 708:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3608
		{
			yyVAL.str = "cascaded"
		}
	case 709:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3612
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 710:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3616
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 711:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3621
		{
			yyVAL.str = ""
		}
	case 712:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3625
		{
			yyVAL.str = yyDollar[3].str
		}
	case 713:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3631
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 714:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3635
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 715:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3639
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'@" + string(yyDollar[2].bytes)
		}
	case 716:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3643
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 717:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3648
		{
			yyVAL.lock = NoLock
		}
	case 718:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3652
		{
			yyVAL.lock = ForUpdateLock
		}
	case 719:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3656
		{
			yyVAL.lock = ShareModeLock
		}
	case 720:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3661
		{
			yyVAL.selectInto = nil
		}
	case 721:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:3665
		{
			yyVAL.selectInto = &SelectInto{Type: IntoOutfileS3, FileName: string(yyDollar[4].bytes), Charset: yyDollar[5].str, FormatOption: yyDollar[6].str, ExportOption: yyDollar[7].str, Manifest: yyDollar[8].str, Overwrite: yyDollar[9].str}
		}
	case 722:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3669
		{
			yyVAL.selectInto = &SelectInto{Type: IntoDumpfile, FileName: string(yyDollar[3].bytes), Charset: "", FormatOption: "", ExportOption: "", Manifest: "", Overwrite: ""}
		}
	case 723:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3673
		{
			yyVAL.selectInto = &SelectInto{Type: IntoOutfile, FileName: string(yyDollar[3].bytes), Charset: yyDollar[4].str, FormatOption: "", ExportOption: yyDollar[5].str, Manifest: "", Overwrite: ""}
		}
	case 724:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3678
		{
			yyVAL.str = ""
		}
	case 725:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3682
		{
			yyVAL.str = " format csv" + yyDollar[3].str
		}
	case 726:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3686
		{
			yyVAL.str = " format text" + yyDollar[3].str
		}
	case 727:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3691
		{
			yyVAL.str = ""
		}
	case 728:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3695
		{
			yyVAL.str = " header"
		}
	case 729:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3700
		{
			yyVAL.str = ""
		}
	case 730:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3704
		{
			yyVAL.str = " manifest on"
		}
	case 731:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3708
		{
			yyVAL.str = " manifest off"
		}
	case 732:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3713
		{
			yyVAL.str = ""
		}
	case 733:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3717
		{
			yyVAL.str = " overwrite on"
		}
	case 734:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3721
		{
			yyVAL.str = " overwrite off"
		}
	case 735:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3727
		{
			yyVAL.str = yyDollar[1].str + yyDollar[2].str
		}
	case 736:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3732
		{
			yyVAL.str = ""
		}
	case 737:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3736
		{
			yyVAL.str = " lines" + yyDollar[2].str + yyDollar[3].str
		}
	case 738:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3741
		{
			yyVAL.str = ""
		}
	case 739:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3745
		{
			yyVAL.str = " starting by '" + string(yyDollar[3].bytes) + "'"
		}
	case 740:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3750
		{
			yyVAL.str = ""
		}
	case 741:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3754
		{
			yyVAL.str = " terminated by '" + string(yyDollar[3].bytes) + "'"
		}
	case 742:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3759
		{
			yyVAL.str = ""
		}
	case 743:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3763
		{
			yyVAL.str = " " + yyDollar[1].str + yyDollar[2].str + yyDollar[3].str + yyDollar[4].str
		}
	case 744:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3768
		{
			yyVAL.str = ""
		}
	case 745:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3772
		{
			yyVAL.str = " escaped by '" + string(yyDollar[3].bytes) + "'"
		}
	case 746:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3777
		{
			yyVAL.str = ""
		}
	case 747:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3781
		{
			yyVAL.str = yyDollar[1].str + " enclosed by '" + string(yyDollar[4].bytes) + "'"
		}
	case 748:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3786
		{
			yyVAL.str = ""
		}
	case 749:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3790
		{
			yyVAL.str = " optionally"
		}
	case 750:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3803
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 751:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3807
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 752:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3811
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 753:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3815
		{
			yyVAL.ins = &Insert{Rows: yyDollar[4].values}
		}
	case 754:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3819
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 755:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3825
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 756:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3829
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 757:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3833
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 758:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3837
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 759:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3842
		{
			yyVAL.updateExprs = nil
		}
	case 760:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3846
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 761:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3852
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 762:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3856
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 763:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3862
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 764:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3866
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 765:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3872
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 766:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3878
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = yyDollar[1].valTuple[0]
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 767:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3888
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 768:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3892
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 769:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3898
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 770:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3904
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 771:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3908
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 772:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3914
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Scope: ImplicitScope, Expr: NewStrLiteral([]byte("on"))}
		}
	case 773:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3918
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Scope: ImplicitScope, Expr: NewStrLiteral([]byte("off"))}
		}
	case 774:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3922
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Scope: ImplicitScope, Expr: yyDollar[3].expr}
		}
	case 775:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3926
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Scope: ImplicitScope, Expr: yyDollar[2].expr}
		}
	case 776:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3930
		{
			yyDollar[2].setExpr.Scope = yyDollar[1].scope
			yyVAL.setExpr = yyDollar[2].setExpr
		}
	case 778:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3938
		{
			yyVAL.bytes = []byte("charset")
		}
	case 780:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3945
		{
			yyVAL.expr = NewStrLiteral([]byte(yyDollar[1].colIdent.String()))
		}
	case 781:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3949
		{
			yyVAL.expr = NewStrLiteral(yyDollar[1].bytes)
		}
	case 782:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3953
		{
			yyVAL.expr = &Default{}
		}
	case 785:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3962
		{
			yyVAL.boolean = false
		}
	case 786:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3964
		{
			yyVAL.boolean = true
		}
	case 787:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3967
		{
			yyVAL.boolean = false
		}
	case 788:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3969
		{
			yyVAL.boolean = true
		}
	case 789:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3972
		{
			yyVAL.ignore = false
		}
	case 790:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3974
		{
			yyVAL.ignore = true
		}
	case 791:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3978
		{
			yyVAL.empty = struct{}{}
		}
	case 792:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3980
		{
			yyVAL.empty = struct{}{}
		}
	case 793:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3982
		{
			yyVAL.empty = struct{}{}
		}
	case 794:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3984
		{
			yyVAL.empty = struct{}{}
		}
	case 795:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3986
		{
			yyVAL.empty = struct{}{}
		}
	case 796:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3988
		{
			yyVAL.empty = struct{}{}
		}
	case 797:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3990
		{
			yyVAL.empty = struct{}{}
		}
	case 798:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3992
		{
			yyVAL.empty = struct{}{}
		}
	case 799:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3994
		{
			yyVAL.empty = struct{}{}
		}
	case 800:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3996
		{
			yyVAL.empty = struct{}{}
		}
	case 801:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4000
		{
			yyVAL.empty = struct{}{}
		}
	case 802:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4002
		{
			yyVAL.empty = struct{}{}
		}
	case 803:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4004
		{
			yyVAL.empty = struct{}{}
		}
	case 804:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4008
		{
			yyVAL.empty = struct{}{}
		}
	case 805:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4010
		{
			yyVAL.empty = struct{}{}
		}
	case 806:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4013
		{
			yyVAL.str = ""
		}
	case 807:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4015
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 808:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4017
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 809:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4019
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 810:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4022
		{
			yyVAL.indexOptions = nil
		}
	case 811:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4024
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 812:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4028
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), String: string(yyDollar[2].colIdent.String())}
		}
	case 813:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4034
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 814:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4038
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 816:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4045
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 817:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4051
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].colIdent.String()))
		}
	case 818:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4055
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 820:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4062
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 1160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4426
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4435
		{
			decNesting(yylex)
		}
	case 1162:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4440
		{
			skipToEnd(yylex)
		}
	case 1163:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4445
		{
			skipToEnd(yylex)
		}
	case 1164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4449
		{
			skipToEnd(yylex)
		}
	case 1165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4453
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
