// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line sql.y:53
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	sqlVal               *SQLVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	colIdent             ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	colKeyOpt            ColumnKeyOption
	optVal               Expr
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexColumn          *IndexColumn
	indexColumns         []*IndexColumn
	constraintDefinition *ConstraintDefinition
	constraintInfo       ConstraintInfo
	ReferenceAction      ReferenceAction
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
	optLike              *OptLike
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const KEY = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const UNLOCK = 57374
const KEYS = 57375
const DISTINCTROW = 57376
const VALUES = 57377
const LAST_INSERT_ID = 57378
const NEXT = 57379
const VALUE = 57380
const SHARE = 57381
const MODE = 57382
const SQL_NO_CACHE = 57383
const SQL_CACHE = 57384
const JOIN = 57385
const STRAIGHT_JOIN = 57386
const LEFT = 57387
const RIGHT = 57388
const INNER = 57389
const OUTER = 57390
const CROSS = 57391
const NATURAL = 57392
const USE = 57393
const FORCE = 57394
const ON = 57395
const USING = 57396
const ID = 57397
const AT_ID = 57398
const AT_AT_ID = 57399
const HEX = 57400
const STRING = 57401
const INTEGRAL = 57402
const FLOAT = 57403
const HEXNUM = 57404
const VALUE_ARG = 57405
const LIST_ARG = 57406
const COMMENT = 57407
const COMMENT_KEYWORD = 57408
const BIT_LITERAL = 57409
const NULL = 57410
const TRUE = 57411
const FALSE = 57412
const OFF = 57413
const OR = 57414
const AND = 57415
const NOT = 57416
const BETWEEN = 57417
const CASE = 57418
const WHEN = 57419
const THEN = 57420
const ELSE = 57421
const END = 57422
const LE = 57423
const GE = 57424
const NE = 57425
const NULL_SAFE_EQUAL = 57426
const IS = 57427
const LIKE = 57428
const REGEXP = 57429
const IN = 57430
const SHIFT_LEFT = 57431
const SHIFT_RIGHT = 57432
const DIV = 57433
const MOD = 57434
const UNARY = 57435
const COLLATE = 57436
const BINARY = 57437
const UNDERSCORE_BINARY = 57438
const UNDERSCORE_UTF8MB4 = 57439
const INTERVAL = 57440
const JSON_EXTRACT_OP = 57441
const JSON_UNQUOTE_EXTRACT_OP = 57442
const CREATE = 57443
const ALTER = 57444
const DROP = 57445
const RENAME = 57446
const ANALYZE = 57447
const ADD = 57448
const FLUSH = 57449
const SCHEMA = 57450
const TABLE = 57451
const INDEX = 57452
const VIEW = 57453
const TO = 57454
const IGNORE = 57455
const IF = 57456
const UNIQUE = 57457
const PRIMARY = 57458
const COLUMN = 57459
const SPATIAL = 57460
const FULLTEXT = 57461
const KEY_BLOCK_SIZE = 57462
const CHECK = 57463
const INDEXES = 57464
const ACTION = 57465
const CASCADE = 57466
const CONSTRAINT = 57467
const FOREIGN = 57468
const NO = 57469
const REFERENCES = 57470
const RESTRICT = 57471
const SHOW = 57472
const DESCRIBE = 57473
const EXPLAIN = 57474
const DATE = 57475
const ESCAPE = 57476
const REPAIR = 57477
const OPTIMIZE = 57478
const TRUNCATE = 57479
const MAXVALUE = 57480
const PARTITION = 57481
const REORGANIZE = 57482
const LESS = 57483
const THAN = 57484
const PROCEDURE = 57485
const TRIGGER = 57486
const VINDEX = 57487
const VINDEXES = 57488
const STATUS = 57489
const VARIABLES = 57490
const WARNINGS = 57491
const SEQUENCE = 57492
const BEGIN = 57493
const START = 57494
const TRANSACTION = 57495
const COMMIT = 57496
const ROLLBACK = 57497
const BIT = 57498
const TINYINT = 57499
const SMALLINT = 57500
const MEDIUMINT = 57501
const INT = 57502
const INTEGER = 57503
const BIGINT = 57504
const INTNUM = 57505
const REAL = 57506
const DOUBLE = 57507
const FLOAT_TYPE = 57508
const DECIMAL = 57509
const NUMERIC = 57510
const TIME = 57511
const TIMESTAMP = 57512
const DATETIME = 57513
const YEAR = 57514
const CHAR = 57515
const VARCHAR = 57516
const BOOL = 57517
const CHARACTER = 57518
const VARBINARY = 57519
const NCHAR = 57520
const TEXT = 57521
const TINYTEXT = 57522
const MEDIUMTEXT = 57523
const LONGTEXT = 57524
const BLOB = 57525
const TINYBLOB = 57526
const MEDIUMBLOB = 57527
const LONGBLOB = 57528
const JSON = 57529
const ENUM = 57530
const GEOMETRY = 57531
const POINT = 57532
const LINESTRING = 57533
const POLYGON = 57534
const GEOMETRYCOLLECTION = 57535
const MULTIPOINT = 57536
const MULTILINESTRING = 57537
const MULTIPOLYGON = 57538
const NULLX = 57539
const AUTO_INCREMENT = 57540
const APPROXNUM = 57541
const SIGNED = 57542
const UNSIGNED = 57543
const ZEROFILL = 57544
const COLLATION = 57545
const DATABASES = 57546
const TABLES = 57547
const VITESS_METADATA = 57548
const VSCHEMA = 57549
const FULL = 57550
const PROCESSLIST = 57551
const COLUMNS = 57552
const FIELDS = 57553
const ENGINES = 57554
const PLUGINS = 57555
const EXTENDED = 57556
const NAMES = 57557
const CHARSET = 57558
const GLOBAL = 57559
const SESSION = 57560
const ISOLATION = 57561
const LEVEL = 57562
const READ = 57563
const WRITE = 57564
const ONLY = 57565
const REPEATABLE = 57566
const COMMITTED = 57567
const UNCOMMITTED = 57568
const SERIALIZABLE = 57569
const CURRENT_TIMESTAMP = 57570
const DATABASE = 57571
const CURRENT_DATE = 57572
const CURRENT_TIME = 57573
const LOCALTIME = 57574
const LOCALTIMESTAMP = 57575
const UTC_DATE = 57576
const UTC_TIME = 57577
const UTC_TIMESTAMP = 57578
const REPLACE = 57579
const CONVERT = 57580
const CAST = 57581
const SUBSTR = 57582
const SUBSTRING = 57583
const GROUP_CONCAT = 57584
const SEPARATOR = 57585
const TIMESTAMPADD = 57586
const TIMESTAMPDIFF = 57587
const MATCH = 57588
const AGAINST = 57589
const BOOLEAN = 57590
const LANGUAGE = 57591
const WITH = 57592
const QUERY = 57593
const EXPANSION = 57594
const UNUSED = 57595
const ARRAY = 57596
const CUME_DIST = 57597
const DESCRIPTION = 57598
const DENSE_RANK = 57599
const EMPTY = 57600
const EXCEPT = 57601
const FIRST_VALUE = 57602
const GROUPING = 57603
const GROUPS = 57604
const JSON_TABLE = 57605
const LAG = 57606
const LAST_VALUE = 57607
const LATERAL = 57608
const LEAD = 57609
const MEMBER = 57610
const NTH_VALUE = 57611
const NTILE = 57612
const OF = 57613
const OVER = 57614
const PERCENT_RANK = 57615
const RANK = 57616
const RECURSIVE = 57617
const ROW_NUMBER = 57618
const SYSTEM = 57619
const WINDOW = 57620
const ACTIVE = 57621
const ADMIN = 57622
const BUCKETS = 57623
const CLONE = 57624
const COMPONENT = 57625
const DEFINITION = 57626
const ENFORCED = 57627
const EXCLUDE = 57628
const FOLLOWING = 57629
const GEOMCOLLECTION = 57630
const GET_MASTER_PUBLIC_KEY = 57631
const HISTOGRAM = 57632
const HISTORY = 57633
const INACTIVE = 57634
const INVISIBLE = 57635
const LOCKED = 57636
const MASTER_COMPRESSION_ALGORITHMS = 57637
const MASTER_PUBLIC_KEY_PATH = 57638
const MASTER_TLS_CIPHERSUITES = 57639
const MASTER_ZSTD_COMPRESSION_LEVEL = 57640
const NESTED = 57641
const NETWORK_NAMESPACE = 57642
const NOWAIT = 57643
const NULLS = 57644
const OJ = 57645
const OLD = 57646
const OPTIONAL = 57647
const ORDINALITY = 57648
const ORGANIZATION = 57649
const OTHERS = 57650
const PATH = 57651
const PERSIST = 57652
const PERSIST_ONLY = 57653
const PRECEDING = 57654
const PRIVILEGE_CHECKS_USER = 57655
const PROCESS = 57656
const RANDOM = 57657
const REFERENCE = 57658
const REQUIRE_ROW_FORMAT = 57659
const RESOURCE = 57660
const RESPECT = 57661
const RESTART = 57662
const RETAIN = 57663
const REUSE = 57664
const ROLE = 57665
const SECONDARY = 57666
const SECONDARY_ENGINE = 57667
const SECONDARY_LOAD = 57668
const SECONDARY_UNLOAD = 57669
const SKIP = 57670
const SRID = 57671
const THREAD_PRIORITY = 57672
const TIES = 57673
const UNBOUNDED = 57674
const VCPU = 57675
const VISIBLE = 57676

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"DISTINCTROW",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"CHECK",
	"INDEXES",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"SEQUENCE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"TABLES",
	"VITESS_METADATA",
	"VSCHEMA",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"PLUGINS",
	"EXTENDED",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"ARRAY",
	"CUME_DIST",
	"DESCRIPTION",
	"DENSE_RANK",
	"EMPTY",
	"EXCEPT",
	"FIRST_VALUE",
	"GROUPING",
	"GROUPS",
	"JSON_TABLE",
	"LAG",
	"LAST_VALUE",
	"LATERAL",
	"LEAD",
	"MEMBER",
	"NTH_VALUE",
	"NTILE",
	"OF",
	"OVER",
	"PERCENT_RANK",
	"RANK",
	"RECURSIVE",
	"ROW_NUMBER",
	"SYSTEM",
	"WINDOW",
	"ACTIVE",
	"ADMIN",
	"BUCKETS",
	"CLONE",
	"COMPONENT",
	"DEFINITION",
	"ENFORCED",
	"EXCLUDE",
	"FOLLOWING",
	"GEOMCOLLECTION",
	"GET_MASTER_PUBLIC_KEY",
	"HISTOGRAM",
	"HISTORY",
	"INACTIVE",
	"INVISIBLE",
	"LOCKED",
	"MASTER_COMPRESSION_ALGORITHMS",
	"MASTER_PUBLIC_KEY_PATH",
	"MASTER_TLS_CIPHERSUITES",
	"MASTER_ZSTD_COMPRESSION_LEVEL",
	"NESTED",
	"NETWORK_NAMESPACE",
	"NOWAIT",
	"NULLS",
	"OJ",
	"OLD",
	"OPTIONAL",
	"ORDINALITY",
	"ORGANIZATION",
	"OTHERS",
	"PATH",
	"PERSIST",
	"PERSIST_ONLY",
	"PRECEDING",
	"PRIVILEGE_CHECKS_USER",
	"PROCESS",
	"RANDOM",
	"REFERENCE",
	"REQUIRE_ROW_FORMAT",
	"RESOURCE",
	"RESPECT",
	"RESTART",
	"RETAIN",
	"REUSE",
	"ROLE",
	"SECONDARY",
	"SECONDARY_ENGINE",
	"SECONDARY_LOAD",
	"SECONDARY_UNLOAD",
	"SKIP",
	"SRID",
	"THREAD_PRIORITY",
	"TIES",
	"UNBOUNDED",
	"VCPU",
	"VISIBLE",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 32,
	-2, 4,
	-1, 37,
	33, 299,
	127, 299,
	139, 299,
	164, 313,
	165, 313,
	-2, 301,
	-1, 61,
	37, 337,
	-2, 347,
	-1, 317,
	37, 338,
	-2, 352,
	-1, 318,
	37, 339,
	-2, 353,
	-1, 331,
	115, 664,
	-2, 660,
	-1, 332,
	115, 665,
	-2, 661,
	-1, 401,
	85, 915,
	-2, 66,
	-1, 402,
	85, 832,
	-2, 67,
	-1, 407,
	85, 800,
	-2, 626,
	-1, 409,
	85, 863,
	-2, 628,
	-1, 712,
	1, 373,
	5, 373,
	12, 373,
	13, 373,
	14, 373,
	15, 373,
	17, 373,
	19, 373,
	30, 373,
	31, 373,
	43, 373,
	44, 373,
	45, 373,
	46, 373,
	47, 373,
	49, 373,
	50, 373,
	53, 373,
	54, 373,
	56, 373,
	57, 373,
	352, 373,
	-2, 391,
	-1, 715,
	54, 47,
	56, 47,
	-2, 51,
	-1, 869,
	115, 667,
	-2, 663,
	-1, 1102,
	5, 33,
	-2, 459,
	-1, 1133,
	5, 32,
	-2, 600,
	-1, 1381,
	5, 33,
	-2, 601,
	-1, 1435,
	5, 32,
	-2, 603,
	-1, 1512,
	5, 33,
	-2, 604,
}

const yyPrivate = 57344

const yyLast = 16301

var yyAct = [...]int{

	331, 1536, 1342, 1546, 1414, 1502, 985, 336, 1136, 1401,
	1154, 1448, 1230, 981, 1282, 667, 958, 349, 362, 1137,
	1279, 1316, 1283, 994, 1028, 57, 306, 894, 1181, 984,
	1289, 1207, 80, 1160, 561, 1295, 270, 1254, 290, 270,
	833, 1094, 901, 956, 1198, 814, 406, 856, 998, 728,
	945, 960, 924, 871, 596, 602, 1024, 666, 3, 530,
	727, 400, 708, 392, 334, 395, 619, 270, 80, 938,
	397, 531, 270, 717, 270, 56, 904, 319, 1539, 1523,
	297, 681, 1534, 550, 1510, 1531, 1343, 61, 1522, 1509,
	1271, 1373, 1047, 709, 682, 535, 266, 262, 263, 264,
	1311, 1312, 82, 83, 84, 1310, 1046, 976, 977, 305,
	975, 323, 1014, 63, 64, 65, 66, 67, 729, 303,
	730, 302, 1189, 590, 570, 298, 299, 300, 301, 258,
	338, 304, 256, 1007, 260, 82, 83, 84, 1169, 1232,
	1404, 1168, 1015, 1364, 1170, 1362, 1045, 1476, 632, 631,
	641, 642, 634, 635, 636, 637, 638, 639, 640, 633,
	296, 374, 643, 380, 381, 378, 379, 377, 376, 375,
	567, 803, 569, 578, 579, 585, 588, 382, 383, 586,
	583, 584, 589, 82, 83, 84, 802, 1234, 800, 1533,
	1530, 1503, 1233, 1229, 939, 1495, 1042, 1039, 1040, 999,
	1038, 82, 83, 84, 566, 568, 1554, 575, 1001, 551,
	1449, 537, 804, 260, 1235, 714, 1001, 265, 1155, 1157,
	1457, 1255, 801, 1550, 807, 1451, 791, 1305, 259, 1304,
	1001, 1303, 533, 1049, 1052, 540, 1484, 273, 82, 83,
	84, 261, 1059, 329, 1384, 1058, 82, 83, 84, 1240,
	257, 268, 655, 656, 274, 1165, 1121, 270, 542, 543,
	1257, 277, 270, 1088, 552, 844, 723, 623, 270, 284,
	1044, 982, 557, 643, 270, 559, 1111, 971, 565, 80,
	1226, 841, 394, 80, 70, 80, 1228, 532, 838, 534,
	564, 80, 1043, 1450, 1259, 618, 1263, 1156, 1258, 563,
	1256, 574, 834, 282, 1508, 1261, 1493, 1000, 1108, 289,
	1466, 828, 1217, 576, 1260, 1000, 925, 1293, 1015, 1477,
	997, 995, 71, 996, 1458, 1456, 80, 1262, 1264, 1000,
	993, 999, 1048, 1008, 1548, 604, 275, 1549, 633, 1547,
	1273, 643, 1213, 1214, 1215, 731, 536, 1050, 553, 554,
	555, 632, 631, 641, 642, 634, 635, 636, 637, 638,
	639, 640, 633, 286, 278, 643, 287, 288, 294, 605,
	793, 547, 279, 281, 291, 1187, 276, 293, 292, 1555,
	562, 655, 656, 592, 593, 1227, 835, 1225, 616, 1498,
	270, 270, 270, 613, 609, 829, 82, 83, 84, 80,
	606, 595, 1514, 595, 618, 80, 1095, 577, 925, 580,
	1118, 1216, 1410, 655, 656, 591, 1221, 1218, 1209, 1219,
	1212, 1556, 1208, 538, 539, 1516, 1210, 1211, 82, 83,
	84, 529, 1409, 1004, 707, 1202, 544, 1201, 545, 1005,
	1220, 546, 632, 631, 641, 642, 634, 635, 636, 637,
	638, 639, 640, 633, 1190, 716, 643, 684, 686, 688,
	690, 692, 694, 695, 653, 847, 848, 721, 1494, 725,
	685, 687, 541, 691, 693, 54, 696, 549, 1085, 1086,
	1087, 1329, 627, 556, 630, 1429, 1407, 874, 1199, 558,
	644, 645, 646, 647, 648, 649, 650, 255, 628, 629,
	626, 632, 631, 641, 642, 634, 635, 636, 637, 638,
	639, 640, 633, 1069, 719, 643, 617, 616, 819, 617,
	616, 712, 634, 635, 636, 637, 638, 639, 640, 633,
	270, 878, 643, 618, 789, 80, 618, 792, 1463, 794,
	270, 270, 80, 80, 80, 876, 877, 875, 270, 1107,
	1462, 270, 22, 843, 270, 812, 813, 720, 270, 722,
	80, 1280, 389, 390, 1292, 80, 80, 80, 270, 80,
	80, 1454, 1532, 636, 637, 638, 639, 640, 633, 80,
	80, 643, 1325, 657, 658, 659, 660, 661, 662, 663,
	664, 842, 1376, 1518, 595, 818, 82, 83, 84, 617,
	616, 1002, 617, 616, 816, 706, 1275, 715, 80, 1292,
	617, 616, 310, 572, 808, 270, 618, 1454, 1506, 618,
	1379, 80, 58, 861, 863, 864, 1106, 618, 1105, 862,
	906, 849, 632, 631, 641, 642, 634, 635, 636, 637,
	638, 639, 640, 633, 895, 872, 643, 617, 616, 1465,
	82, 83, 84, 897, 896, 942, 82, 83, 84, 790,
	1172, 1454, 595, 1083, 618, 80, 797, 798, 799, 867,
	869, 1454, 1485, 1454, 1453, 1399, 1398, 1386, 595, 1383,
	595, 403, 913, 916, 817, 855, 54, 865, 926, 821,
	822, 823, 1333, 825, 826, 1335, 1334, 1161, 80, 80,
	1331, 1332, 1173, 830, 831, 974, 270, 1331, 1330, 1084,
	332, 1083, 595, 1124, 270, 270, 942, 595, 270, 270,
	898, 899, 270, 270, 270, 80, 1123, 908, 641, 642,
	634, 635, 636, 637, 638, 639, 640, 633, 80, 531,
	643, 942, 81, 934, 935, 739, 271, 909, 910, 271,
	1161, 915, 918, 919, 1083, 795, 796, 873, 906, 595,
	24, 966, 965, 805, 718, 968, 394, 738, 737, 811,
	816, 1083, 718, 941, 724, 1375, 933, 271, 81, 936,
	937, 845, 271, 824, 271, 964, 972, 973, 969, 1434,
	806, 1524, 270, 80, 1292, 80, 24, 1051, 989, 942,
	1416, 270, 270, 270, 270, 270, 719, 270, 270, 54,
	24, 270, 80, 1030, 1009, 632, 631, 641, 642, 634,
	635, 636, 637, 638, 639, 640, 633, 1391, 270, 643,
	857, 1029, 1321, 270, 1131, 270, 270, 1176, 312, 1132,
	270, 1025, 1026, 1027, 712, 54, 1296, 1297, 712, 720,
	1231, 718, 712, 352, 351, 354, 355, 356, 357, 54,
	1020, 1019, 353, 358, 1417, 1016, 1017, 1018, 1066, 870,
	1032, 1541, 879, 880, 881, 882, 883, 884, 885, 886,
	887, 888, 889, 890, 891, 892, 893, 54, 1537, 1323,
	1074, 869, 1299, 1280, 872, 1203, 947, 950, 951, 952,
	948, 1075, 949, 953, 1076, 631, 641, 642, 634, 635,
	636, 637, 638, 639, 640, 633, 839, 1034, 643, 1036,
	810, 940, 1302, 1148, 1301, 1146, 1145, 930, 1149, 1090,
	1147, 1144, 607, 1528, 967, 1150, 1063, 951, 952, 1521,
	1239, 1071, 1194, 270, 270, 270, 270, 270, 1526, 1138,
	947, 950, 951, 952, 948, 270, 949, 953, 270, 1081,
	1296, 1297, 270, 1080, 921, 736, 270, 271, 560, 597,
	1186, 1377, 271, 1500, 1499, 1432, 1117, 922, 271, 1099,
	1100, 598, 1184, 1171, 271, 80, 1178, 1412, 1035, 81,
	320, 1174, 955, 81, 1177, 81, 1133, 1115, 1182, 1182,
	1163, 81, 1164, 321, 1151, 1139, 873, 1033, 1142, 1162,
	611, 612, 403, 1159, 809, 908, 1053, 1054, 1055, 1056,
	1057, 307, 1060, 1061, 1166, 1420, 1062, 1183, 1193, 320,
	1195, 1196, 1197, 80, 80, 308, 81, 1140, 1141, 1079,
	1143, 320, 321, 1064, 58, 1179, 1180, 1078, 1065, 611,
	612, 1419, 610, 1353, 321, 1070, 313, 314, 1161, 587,
	1112, 317, 318, 80, 1109, 1200, 1543, 1542, 62, 832,
	614, 1222, 1543, 712, 712, 712, 712, 712, 270, 1481,
	1405, 1010, 1011, 1012, 1013, 270, 840, 60, 712, 80,
	55, 1, 1535, 1344, 1413, 1041, 712, 1021, 1022, 1023,
	271, 271, 271, 1501, 1447, 1237, 1238, 895, 1315, 81,
	992, 983, 69, 528, 68, 81, 1242, 1492, 1206, 827,
	1091, 1092, 1093, 1191, 1192, 929, 573, 991, 1244, 990,
	1455, 1243, 1247, 1248, 1265, 80, 80, 1403, 1003, 1138,
	1281, 1272, 1188, 1006, 1322, 1266, 1185, 1497, 744, 742,
	743, 1284, 741, 746, 745, 740, 283, 398, 1205, 80,
	954, 732, 1031, 615, 72, 1224, 1223, 1074, 869, 1037,
	1291, 837, 280, 581, 80, 582, 80, 80, 1300, 285,
	1182, 1182, 1314, 651, 1077, 1167, 1307, 1236, 404, 1306,
	1287, 846, 1286, 601, 1418, 1328, 1309, 363, 51, 1352,
	1116, 1318, 678, 1313, 270, 1326, 1327, 923, 1319, 1320,
	337, 860, 350, 347, 348, 712, 851, 1130, 625, 335,
	327, 711, 704, 946, 270, 944, 943, 393, 1298, 1294,
	80, 710, 1345, 80, 80, 80, 270, 868, 1082, 316,
	271, 80, 1372, 1475, 315, 81, 608, 920, 26, 51,
	271, 271, 81, 81, 81, 59, 322, 311, 271, 19,
	18, 271, 17, 20, 271, 16, 15, 14, 271, 548,
	81, 30, 1350, 1351, 21, 81, 81, 81, 271, 81,
	81, 13, 12, 11, 1360, 10, 9, 8, 1337, 81,
	81, 7, 6, 1241, 5, 4, 309, 23, 2, 0,
	1138, 0, 1378, 1338, 0, 1340, 0, 0, 0, 0,
	0, 0, 1388, 0, 80, 0, 0, 1387, 81, 0,
	1174, 0, 80, 0, 0, 271, 0, 0, 0, 0,
	0, 81, 0, 0, 1397, 0, 0, 80, 403, 1250,
	1251, 0, 0, 0, 80, 0, 0, 0, 0, 0,
	0, 986, 1267, 1268, 0, 1269, 1270, 0, 0, 1422,
	0, 0, 0, 0, 0, 0, 0, 1277, 1278, 0,
	0, 0, 0, 0, 0, 81, 0, 0, 0, 0,
	0, 0, 0, 0, 80, 80, 0, 80, 0, 0,
	0, 0, 80, 0, 80, 80, 80, 270, 1284, 1428,
	80, 1441, 1433, 1442, 1444, 1445, 0, 0, 81, 81,
	0, 0, 0, 1446, 1440, 0, 271, 80, 270, 1336,
	1460, 1452, 1461, 1459, 271, 271, 1467, 0, 271, 271,
	1324, 594, 271, 271, 271, 81, 1470, 0, 0, 1339,
	1435, 0, 0, 1406, 0, 1408, 0, 0, 81, 1482,
	1491, 1349, 0, 1284, 0, 80, 0, 1489, 868, 1490,
	0, 1411, 0, 0, 0, 0, 80, 80, 0, 0,
	1504, 1421, 0, 1505, 0, 0, 571, 0, 0, 0,
	571, 0, 571, 0, 0, 80, 0, 0, 571, 1138,
	1511, 0, 0, 1355, 1483, 0, 270, 0, 0, 0,
	0, 325, 271, 81, 80, 81, 0, 0, 0, 51,
	0, 271, 271, 271, 271, 271, 0, 271, 271, 1520,
	0, 271, 81, 1527, 1525, 80, 0, 0, 652, 0,
	0, 654, 0, 0, 1529, 0, 0, 1540, 271, 0,
	0, 0, 0, 271, 1370, 271, 271, 1551, 0, 0,
	271, 0, 0, 0, 0, 0, 0, 0, 0, 665,
	0, 669, 670, 671, 672, 673, 674, 675, 676, 677,
	0, 680, 683, 683, 683, 689, 683, 683, 689, 683,
	697, 698, 699, 700, 701, 702, 703, 0, 713, 1357,
	1358, 0, 1359, 0, 0, 1361, 0, 1363, 986, 0,
	0, 0, 0, 0, 0, 0, 1369, 0, 0, 0,
	0, 1423, 1424, 1425, 1426, 1427, 0, 0, 0, 1430,
	1431, 632, 631, 641, 642, 634, 635, 636, 637, 638,
	639, 640, 633, 1468, 0, 643, 0, 0, 0, 0,
	0, 0, 1368, 0, 0, 0, 0, 0, 0, 0,
	361, 1400, 0, 271, 271, 271, 271, 271, 0, 0,
	0, 0, 0, 0, 0, 271, 0, 0, 271, 0,
	0, 0, 271, 0, 0, 0, 271, 0, 0, 0,
	0, 0, 79, 632, 631, 641, 642, 634, 635, 636,
	637, 638, 639, 640, 633, 81, 0, 643, 0, 0,
	0, 0, 1246, 0, 0, 0, 0, 0, 0, 0,
	0, 1515, 0, 0, 0, 0, 0, 0, 405, 632,
	631, 641, 642, 634, 635, 636, 637, 638, 639, 640,
	633, 850, 571, 643, 1367, 1276, 0, 0, 0, 571,
	571, 571, 0, 81, 81, 632, 631, 641, 642, 634,
	635, 636, 637, 638, 639, 640, 633, 571, 0, 643,
	0, 0, 571, 571, 571, 0, 571, 571, 0, 0,
	0, 0, 0, 81, 0, 0, 571, 571, 0, 0,
	0, 0, 1544, 0, 0, 0, 0, 986, 271, 986,
	0, 0, 905, 907, 0, 271, 0, 0, 0, 81,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 599,
	603, 632, 631, 641, 642, 634, 635, 636, 637, 638,
	639, 640, 633, 0, 0, 643, 0, 0, 0, 0,
	624, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 81, 81, 0, 0, 0,
	0, 0, 51, 0, 1246, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 668, 0, 669, 1249, 81,
	0, 0, 0, 0, 679, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 81, 0, 81, 81, 632, 631,
	641, 642, 634, 635, 636, 637, 638, 639, 640, 633,
	0, 0, 643, 0, 0, 0, 0, 0, 0, 0,
	0, 957, 0, 0, 271, 713, 0, 0, 0, 713,
	0, 0, 0, 0, 0, 0, 0, 986, 0, 405,
	0, 0, 0, 405, 271, 405, 0, 0, 1096, 0,
	81, 405, 0, 81, 81, 81, 271, 0, 0, 0,
	0, 81, 0, 0, 0, 0, 0, 1415, 632, 631,
	641, 642, 634, 635, 636, 637, 638, 639, 640, 633,
	0, 0, 643, 0, 0, 0, 621, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	571, 0, 571, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 571,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1097, 81, 0, 0, 1098, 0, 0,
	0, 0, 81, 0, 1102, 1103, 1104, 0, 0, 0,
	0, 1110, 0, 0, 1113, 1114, 0, 81, 0, 405,
	0, 0, 1120, 0, 81, 733, 1122, 0, 0, 1125,
	1126, 1127, 1128, 1129, 0, 820, 1089, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1415,
	986, 0, 1153, 0, 0, 0, 0, 0, 0, 836,
	0, 0, 0, 0, 81, 81, 0, 81, 0, 0,
	0, 0, 81, 0, 81, 81, 81, 271, 0, 0,
	81, 0, 0, 0, 0, 0, 0, 0, 858, 859,
	0, 0, 0, 0, 0, 0, 0, 81, 271, 0,
	0, 0, 0, 0, 0, 0, 1134, 1135, 0, 0,
	713, 713, 713, 713, 713, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 957, 0, 1158, 0, 0,
	0, 0, 0, 713, 0, 81, 0, 0, 0, 0,
	0, 668, 0, 0, 911, 912, 81, 81, 0, 0,
	0, 0, 0, 0, 0, 405, 0, 0, 0, 0,
	0, 0, 405, 405, 405, 81, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 271, 0, 0, 0,
	405, 0, 0, 0, 81, 405, 405, 405, 0, 405,
	405, 0, 0, 0, 0, 1252, 1253, 0, 0, 405,
	405, 571, 0, 980, 0, 81, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 852, 0,
	571, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 621, 0, 0, 405, 0, 0, 0, 0, 0,
	0, 0, 713, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 900, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1285, 927, 51, 0, 24, 25, 52, 27, 28, 0,
	0, 0, 0, 0, 1072, 1073, 0, 603, 931, 932,
	0, 0, 0, 43, 0, 0, 0, 0, 29, 48,
	49, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1354, 0, 405, 0, 0, 0, 38,
	1356, 0, 0, 54, 0, 0, 0, 0, 405, 0,
	0, 1365, 1366, 0, 0, 0, 0, 0, 0, 0,
	600, 0, 0, 0, 0, 0, 0, 0, 1101, 0,
	0, 1380, 1381, 1382, 0, 1385, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1119, 0, 0,
	0, 0, 1396, 0, 0, 0, 269, 0, 0, 295,
	0, 0, 0, 405, 0, 405, 31, 32, 34, 33,
	36, 0, 50, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 405, 0, 326, 0, 0, 396, 0, 1371,
	0, 0, 269, 0, 269, 37, 44, 45, 0, 0,
	46, 47, 35, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 405, 39, 40, 0, 41,
	42, 1393, 1394, 1395, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1443,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 571, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1471,
	1472, 1473, 1474, 0, 1478, 0, 1479, 1480, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1486, 0,
	1487, 1488, 0, 0, 0, 0, 0, 1285, 0, 0,
	1436, 0, 53, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 927, 0, 0, 0, 0, 0, 0, 0,
	0, 1507, 0, 0, 0, 0, 0, 0, 0, 1512,
	1464, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1274, 0, 0, 0, 0, 0, 0, 1517, 0, 0,
	0, 0, 1285, 0, 51, 405, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 269, 0, 0,
	0, 0, 269, 1308, 0, 0, 0, 0, 269, 0,
	1552, 1553, 0, 0, 269, 0, 0, 0, 0, 0,
	0, 0, 0, 1204, 405, 761, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 405, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1538, 0, 0, 0, 0, 0, 0, 0, 405,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 749, 0, 0, 0,
	0, 0, 405, 0, 0, 0, 0, 1374, 0, 0,
	0, 0, 927, 0, 0, 1288, 1290, 668, 0, 0,
	269, 269, 269, 0, 0, 1389, 0, 0, 1390, 0,
	0, 1392, 0, 0, 0, 762, 0, 0, 0, 1290,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 405, 0, 405, 1317, 775, 778,
	779, 780, 781, 782, 783, 0, 784, 785, 786, 787,
	788, 763, 764, 765, 766, 747, 748, 776, 0, 750,
	0, 751, 752, 753, 754, 755, 756, 757, 758, 759,
	760, 767, 768, 769, 770, 771, 772, 773, 774, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1341, 0, 0, 1346, 1347, 1348, 0, 0, 0, 0,
	0, 405, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	777, 1469, 668, 0, 0, 0, 0, 0, 0, 0,
	269, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	269, 269, 0, 927, 0, 0, 0, 0, 269, 0,
	0, 269, 0, 0, 269, 0, 0, 0, 815, 0,
	0, 0, 0, 0, 405, 0, 0, 0, 269, 0,
	0, 0, 1402, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 405, 0, 0,
	0, 0, 0, 0, 405, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 326,
	0, 0, 0, 0, 0, 269, 0, 0, 0, 0,
	0, 0, 0, 0, 815, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1437, 1438, 0, 1439, 0, 0,
	0, 0, 1402, 0, 1402, 1402, 1402, 0, 0, 0,
	1317, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 326, 1402, 0, 0,
	0, 326, 326, 0, 0, 326, 326, 326, 0, 0,
	0, 928, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	326, 326, 326, 326, 326, 1496, 269, 0, 0, 0,
	0, 0, 0, 0, 269, 962, 405, 405, 269, 269,
	0, 0, 269, 970, 815, 0, 0, 0, 0, 0,
	0, 0, 927, 0, 0, 1513, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1519, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1402, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 269, 0, 0, 0, 0, 0, 0, 0,
	0, 269, 269, 269, 269, 269, 0, 269, 269, 0,
	0, 269, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 269, 0,
	0, 0, 0, 269, 0, 1067, 1068, 0, 0, 0,
	269, 0, 0, 0, 0, 815, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 326, 326, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 326, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 928, 269, 269, 269, 269, 269, 0, 0,
	0, 0, 0, 0, 0, 1152, 0, 0, 269, 0,
	0, 0, 962, 0, 0, 0, 269, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 269, 0,
	0, 0, 0, 0, 326, 269, 0, 0, 0, 0,
	326, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 815, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 928, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 269, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 269, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 269, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 928, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 515, 503, 0, 460, 518, 433, 450, 526,
	451, 454, 491, 418, 473, 170, 448, 962, 437, 413,
	444, 414, 435, 462, 114, 466, 432, 505, 476, 517,
	142, 438, 524, 144, 482, 0, 216, 158, 269, 0,
	464, 507, 471, 500, 459, 492, 423, 481, 519, 449,
	489, 520, 0, 0, 0, 82, 83, 84, 0, 987,
	988, 0, 0, 0, 0, 0, 104, 0, 486, 514,
	446, 488, 490, 412, 483, 0, 416, 419, 525, 510,
	441, 442, 1175, 0, 0, 0, 0, 0, 0, 463,
	472, 497, 457, 0, 0, 0, 0, 0, 0, 0,
	0, 439, 928, 480, 0, 0, 0, 420, 417, 0,
	0, 461, 0, 0, 0, 422, 269, 440, 498, 0,
	410, 123, 502, 509, 458, 272, 513, 456, 455, 516,
	189, 0, 220, 126, 141, 100, 138, 86, 96, 0,
	125, 167, 196, 200, 506, 436, 445, 108, 443, 198,
	177, 236, 479, 179, 197, 145, 226, 190, 235, 245,
	246, 223, 243, 250, 213, 89, 222, 234, 105, 208,
	91, 232, 219, 156, 135, 136, 90, 0, 194, 113,
	121, 110, 169, 229, 230, 109, 253, 97, 242, 93,
	98, 241, 163, 225, 233, 157, 150, 92, 231, 155,
	149, 140, 117, 128, 187, 147, 188, 129, 160, 159,
	161, 0, 415, 0, 217, 239, 254, 102, 431, 224,
	248, 249, 0, 0, 103, 122, 116, 186, 120, 162,
	99, 131, 214, 139, 146, 193, 252, 176, 199, 106,
	238, 215, 427, 430, 425, 426, 474, 475, 521, 522,
	523, 499, 421, 0, 428, 429, 0, 504, 511, 512,
	478, 85, 94, 143, 251, 191, 119, 240, 411, 424,
	112, 434, 0, 0, 447, 452, 453, 465, 467, 468,
	469, 470, 477, 484, 485, 487, 493, 494, 495, 496,
	501, 508, 527, 87, 88, 95, 101, 107, 111, 115,
	118, 124, 127, 130, 132, 133, 134, 137, 148, 151,
	152, 153, 154, 164, 165, 166, 168, 171, 172, 173,
	174, 175, 178, 180, 181, 182, 183, 184, 185, 192,
	195, 201, 202, 203, 204, 205, 206, 207, 209, 210,
	211, 212, 218, 221, 227, 228, 237, 244, 247, 515,
	503, 0, 460, 518, 433, 450, 526, 451, 454, 491,
	418, 473, 170, 448, 0, 437, 413, 444, 414, 435,
	462, 114, 466, 432, 505, 476, 517, 142, 438, 524,
	144, 482, 0, 216, 158, 0, 0, 464, 507, 471,
	500, 459, 492, 423, 481, 519, 449, 489, 520, 0,
	0, 0, 82, 83, 84, 0, 987, 988, 0, 0,
	0, 0, 0, 104, 0, 486, 514, 446, 488, 490,
	412, 483, 0, 416, 419, 525, 510, 441, 442, 0,
	0, 0, 0, 0, 0, 0, 463, 472, 497, 457,
	0, 0, 0, 0, 0, 0, 0, 0, 439, 0,
	480, 0, 0, 0, 420, 417, 0, 0, 461, 0,
	0, 0, 422, 0, 440, 498, 0, 410, 123, 502,
	509, 458, 272, 513, 456, 455, 516, 189, 0, 220,
	126, 141, 100, 138, 86, 96, 0, 125, 167, 196,
	200, 506, 436, 445, 108, 443, 198, 177, 236, 479,
	179, 197, 145, 226, 190, 235, 245, 246, 223, 243,
	250, 213, 89, 222, 234, 105, 208, 91, 232, 219,
	156, 135, 136, 90, 0, 194, 113, 121, 110, 169,
	229, 230, 109, 253, 97, 242, 93, 98, 241, 163,
	225, 233, 157, 150, 92, 231, 155, 149, 140, 117,
	128, 187, 147, 188, 129, 160, 159, 161, 0, 415,
	0, 217, 239, 254, 102, 431, 224, 248, 249, 0,
	0, 103, 122, 116, 186, 120, 162, 99, 131, 214,
	139, 146, 193, 252, 176, 199, 106, 238, 215, 427,
	430, 425, 426, 474, 475, 521, 522, 523, 499, 421,
	0, 428, 429, 0, 504, 511, 512, 478, 85, 94,
	143, 251, 191, 119, 240, 411, 424, 112, 434, 0,
	0, 447, 452, 453, 465, 467, 468, 469, 470, 477,
	484, 485, 487, 493, 494, 495, 496, 501, 508, 527,
	87, 88, 95, 101, 107, 111, 115, 118, 124, 127,
	130, 132, 133, 134, 137, 148, 151, 152, 153, 154,
	164, 165, 166, 168, 171, 172, 173, 174, 175, 178,
	180, 181, 182, 183, 184, 185, 192, 195, 201, 202,
	203, 204, 205, 206, 207, 209, 210, 211, 212, 218,
	221, 227, 228, 237, 244, 247, 515, 503, 0, 460,
	518, 433, 450, 526, 451, 454, 491, 418, 473, 170,
	448, 0, 437, 413, 444, 414, 435, 462, 114, 466,
	432, 505, 476, 517, 142, 438, 524, 144, 482, 0,
	216, 158, 0, 0, 464, 507, 471, 500, 459, 492,
	423, 481, 519, 449, 489, 520, 54, 0, 0, 82,
	83, 84, 0, 0, 0, 0, 0, 0, 0, 0,
	104, 0, 486, 514, 446, 488, 490, 412, 483, 0,
	416, 419, 525, 510, 441, 442, 0, 0, 0, 0,
	0, 0, 0, 463, 472, 497, 457, 0, 0, 0,
	0, 0, 0, 0, 0, 439, 0, 480, 0, 0,
	0, 420, 417, 0, 0, 461, 0, 0, 0, 422,
	0, 440, 498, 0, 410, 123, 502, 509, 458, 272,
	513, 456, 455, 516, 189, 0, 220, 126, 141, 100,
	138, 86, 96, 0, 125, 167, 196, 200, 506, 436,
	445, 108, 443, 198, 177, 236, 479, 179, 197, 145,
	226, 190, 235, 245, 246, 223, 243, 250, 213, 89,
	222, 234, 105, 208, 91, 232, 219, 156, 135, 136,
	90, 0, 194, 113, 121, 110, 169, 229, 230, 109,
	253, 97, 242, 93, 98, 241, 163, 225, 233, 157,
	150, 92, 231, 155, 149, 140, 117, 128, 187, 147,
	188, 129, 160, 159, 161, 0, 415, 0, 217, 239,
	254, 102, 431, 224, 248, 249, 0, 0, 103, 122,
	116, 186, 120, 162, 99, 131, 214, 139, 146, 193,
	252, 176, 199, 106, 238, 215, 427, 430, 425, 426,
	474, 475, 521, 522, 523, 499, 421, 0, 428, 429,
	0, 504, 511, 512, 478, 85, 94, 143, 251, 191,
	119, 240, 411, 424, 112, 434, 0, 0, 447, 452,
	453, 465, 467, 468, 469, 470, 477, 484, 485, 487,
	493, 494, 495, 496, 501, 508, 527, 87, 88, 95,
	101, 107, 111, 115, 118, 124, 127, 130, 132, 133,
	134, 137, 148, 151, 152, 153, 154, 164, 165, 166,
	168, 171, 172, 173, 174, 175, 178, 180, 181, 182,
	183, 184, 185, 192, 195, 201, 202, 203, 204, 205,
	206, 207, 209, 210, 211, 212, 218, 221, 227, 228,
	237, 244, 247, 515, 503, 0, 460, 518, 433, 450,
	526, 451, 454, 491, 418, 473, 170, 448, 0, 437,
	413, 444, 414, 435, 462, 114, 466, 432, 505, 476,
	517, 142, 438, 524, 144, 482, 0, 216, 158, 0,
	0, 464, 507, 471, 500, 459, 492, 423, 481, 519,
	449, 489, 520, 0, 0, 0, 82, 83, 84, 0,
	0, 0, 0, 0, 0, 0, 0, 104, 0, 486,
	514, 446, 488, 490, 412, 483, 0, 416, 419, 525,
	510, 441, 442, 0, 0, 0, 0, 0, 0, 0,
	463, 472, 497, 457, 0, 0, 0, 0, 0, 0,
	1245, 0, 439, 0, 480, 0, 0, 0, 420, 417,
	0, 0, 461, 0, 0, 0, 422, 0, 440, 498,
	0, 410, 123, 502, 509, 458, 272, 513, 456, 455,
	516, 189, 0, 220, 126, 141, 100, 138, 86, 96,
	0, 125, 167, 196, 200, 506, 436, 445, 108, 443,
	198, 177, 236, 479, 179, 197, 145, 226, 190, 235,
	245, 246, 223, 243, 250, 213, 89, 222, 234, 105,
	208, 91, 232, 219, 156, 135, 136, 90, 0, 194,
	113, 121, 110, 169, 229, 230, 109, 253, 97, 242,
	93, 98, 241, 163, 225, 233, 157, 150, 92, 231,
	155, 149, 140, 117, 128, 187, 147, 188, 129, 160,
	159, 161, 0, 415, 0, 217, 239, 254, 102, 431,
	224, 248, 249, 0, 0, 103, 122, 116, 186, 120,
	162, 99, 131, 214, 139, 146, 193, 252, 176, 199,
	106, 238, 215, 427, 430, 425, 426, 474, 475, 521,
	522, 523, 499, 421, 0, 428, 429, 0, 504, 511,
	512, 478, 85, 94, 143, 251, 191, 119, 240, 411,
	424, 112, 434, 0, 0, 447, 452, 453, 465, 467,
	468, 469, 470, 477, 484, 485, 487, 493, 494, 495,
	496, 501, 508, 527, 87, 88, 95, 101, 107, 111,
	115, 118, 124, 127, 130, 132, 133, 134, 137, 148,
	151, 152, 153, 154, 164, 165, 166, 168, 171, 172,
	173, 174, 175, 178, 180, 181, 182, 183, 184, 185,
	192, 195, 201, 202, 203, 204, 205, 206, 207, 209,
	210, 211, 212, 218, 221, 227, 228, 237, 244, 247,
	515, 503, 0, 460, 518, 433, 450, 526, 451, 454,
	491, 418, 473, 170, 448, 0, 437, 413, 444, 414,
	435, 462, 114, 466, 432, 505, 476, 517, 142, 438,
	524, 144, 482, 0, 216, 158, 0, 0, 464, 507,
	471, 500, 459, 492, 423, 481, 519, 449, 489, 520,
	0, 0, 0, 82, 83, 84, 0, 0, 0, 0,
	0, 0, 0, 0, 104, 0, 486, 514, 446, 488,
	490, 412, 483, 0, 416, 419, 525, 510, 441, 442,
	0, 0, 0, 0, 0, 0, 0, 463, 472, 497,
	457, 0, 0, 0, 0, 0, 0, 971, 0, 439,
	0, 480, 0, 0, 0, 420, 417, 0, 0, 461,
	0, 0, 0, 422, 0, 440, 498, 0, 410, 123,
	502, 509, 458, 272, 513, 456, 455, 516, 189, 0,
	220, 126, 141, 100, 138, 86, 96, 0, 125, 167,
	196, 200, 506, 436, 445, 108, 443, 198, 177, 236,
	479, 179, 197, 145, 226, 190, 235, 245, 246, 223,
	243, 250, 213, 89, 222, 234, 105, 208, 91, 232,
	219, 156, 135, 136, 90, 0, 194, 113, 121, 110,
	169, 229, 230, 109, 253, 97, 242, 93, 98, 241,
	163, 225, 233, 157, 150, 92, 231, 155, 149, 140,
	117, 128, 187, 147, 188, 129, 160, 159, 161, 0,
	415, 0, 217, 239, 254, 102, 431, 224, 248, 249,
	0, 0, 103, 122, 116, 186, 120, 162, 99, 131,
	214, 139, 146, 193, 252, 176, 199, 106, 238, 215,
	427, 430, 425, 426, 474, 475, 521, 522, 523, 499,
	421, 0, 428, 429, 0, 504, 511, 512, 478, 85,
	94, 143, 251, 191, 119, 240, 411, 424, 112, 434,
	0, 0, 447, 452, 453, 465, 467, 468, 469, 470,
	477, 484, 485, 487, 493, 494, 495, 496, 501, 508,
	527, 87, 88, 95, 101, 107, 111, 115, 118, 124,
	127, 130, 132, 133, 134, 137, 148, 151, 152, 153,
	154, 164, 165, 166, 168, 171, 172, 173, 174, 175,
	178, 180, 181, 182, 183, 184, 185, 192, 195, 201,
	202, 203, 204, 205, 206, 207, 209, 210, 211, 212,
	218, 221, 227, 228, 237, 244, 247, 515, 503, 0,
	460, 518, 433, 450, 526, 451, 454, 491, 418, 473,
	170, 448, 0, 437, 413, 444, 414, 435, 462, 114,
	466, 432, 505, 476, 517, 142, 438, 524, 144, 482,
	0, 216, 158, 0, 0, 464, 507, 471, 500, 459,
	492, 423, 481, 519, 449, 489, 520, 0, 0, 0,
	82, 83, 84, 0, 0, 0, 0, 0, 0, 0,
	0, 104, 0, 486, 514, 446, 488, 490, 412, 483,
	0, 416, 419, 525, 510, 441, 442, 0, 0, 0,
	0, 0, 0, 0, 463, 472, 497, 457, 0, 0,
	0, 0, 0, 0, 866, 0, 439, 0, 480, 0,
	0, 0, 420, 417, 0, 0, 461, 0, 0, 0,
	422, 0, 440, 498, 0, 410, 123, 502, 509, 458,
	272, 513, 456, 455, 516, 189, 0, 220, 126, 141,
	100, 138, 86, 96, 0, 125, 167, 196, 200, 506,
	436, 445, 108, 443, 198, 177, 236, 479, 179, 197,
	145, 226, 190, 235, 245, 246, 223, 243, 250, 213,
	89, 222, 234, 105, 208, 91, 232, 219, 156, 135,
	136, 90, 0, 194, 113, 121, 110, 169, 229, 230,
	109, 253, 97, 242, 93, 98, 241, 163, 225, 233,
	157, 150, 92, 231, 155, 149, 140, 117, 128, 187,
	147, 188, 129, 160, 159, 161, 0, 415, 0, 217,
	239, 254, 102, 431, 224, 248, 249, 0, 0, 103,
	122, 116, 186, 120, 162, 99, 131, 214, 139, 146,
	193, 252, 176, 199, 106, 238, 215, 427, 430, 425,
	426, 474, 475, 521, 522, 523, 499, 421, 0, 428,
	429, 0, 504, 511, 512, 478, 85, 94, 143, 251,
	191, 119, 240, 411, 424, 112, 434, 0, 0, 447,
	452, 453, 465, 467, 468, 469, 470, 477, 484, 485,
	487, 493, 494, 495, 496, 501, 508, 527, 87, 88,
	95, 101, 107, 111, 115, 118, 124, 127, 130, 132,
	133, 134, 137, 148, 151, 152, 153, 154, 164, 165,
	166, 168, 171, 172, 173, 174, 175, 178, 180, 181,
	182, 183, 184, 185, 192, 195, 201, 202, 203, 204,
	205, 206, 207, 209, 210, 211, 212, 218, 221, 227,
	228, 237, 244, 247, 515, 503, 0, 460, 518, 433,
	450, 526, 451, 454, 491, 418, 473, 170, 448, 0,
	437, 413, 444, 414, 435, 462, 114, 466, 432, 505,
	476, 517, 142, 438, 524, 144, 482, 0, 216, 158,
	0, 0, 464, 507, 471, 500, 459, 492, 423, 481,
	519, 449, 489, 520, 0, 0, 0, 82, 83, 84,
	0, 0, 0, 0, 0, 0, 0, 0, 104, 0,
	486, 514, 446, 488, 490, 412, 483, 0, 416, 419,
	525, 510, 441, 442, 0, 0, 0, 0, 0, 0,
	0, 463, 472, 497, 457, 0, 0, 0, 0, 0,
	0, 0, 0, 439, 0, 480, 0, 0, 0, 420,
	417, 0, 0, 461, 0, 0, 0, 422, 0, 440,
	498, 0, 410, 123, 502, 509, 458, 272, 513, 456,
	455, 516, 189, 0, 220, 126, 141, 100, 138, 86,
	96, 0, 125, 167, 196, 200, 506, 436, 445, 108,
	443, 198, 177, 236, 479, 179, 197, 145, 226, 190,
	235, 245, 246, 223, 243, 250, 213, 89, 222, 234,
	105, 208, 91, 232, 219, 156, 135, 136, 90, 0,
	194, 113, 121, 110, 169, 229, 230, 109, 253, 97,
	242, 93, 98, 241, 163, 225, 233, 157, 150, 92,
	231, 155, 149, 140, 117, 128, 187, 147, 188, 129,
	160, 159, 161, 0, 415, 0, 217, 239, 254, 102,
	431, 224, 248, 249, 0, 0, 103, 122, 116, 186,
	120, 162, 99, 131, 214, 139, 146, 193, 252, 176,
	199, 106, 238, 215, 427, 430, 425, 426, 474, 475,
	521, 522, 523, 499, 421, 0, 428, 429, 0, 504,
	511, 512, 478, 85, 94, 143, 251, 191, 119, 240,
	411, 424, 112, 434, 0, 0, 447, 452, 453, 465,
	467, 468, 469, 470, 477, 484, 485, 487, 493, 494,
	495, 496, 501, 508, 527, 87, 88, 95, 101, 107,
	111, 115, 118, 124, 127, 130, 132, 133, 134, 137,
	148, 151, 152, 153, 154, 164, 165, 166, 168, 171,
	172, 173, 174, 175, 178, 180, 181, 182, 183, 184,
	185, 192, 195, 201, 202, 203, 204, 205, 206, 207,
	209, 210, 211, 212, 218, 221, 227, 228, 237, 244,
	247, 515, 503, 0, 460, 518, 433, 450, 526, 451,
	454, 491, 418, 473, 170, 448, 0, 437, 413, 444,
	414, 435, 462, 114, 466, 432, 505, 476, 517, 142,
	438, 524, 144, 482, 0, 216, 158, 0, 0, 464,
	507, 471, 500, 459, 492, 423, 481, 519, 449, 489,
	520, 0, 0, 0, 82, 83, 84, 0, 0, 0,
	0, 0, 0, 0, 0, 104, 0, 486, 514, 446,
	488, 490, 412, 483, 0, 416, 419, 525, 510, 441,
	442, 0, 0, 0, 0, 0, 0, 0, 463, 472,
	497, 457, 0, 0, 0, 0, 0, 0, 0, 0,
	439, 0, 480, 0, 0, 0, 420, 417, 0, 0,
	461, 0, 0, 0, 422, 0, 440, 498, 0, 410,
	123, 502, 509, 458, 272, 513, 456, 455, 516, 189,
	0, 220, 126, 141, 100, 138, 86, 96, 0, 125,
	167, 196, 200, 506, 436, 445, 108, 443, 198, 177,
	236, 479, 179, 197, 145, 226, 190, 235, 245, 246,
	223, 243, 250, 213, 89, 222, 234, 105, 208, 91,
	232, 219, 156, 135, 136, 90, 0, 194, 113, 121,
	110, 169, 229, 230, 109, 253, 97, 242, 93, 408,
	241, 163, 225, 233, 157, 150, 92, 231, 155, 149,
	140, 117, 128, 187, 147, 188, 129, 160, 159, 161,
	0, 415, 0, 217, 239, 254, 102, 431, 224, 248,
	249, 0, 0, 103, 122, 116, 186, 120, 409, 407,
	131, 214, 139, 146, 193, 252, 176, 199, 106, 238,
	215, 427, 430, 425, 426, 474, 475, 521, 522, 523,
	499, 421, 0, 428, 429, 0, 504, 511, 512, 478,
	85, 94, 143, 251, 191, 119, 240, 411, 424, 112,
	434, 0, 0, 447, 452, 453, 465, 467, 468, 469,
	470, 477, 484, 485, 487, 493, 494, 495, 496, 501,
	508, 527, 87, 88, 95, 101, 107, 111, 115, 118,
	124, 127, 130, 132, 133, 134, 137, 148, 151, 152,
	153, 154, 164, 165, 166, 168, 171, 172, 173, 174,
	175, 178, 180, 181, 182, 183, 184, 185, 192, 195,
	201, 202, 203, 204, 205, 206, 207, 209, 210, 211,
	212, 218, 221, 227, 228, 237, 244, 247, 515, 503,
	0, 460, 518, 433, 450, 526, 451, 454, 491, 418,
	473, 170, 448, 0, 437, 413, 444, 414, 435, 462,
	114, 466, 432, 505, 476, 517, 142, 438, 524, 144,
	482, 0, 216, 158, 0, 0, 464, 507, 471, 500,
	459, 492, 423, 481, 519, 449, 489, 520, 0, 0,
	0, 82, 83, 84, 0, 0, 0, 0, 0, 0,
	0, 0, 104, 0, 486, 514, 446, 488, 490, 412,
	483, 0, 416, 419, 525, 510, 441, 442, 0, 0,
	0, 0, 0, 0, 0, 463, 472, 497, 457, 0,
	0, 0, 0, 0, 0, 0, 0, 439, 0, 480,
	0, 0, 0, 420, 417, 0, 0, 461, 0, 0,
	0, 422, 0, 440, 498, 0, 410, 123, 502, 509,
	458, 272, 513, 456, 455, 516, 189, 0, 220, 126,
	141, 100, 138, 86, 96, 0, 125, 167, 196, 200,
	506, 436, 445, 108, 443, 198, 177, 236, 479, 179,
	197, 145, 226, 190, 235, 245, 246, 223, 243, 250,
	213, 89, 222, 726, 105, 208, 91, 232, 219, 156,
	135, 136, 90, 0, 194, 113, 121, 110, 169, 229,
	230, 109, 253, 97, 242, 93, 408, 241, 163, 225,
	233, 157, 150, 92, 231, 155, 149, 140, 117, 128,
	187, 147, 188, 129, 160, 159, 161, 0, 415, 0,
	217, 239, 254, 102, 431, 224, 248, 249, 0, 0,
	103, 122, 116, 186, 120, 409, 407, 131, 214, 139,
	146, 193, 252, 176, 199, 106, 238, 215, 427, 430,
	425, 426, 474, 475, 521, 522, 523, 499, 421, 0,
	428, 429, 0, 504, 511, 512, 478, 85, 94, 143,
	251, 191, 119, 240, 411, 424, 112, 434, 0, 0,
	447, 452, 453, 465, 467, 468, 469, 470, 477, 484,
	485, 487, 493, 494, 495, 496, 501, 508, 527, 87,
	88, 95, 101, 107, 111, 115, 118, 124, 127, 130,
	132, 133, 134, 137, 148, 151, 152, 153, 154, 164,
	165, 166, 168, 171, 172, 173, 174, 175, 178, 180,
	181, 182, 183, 184, 185, 192, 195, 201, 202, 203,
	204, 205, 206, 207, 209, 210, 211, 212, 218, 221,
	227, 228, 237, 244, 247, 515, 503, 0, 460, 518,
	433, 450, 526, 451, 454, 491, 418, 473, 170, 448,
	0, 437, 413, 444, 414, 435, 462, 114, 466, 432,
	505, 476, 517, 142, 438, 524, 144, 482, 0, 216,
	158, 0, 0, 464, 507, 471, 500, 459, 492, 423,
	481, 519, 449, 489, 520, 0, 0, 0, 82, 83,
	84, 0, 0, 0, 0, 0, 0, 0, 0, 104,
	0, 486, 514, 446, 488, 490, 412, 483, 0, 416,
	419, 525, 510, 441, 442, 0, 0, 0, 0, 0,
	0, 0, 463, 472, 497, 457, 0, 0, 0, 0,
	0, 0, 0, 0, 439, 0, 480, 0, 0, 0,
	420, 417, 0, 0, 461, 0, 0, 0, 422, 0,
	440, 498, 0, 410, 123, 502, 509, 458, 272, 513,
	456, 455, 516, 189, 0, 220, 126, 141, 100, 138,
	86, 96, 0, 125, 167, 196, 200, 506, 436, 445,
	108, 443, 198, 177, 236, 479, 179, 197, 145, 226,
	190, 235, 245, 246, 223, 243, 250, 213, 89, 222,
	399, 105, 208, 91, 232, 219, 156, 135, 136, 90,
	0, 194, 113, 121, 110, 169, 229, 230, 109, 253,
	97, 242, 93, 408, 241, 163, 225, 233, 157, 150,
	92, 231, 155, 149, 140, 117, 128, 187, 147, 188,
	129, 160, 159, 161, 0, 415, 0, 217, 239, 254,
	102, 431, 224, 248, 249, 0, 0, 103, 122, 116,
	186, 120, 409, 407, 402, 401, 139, 146, 193, 252,
	176, 199, 106, 238, 215, 427, 430, 425, 426, 474,
	475, 521, 522, 523, 499, 421, 0, 428, 429, 0,
	504, 511, 512, 478, 85, 94, 143, 251, 191, 119,
	240, 411, 424, 112, 434, 0, 0, 447, 452, 453,
	465, 467, 468, 469, 470, 477, 484, 485, 487, 493,
	494, 495, 496, 501, 508, 527, 87, 88, 95, 101,
	107, 111, 115, 118, 124, 127, 130, 132, 133, 134,
	137, 148, 151, 152, 153, 154, 164, 165, 166, 168,
	171, 172, 173, 174, 175, 178, 180, 181, 182, 183,
	184, 185, 192, 195, 201, 202, 203, 204, 205, 206,
	207, 209, 210, 211, 212, 218, 221, 227, 228, 237,
	244, 247, 170, 0, 0, 902, 0, 333, 0, 0,
	0, 114, 0, 330, 0, 0, 0, 142, 903, 373,
	144, 0, 0, 216, 158, 0, 0, 0, 0, 364,
	365, 0, 0, 0, 0, 0, 0, 0, 0, 54,
	0, 0, 82, 83, 84, 352, 351, 354, 355, 356,
	357, 0, 0, 104, 353, 358, 359, 360, 0, 0,
	0, 328, 345, 0, 372, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 342, 343, 324, 0, 0, 0,
	387, 0, 344, 0, 0, 339, 340, 341, 346, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 123, 386,
	0, 0, 272, 0, 0, 384, 0, 189, 0, 220,
	126, 141, 100, 138, 86, 96, 0, 125, 167, 196,
	200, 0, 0, 0, 108, 0, 198, 177, 236, 0,
	179, 197, 145, 226, 190, 235, 245, 246, 223, 243,
	250, 213, 89, 222, 234, 105, 208, 91, 232, 219,
	156, 135, 136, 90, 0, 194, 113, 121, 110, 169,
	229, 230, 109, 253, 97, 242, 93, 98, 241, 163,
	225, 233, 157, 150, 92, 231, 155, 149, 140, 117,
	128, 187, 147, 188, 129, 160, 159, 161, 0, 0,
	0, 217, 239, 254, 102, 0, 224, 248, 249, 0,
	0, 103, 122, 116, 186, 120, 162, 99, 131, 214,
	139, 146, 193, 252, 176, 199, 106, 238, 215, 374,
	385, 380, 381, 378, 379, 377, 376, 375, 388, 366,
	367, 368, 369, 371, 0, 382, 383, 370, 85, 94,
	143, 251, 191, 119, 240, 0, 0, 112, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	87, 88, 95, 101, 107, 111, 115, 118, 124, 127,
	130, 132, 133, 134, 137, 148, 151, 152, 153, 154,
	164, 165, 166, 168, 171, 172, 173, 174, 175, 178,
	180, 181, 182, 183, 184, 185, 192, 195, 201, 202,
	203, 204, 205, 206, 207, 209, 210, 211, 212, 218,
	221, 227, 228, 237, 244, 247, 170, 0, 0, 0,
	0, 333, 0, 0, 0, 114, 0, 330, 0, 0,
	0, 142, 0, 373, 144, 0, 0, 216, 158, 0,
	0, 0, 0, 364, 365, 0, 0, 0, 0, 0,
	0, 978, 0, 54, 0, 0, 82, 83, 84, 352,
	351, 354, 355, 356, 357, 0, 0, 104, 353, 358,
	359, 360, 979, 0, 0, 328, 345, 0, 372, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 342, 343,
	0, 0, 0, 0, 387, 0, 344, 0, 0, 339,
	340, 341, 346, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 123, 386, 0, 0, 272, 0, 0, 384,
	0, 189, 0, 220, 126, 141, 100, 138, 86, 96,
	0, 125, 167, 196, 200, 0, 0, 0, 108, 0,
	198, 177, 236, 0, 179, 197, 145, 226, 190, 235,
	245, 246, 223, 243, 250, 213, 89, 222, 234, 105,
	208, 91, 232, 219, 156, 135, 136, 90, 0, 194,
	113, 121, 110, 169, 229, 230, 109, 253, 97, 242,
	93, 98, 241, 163, 225, 233, 157, 150, 92, 231,
	155, 149, 140, 117, 128, 187, 147, 188, 129, 160,
	159, 161, 0, 0, 0, 217, 239, 254, 102, 0,
	224, 248, 249, 0, 0, 103, 122, 116, 186, 120,
	162, 99, 131, 214, 139, 146, 193, 252, 176, 199,
	106, 238, 215, 374, 385, 380, 381, 378, 379, 377,
	376, 375, 388, 366, 367, 368, 369, 371, 0, 382,
	383, 370, 85, 94, 143, 251, 191, 119, 240, 0,
	0, 112, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 87, 88, 95, 101, 107, 111,
	115, 118, 124, 127, 130, 132, 133, 134, 137, 148,
	151, 152, 153, 154, 164, 165, 166, 168, 171, 172,
	173, 174, 175, 178, 180, 181, 182, 183, 184, 185,
	192, 195, 201, 202, 203, 204, 205, 206, 207, 209,
	210, 211, 212, 218, 221, 227, 228, 237, 244, 247,
	170, 0, 0, 0, 0, 333, 0, 0, 0, 114,
	0, 330, 0, 0, 0, 142, 0, 373, 144, 0,
	0, 216, 158, 0, 0, 0, 0, 364, 365, 0,
	0, 0, 0, 0, 0, 0, 0, 54, 0, 595,
	82, 83, 84, 352, 351, 354, 355, 356, 357, 0,
	0, 104, 353, 358, 359, 360, 0, 0, 0, 328,
	345, 0, 372, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 342, 343, 0, 0, 0, 0, 387, 0,
	344, 0, 0, 339, 340, 341, 346, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 123, 386, 0, 0,
	272, 0, 0, 384, 0, 189, 0, 220, 126, 141,
	100, 138, 86, 96, 0, 125, 167, 196, 200, 0,
	0, 0, 108, 0, 198, 177, 236, 0, 179, 197,
	145, 226, 190, 235, 245, 246, 223, 243, 250, 213,
	89, 222, 234, 105, 208, 91, 232, 219, 156, 135,
	136, 90, 0, 194, 113, 121, 110, 169, 229, 230,
	109, 253, 97, 242, 93, 98, 241, 163, 225, 233,
	157, 150, 92, 231, 155, 149, 140, 117, 128, 187,
	147, 188, 129, 160, 159, 161, 0, 0, 0, 217,
	239, 254, 102, 0, 224, 248, 249, 0, 0, 103,
	122, 116, 186, 120, 162, 99, 131, 214, 139, 146,
	193, 252, 176, 199, 106, 238, 215, 374, 385, 380,
	381, 378, 379, 377, 376, 375, 388, 366, 367, 368,
	369, 371, 0, 382, 383, 370, 85, 94, 143, 251,
	191, 119, 240, 0, 0, 112, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 87, 88,
	95, 101, 107, 111, 115, 118, 124, 127, 130, 132,
	133, 134, 137, 148, 151, 152, 153, 154, 164, 165,
	166, 168, 171, 172, 173, 174, 175, 178, 180, 181,
	182, 183, 184, 185, 192, 195, 201, 202, 203, 204,
	205, 206, 207, 209, 210, 211, 212, 218, 221, 227,
	228, 237, 244, 247, 170, 0, 0, 0, 0, 333,
	0, 0, 0, 114, 0, 330, 0, 0, 0, 142,
	0, 373, 144, 0, 0, 216, 158, 0, 0, 0,
	0, 364, 365, 0, 0, 0, 0, 0, 0, 0,
	0, 54, 0, 0, 82, 83, 84, 352, 351, 354,
	355, 356, 357, 0, 0, 104, 353, 358, 359, 360,
	0, 0, 0, 328, 345, 0, 372, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 342, 343, 324, 0,
	0, 0, 387, 0, 344, 0, 0, 339, 340, 341,
	346, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	123, 386, 0, 0, 272, 0, 0, 384, 0, 189,
	0, 220, 126, 141, 100, 138, 86, 96, 0, 125,
	167, 196, 200, 0, 0, 0, 108, 0, 198, 177,
	236, 0, 179, 197, 145, 226, 190, 235, 245, 246,
	223, 243, 250, 213, 89, 222, 234, 105, 208, 91,
	232, 219, 156, 135, 136, 90, 0, 194, 113, 121,
	110, 169, 229, 230, 109, 253, 97, 242, 93, 98,
	241, 163, 225, 233, 157, 150, 92, 231, 155, 149,
	140, 117, 128, 187, 147, 188, 129, 160, 159, 161,
	0, 0, 0, 217, 239, 254, 102, 0, 224, 248,
	249, 0, 0, 103, 122, 116, 186, 120, 162, 99,
	131, 214, 139, 146, 193, 252, 176, 199, 106, 238,
	215, 374, 385, 380, 381, 378, 379, 377, 376, 375,
	388, 366, 367, 368, 369, 371, 0, 382, 383, 370,
	85, 94, 143, 251, 191, 119, 240, 0, 0, 112,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 87, 88, 95, 101, 107, 111, 115, 118,
	124, 127, 130, 132, 133, 134, 137, 148, 151, 152,
	153, 154, 164, 165, 166, 168, 171, 172, 173, 174,
	175, 178, 180, 181, 182, 183, 184, 185, 192, 195,
	201, 202, 203, 204, 205, 206, 207, 209, 210, 211,
	212, 218, 221, 227, 228, 237, 244, 247, 170, 0,
	0, 0, 0, 333, 0, 0, 0, 114, 0, 330,
	0, 0, 0, 142, 0, 373, 144, 0, 0, 216,
	158, 0, 0, 0, 0, 364, 365, 0, 0, 0,
	0, 0, 0, 0, 0, 54, 0, 0, 82, 83,
	84, 352, 917, 354, 355, 356, 357, 0, 0, 104,
	353, 358, 359, 360, 0, 0, 0, 328, 345, 0,
	372, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	342, 343, 324, 0, 0, 0, 387, 0, 344, 0,
	0, 339, 340, 341, 346, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 123, 386, 0, 0, 272, 0,
	0, 384, 0, 189, 0, 220, 126, 141, 100, 138,
	86, 96, 0, 125, 167, 196, 200, 0, 0, 0,
	108, 0, 198, 177, 236, 0, 179, 197, 145, 226,
	190, 235, 245, 246, 223, 243, 250, 213, 89, 222,
	234, 105, 208, 91, 232, 219, 156, 135, 136, 90,
	0, 194, 113, 121, 110, 169, 229, 230, 109, 253,
	97, 242, 93, 98, 241, 163, 225, 233, 157, 150,
	92, 231, 155, 149, 140, 117, 128, 187, 147, 188,
	129, 160, 159, 161, 0, 0, 0, 217, 239, 254,
	102, 0, 224, 248, 249, 0, 0, 103, 122, 116,
	186, 120, 162, 99, 131, 214, 139, 146, 193, 252,
	176, 199, 106, 238, 215, 374, 385, 380, 381, 378,
	379, 377, 376, 375, 388, 366, 367, 368, 369, 371,
	0, 382, 383, 370, 85, 94, 143, 251, 191, 119,
	240, 0, 0, 112, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 87, 88, 95, 101,
	107, 111, 115, 118, 124, 127, 130, 132, 133, 134,
	137, 148, 151, 152, 153, 154, 164, 165, 166, 168,
	171, 172, 173, 174, 175, 178, 180, 181, 182, 183,
	184, 185, 192, 195, 201, 202, 203, 204, 205, 206,
	207, 209, 210, 211, 212, 218, 221, 227, 228, 237,
	244, 247, 170, 0, 0, 0, 0, 333, 0, 0,
	0, 114, 0, 330, 0, 0, 0, 142, 0, 373,
	144, 0, 0, 216, 158, 0, 0, 0, 0, 364,
	365, 0, 0, 0, 0, 0, 0, 0, 0, 54,
	0, 0, 82, 83, 84, 352, 914, 354, 355, 356,
	357, 0, 0, 104, 353, 358, 359, 360, 0, 0,
	0, 328, 345, 0, 372, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 342, 343, 324, 0, 0, 0,
	387, 0, 344, 0, 0, 339, 340, 341, 346, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 123, 386,
	0, 0, 272, 0, 0, 384, 0, 189, 0, 220,
	126, 141, 100, 138, 86, 96, 0, 125, 167, 196,
	200, 0, 0, 0, 108, 0, 198, 177, 236, 0,
	179, 197, 145, 226, 190, 235, 245, 246, 223, 243,
	250, 213, 89, 222, 234, 105, 208, 91, 232, 219,
	156, 135, 136, 90, 0, 194, 113, 121, 110, 169,
	229, 230, 109, 253, 97, 242, 93, 98, 241, 163,
	225, 233, 157, 150, 92, 231, 155, 149, 140, 117,
	128, 187, 147, 188, 129, 160, 159, 161, 0, 0,
	0, 217, 239, 254, 102, 0, 224, 248, 249, 0,
	0, 103, 122, 116, 186, 120, 162, 99, 131, 214,
	139, 146, 193, 252, 176, 199, 106, 238, 215, 374,
	385, 380, 381, 378, 379, 377, 376, 375, 388, 366,
	367, 368, 369, 371, 0, 382, 383, 370, 85, 94,
	143, 251, 191, 119, 240, 0, 0, 112, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	87, 88, 95, 101, 107, 111, 115, 118, 124, 127,
	130, 132, 133, 134, 137, 148, 151, 152, 153, 154,
	164, 165, 166, 168, 171, 172, 173, 174, 175, 178,
	180, 181, 182, 183, 184, 185, 192, 195, 201, 202,
	203, 204, 205, 206, 207, 209, 210, 211, 212, 218,
	221, 227, 228, 237, 244, 247, 24, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 170, 0,
	0, 0, 0, 333, 0, 0, 0, 114, 0, 330,
	0, 0, 0, 142, 0, 373, 144, 0, 0, 216,
	158, 0, 0, 0, 0, 364, 365, 0, 0, 0,
	0, 0, 0, 0, 0, 54, 0, 0, 82, 83,
	84, 352, 351, 354, 355, 356, 357, 0, 0, 104,
	353, 358, 359, 360, 0, 0, 0, 328, 345, 0,
	372, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	342, 343, 0, 0, 0, 0, 387, 0, 344, 0,
	0, 339, 340, 341, 346, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 123, 386, 0, 0, 272, 0,
	0, 384, 0, 189, 0, 220, 126, 141, 100, 138,
	86, 96, 0, 125, 167, 196, 200, 0, 0, 0,
	108, 0, 198, 177, 236, 0, 179, 197, 145, 226,
	190, 235, 245, 246, 223, 243, 250, 213, 89, 222,
	234, 105, 208, 91, 232, 219, 156, 135, 136, 90,
	0, 194, 113, 121, 110, 169, 229, 230, 109, 253,
	97, 242, 93, 98, 241, 163, 225, 233, 157, 150,
	92, 231, 155, 149, 140, 117, 128, 187, 147, 188,
	129, 160, 159, 161, 0, 0, 0, 217, 239, 254,
	102, 0, 224, 248, 249, 0, 0, 103, 122, 116,
	186, 120, 162, 99, 131, 214, 139, 146, 193, 252,
	176, 199, 106, 238, 215, 374, 385, 380, 381, 378,
	379, 377, 376, 375, 388, 366, 367, 368, 369, 371,
	0, 382, 383, 370, 85, 94, 143, 251, 191, 119,
	240, 0, 0, 112, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 87, 88, 95, 101,
	107, 111, 115, 118, 124, 127, 130, 132, 133, 134,
	137, 148, 151, 152, 153, 154, 164, 165, 166, 168,
	171, 172, 173, 174, 175, 178, 180, 181, 182, 183,
	184, 185, 192, 195, 201, 202, 203, 204, 205, 206,
	207, 209, 210, 211, 212, 218, 221, 227, 228, 237,
	244, 247, 170, 0, 0, 0, 0, 333, 0, 0,
	0, 114, 0, 330, 0, 0, 0, 142, 0, 373,
	144, 0, 0, 216, 158, 0, 0, 0, 0, 364,
	365, 0, 0, 0, 0, 0, 0, 0, 0, 54,
	0, 0, 82, 83, 84, 352, 351, 354, 355, 356,
	357, 0, 0, 104, 353, 358, 359, 360, 0, 0,
	0, 328, 345, 0, 372, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 342, 343, 0, 0, 0, 0,
	387, 0, 344, 0, 0, 339, 340, 341, 346, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 123, 386,
	0, 0, 272, 0, 0, 384, 0, 189, 0, 220,
	126, 141, 100, 138, 86, 96, 0, 125, 167, 196,
	200, 0, 0, 0, 108, 0, 198, 177, 236, 0,
	179, 197, 145, 226, 190, 235, 245, 246, 223, 243,
	250, 213, 89, 222, 234, 105, 208, 91, 232, 219,
	156, 135, 136, 90, 0, 194, 113, 121, 110, 169,
	229, 230, 109, 253, 97, 242, 93, 98, 241, 163,
	225, 233, 157, 150, 92, 231, 155, 149, 140, 117,
	128, 187, 147, 188, 129, 160, 159, 161, 0, 0,
	0, 217, 239, 254, 102, 0, 224, 248, 249, 0,
	0, 103, 122, 116, 186, 120, 162, 99, 131, 214,
	139, 146, 193, 252, 176, 199, 106, 238, 215, 374,
	385, 380, 381, 378, 379, 377, 376, 375, 388, 366,
	367, 368, 369, 371, 0, 382, 383, 370, 85, 94,
	143, 251, 191, 119, 240, 0, 0, 112, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	87, 88, 95, 101, 107, 111, 115, 118, 124, 127,
	130, 132, 133, 134, 137, 148, 151, 152, 153, 154,
	164, 165, 166, 168, 171, 172, 173, 174, 175, 178,
	180, 181, 182, 183, 184, 185, 192, 195, 201, 202,
	203, 204, 205, 206, 207, 209, 210, 211, 212, 218,
	221, 227, 228, 237, 244, 247, 170, 0, 0, 0,
	0, 0, 0, 0, 0, 114, 0, 0, 0, 0,
	0, 142, 0, 373, 144, 0, 0, 216, 158, 0,
	0, 0, 0, 364, 365, 0, 0, 0, 0, 0,
	0, 0, 0, 54, 0, 0, 82, 83, 84, 352,
	351, 354, 355, 356, 357, 0, 0, 104, 353, 358,
	359, 360, 0, 0, 0, 0, 345, 0, 372, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 342, 343,
	0, 0, 0, 0, 387, 0, 344, 0, 0, 339,
	340, 341, 346, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 123, 386, 0, 0, 272, 0, 0, 384,
	0, 189, 0, 220, 126, 141, 100, 138, 86, 96,
	0, 125, 167, 196, 200, 0, 0, 0, 108, 0,
	198, 177, 236, 1545, 179, 197, 145, 226, 190, 235,
	245, 246, 223, 243, 250, 213, 89, 222, 234, 105,
	208, 91, 232, 219, 156, 135, 136, 90, 0, 194,
	113, 121, 110, 169, 229, 230, 109, 253, 97, 242,
	93, 98, 241, 163, 225, 233, 157, 150, 92, 231,
	155, 149, 140, 117, 128, 187, 147, 188, 129, 160,
	159, 161, 0, 0, 0, 217, 239, 254, 102, 0,
	224, 248, 249, 0, 0, 103, 122, 116, 186, 120,
	162, 99, 131, 214, 139, 146, 193, 252, 176, 199,
	106, 238, 215, 374, 385, 380, 381, 378, 379, 377,
	376, 375, 388, 366, 367, 368, 369, 371, 0, 382,
	383, 370, 85, 94, 143, 251, 191, 119, 240, 0,
	0, 112, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 87, 88, 95, 101, 107, 111,
	115, 118, 124, 127, 130, 132, 133, 134, 137, 148,
	151, 152, 153, 154, 164, 165, 166, 168, 171, 172,
	173, 174, 175, 178, 180, 181, 182, 183, 184, 185,
	192, 195, 201, 202, 203, 204, 205, 206, 207, 209,
	210, 211, 212, 218, 221, 227, 228, 237, 244, 247,
	170, 0, 0, 0, 0, 0, 0, 0, 0, 114,
	0, 0, 0, 0, 0, 142, 0, 373, 144, 0,
	0, 216, 158, 0, 0, 0, 0, 364, 365, 0,
	0, 0, 0, 0, 0, 0, 0, 54, 0, 595,
	82, 83, 84, 352, 351, 354, 355, 356, 357, 0,
	0, 104, 353, 358, 359, 360, 0, 0, 0, 0,
	345, 0, 372, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 342, 343, 0, 0, 0, 0, 387, 0,
	344, 0, 0, 339, 340, 341, 346, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 123, 386, 0, 0,
	272, 0, 0, 384, 0, 189, 0, 220, 126, 141,
	100, 138, 86, 96, 0, 125, 167, 196, 200, 0,
	0, 0, 108, 0, 198, 177, 236, 0, 179, 197,
	145, 226, 190, 235, 245, 246, 223, 243, 250, 213,
	89, 222, 234, 105, 208, 91, 232, 219, 156, 135,
	136, 90, 0, 194, 113, 121, 110, 169, 229, 230,
	109, 253, 97, 242, 93, 98, 241, 163, 225, 233,
	157, 150, 92, 231, 155, 149, 140, 117, 128, 187,
	147, 188, 129, 160, 159, 161, 0, 0, 0, 217,
	239, 254, 102, 0, 224, 248, 249, 0, 0, 103,
	122, 116, 186, 120, 162, 99, 131, 214, 139, 146,
	193, 252, 176, 199, 106, 238, 215, 374, 385, 380,
	381, 378, 379, 377, 376, 375, 388, 366, 367, 368,
	369, 371, 0, 382, 383, 370, 85, 94, 143, 251,
	191, 119, 240, 0, 0, 112, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 87, 88,
	95, 101, 107, 111, 115, 118, 124, 127, 130, 132,
	133, 134, 137, 148, 151, 152, 153, 154, 164, 165,
	166, 168, 171, 172, 173, 174, 175, 178, 180, 181,
	182, 183, 184, 185, 192, 195, 201, 202, 203, 204,
	205, 206, 207, 209, 210, 211, 212, 218, 221, 227,
	228, 237, 244, 247, 170, 0, 0, 0, 0, 0,
	0, 0, 0, 114, 0, 0, 0, 0, 0, 142,
	0, 373, 144, 0, 0, 216, 158, 0, 0, 0,
	0, 364, 365, 0, 0, 0, 0, 0, 0, 0,
	0, 54, 0, 0, 82, 83, 84, 352, 351, 354,
	355, 356, 357, 0, 0, 104, 353, 358, 359, 360,
	0, 0, 0, 0, 345, 0, 372, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 342, 343, 0, 0,
	0, 0, 387, 0, 344, 0, 0, 339, 340, 341,
	346, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	123, 386, 0, 0, 272, 0, 0, 384, 0, 189,
	0, 220, 126, 141, 100, 138, 86, 96, 0, 125,
	167, 196, 200, 0, 0, 0, 108, 0, 198, 177,
	236, 0, 179, 197, 145, 226, 190, 235, 245, 246,
	223, 243, 250, 213, 89, 222, 234, 105, 208, 91,
	232, 219, 156, 135, 136, 90, 0, 194, 113, 121,
	110, 169, 229, 230, 109, 253, 97, 242, 93, 98,
	241, 163, 225, 233, 157, 150, 92, 231, 155, 149,
	140, 117, 128, 187, 147, 188, 129, 160, 159, 161,
	0, 0, 0, 217, 239, 254, 102, 0, 224, 248,
	249, 0, 0, 103, 122, 116, 186, 120, 162, 99,
	131, 214, 139, 146, 193, 252, 176, 199, 106, 238,
	215, 374, 385, 380, 381, 378, 379, 377, 376, 375,
	388, 366, 367, 368, 369, 371, 0, 382, 383, 370,
	85, 94, 143, 251, 191, 119, 240, 0, 0, 112,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 87, 88, 95, 101, 107, 111, 115, 118,
	124, 127, 130, 132, 133, 134, 137, 148, 151, 152,
	153, 154, 164, 165, 166, 168, 171, 172, 173, 174,
	175, 178, 180, 181, 182, 183, 184, 185, 192, 195,
	201, 202, 203, 204, 205, 206, 207, 209, 210, 211,
	212, 218, 221, 227, 228, 237, 244, 247, 170, 0,
	0, 0, 0, 0, 0, 0, 0, 114, 0, 0,
	0, 0, 0, 142, 0, 0, 144, 0, 0, 216,
	158, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 82, 83,
	84, 0, 0, 0, 0, 0, 0, 0, 0, 104,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 632, 631, 641, 642,
	634, 635, 636, 637, 638, 639, 640, 633, 0, 0,
	643, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 123, 0, 0, 0, 272, 0,
	0, 0, 0, 189, 0, 220, 126, 141, 100, 138,
	86, 96, 0, 125, 167, 196, 200, 0, 0, 0,
	108, 0, 198, 177, 236, 0, 179, 197, 145, 226,
	190, 235, 245, 246, 223, 243, 250, 213, 89, 222,
	234, 105, 208, 91, 232, 219, 156, 135, 136, 90,
	0, 194, 113, 121, 110, 169, 229, 230, 109, 253,
	97, 242, 93, 98, 241, 163, 225, 233, 157, 150,
	92, 231, 155, 149, 140, 117, 128, 187, 147, 188,
	129, 160, 159, 161, 0, 0, 0, 217, 239, 254,
	102, 0, 224, 248, 249, 0, 0, 103, 122, 116,
	186, 120, 162, 99, 131, 214, 139, 146, 193, 252,
	176, 199, 106, 238, 215, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 85, 94, 143, 251, 191, 119,
	240, 0, 0, 112, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 87, 88, 95, 101,
	107, 111, 115, 118, 124, 127, 130, 132, 133, 134,
	137, 148, 151, 152, 153, 154, 164, 165, 166, 168,
	171, 172, 173, 174, 175, 178, 180, 181, 182, 183,
	184, 185, 192, 195, 201, 202, 203, 204, 205, 206,
	207, 209, 210, 211, 212, 218, 221, 227, 228, 237,
	244, 247, 170, 0, 0, 0, 620, 0, 0, 0,
	0, 114, 0, 0, 0, 0, 0, 142, 0, 0,
	144, 0, 0, 216, 158, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 82, 83, 84, 0, 622, 0, 0, 0,
	0, 0, 0, 104, 0, 0, 0, 0, 0, 617,
	616, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 618, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 123, 0,
	0, 0, 272, 0, 0, 0, 0, 189, 0, 220,
	126, 141, 100, 138, 86, 96, 0, 125, 167, 196,
	200, 0, 0, 0, 108, 0, 198, 177, 236, 0,
	179, 197, 145, 226, 190, 235, 245, 246, 223, 243,
	250, 213, 89, 222, 234, 105, 208, 91, 232, 219,
	156, 135, 136, 90, 0, 194, 113, 121, 110, 169,
	229, 230, 109, 253, 97, 242, 93, 98, 241, 163,
	225, 233, 157, 150, 92, 231, 155, 149, 140, 117,
	128, 187, 147, 188, 129, 160, 159, 161, 0, 0,
	0, 217, 239, 254, 102, 0, 224, 248, 249, 0,
	0, 103, 122, 116, 186, 120, 162, 99, 131, 214,
	139, 146, 193, 252, 176, 199, 106, 238, 215, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 85, 94,
	143, 251, 191, 119, 240, 0, 0, 112, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	87, 88, 95, 101, 107, 111, 115, 118, 124, 127,
	130, 132, 133, 134, 137, 148, 151, 152, 153, 154,
	164, 165, 166, 168, 171, 172, 173, 174, 175, 178,
	180, 181, 182, 183, 184, 185, 192, 195, 201, 202,
	203, 204, 205, 206, 207, 209, 210, 211, 212, 218,
	221, 227, 228, 237, 244, 247, 170, 0, 0, 0,
	0, 0, 0, 0, 0, 114, 0, 0, 0, 0,
	0, 142, 0, 0, 144, 0, 0, 216, 158, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 82, 83, 84, 0,
	0, 0, 0, 0, 0, 0, 0, 104, 0, 0,
	0, 0, 0, 74, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 123, 76, 77, 0, 73, 0, 0, 0,
	78, 189, 0, 220, 126, 141, 100, 138, 86, 96,
	0, 125, 167, 196, 200, 0, 0, 0, 108, 0,
	198, 177, 236, 0, 179, 197, 145, 226, 190, 235,
	245, 246, 223, 243, 250, 213, 89, 222, 234, 105,
	208, 91, 232, 219, 156, 135, 136, 90, 0, 194,
	113, 121, 110, 169, 229, 230, 109, 253, 97, 242,
	93, 98, 241, 163, 225, 233, 157, 150, 92, 231,
	155, 149, 140, 117, 128, 187, 147, 188, 129, 160,
	159, 161, 0, 0, 0, 217, 239, 254, 102, 0,
	224, 248, 249, 0, 0, 103, 122, 116, 186, 120,
	162, 99, 131, 214, 139, 146, 193, 252, 176, 199,
	106, 238, 215, 0, 75, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 85, 94, 143, 251, 191, 119, 240, 0,
	0, 112, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 87, 88, 95, 101, 107, 111,
	115, 118, 124, 127, 130, 132, 133, 134, 137, 148,
	151, 152, 153, 154, 164, 165, 166, 168, 171, 172,
	173, 174, 175, 178, 180, 181, 182, 183, 184, 185,
	192, 195, 201, 202, 203, 204, 205, 206, 207, 209,
	210, 211, 212, 218, 221, 227, 228, 237, 244, 247,
	170, 0, 0, 0, 961, 0, 0, 0, 0, 114,
	0, 0, 0, 0, 0, 142, 0, 0, 144, 0,
	0, 216, 158, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	82, 83, 84, 0, 963, 0, 0, 0, 0, 0,
	0, 104, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 123, 0, 0, 0,
	272, 0, 0, 0, 0, 189, 0, 220, 126, 141,
	100, 138, 86, 96, 0, 125, 167, 196, 200, 0,
	0, 0, 108, 0, 198, 177, 236, 0, 179, 197,
	145, 226, 190, 235, 245, 246, 223, 243, 250, 213,
	89, 222, 234, 105, 208, 91, 232, 219, 156, 135,
	136, 90, 0, 194, 113, 121, 110, 169, 229, 230,
	109, 253, 97, 242, 93, 98, 241, 163, 225, 233,
	157, 150, 92, 231, 155, 149, 140, 117, 128, 187,
	147, 188, 129, 160, 159, 161, 0, 0, 0, 217,
	239, 254, 102, 0, 224, 248, 249, 0, 0, 103,
	122, 116, 186, 120, 162, 99, 131, 214, 139, 146,
	193, 252, 176, 199, 106, 238, 215, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 85, 94, 143, 251,
	191, 119, 240, 0, 0, 112, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 87, 88,
	95, 101, 107, 111, 115, 118, 124, 127, 130, 132,
	133, 134, 137, 148, 151, 152, 153, 154, 164, 165,
	166, 168, 171, 172, 173, 174, 175, 178, 180, 181,
	182, 183, 184, 185, 192, 195, 201, 202, 203, 204,
	205, 206, 207, 209, 210, 211, 212, 218, 221, 227,
	228, 237, 244, 247, 24, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 170, 0, 0, 0,
	0, 0, 0, 0, 0, 114, 0, 0, 0, 0,
	0, 142, 0, 0, 144, 0, 0, 216, 158, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 54, 0, 0, 82, 83, 84, 0,
	0, 0, 0, 0, 0, 0, 0, 104, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 123, 0, 0, 0, 272, 0, 0, 0,
	0, 189, 0, 220, 126, 141, 100, 138, 86, 96,
	0, 125, 167, 196, 200, 0, 0, 0, 108, 0,
	198, 177, 236, 0, 179, 197, 145, 226, 190, 235,
	245, 246, 223, 243, 250, 213, 89, 222, 234, 105,
	208, 91, 232, 219, 156, 135, 136, 90, 0, 194,
	113, 121, 110, 169, 229, 230, 109, 253, 97, 242,
	93, 98, 241, 163, 225, 233, 157, 150, 92, 231,
	155, 149, 140, 117, 128, 187, 147, 188, 129, 160,
	159, 161, 0, 0, 0, 217, 239, 254, 102, 0,
	224, 248, 249, 0, 0, 103, 122, 116, 186, 120,
	162, 99, 131, 214, 139, 146, 193, 252, 176, 199,
	106, 238, 215, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 85, 94, 143, 251, 191, 119, 240, 0,
	0, 112, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 87, 88, 95, 101, 107, 111,
	115, 118, 124, 127, 130, 132, 133, 134, 137, 148,
	151, 152, 153, 154, 164, 165, 166, 168, 171, 172,
	173, 174, 175, 178, 180, 181, 182, 183, 184, 185,
	192, 195, 201, 202, 203, 204, 205, 206, 207, 209,
	210, 211, 212, 218, 221, 227, 228, 237, 244, 247,
	170, 0, 0, 0, 961, 0, 0, 0, 0, 114,
	0, 0, 0, 0, 0, 142, 0, 0, 144, 0,
	0, 216, 158, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	82, 83, 84, 0, 963, 0, 0, 0, 0, 0,
	0, 104, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 123, 0, 0, 0,
	272, 0, 0, 0, 0, 189, 0, 220, 126, 141,
	100, 138, 86, 96, 0, 125, 167, 196, 200, 0,
	0, 0, 108, 0, 198, 177, 236, 0, 959, 197,
	145, 226, 190, 235, 245, 246, 223, 243, 250, 213,
	89, 222, 234, 105, 208, 91, 232, 219, 156, 135,
	136, 90, 0, 194, 113, 121, 110, 169, 229, 230,
	109, 253, 97, 242, 93, 98, 241, 163, 225, 233,
	157, 150, 92, 231, 155, 149, 140, 117, 128, 187,
	147, 188, 129, 160, 159, 161, 0, 0, 0, 217,
	239, 254, 102, 0, 224, 248, 249, 0, 0, 103,
	122, 116, 186, 120, 162, 99, 131, 214, 139, 146,
	193, 252, 176, 199, 106, 238, 215, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 85, 94, 143, 251,
	191, 119, 240, 0, 0, 112, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 87, 88,
	95, 101, 107, 111, 115, 118, 124, 127, 130, 132,
	133, 134, 137, 148, 151, 152, 153, 154, 164, 165,
	166, 168, 171, 172, 173, 174, 175, 178, 180, 181,
	182, 183, 184, 185, 192, 195, 201, 202, 203, 204,
	205, 206, 207, 209, 210, 211, 212, 218, 221, 227,
	228, 237, 244, 247, 170, 0, 0, 0, 0, 0,
	0, 0, 0, 114, 0, 0, 0, 0, 0, 142,
	0, 0, 144, 0, 0, 216, 158, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 82, 83, 84, 0, 0, 853,
	0, 0, 854, 0, 0, 104, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	123, 0, 0, 0, 272, 0, 0, 0, 0, 189,
	0, 220, 126, 141, 100, 138, 86, 96, 0, 125,
	167, 196, 200, 0, 0, 0, 108, 0, 198, 177,
	236, 0, 179, 197, 145, 226, 190, 235, 245, 246,
	223, 243, 250, 213, 89, 222, 234, 105, 208, 91,
	232, 219, 156, 135, 136, 90, 0, 194, 113, 121,
	110, 169, 229, 230, 109, 253, 97, 242, 93, 98,
	241, 163, 225, 233, 157, 150, 92, 231, 155, 149,
	140, 117, 128, 187, 147, 188, 129, 160, 159, 161,
	0, 0, 0, 217, 239, 254, 102, 0, 224, 248,
	249, 0, 0, 103, 122, 116, 186, 120, 162, 99,
	131, 214, 139, 146, 193, 252, 176, 199, 106, 238,
	215, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	85, 94, 143, 251, 191, 119, 240, 0, 0, 112,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 87, 88, 95, 101, 107, 111, 115, 118,
	124, 127, 130, 132, 133, 134, 137, 148, 151, 152,
	153, 154, 164, 165, 166, 168, 171, 172, 173, 174,
	175, 178, 180, 181, 182, 183, 184, 185, 192, 195,
	201, 202, 203, 204, 205, 206, 207, 209, 210, 211,
	212, 218, 221, 227, 228, 237, 244, 247, 170, 0,
	0, 0, 0, 0, 0, 0, 0, 114, 0, 735,
	0, 0, 0, 142, 0, 0, 144, 0, 0, 216,
	158, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 82, 83,
	84, 0, 734, 0, 0, 0, 0, 0, 0, 104,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 123, 0, 0, 0, 272, 0,
	0, 0, 0, 189, 0, 220, 126, 141, 100, 138,
	86, 96, 0, 125, 167, 196, 200, 0, 0, 0,
	108, 0, 198, 177, 236, 0, 179, 197, 145, 226,
	190, 235, 245, 246, 223, 243, 250, 213, 89, 222,
	234, 105, 208, 91, 232, 219, 156, 135, 136, 90,
	0, 194, 113, 121, 110, 169, 229, 230, 109, 253,
	97, 242, 93, 98, 241, 163, 225, 233, 157, 150,
	92, 231, 155, 149, 140, 117, 128, 187, 147, 188,
	129, 160, 159, 161, 0, 0, 0, 217, 239, 254,
	102, 0, 224, 248, 249, 0, 0, 103, 122, 116,
	186, 120, 162, 99, 131, 214, 139, 146, 193, 252,
	176, 199, 106, 238, 215, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 85, 94, 143, 251, 191, 119,
	240, 0, 0, 112, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 87, 88, 95, 101,
	107, 111, 115, 118, 124, 127, 130, 132, 133, 134,
	137, 148, 151, 152, 153, 154, 164, 165, 166, 168,
	171, 172, 173, 174, 175, 178, 180, 181, 182, 183,
	184, 185, 192, 195, 201, 202, 203, 204, 205, 206,
	207, 209, 210, 211, 212, 218, 221, 227, 228, 237,
	244, 247, 170, 0, 0, 0, 0, 0, 0, 0,
	0, 114, 0, 0, 0, 0, 0, 142, 0, 0,
	144, 0, 0, 216, 158, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 595, 82, 83, 84, 0, 0, 0, 0, 0,
	0, 0, 0, 104, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 123, 0,
	0, 0, 272, 0, 0, 0, 0, 189, 0, 220,
	126, 141, 100, 138, 86, 96, 0, 125, 167, 196,
	200, 0, 0, 0, 108, 0, 198, 177, 236, 0,
	179, 197, 145, 226, 190, 235, 245, 246, 223, 243,
	250, 213, 89, 222, 234, 105, 208, 91, 232, 219,
	156, 135, 136, 90, 0, 194, 113, 121, 110, 169,
	229, 230, 109, 253, 97, 242, 93, 98, 241, 163,
	225, 233, 157, 150, 92, 231, 155, 149, 140, 117,
	128, 187, 147, 188, 129, 160, 159, 161, 0, 0,
	0, 217, 239, 254, 102, 0, 224, 248, 249, 0,
	0, 103, 122, 116, 186, 120, 162, 99, 131, 214,
	139, 146, 193, 252, 176, 199, 106, 238, 215, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 85, 94,
	143, 251, 191, 119, 240, 0, 0, 112, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	87, 88, 95, 101, 107, 111, 115, 118, 124, 127,
	130, 132, 133, 134, 137, 148, 151, 152, 153, 154,
	164, 165, 166, 168, 171, 172, 173, 174, 175, 178,
	180, 181, 182, 183, 184, 185, 192, 195, 201, 202,
	203, 204, 205, 206, 207, 209, 210, 211, 212, 218,
	221, 227, 228, 237, 244, 247, 170, 0, 0, 0,
	0, 0, 0, 0, 0, 114, 0, 0, 0, 0,
	0, 142, 0, 0, 144, 0, 0, 216, 158, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 54, 0, 0, 82, 83, 84, 0,
	0, 0, 0, 0, 0, 0, 0, 104, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 123, 0, 0, 0, 272, 0, 0, 0,
	0, 189, 0, 220, 126, 141, 100, 138, 86, 96,
	0, 125, 167, 196, 200, 0, 0, 0, 108, 0,
	198, 177, 236, 0, 179, 197, 145, 226, 190, 235,
	245, 246, 223, 243, 250, 213, 89, 222, 234, 105,
	208, 91, 232, 219, 156, 135, 136, 90, 0, 194,
	113, 121, 110, 169, 229, 230, 109, 253, 97, 242,
	93, 98, 241, 163, 225, 233, 157, 150, 92, 231,
	155, 149, 140, 117, 128, 187, 147, 188, 129, 160,
	159, 161, 0, 0, 0, 217, 239, 254, 102, 0,
	224, 248, 249, 0, 0, 103, 122, 116, 186, 120,
	162, 99, 131, 214, 139, 146, 193, 252, 176, 199,
	106, 238, 215, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 85, 94, 143, 251, 191, 119, 240, 0,
	0, 112, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 87, 88, 95, 101, 107, 111,
	115, 118, 124, 127, 130, 132, 133, 134, 137, 148,
	151, 152, 153, 154, 164, 165, 166, 168, 171, 172,
	173, 174, 175, 178, 180, 181, 182, 183, 184, 185,
	192, 195, 201, 202, 203, 204, 205, 206, 207, 209,
	210, 211, 212, 218, 221, 227, 228, 237, 244, 247,
	170, 0, 0, 0, 0, 0, 0, 0, 0, 114,
	0, 0, 0, 0, 0, 142, 0, 0, 144, 0,
	0, 216, 158, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	82, 83, 84, 0, 963, 0, 0, 0, 0, 0,
	0, 104, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 123, 0, 0, 0,
	272, 0, 0, 0, 0, 189, 0, 220, 126, 141,
	100, 138, 86, 96, 0, 125, 167, 196, 200, 0,
	0, 0, 108, 0, 198, 177, 236, 0, 179, 197,
	145, 226, 190, 235, 245, 246, 223, 243, 250, 213,
	89, 222, 234, 105, 208, 91, 232, 219, 156, 135,
	136, 90, 0, 194, 113, 121, 110, 169, 229, 230,
	109, 253, 97, 242, 93, 98, 241, 163, 225, 233,
	157, 150, 92, 231, 155, 149, 140, 117, 128, 187,
	147, 188, 129, 160, 159, 161, 0, 0, 0, 217,
	239, 254, 102, 0, 224, 248, 249, 0, 0, 103,
	122, 116, 186, 120, 162, 99, 131, 214, 139, 146,
	193, 252, 176, 199, 106, 238, 215, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 85, 94, 143, 251,
	191, 119, 240, 0, 0, 112, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 87, 88,
	95, 101, 107, 111, 115, 118, 124, 127, 130, 132,
	133, 134, 137, 148, 151, 152, 153, 154, 164, 165,
	166, 168, 171, 172, 173, 174, 175, 178, 180, 181,
	182, 183, 184, 185, 192, 195, 201, 202, 203, 204,
	205, 206, 207, 209, 210, 211, 212, 218, 221, 227,
	228, 237, 244, 247, 170, 0, 0, 0, 0, 0,
	0, 0, 0, 114, 0, 0, 0, 0, 0, 142,
	0, 0, 144, 0, 0, 216, 158, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 82, 83, 84, 0, 622, 0,
	0, 0, 0, 0, 0, 104, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	123, 0, 0, 0, 272, 0, 0, 0, 0, 189,
	0, 220, 126, 141, 100, 138, 86, 96, 0, 125,
	167, 196, 200, 0, 0, 0, 108, 0, 198, 177,
	236, 0, 179, 197, 145, 226, 190, 235, 245, 246,
	223, 243, 250, 213, 89, 222, 234, 105, 208, 91,
	232, 219, 156, 135, 136, 90, 0, 194, 113, 121,
	110, 169, 229, 230, 109, 253, 97, 242, 93, 98,
	241, 163, 225, 233, 157, 150, 92, 231, 155, 149,
	140, 117, 128, 187, 147, 188, 129, 160, 159, 161,
	0, 0, 0, 217, 239, 254, 102, 0, 224, 248,
	249, 0, 0, 103, 122, 116, 186, 120, 162, 99,
	131, 214, 139, 146, 193, 252, 176, 199, 106, 238,
	215, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	85, 94, 143, 251, 191, 119, 240, 0, 0, 112,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 87, 88, 95, 101, 107, 111, 115, 118,
	124, 127, 130, 132, 133, 134, 137, 148, 151, 152,
	153, 154, 164, 165, 166, 168, 171, 172, 173, 174,
	175, 178, 180, 181, 182, 183, 184, 185, 192, 195,
	201, 202, 203, 204, 205, 206, 207, 209, 210, 211,
	212, 218, 221, 227, 228, 237, 244, 247, 170, 0,
	0, 0, 0, 0, 0, 0, 705, 114, 0, 0,
	0, 0, 0, 142, 0, 0, 144, 0, 0, 216,
	158, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 82, 83,
	84, 0, 0, 0, 0, 0, 0, 0, 0, 104,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 123, 0, 0, 0, 272, 0,
	0, 0, 0, 189, 0, 220, 126, 141, 100, 138,
	86, 96, 0, 125, 167, 196, 200, 0, 0, 0,
	108, 0, 198, 177, 236, 0, 179, 197, 145, 226,
	190, 235, 245, 246, 223, 243, 250, 213, 89, 222,
	234, 105, 208, 91, 232, 219, 156, 135, 136, 90,
	0, 194, 113, 121, 110, 169, 229, 230, 109, 253,
	97, 242, 93, 98, 241, 163, 225, 233, 157, 150,
	92, 231, 155, 149, 140, 117, 128, 187, 147, 188,
	129, 160, 159, 161, 0, 0, 0, 217, 239, 254,
	102, 0, 224, 248, 249, 0, 0, 103, 122, 116,
	186, 120, 162, 99, 131, 214, 139, 146, 193, 252,
	176, 199, 106, 238, 215, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 85, 94, 143, 251, 191, 119,
	240, 0, 0, 112, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 87, 88, 95, 101,
	107, 111, 115, 118, 124, 127, 130, 132, 133, 134,
	137, 148, 151, 152, 153, 154, 164, 165, 166, 168,
	171, 172, 173, 174, 175, 178, 180, 181, 182, 183,
	184, 185, 192, 195, 201, 202, 203, 204, 205, 206,
	207, 209, 210, 211, 212, 218, 221, 227, 228, 237,
	244, 247, 391, 0, 0, 0, 0, 0, 0, 170,
	0, 0, 0, 0, 0, 0, 0, 0, 114, 0,
	0, 0, 0, 0, 142, 0, 0, 144, 0, 0,
	216, 158, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 82,
	83, 84, 0, 0, 0, 0, 0, 0, 0, 0,
	104, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 123, 0, 0, 0, 272,
	0, 0, 0, 0, 189, 0, 220, 126, 141, 100,
	138, 86, 96, 0, 125, 167, 196, 200, 0, 0,
	0, 108, 0, 198, 177, 236, 0, 179, 197, 145,
	226, 190, 235, 245, 246, 223, 243, 250, 213, 89,
	222, 234, 105, 208, 91, 232, 219, 156, 135, 136,
	90, 0, 194, 113, 121, 110, 169, 229, 230, 109,
	253, 97, 242, 93, 98, 241, 163, 225, 233, 157,
	150, 92, 231, 155, 149, 140, 117, 128, 187, 147,
	188, 129, 160, 159, 161, 0, 0, 0, 217, 239,
	254, 102, 0, 224, 248, 249, 0, 0, 103, 122,
	116, 186, 120, 162, 99, 131, 214, 139, 146, 193,
	252, 176, 199, 106, 238, 215, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 85, 94, 143, 251, 191,
	119, 240, 0, 0, 112, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 87, 88, 95,
	101, 107, 111, 115, 118, 124, 127, 130, 132, 133,
	134, 137, 148, 151, 152, 153, 154, 164, 165, 166,
	168, 171, 172, 173, 174, 175, 178, 180, 181, 182,
	183, 184, 185, 192, 195, 201, 202, 203, 204, 205,
	206, 207, 209, 210, 211, 212, 218, 221, 227, 228,
	237, 244, 247, 170, 0, 0, 0, 0, 0, 0,
	0, 0, 114, 0, 0, 0, 0, 0, 142, 0,
	0, 144, 0, 0, 216, 158, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 82, 83, 84, 0, 0, 0, 0,
	0, 0, 0, 0, 104, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 123,
	0, 267, 0, 272, 0, 0, 0, 0, 189, 0,
	220, 126, 141, 100, 138, 86, 96, 0, 125, 167,
	196, 200, 0, 0, 0, 108, 0, 198, 177, 236,
	0, 179, 197, 145, 226, 190, 235, 245, 246, 223,
	243, 250, 213, 89, 222, 234, 105, 208, 91, 232,
	219, 156, 135, 136, 90, 0, 194, 113, 121, 110,
	169, 229, 230, 109, 253, 97, 242, 93, 98, 241,
	163, 225, 233, 157, 150, 92, 231, 155, 149, 140,
	117, 128, 187, 147, 188, 129, 160, 159, 161, 0,
	0, 0, 217, 239, 254, 102, 0, 224, 248, 249,
	0, 0, 103, 122, 116, 186, 120, 162, 99, 131,
	214, 139, 146, 193, 252, 176, 199, 106, 238, 215,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 85,
	94, 143, 251, 191, 119, 240, 0, 0, 112, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 87, 88, 95, 101, 107, 111, 115, 118, 124,
	127, 130, 132, 133, 134, 137, 148, 151, 152, 153,
	154, 164, 165, 166, 168, 171, 172, 173, 174, 175,
	178, 180, 181, 182, 183, 184, 185, 192, 195, 201,
	202, 203, 204, 205, 206, 207, 209, 210, 211, 212,
	218, 221, 227, 228, 237, 244, 247, 170, 0, 0,
	0, 0, 0, 0, 0, 0, 114, 0, 0, 0,
	0, 0, 142, 0, 0, 144, 0, 0, 216, 158,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 82, 83, 84,
	0, 0, 0, 0, 0, 0, 0, 0, 104, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 123, 0, 0, 0, 272, 0, 0,
	0, 0, 189, 0, 220, 126, 141, 100, 138, 86,
	96, 0, 125, 167, 196, 200, 0, 0, 0, 108,
	0, 198, 177, 236, 0, 179, 197, 145, 226, 190,
	235, 245, 246, 223, 243, 250, 213, 89, 222, 234,
	105, 208, 91, 232, 219, 156, 135, 136, 90, 0,
	194, 113, 121, 110, 169, 229, 230, 109, 253, 97,
	242, 93, 98, 241, 163, 225, 233, 157, 150, 92,
	231, 155, 149, 140, 117, 128, 187, 147, 188, 129,
	160, 159, 161, 0, 0, 0, 217, 239, 254, 102,
	0, 224, 248, 249, 0, 0, 103, 122, 116, 186,
	120, 162, 99, 131, 214, 139, 146, 193, 252, 176,
	199, 106, 238, 215, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 85, 94, 143, 251, 191, 119, 240,
	0, 0, 112, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 87, 88, 95, 101, 107,
	111, 115, 118, 124, 127, 130, 132, 133, 134, 137,
	148, 151, 152, 153, 154, 164, 165, 166, 168, 171,
	172, 173, 174, 175, 178, 180, 181, 182, 183, 184,
	185, 192, 195, 201, 202, 203, 204, 205, 206, 207,
	209, 210, 211, 212, 218, 221, 227, 228, 237, 244,
	247,
}
var yyPact = [...]int{

	2328, -1000, -277, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1029, 1082, -1000, -1000, -1000, -1000, -1000, -1000,
	229, 11588, 4, 115, -29, 15615, 111, 143, 15949, -1000,
	-10, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -101, -103,
	-1000, 790, -1000, -1000, -1000, -1000, -1000, 1004, 1019, 832,
	1036, 1020, -1000, 8236, 83, 83, 15281, 6900, -1000, -1000,
	338, 15949, 105, 15949, -159, 80, 80, 80, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 109, 15949, 538, 538, 318,
	-1000, 15949, 78, 538, 78, 78, 78, 15949, -1000, 157,
	-1000, -1000, -1000, 15949, 538, 938, 287, 44, 4471, -1000,
	174, -1000, 4471, 9, 4471, -47, 1047, 11, -40, -1000,
	4471, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 344, 950, 9584, 9584, 1029,
	-1000, 790, -1000, -1000, -1000, 895, 1008, -1000, -1000, -1000,
	-1000, -1000, 325, 1059, -1000, 11254, 152, -1000, 9584, 405,
	631, -1000, -1000, 631, -1000, -1000, 136, -1000, -1000, 10586,
	10586, 10586, 10586, 10586, 10586, 10586, 10586, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 631, -1000, 9250, 631, 631, 631, 631, 631, 631,
	631, 631, 9584, 631, 631, 631, 631, 631, 631, 631,
	631, 631, 631, 631, 631, 631, 631, 631, 631, 14940,
	13938, 15949, 795, 503, -1000, -1000, 151, 718, 6553, -118,
	-1000, -1000, -1000, 260, 13270, -1000, -1000, -1000, 935, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 711, 15949,
	-1000, 2655, -1000, 538, 4471, 98, 538, 293, 538, 15949,
	15949, 4471, 4471, 4471, 26, 60, 45, 15949, 734, 95,
	15949, 991, 867, 15949, 538, 538, -1000, 5859, -1000, 4471,
	287, -1000, 456, 9584, 4471, 4471, 4471, 15949, 4471, 4471,
	-1000, -1000, -1000, 300, -1000, -1000, -1000, -1000, 4471, 4471,
	-1000, 1058, 291, -1000, -1000, -1000, -1000, 9584, 195, -1000,
	863, -1000, -1000, -1000, -1000, -1000, -1000, 1077, 186, 535,
	150, 725, -1000, 441, 1004, 344, 969, 12936, 8236, -1000,
	-1000, -1000, -1000, -1000, 15949, -1000, 9584, 9584, 552, -1000,
	14606, -1000, -1000, 5512, 203, 10586, 420, 452, 10586, 10586,
	10586, 10586, 10586, 10586, 10586, 10586, 10586, 10586, 10586, 10586,
	10586, 10586, 10586, 592, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 538, -1000, 790, 792, 792, 163, 163, 163,
	163, 163, 163, 163, 10920, 7234, 344, 702, 444, 9250,
	8236, 8236, 9584, 9584, 8904, 8570, 8236, 943, 235, 444,
	15949, -1000, -1000, 10252, -1000, -1000, -1000, -1000, -1000, 344,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 15949, 15949, 8236,
	8236, 8236, 8236, 8236, 38, 15949, -1000, 743, 853, -1000,
	-1000, -1000, 970, 12268, 12602, 38, 708, 13938, 15949, -1000,
	-1000, 13938, 15949, 5165, 6206, 718, -118, 649, -1000, -127,
	-132, 7568, 161, -1000, -1000, -1000, -1000, 4124, 188, 544,
	362, -85, -1000, -1000, -1000, 759, -1000, 759, 759, 759,
	759, -51, -51, -51, -51, -1000, -1000, -1000, -1000, -1000,
	806, 805, -1000, 759, 759, 759, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 786, 786, 786, 776, 776, 816,
	-1000, 15949, 4471, 965, 4471, -1000, 77, -1000, -1000, -1000,
	15949, 15949, 15949, 15949, 15949, 122, 15949, 15949, 716, -1000,
	15949, 4471, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	444, -1000, -1000, -1000, -1000, -1000, -1000, 15949, -1000, -1000,
	-1000, -1000, 15949, 287, 15949, 15949, 444, -1000, 451, 15949,
	-1000, 902, 9584, 9584, 5859, 9584, -1000, -1000, -1000, 950,
	-1000, 1028, -1000, 928, 924, 698, -1000, -1000, 203, 312,
	-1000, -1000, 407, -1000, -1000, -1000, -1000, 148, 631, -1000,
	1649, -1000, -1000, -1000, -1000, 420, 10586, 10586, 10586, 255,
	1649, 1862, 630, 808, 163, 471, 471, 231, 231, 231,
	231, 231, 422, 422, -1000, -1000, -1000, 344, -1000, -1000,
	-1000, 344, 8236, 8236, 715, -1000, 9584, -1000, 344, 655,
	655, 572, 527, 297, 1053, 655, 265, 1049, 655, 655,
	8236, -1000, -1000, 327, -1000, 9584, 344, -1000, 141, -1000,
	346, 670, 657, 655, 344, 344, 655, 655, 804, 631,
	-1000, 15949, 13938, 13938, 13938, 13938, 13938, -1000, 888, 883,
	-1000, 882, 880, 892, 15949, -1000, 660, 12268, 167, 631,
	-1000, 14272, -1000, -1000, 1046, 13938, 685, -1000, 685, -1000,
	140, -1000, -1000, 649, -118, -100, -1000, -1000, -1000, -1000,
	444, -1000, 598, 646, 3777, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 782, 538, -1000, 958, 202, 180, 538, 954,
	-1000, -1000, -1000, 941, -1000, 304, -97, -1000, -1000, 391,
	-51, -51, -1000, -1000, 161, 912, 161, 161, 161, 426,
	426, -1000, -1000, -1000, -1000, 374, -1000, -1000, -1000, 372,
	-1000, 842, 15949, 4471, -1000, -1000, -1000, -1000, 284, 284,
	258, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 37, 796, -1000, -1000, -1000, -1000, -23, 25,
	85, -1000, 4471, -1000, 291, 291, -1000, -1000, -1000, -1000,
	-1000, 900, 444, 444, 134, -1000, -1000, 15949, -1000, -1000,
	-1000, -1000, 1046, 8236, 13938, -1000, -1000, -1000, 4818, 8236,
	-1000, 255, 1649, 1792, -1000, 10586, 10586, -1000, -1000, 655,
	655, 444, -1000, -1000, -1000, 110, 592, 110, 10586, 10586,
	-1000, 10586, 10586, -1000, -174, 607, 256, -1000, 9584, 524,
	-1000, 5859, -1000, 10586, 10586, -1000, -1000, -1000, -1000, -1000,
	840, 15949, 631, -1000, 12268, 15949, 738, -1000, 232, 853,
	793, 839, 907, -1000, -1000, -1000, -1000, 881, -1000, 879,
	-1000, -1000, -1000, -1000, -1000, 104, 102, 100, 15949, -1000,
	1029, 9584, 685, -1000, -1000, 175, -1000, -1000, -133, -142,
	-1000, -1000, -1000, 4124, -1000, 4124, 15949, 56, -1000, 538,
	538, -1000, -1000, -1000, 777, 836, 10586, -1000, -1000, -1000,
	525, 161, 161, -1000, 370, -1000, -1000, -1000, 651, -1000,
	644, 636, 639, 15949, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 15949, -1000, -1000, -1000, -1000, -1000, 15949,
	-181, 538, 15949, 15949, 15949, 15949, -1000, 287, 287, -1000,
	5859, -1000, 1040, -1000, 599, -1000, -1000, 344, -1000, 10586,
	1649, 1649, -1000, -1000, 344, 759, 759, -1000, 759, 776,
	-1000, 759, -33, 759, -35, 344, 344, 1715, 1623, 1587,
	1525, 631, -169, -1000, 444, 9584, -1000, 719, 536, -1000,
	944, 508, 564, -1000, -1000, 7902, 344, 623, 129, 621,
	-1000, 1029, 15949, 9584, -1000, -1000, 9584, 772, -1000, 9584,
	-1000, -1000, -1000, 631, 631, 631, 621, 1004, 444, -1000,
	-1000, -1000, -1000, 3777, -1000, 619, -1000, 759, -1000, -1000,
	-1000, 15949, -75, 1071, 1649, -1000, -1000, -1000, -1000, -1000,
	-51, 424, -51, 369, -1000, 349, 4471, -1000, -1000, -1000,
	-1000, 961, -1000, 5859, -1000, -1000, 745, 810, -1000, -1000,
	-1000, -1000, 1037, 1009, -1000, 1649, -1000, -1000, 125, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 10586, 10586, 10586,
	10586, 10586, 1004, 423, 444, 10586, 10586, 947, -1000, 631,
	-1000, -1000, 754, 15949, 15949, -1000, 15949, 1004, -1000, 444,
	444, 15949, 444, 13604, 15949, 15949, 11922, -1000, 156, 15949,
	-1000, 617, -1000, 192, -1000, -84, 161, -1000, 161, 493,
	481, -1000, 631, 593, -1000, 225, 15949, 15949, -1000, 9584,
	9584, -1000, -1000, 346, 346, 346, 346, 52, 344, -1000,
	346, 346, 1070, -1000, 631, -1000, 790, 121, -1000, -1000,
	-1000, 615, 605, -1000, 605, 605, 167, 156, -1000, 538,
	221, 406, -1000, 50, 15949, 320, 946, -1000, 945, -1000,
	-1000, -1000, -1000, -1000, 35, 5859, 4124, 561, -1000, 444,
	574, -1000, -1000, -1000, -1000, 344, 39, -184, -1000, -1000,
	-1000, 15949, 564, 344, 15949, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 339, -1000, -1000, 15949, -1000, -1000, 363, -1000,
	-1000, 537, -1000, 15949, -1000, -1000, 796, -1000, 899, -178,
	-190, 553, -1000, -1000, -1000, 736, -1000, -1000, 35, 913,
	-181, -1000, 893, -1000, 15949, -1000, 32, -1000, -182, 515,
	30, -186, 835, 631, -191, 818, -1000, 1057, 9918, -1000,
	-1000, 1063, 193, 193, 346, 344, -1000, -1000, -1000, 66,
	350, -1000, -1000, -1000, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 1298, 57, 552, 1297, 1296, 1295, 1294, 1292, 1291,
	1287, 1286, 1285, 1283, 1282, 1281, 1274, 1271, 1269, 1267,
	1266, 1265, 1263, 1262, 1260, 1259, 87, 1256, 1255, 1248,
	1247, 1246, 1244, 1243, 1242, 41, 76, 42, 47, 1239,
	77, 1501, 1238, 43, 62, 93, 1231, 35, 1229, 1228,
	63, 1227, 1226, 50, 1225, 1223, 215, 1222, 65, 1221,
	10, 33, 1220, 1219, 1218, 1217, 64, 243, 1216, 1214,
	17, 1213, 1212, 94, 1211, 53, 15, 14, 18, 22,
	1210, 130, 7, 1207, 52, 1202, 1200, 1199, 1194, 25,
	1193, 55, 1191, 26, 54, 1190, 9, 69, 30, 20,
	8, 70, 60, 1188, 19, 61, 49, 1185, 1184, 497,
	1183, 1179, 40, 1175, 1173, 1172, 34, 1171, 83, 346,
	1169, 1166, 1165, 1164, 46, 710, 1650, 613, 66, 1163,
	1162, 1161, 2400, 45, 51, 16, 1160, 80, 124, 27,
	1157, 1156, 37, 1155, 1154, 1153, 1152, 1150, 1149, 1148,
	333, 1147, 1146, 1144, 112, 13, 1143, 1142, 56, 24,
	1138, 1137, 1130, 44, 59, 1129, 1127, 48, 1126, 1119,
	28, 1117, 1114, 1113, 1112, 1111, 29, 6, 1110, 21,
	1108, 11, 1104, 23, 1103, 5, 1095, 4, 1094, 2,
	0, 1093, 12, 31, 3, 1092, 1, 1091, 1090, 1197,
	1125, 73, 1068, 81,
}
var yyR1 = [...]int{

	0, 197, 198, 198, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 190, 190, 190, 2, 2, 2,
	6, 3, 4, 4, 5, 5, 7, 7, 29, 29,
	8, 9, 9, 9, 9, 201, 201, 50, 50, 51,
	51, 97, 97, 10, 10, 10, 10, 102, 102, 106,
	106, 106, 107, 107, 107, 107, 140, 140, 11, 11,
	11, 11, 11, 11, 11, 192, 192, 191, 189, 189,
	188, 188, 187, 17, 172, 174, 174, 173, 173, 173,
	173, 164, 143, 143, 143, 143, 146, 146, 144, 144,
	144, 144, 144, 144, 144, 144, 144, 145, 145, 145,
	145, 145, 147, 147, 147, 147, 147, 148, 148, 148,
	148, 148, 148, 148, 148, 148, 148, 148, 148, 148,
	148, 148, 149, 149, 149, 149, 149, 149, 149, 149,
	163, 163, 150, 150, 158, 158, 159, 159, 159, 156,
	156, 157, 157, 160, 160, 160, 152, 152, 153, 153,
	161, 161, 154, 154, 154, 155, 155, 155, 162, 162,
	162, 162, 162, 151, 151, 165, 165, 182, 182, 181,
	181, 181, 171, 171, 178, 178, 178, 178, 178, 168,
	168, 168, 169, 169, 167, 167, 170, 170, 180, 180,
	179, 166, 166, 183, 183, 183, 183, 195, 196, 194,
	194, 194, 194, 194, 175, 175, 175, 176, 176, 176,
	177, 177, 177, 12, 12, 12, 12, 12, 12, 12,
	12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
	193, 193, 193, 193, 193, 193, 193, 193, 193, 193,
	193, 193, 193, 193, 186, 184, 184, 185, 185, 13,
	18, 18, 14, 14, 14, 14, 14, 15, 15, 19,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 113, 113, 115,
	115, 111, 111, 114, 114, 112, 112, 112, 116, 116,
	116, 117, 117, 141, 141, 141, 21, 21, 23, 23,
	24, 25, 22, 22, 22, 22, 22, 22, 22, 16,
	202, 26, 27, 27, 28, 28, 28, 32, 32, 32,
	30, 30, 30, 31, 31, 37, 37, 39, 39, 39,
	40, 40, 40, 40, 36, 36, 38, 38, 38, 38,
	129, 129, 129, 128, 128, 42, 42, 43, 43, 44,
	44, 45, 45, 45, 45, 59, 59, 96, 96, 98,
	98, 46, 46, 46, 46, 47, 47, 48, 48, 49,
	49, 136, 136, 135, 135, 135, 134, 134, 52, 52,
	52, 54, 53, 53, 53, 53, 55, 55, 57, 57,
	56, 56, 58, 60, 60, 60, 60, 60, 61, 61,
	41, 41, 41, 41, 41, 41, 41, 110, 110, 63,
	63, 62, 62, 62, 62, 62, 62, 62, 62, 62,
	62, 74, 74, 74, 74, 74, 74, 64, 64, 64,
	64, 64, 64, 64, 35, 35, 75, 75, 75, 81,
	76, 76, 67, 67, 67, 67, 67, 67, 67, 67,
	67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
	67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
	67, 67, 67, 67, 71, 71, 71, 71, 69, 69,
	69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
	69, 70, 70, 70, 70, 70, 70, 70, 70, 70,
	70, 70, 70, 70, 70, 70, 70, 203, 203, 73,
	72, 72, 72, 72, 72, 72, 72, 33, 33, 33,
	33, 33, 139, 139, 142, 142, 142, 142, 142, 142,
	142, 142, 142, 142, 142, 142, 142, 85, 85, 34,
	34, 83, 83, 84, 86, 86, 82, 82, 82, 66,
	66, 66, 66, 66, 66, 66, 66, 68, 68, 68,
	87, 87, 88, 88, 89, 89, 90, 90, 91, 92,
	92, 92, 93, 93, 93, 93, 94, 94, 94, 65,
	65, 65, 65, 65, 65, 95, 95, 95, 95, 99,
	99, 77, 77, 79, 79, 78, 80, 100, 100, 104,
	101, 101, 105, 105, 105, 105, 103, 103, 103, 131,
	131, 131, 108, 108, 118, 118, 119, 119, 109, 109,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	121, 121, 121, 122, 122, 123, 123, 123, 130, 130,
	126, 126, 127, 127, 132, 132, 133, 133, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 199, 200, 137,
	138, 138, 138,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 1, 1, 1, 4, 6, 7,
	5, 9, 1, 3, 1, 3, 7, 8, 1, 1,
	9, 8, 7, 6, 6, 1, 1, 1, 3, 1,
	3, 0, 4, 3, 4, 5, 4, 1, 3, 3,
	2, 2, 2, 2, 2, 1, 1, 1, 2, 2,
	8, 4, 6, 5, 5, 0, 2, 1, 0, 2,
	1, 3, 3, 4, 4, 2, 4, 1, 3, 3,
	3, 8, 3, 1, 1, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 2,
	2, 2, 1, 2, 2, 2, 1, 4, 4, 2,
	2, 3, 3, 3, 3, 1, 1, 1, 1, 1,
	6, 6, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 0, 3, 0, 5, 0, 3, 5, 0,
	1, 0, 1, 0, 1, 2, 0, 2, 0, 3,
	0, 1, 0, 3, 3, 0, 2, 2, 0, 2,
	1, 2, 1, 0, 2, 5, 4, 1, 2, 2,
	3, 2, 0, 1, 2, 3, 3, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 0, 1, 1, 3,
	2, 3, 1, 10, 11, 11, 12, 3, 3, 1,
	1, 2, 2, 2, 0, 1, 3, 1, 2, 3,
	1, 1, 1, 6, 7, 7, 7, 7, 4, 5,
	4, 4, 7, 5, 5, 5, 12, 7, 5, 9,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 7, 1, 3, 8, 8, 3,
	3, 5, 4, 6, 5, 4, 4, 3, 2, 3,
	4, 4, 3, 4, 4, 4, 4, 4, 4, 3,
	2, 7, 2, 3, 4, 3, 7, 5, 4, 2,
	4, 4, 3, 3, 5, 2, 3, 1, 1, 0,
	1, 0, 1, 1, 1, 0, 2, 2, 0, 2,
	2, 0, 2, 0, 1, 1, 2, 1, 1, 2,
	1, 1, 2, 2, 2, 2, 2, 3, 3, 2,
	0, 2, 0, 2, 1, 2, 2, 0, 1, 1,
	0, 1, 1, 0, 1, 0, 1, 0, 1, 2,
	1, 1, 1, 1, 1, 3, 1, 2, 3, 5,
	0, 1, 2, 1, 1, 0, 2, 1, 3, 1,
	1, 1, 3, 1, 3, 3, 7, 1, 3, 1,
	3, 4, 4, 4, 3, 2, 4, 0, 1, 0,
	2, 0, 1, 0, 1, 2, 1, 1, 1, 2,
	2, 1, 2, 3, 2, 3, 2, 2, 2, 1,
	1, 3, 3, 0, 5, 4, 5, 5, 0, 2,
	1, 3, 3, 2, 3, 1, 2, 0, 3, 1,
	1, 3, 3, 4, 4, 5, 3, 4, 5, 6,
	2, 1, 2, 1, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 0, 2, 1, 1, 1, 3,
	1, 3, 1, 1, 1, 1, 1, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 2, 2, 2, 2, 2, 2, 2, 3,
	1, 1, 1, 1, 4, 5, 5, 6, 4, 4,
	6, 6, 6, 8, 8, 8, 8, 9, 8, 5,
	4, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 8, 8, 0, 2, 3,
	4, 4, 4, 4, 4, 4, 4, 0, 3, 4,
	7, 3, 1, 1, 2, 3, 3, 1, 2, 2,
	1, 2, 1, 2, 2, 1, 2, 0, 1, 0,
	2, 1, 2, 4, 0, 2, 1, 3, 5, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	0, 3, 0, 2, 0, 3, 1, 3, 2, 0,
	1, 1, 0, 2, 4, 4, 0, 2, 4, 2,
	1, 3, 5, 4, 6, 1, 3, 3, 5, 0,
	5, 1, 3, 1, 2, 3, 1, 1, 3, 3,
	1, 3, 3, 3, 3, 3, 1, 2, 1, 1,
	1, 1, 1, 1, 0, 2, 0, 3, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 1, 1, 1, 1, 0, 1, 1, 0, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	0, 1, 1,
}
var yyChk = [...]int{

	-1000, -197, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -19, -20, -21, -23, -24, -25,
	-22, -16, -3, -4, 6, 7, -29, 9, 10, 30,
	-17, 118, 119, 121, 120, 154, 122, 147, 51, 168,
	169, 171, 172, 25, 148, 149, 152, 153, 31, 32,
	124, -199, 8, 254, 55, -198, 352, -89, 15, -28,
	5, -26, -202, -26, -26, -26, -26, -26, -172, -174,
	55, 93, -123, 128, 75, 246, 125, 126, 132, -126,
	-190, -125, 58, 59, 60, 264, 140, 296, 297, 168,
	179, 173, 200, 192, 265, 298, 141, 190, 193, 233,
	138, 299, 220, 227, 69, 171, 242, 300, 150, 188,
	184, 301, 273, 182, 27, 302, 229, 205, 303, 269,
	231, 183, 228, 124, 304, 143, 136, 305, 206, 210,
	306, 234, 307, 308, 309, 177, 178, 310, 139, 236,
	204, 137, 33, 266, 36, 158, 237, 208, 311, 203,
	199, 312, 313, 314, 315, 202, 176, 198, 40, 212,
	211, 213, 232, 195, 316, 317, 318, 144, 319, 185,
	18, 320, 321, 322, 323, 324, 240, 153, 325, 156,
	326, 327, 328, 329, 330, 331, 230, 207, 209, 133,
	160, 268, 332, 238, 181, 333, 145, 157, 152, 241,
	146, 334, 335, 336, 337, 338, 339, 340, 172, 341,
	342, 343, 344, 167, 235, 244, 39, 217, 345, 175,
	135, 346, 169, 164, 222, 196, 159, 347, 348, 186,
	187, 201, 174, 197, 170, 161, 154, 349, 243, 218,
	270, 194, 191, 165, 350, 162, 163, 351, 223, 224,
	166, 267, 239, 189, 219, -109, 128, 246, 125, 224,
	130, 126, 126, 127, 128, 246, 125, 126, -56, -132,
	-190, -125, 128, 126, 111, 193, 233, 118, 221, 229,
	-115, 230, 160, -141, 126, -111, 220, 223, 224, 166,
	-190, 231, 235, 234, 225, -132, 170, -137, -137, -137,
	-137, -137, 222, 222, -137, -2, -93, 17, 16, -5,
	-3, -199, 6, 20, 21, -32, -39, 41, 42, -40,
	21, 34, -27, -38, 102, -41, -132, -62, 77, -67,
	29, -190, -125, 23, -66, -63, -82, -80, -81, 111,
	112, 113, 100, 101, 108, 78, 114, -71, -69, -70,
	-72, 62, 61, 70, 63, 64, 65, 66, 71, 72,
	73, -126, -78, -199, 45, 46, 255, 256, 257, 258,
	263, 259, 80, 35, 245, 253, 252, 251, 249, 250,
	247, 248, 261, 262, 131, 246, 125, 106, 254, -109,
	-109, 11, -50, -51, -56, -58, -132, -101, -140, 170,
	-105, 235, 234, -127, -103, -126, -124, 233, 193, 232,
	123, 271, 76, 22, 24, 215, 79, 111, 16, 80,
	110, 255, 118, 49, 272, 247, 248, 245, 257, 258,
	246, 221, 29, 10, 274, 25, 148, 21, 34, 104,
	120, 83, 84, 151, 23, 149, 73, 277, 19, 52,
	11, 13, 278, 279, 14, 131, 130, 95, 127, 47,
	8, 114, 26, 92, 43, 280, 28, 281, 282, 283,
	284, 45, 93, 17, 249, 250, 31, 285, 263, 155,
	106, 50, 37, 77, 286, 287, 71, 288, 74, 53,
	75, 15, 48, 289, 290, 291, 292, 94, 121, 254,
	46, 293, 125, 6, 260, 30, 147, 44, 294, 126,
	82, 261, 262, 129, 72, 5, 132, 32, 9, 51,
	54, 251, 252, 253, 35, 81, 12, 295, -173, 93,
	-164, -190, -56, 127, -56, 254, -119, 131, -119, -119,
	126, -56, -190, -190, 118, 120, 123, 53, -18, -56,
	-118, 131, -190, -118, -118, -118, -56, 115, -56, -190,
	30, -116, 93, 12, 246, -190, 160, 126, 161, 128,
	-138, -199, -127, -168, 127, 33, 139, -138, 164, 165,
	-138, -114, -113, 227, 228, 222, 226, 12, 165, 222,
	163, -138, -137, -137, -200, 57, -94, 19, 31, -41,
	-132, -90, -91, -41, -89, -2, -26, 37, -31, -40,
	44, 41, 42, 68, 11, -129, 76, 75, 92, -128,
	22, -126, 62, 115, -41, -64, 95, 77, 93, 94,
	79, 97, 96, 107, 100, 101, 102, 103, 104, 105,
	106, 98, 99, 110, 85, 86, 87, 88, 89, 90,
	91, -110, -199, -81, -199, 116, 117, -67, -67, -67,
	-67, -67, -67, -67, -67, -199, -2, -76, -41, -199,
	-199, -199, -199, -199, -199, -199, -199, -199, -85, -41,
	-199, -203, -73, -199, -203, -73, -203, -73, -203, -199,
	-203, -73, -203, -73, -203, -203, -73, -199, -199, -199,
	-199, -199, -199, -199, -57, 26, -56, -43, -44, -45,
	-46, -59, -81, -199, -56, -56, -50, -201, 56, 11,
	54, -201, 56, 115, 56, -101, 170, -102, -106, 236,
	238, 85, -131, -126, 62, 29, 30, 57, 56, -56,
	-143, -146, -148, -147, -149, -144, -145, 190, 191, 111,
	194, 196, 197, 198, 199, 200, 201, 202, 203, 204,
	205, 30, 150, 186, 187, 188, 189, 206, 207, 208,
	209, 210, 211, 212, 213, 173, 192, 265, 174, 175,
	176, 177, 178, 179, 181, 182, 183, 184, 185, -190,
	-138, 128, -190, 77, -190, -56, -56, -138, -138, -138,
	162, 162, 126, 126, 167, -56, 56, 129, -50, 23,
	53, -56, -190, -190, -133, -132, -124, -138, -116, 62,
	-41, -138, -138, -138, -56, -138, -138, -169, 11, 95,
	-138, -138, 11, -112, 11, 95, -41, -117, 93, 53,
	9, 95, 56, 18, 115, 56, -92, 24, 25, -93,
	-200, -68, -126, 63, 66, -36, -38, -56, -41, -41,
	-74, 71, 77, 72, 73, -128, 102, -133, -127, -124,
	-67, -75, -78, -81, 67, 95, 93, 94, 79, -67,
	-67, -67, -67, -67, -67, -67, -67, -67, -67, -67,
	-67, -67, -67, -67, -139, -190, 62, -190, -66, -66,
	-126, -37, 21, 34, -36, -200, 56, -200, -2, -36,
	-36, -41, -41, -82, 62, -36, -82, 62, -36, -36,
	-30, 21, 34, -83, -84, 81, -82, -126, -132, -200,
	-67, -126, -126, -36, -37, -37, -36, -36, -97, 156,
	-56, 30, 56, -52, -54, -53, -55, 43, 47, 49,
	44, 45, 46, 50, -136, 22, -43, -199, -135, 156,
	-134, 22, -132, 62, -97, 54, -43, -56, -43, -58,
	-132, 102, -105, -102, 56, 237, 239, 240, 53, 74,
	-41, -155, 110, -175, -176, -177, -127, 62, 63, -164,
	-165, -166, -178, 142, -183, 133, 135, 132, -167, 143,
	127, 28, 57, -160, 71, 77, -156, 218, -150, 55,
	-150, -150, -150, -150, -154, 193, -154, -154, -154, 55,
	55, -150, -150, -150, -158, 55, -158, -158, -159, 55,
	-159, -130, 54, -56, -138, 23, -138, -120, 123, 120,
	121, -186, 119, 215, 193, 69, 29, 15, 255, 156,
	270, -190, 157, -56, -56, -56, -56, -56, 123, 120,
	-56, -56, -56, -138, -56, -56, -116, -132, -132, 62,
	-56, 39, -41, -41, -133, -91, -94, -108, 19, 11,
	35, 35, -42, 56, 11, 71, 72, 73, 115, -199,
	-75, -67, -67, -67, -35, 151, 76, -200, -200, -36,
	-36, -41, -200, -200, -200, 56, 54, 22, 11, 11,
	-200, 11, 11, -200, -200, -36, -86, -84, 83, -41,
	-200, 115, -200, 56, 56, -200, -200, -200, -200, -200,
	-65, 30, 35, -2, -199, -199, -100, -104, -82, -44,
	-45, -45, -44, -45, 43, 43, 43, 48, 43, 48,
	43, -53, -132, -200, -60, 51, 130, 52, -199, -134,
	-61, 12, -43, -61, -61, 115, -106, -107, 241, 238,
	244, -190, 62, 56, -177, 85, 55, -190, 28, -167,
	-167, -170, -190, -170, 28, -152, 29, 71, -157, 219,
	63, -154, -154, -155, 30, -155, -155, -155, -163, 62,
	-163, 63, 63, 53, -126, -138, -137, -193, 138, 134,
	142, 143, 136, 58, 59, 60, 127, 28, 133, 135,
	156, 132, -193, -121, -122, 129, 22, 127, 28, 156,
	-192, 54, 162, 215, 162, 129, -138, -112, -112, 40,
	115, -56, -61, -38, -43, 102, -127, -37, -35, 76,
	-67, -67, -200, -200, -142, 111, 190, 150, 188, 184,
	204, 195, 217, 186, 218, -139, -142, -67, -67, -67,
	-67, 264, -89, 84, -41, 82, -127, -67, -67, -99,
	53, -100, -77, -79, -78, -199, -2, -95, -126, -98,
	-126, -61, 56, 85, -48, -47, 53, 54, -49, 53,
	-47, 43, 43, 127, 127, 127, -98, -89, -41, -61,
	238, 242, 243, -176, -177, -180, -179, -126, -183, -170,
	-170, 55, -153, 53, -67, 57, -155, -155, -190, 111,
	57, 56, 57, 56, 57, 56, -56, -137, -137, -56,
	-137, -126, -189, 267, -191, -190, -126, -126, -126, -56,
	-116, -116, -87, 13, -200, -67, -200, -150, -150, -150,
	-159, -150, 178, -150, 178, -200, -200, 19, 19, 19,
	19, -199, -34, 260, -41, 56, 56, 27, -99, 56,
	-200, -200, -200, 56, 115, -200, 56, -89, -104, -41,
	-41, 55, -41, -199, -199, -199, -200, -93, 57, 56,
	-150, -96, -126, -161, 215, 9, -154, 62, -154, 63,
	63, -138, 26, -188, -187, -127, 55, 54, -88, 14,
	16, -154, -190, -67, -67, -67, -67, -67, -93, 62,
	-67, -67, 28, -79, 35, -2, -199, -126, -126, -126,
	-93, -96, -96, -200, -96, -96, -135, -182, -181, 54,
	137, 69, -179, 57, 56, -162, 133, 28, 132, -70,
	-155, -155, 57, 57, -199, 56, 85, -96, -56, -41,
	-76, -200, -200, -200, -200, -33, 95, 267, -200, -200,
	-200, 9, -77, -2, 115, 57, -200, -200, -200, -60,
	-181, -190, -171, 85, 62, 145, -126, -151, 69, 28,
	28, -184, -185, 156, -187, -177, 57, -200, 265, 50,
	268, -100, -200, -126, 63, -56, 62, -200, 56, -126,
	-192, 40, 266, 269, 55, -185, 35, -189, 40, -96,
	158, 267, 57, 159, 268, -195, -196, 53, -199, 269,
	-196, 53, 10, 9, -67, 155, -194, 146, 141, 144,
	30, -194, -200, -200, 140, 29, 71,
}
var yyDef = [...]int{

	23, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 584, 0, 330, 330, 330, 330, 330, 330,
	0, 655, 638, 0, 0, 0, 0, -2, 317, 318,
	0, 320, 321, 959, 959, 959, 959, 959, 0, 0,
	959, 0, 38, 39, 957, 1, 3, 592, 0, 0,
	334, -2, 332, 0, 638, 638, 0, 0, 68, 69,
	0, 0, 0, 946, 0, 636, 636, 636, 656, 657,
	660, 661, 24, 25, 26, 786, 787, 788, 789, 790,
	791, 792, 793, 794, 795, 796, 797, 798, 799, 800,
	801, 802, 803, 804, 805, 806, 807, 808, 809, 810,
	811, 812, 813, 814, 815, 816, 817, 818, 819, 820,
	821, 822, 823, 824, 825, 826, 827, 828, 829, 830,
	831, 832, 833, 834, 835, 836, 837, 838, 839, 840,
	841, 842, 843, 844, 845, 846, 847, 848, 849, 850,
	851, 852, 853, 854, 855, 856, 857, 858, 859, 860,
	861, 862, 863, 864, 865, 866, 867, 868, 869, 870,
	871, 872, 873, 874, 875, 876, 877, 878, 879, 880,
	881, 882, 883, 884, 885, 886, 887, 888, 889, 890,
	891, 892, 893, 894, 895, 896, 897, 898, 899, 900,
	901, 902, 903, 904, 905, 906, 907, 908, 909, 910,
	911, 912, 913, 914, 915, 916, 917, 918, 919, 920,
	921, 922, 923, 924, 925, 926, 927, 928, 929, 930,
	931, 932, 933, 934, 935, 936, 937, 938, 939, 940,
	941, 942, 943, 944, 945, 947, 948, 949, 950, 951,
	952, 953, 954, 955, 956, 0, 0, 0, 0, 0,
	639, 0, 634, 0, 634, 634, 634, 0, 268, 410,
	664, 665, 946, 0, 0, 0, 308, 0, 960, 280,
	0, 282, 960, 0, 960, 0, 289, 0, 0, 295,
	960, 300, 314, 315, 302, 316, 319, 322, 323, 324,
	325, 326, 959, 959, 329, 32, 596, 0, 0, 584,
	34, 0, 330, 335, 336, 0, 343, -2, -2, 348,
	350, 351, 331, 0, 356, 360, 0, 420, 0, 425,
	427, -2, -2, 0, 462, 463, 464, 465, 466, 0,
	0, 0, 0, 0, 0, 0, 0, 490, 491, 492,
	493, 569, 570, 571, 572, 573, 574, 575, 576, 429,
	430, 566, 616, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 557, 0, 527, 527, 527, 527, 527, 527,
	527, 527, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 47, 49, 410, 53, 0, 935,
	620, -2, -2, 0, 0, 662, 663, -2, 799, -2,
	668, 669, 670, 671, 672, 673, 674, 675, 676, 677,
	678, 679, 680, 681, 682, 683, 684, 685, 686, 687,
	688, 689, 690, 691, 692, 693, 694, 695, 696, 697,
	698, 699, 700, 701, 702, 703, 704, 705, 706, 707,
	708, 709, 710, 711, 712, 713, 714, 715, 716, 717,
	718, 719, 720, 721, 722, 723, 724, 725, 726, 727,
	728, 729, 730, 731, 732, 733, 734, 735, 736, 737,
	738, 739, 740, 741, 742, 743, 744, 745, 746, 747,
	748, 749, 750, 751, 752, 753, 754, 755, 756, 757,
	758, 759, 760, 761, 762, 763, 764, 765, 766, 767,
	768, 769, 770, 771, 772, 773, 774, 775, 776, 777,
	778, 779, 780, 781, 782, 783, 784, 785, 0, 0,
	87, 0, 85, 0, 960, 0, 0, 0, 0, 0,
	0, 960, 960, 960, 0, 0, 0, 0, 259, 0,
	0, 0, 0, 0, 0, 0, 267, 0, 269, 960,
	308, 272, 0, 0, 960, 960, 960, 0, 960, 960,
	279, 961, 962, 0, 189, 190, 191, 283, 960, 960,
	285, 0, 305, 303, 304, 297, 298, 0, 311, 292,
	293, 296, 327, 328, 33, 958, 27, 0, 0, 593,
	0, 585, 586, 589, 592, 32, 347, 0, 0, 349,
	344, 352, 353, 333, 0, 357, 0, 0, 0, 361,
	0, 363, 364, 0, 423, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 447, 448, 449, 450, 451, 452,
	453, 426, 0, 440, 0, 0, 0, 482, 483, 484,
	485, 486, 487, 488, 0, 345, 32, 0, 460, 0,
	0, 0, 0, 0, 0, 0, 0, 340, 0, 558,
	0, 511, 519, 0, 512, 520, 513, 521, 514, 0,
	515, 522, 516, 523, 517, 518, 524, 0, 0, 0,
	345, 345, 0, 0, 51, 0, 409, 0, 367, 369,
	370, 371, -2, 0, 393, -2, 0, 0, 0, 45,
	46, 0, 0, 0, 0, 54, 935, 56, 57, 0,
	0, 0, 165, 629, 630, 631, 627, 214, 0, 0,
	153, 149, 93, 94, 95, 142, 97, 142, 142, 142,
	142, 162, 162, 162, 162, 125, 126, 127, 128, 129,
	0, 0, 112, 142, 142, 142, 116, 132, 133, 134,
	135, 136, 137, 138, 139, 98, 99, 100, 101, 102,
	103, 104, 105, 106, 144, 144, 144, 146, 146, 658,
	71, 0, 960, 0, 960, 83, 0, 228, 230, 231,
	0, 0, 0, 0, 0, 0, 0, 0, 262, 635,
	0, 960, 265, 266, 411, 666, 667, 270, 271, 309,
	310, 273, 274, 275, 276, 277, 278, 0, 192, 193,
	284, 288, 0, 308, 0, 0, 290, 291, 0, 0,
	597, 0, 0, 0, 0, 0, 588, 590, 591, 596,
	35, 0, 577, 0, 0, 365, 354, 30, 421, 422,
	424, 441, 0, 443, 445, 362, 358, 0, 567, -2,
	431, 432, 456, 457, 458, 0, 0, 0, 0, 454,
	436, 0, 467, 468, 469, 470, 471, 472, 473, 474,
	475, 476, 477, 478, 481, 542, 543, 0, 479, 480,
	489, 0, 0, 0, 346, 459, 0, 615, 32, 0,
	0, 0, 0, 464, 569, 0, 464, 569, 0, 0,
	0, 341, 342, 564, 561, 0, 0, 566, 0, 528,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	408, 0, 0, 0, 0, 0, 0, 398, 0, 0,
	401, 0, 0, 0, 0, 392, 0, 0, 413, 880,
	394, 0, 396, 397, 418, 0, 418, 48, 418, 50,
	0, 412, 621, 55, 0, 0, 60, 61, 622, 623,
	624, 625, 0, 84, 215, 217, 220, 221, 222, 88,
	89, 90, 0, 0, 202, 0, 0, 196, 196, 0,
	194, 195, 86, 156, 154, 0, 151, 150, 96, 0,
	162, 162, 119, 120, 165, 0, 165, 165, 165, 0,
	0, 113, 114, 115, 107, 0, 108, 109, 110, 0,
	111, 0, 0, 960, 73, 637, 74, 959, 0, 0,
	650, 229, 640, 641, 642, 643, 644, 645, 646, 647,
	648, 649, 0, 75, 233, 235, 234, 238, 0, 0,
	0, 260, 960, 264, 305, 305, 287, 306, 307, 312,
	294, 0, 594, 595, 0, 587, 28, 0, 632, 633,
	578, 579, 418, 0, 0, 442, 444, 446, 0, 345,
	433, 454, 437, 0, 434, 0, 0, 428, 494, 0,
	0, 461, -2, 498, 499, 0, 0, 0, 0, 0,
	535, 0, 0, 536, 0, 584, 0, 562, 0, 0,
	510, 0, 529, 0, 0, 530, 531, 532, 533, 534,
	609, 0, 0, -2, 0, 0, 418, 617, 0, 368,
	387, 389, 0, 384, 399, 400, 402, 0, 404, 0,
	406, 407, 372, 374, 375, 0, 0, 0, 0, 395,
	584, 0, 418, 43, 44, 0, 58, 59, 0, 0,
	65, 166, 167, 0, 218, 0, 0, 0, 184, 196,
	196, 187, 197, 188, 0, 158, 0, 155, 92, 152,
	0, 165, 165, 121, 0, 122, 123, 124, 0, 140,
	0, 0, 0, 0, 659, 72, 223, 959, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 959, 0, 959, 651, 652, 653, 654, 0,
	78, 0, 0, 0, 0, 0, 263, 308, 308, 598,
	0, 29, 580, 355, 366, 359, 568, 0, 435, 0,
	455, 438, 495, 496, 0, 142, 142, 547, 142, 146,
	550, 142, 552, 142, 555, 0, 0, 0, 0, 0,
	0, 0, 559, 509, 565, 0, 567, 0, 0, 36,
	0, 609, 599, 611, 613, 0, 32, 0, 605, 0,
	379, 584, 0, 0, 381, 388, 0, 0, 382, 0,
	383, 403, 405, 0, 0, 0, 0, 592, 419, 42,
	62, 63, 64, 216, 219, 0, 198, 142, 201, 185,
	186, 0, 160, 0, 157, 143, 117, 118, 163, 164,
	162, 0, 162, 0, 147, 0, 960, 224, 225, 226,
	227, 0, 232, 0, 76, 77, 0, 0, 237, 261,
	281, 286, 582, 0, 497, 439, 500, 544, 162, 548,
	549, 551, 553, 554, 556, 502, 501, 0, 0, 0,
	0, 0, 592, 0, 563, 0, 0, 0, 37, 0,
	614, -2, 0, 0, 0, 52, 0, 592, 618, 619,
	385, 0, 390, 0, 0, 0, 393, 41, 176, 0,
	200, 0, 377, 168, 161, 0, 165, 141, 165, 0,
	0, 70, 0, 79, 80, 0, 0, 0, 31, 0,
	0, 545, 546, 0, 0, 0, 0, 537, 0, 560,
	0, 0, 0, 612, 0, -2, 0, 607, 606, 380,
	40, 0, 0, 415, 0, 0, 413, 175, 177, 0,
	182, 0, 199, 0, 0, 173, 0, 170, 172, 159,
	130, 131, 145, 148, 0, 0, 0, 0, 239, 583,
	581, 503, 505, 504, 506, 0, 0, 0, 508, 525,
	526, 0, 602, 32, 0, 386, 414, 416, 417, 376,
	178, 179, 0, 183, 181, 0, 378, 91, 0, 169,
	171, 0, 255, 0, 81, 82, 75, 507, 0, 0,
	0, 610, -2, 608, 180, 0, 174, 254, 0, 0,
	78, 538, 0, 541, 0, 256, 0, 236, 539, 0,
	0, 0, 203, 0, 0, 204, 205, 0, 0, 540,
	206, 0, 0, 0, 0, 0, 207, 209, 210, 0,
	0, 208, 257, 258, 211, 212, 213,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 78, 3, 3, 3, 105, 97, 3,
	55, 57, 102, 100, 56, 101, 115, 103, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 352,
	86, 85, 87, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 107, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 96, 3, 108,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 79, 80, 81, 82, 83, 84, 88,
	89, 90, 91, 92, 93, 94, 95, 98, 99, 104,
	106, 109, 110, 111, 112, 113, 114, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}
var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:327
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:332
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:333
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:337
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:359
		{
			setParseTree(yylex, nil)
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:365
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), NoAt)
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:369
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), SingleAt)
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:373
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), DoubleAt)
		}
	case 27:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:379
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 28:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:387
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 29:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:391
		{
			yyVAL.selStmt = NewSelect(Comments(yyDollar[2].bytes2), "" /*hints*/, SelectExprs{Nextval{Expr: yyDollar[5].expr}}, []string{yyDollar[3].str} /*options*/, TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}, nil /*where*/, nil /*groupBy*/, nil /*having*/)
		}
	case 30:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:397
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 31:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:405
		{
			yyVAL.selStmt = NewSelect(Comments(yyDollar[2].bytes2), yyDollar[4].str /*hints*/, yyDollar[5].selectExprs /*SelectExprs*/, yyDollar[3].strs /*options*/, yyDollar[6].tableExprs /*from*/, NewWhere(WhereStr, yyDollar[7].expr), GroupBy(yyDollar[8].exprs), NewWhere(HavingStr, yyDollar[9].expr))
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:411
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:415
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:421
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 35:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:425
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 36:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:432
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 37:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:444
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:456
		{
			yyVAL.str = InsertStr
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:460
		{
			yyVAL.str = ReplaceStr
		}
	case 40:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:466
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].updateExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 41:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:472
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 42:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:476
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 43:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:480
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 44:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:484
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:489
		{
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:490
		{
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:494
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:498
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:504
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:508
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 51:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:513
		{
			yyVAL.partitions = nil
		}
	case 52:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:517
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 53:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:523
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 54:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:527
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 55:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:531
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 56:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:535
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:541
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 58:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:545
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:551
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(yyDollar[3].str))}
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:555
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(TxReadWrite))}
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:559
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(TxReadOnly))}
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:565
		{
			yyVAL.str = IsolationLevelRepeatableRead
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:569
		{
			yyVAL.str = IsolationLevelReadCommitted
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:573
		{
			yyVAL.str = IsolationLevelReadUncommitted
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:577
		{
			yyVAL.str = IsolationLevelSerializable
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:583
		{
			yyVAL.str = SessionStr
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:587
		{
			yyVAL.str = GlobalStr
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:593
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:598
		{
			// Create table [name] like [name]
			yyDollar[1].ddl.OptLike = yyDollar[2].optLike
			yyVAL.statement = yyDollar[1].ddl
		}
	case 70:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:604
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName}
		}
	case 71:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:609
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 72:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:613
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[5].tableName.ToViewName()}
		}
	case 73:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:617
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].colIdent.String())}
		}
	case 74:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:621
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].colIdent.String())}
		}
	case 75:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:626
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:630
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:636
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 78:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:641
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:646
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:652
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:657
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:663
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 83:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:669
		{
			yyVAL.ddl = &DDL{Action: CreateStr, Table: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 84:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:676
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:683
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[2].tableName}
		}
	case 86:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:687
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[3].tableName}
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:693
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:698
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:702
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:706
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 91:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:712
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].sqlVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:723
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:734
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].sqlVal
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:739
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:745
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:749
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:753
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:757
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:761
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:765
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:769
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:773
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:777
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:783
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:789
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:795
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:801
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:807
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:815
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:819
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:823
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:827
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:831
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 117:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:837
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 118:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:841
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:845
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:849
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:853
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:857
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:861
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:865
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:869
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:873
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:877
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:881
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:885
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 130:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:889
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 131:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:894
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:900
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:904
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:908
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:912
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:916
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:920
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:924
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:928
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:934
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:939
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 142:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:944
		{
			yyVAL.sqlVal = nil
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:948
		{
			yyVAL.sqlVal = NewIntVal(yyDollar[2].bytes)
		}
	case 144:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:953
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 145:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:957
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 146:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:965
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:969
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 148:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:975
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 149:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:983
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:987
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 151:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:992
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:996
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 153:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1002
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1006
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 155:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1010
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 156:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1015
		{
			yyVAL.optVal = nil
		}
	case 157:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1019
		{
			yyVAL.optVal = yyDollar[2].expr
		}
	case 158:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1024
		{
			yyVAL.optVal = nil
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1028
		{
			yyVAL.optVal = yyDollar[3].expr
		}
	case 160:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1033
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1037
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 162:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1042
		{
			yyVAL.str = ""
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1046
		{
			yyVAL.str = string(yyDollar[3].colIdent.String())
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1050
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 165:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1055
		{
			yyVAL.str = ""
		}
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1059
		{
			yyVAL.str = string(yyDollar[2].colIdent.String())
		}
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1063
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 168:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1068
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1072
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1076
		{
			yyVAL.colKeyOpt = colKey
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1080
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1084
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 173:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1089
		{
			yyVAL.sqlVal = nil
		}
	case 174:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1093
		{
			yyVAL.sqlVal = NewStrVal(yyDollar[2].bytes)
		}
	case 175:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1099
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 176:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1103
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1109
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1113
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1119
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].colIdent.String())}
		}
	case 180:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1123
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1128
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 182:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1134
		{
			yyVAL.str = ""
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1138
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1144
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 185:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1148
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1152
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1156
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1160
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1166
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1170
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1174
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1181
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1185
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1191
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1195
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 196:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1200
		{
			yyVAL.str = ""
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1204
		{
			yyVAL.str = string(yyDollar[1].colIdent.String())
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1210
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 199:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1214
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1220
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].sqlVal}
		}
	case 201:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1226
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].colIdent.String()), Details: yyDollar[3].constraintInfo}
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1230
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 203:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1237
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 204:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1241
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 205:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1245
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 206:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1249
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 207:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1255
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 208:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1261
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1267
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1271
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1275
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1279
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1283
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 214:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1288
		{
			yyVAL.str = ""
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1292
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 216:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1296
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1304
		{
			yyVAL.str = yyDollar[1].str
		}
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1308
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 219:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1312
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1318
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1322
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1326
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 223:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1332
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 224:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1336
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 225:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1340
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 226:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1344
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[4].tableName}, ToTables: TableNames{yyDollar[7].tableName}}
		}
	case 227:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1349
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 228:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1354
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 229:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1358
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 230:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1362
		{
			yyVAL.statement = &DBDDL{Action: AlterStr, DBName: string(yyDollar[3].colIdent.String())}
		}
	case 231:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1366
		{
			yyVAL.statement = &DBDDL{Action: AlterStr, DBName: string(yyDollar[3].colIdent.String())}
		}
	case 232:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1370
		{
			yyVAL.statement = &DDL{
				Action: CreateVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name:   NewColIdent(yyDollar[5].tableName.Name.String()),
					Type:   yyDollar[6].colIdent,
					Params: yyDollar[7].vindexParams,
				},
			}
		}
	case 233:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1382
		{
			yyVAL.statement = &DDL{
				Action: DropVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name: NewColIdent(yyDollar[5].tableName.Name.String()),
				},
			}
		}
	case 234:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1392
		{
			yyVAL.statement = &DDL{Action: AddVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 235:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1396
		{
			yyVAL.statement = &DDL{Action: DropVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 236:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1400
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 237:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1413
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 238:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1423
		{
			yyVAL.statement = &DDL{Action: AddSequenceStr, Table: yyDollar[5].tableName}
		}
	case 239:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1427
		{
			yyVAL.statement = &DDL{
				Action: AddAutoIncStr,
				Table:  yyDollar[4].tableName,
				AutoIncSpec: &AutoIncSpec{
					Column:   yyDollar[7].colIdent,
					Sequence: yyDollar[9].tableName,
				},
			}
		}
	case 254:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1456
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1462
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 256:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1466
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 257:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1472
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 258:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1476
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 259:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1482
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 260:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1488
		{
			yyVAL.ddl = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 261:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1492
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 262:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1500
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 263:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1508
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName}
		}
	case 264:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1513
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: TableNames{yyDollar[4].tableName.ToViewName()}, IfExists: exists}
		}
	case 265:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1521
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].colIdent.String())}
		}
	case 266:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1525
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].colIdent.String())}
		}
	case 267:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1531
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 268:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1535
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 269:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1540
		{
			yyVAL.statement = &OtherRead{}
		}
	case 270:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1546
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].colIdent.String())}
		}
	case 271:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1551
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Type: CharsetStr, ShowTablesOpt: showTablesOpt}
		}
	case 272:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1556
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowTablesOpt: showTablesOpt}
		}
	case 273:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1561
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 274:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1566
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].colIdent.String())}
		}
	case 275:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1570
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 276:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1574
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 277:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1578
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 278:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1582
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 279:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1586
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1590
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 281:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1594
		{
			showTablesOpt := &ShowTablesOpt{DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Extended: string(yyDollar[2].str), Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1600
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 283:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1604
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 284:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1608
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 285:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1612
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 286:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1616
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 287:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1621
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[3].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 288:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1631
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 289:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1635
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 290:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1639
		{
			// Cannot dereference $4 directly, or else the parser stackcannot be pooled. See yyParsePooled
			showCollationFilterOpt := yyDollar[4].expr
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: &showCollationFilterOpt}
		}
	case 291:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1645
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Scope: string(yyDollar[2].bytes), Type: string(yyDollar[3].bytes), ShowTablesOpt: showTablesOpt}
		}
	case 292:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1650
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1654
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 294:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1658
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName}
		}
	case 295:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1662
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 296:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1676
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].colIdent.String())}
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1682
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1686
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 299:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1692
		{
			yyVAL.str = ""
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1696
		{
			yyVAL.str = "extended "
		}
	case 301:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1702
		{
			yyVAL.str = ""
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1706
		{
			yyVAL.str = "full "
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1712
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1716
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 305:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1722
		{
			yyVAL.str = ""
		}
	case 306:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1726
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 307:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1730
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 308:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1736
		{
			yyVAL.showFilter = nil
		}
	case 309:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1740
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 310:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1744
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 311:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1750
		{
			yyVAL.showFilter = nil
		}
	case 312:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1754
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 313:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1760
		{
			yyVAL.str = ""
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1764
		{
			yyVAL.str = SessionStr
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1768
		{
			yyVAL.str = GlobalStr
		}
	case 316:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1774
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1778
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1784
		{
			yyVAL.statement = &Begin{}
		}
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1788
		{
			yyVAL.statement = &Begin{}
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1794
		{
			yyVAL.statement = &Commit{}
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1800
		{
			yyVAL.statement = &Rollback{}
		}
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1806
		{
			yyVAL.statement = &OtherRead{}
		}
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1810
		{
			yyVAL.statement = &OtherRead{}
		}
	case 324:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1814
		{
			yyVAL.statement = &OtherRead{}
		}
	case 325:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1818
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 326:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1822
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 327:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1826
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 328:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1830
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 329:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1836
		{
			yyVAL.statement = &DDL{Action: FlushStr}
		}
	case 330:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1840
		{
			setAllowComments(yylex, true)
		}
	case 331:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1844
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 332:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1850
		{
			yyVAL.bytes2 = nil
		}
	case 333:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1854
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1860
		{
			yyVAL.str = UnionStr
		}
	case 335:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1864
		{
			yyVAL.str = UnionAllStr
		}
	case 336:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1868
		{
			yyVAL.str = UnionDistinctStr
		}
	case 337:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1873
		{
			yyVAL.str = ""
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1877
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1881
		{
			yyVAL.str = SQLCacheStr
		}
	case 340:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1886
		{
			yyVAL.str = ""
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1890
		{
			yyVAL.str = DistinctStr
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1894
		{
			yyVAL.str = DistinctStr
		}
	case 343:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1899
		{
			yyVAL.str = ""
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1903
		{
			yyVAL.str = StraightJoinHint
		}
	case 345:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1908
		{
			yyVAL.selectExprs = nil
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1912
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 347:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1917
		{
			yyVAL.strs = []string{}
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1921
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 349:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1925
		{
			yyVAL.strs = append(yyVAL.strs, yyDollar[2].str)
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1931
		{
			yyVAL.str = DistinctStr
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1935
		{
			yyVAL.str = DistinctStr
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1939
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1943
		{
			yyVAL.str = SQLCacheStr
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1949
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1953
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1959
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 357:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1963
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 358:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1967
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 359:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1971
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 360:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1976
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1980
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 362:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1984
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1991
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 365:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1996
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 366:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2000
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2006
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 368:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2010
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2020
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 372:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2024
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2028
		{
			// missed alias for subquery
			yylex.Error("Every derived table must have its own alias")
			return 1
		}
	case 374:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2034
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 375:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2040
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 376:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2044
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2050
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 378:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2054
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2060
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 380:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2064
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 381:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2077
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 382:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2081
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 383:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2085
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 384:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2089
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 385:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2095
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 386:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2097
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 387:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2101
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2103
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 389:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2107
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 390:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2109
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 391:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2112
		{
			yyVAL.empty = struct{}{}
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2114
		{
			yyVAL.empty = struct{}{}
		}
	case 393:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2117
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2121
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 395:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2125
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2132
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2138
		{
			yyVAL.str = JoinStr
		}
	case 399:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2142
		{
			yyVAL.str = JoinStr
		}
	case 400:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2146
		{
			yyVAL.str = JoinStr
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2152
		{
			yyVAL.str = StraightJoinStr
		}
	case 402:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2158
		{
			yyVAL.str = LeftJoinStr
		}
	case 403:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2162
		{
			yyVAL.str = LeftJoinStr
		}
	case 404:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2166
		{
			yyVAL.str = RightJoinStr
		}
	case 405:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2170
		{
			yyVAL.str = RightJoinStr
		}
	case 406:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2176
		{
			yyVAL.str = NaturalJoinStr
		}
	case 407:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2180
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 408:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2190
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2194
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2200
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 411:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2204
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 412:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2210
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 413:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2215
		{
			yyVAL.indexHints = nil
		}
	case 414:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2219
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 415:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2223
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr}
		}
	case 416:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2227
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 417:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2231
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 418:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2236
		{
			yyVAL.expr = nil
		}
	case 419:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2240
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2246
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2250
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 422:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2254
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 423:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2258
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2262
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2266
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 426:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2270
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 427:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2276
		{
			yyVAL.str = ""
		}
	case 428:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2280
		{
			yyVAL.str = string(yyDollar[2].colIdent.String())
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2286
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2290
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 431:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2296
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 432:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2300
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 433:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2304
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 434:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2308
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 435:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2312
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 436:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2316
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 437:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2320
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 438:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2324
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 439:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2328
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 440:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2332
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2338
		{
			yyVAL.str = IsNullStr
		}
	case 442:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2342
		{
			yyVAL.str = IsNotNullStr
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2346
		{
			yyVAL.str = IsTrueStr
		}
	case 444:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2350
		{
			yyVAL.str = IsNotTrueStr
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2354
		{
			yyVAL.str = IsFalseStr
		}
	case 446:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2358
		{
			yyVAL.str = IsNotFalseStr
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2364
		{
			yyVAL.str = EqualStr
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2368
		{
			yyVAL.str = LessThanStr
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2372
		{
			yyVAL.str = GreaterThanStr
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2376
		{
			yyVAL.str = LessEqualStr
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2380
		{
			yyVAL.str = GreaterEqualStr
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2384
		{
			yyVAL.str = NotEqualStr
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2388
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 454:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2393
		{
			yyVAL.expr = nil
		}
	case 455:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2397
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2403
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2407
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2411
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 459:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2417
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2423
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 461:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2427
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2433
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2437
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2441
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2445
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2449
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 467:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2453
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 468:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2457
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 469:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2461
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 470:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2465
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 471:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2469
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 472:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2473
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 473:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2477
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 474:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2481
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 475:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2485
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 476:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2489
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 477:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2493
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 478:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2497
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 479:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2501
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 480:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2505
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 481:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2509
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 482:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2513
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 483:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2517
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 484:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2521
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Str, Expr: yyDollar[2].expr}
		}
	case 485:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2525
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 486:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2533
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 487:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2547
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 488:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2551
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 489:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2555
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 494:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2573
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 495:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2577
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 496:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2581
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 497:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2585
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 498:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2595
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 499:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2599
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 500:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2603
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 501:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2607
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 502:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2611
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 503:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2615
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 504:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2619
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 505:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2623
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 506:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2627
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 507:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2631
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 508:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2635
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str, Limit: yyDollar[7].limit}
		}
	case 509:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2639
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 510:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2643
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 511:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2653
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 512:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2657
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 513:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2661
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 514:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2666
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 515:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2671
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 516:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2676
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 517:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2682
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 518:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2687
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 519:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2692
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 520:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2696
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 521:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2700
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_time"), Fsp: yyDollar[2].expr}
		}
	case 522:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2705
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtime"), Fsp: yyDollar[2].expr}
		}
	case 523:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2710
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtimestamp"), Fsp: yyDollar[2].expr}
		}
	case 524:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2715
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_time"), Fsp: yyDollar[2].expr}
		}
	case 525:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2719
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampadd"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 526:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2723
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampdiff"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 529:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2733
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 530:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2743
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 531:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2747
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 532:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2751
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("schema"), Exprs: yyDollar[3].selectExprs}
		}
	case 533:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2755
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 534:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2759
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 535:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2763
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 536:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2767
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 537:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2773
		{
			yyVAL.str = ""
		}
	case 538:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2777
		{
			yyVAL.str = BooleanModeStr
		}
	case 539:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2781
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 540:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2785
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 541:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2789
		{
			yyVAL.str = QueryExpansionStr
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2795
		{
			yyVAL.str = string(yyDollar[1].colIdent.String())
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2799
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 544:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2805
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 545:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2809
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 546:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2813
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: string(yyDollar[3].colIdent.String())}
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2817
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 548:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2821
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 549:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2825
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2831
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 551:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2835
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2839
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 553:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2843
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 554:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2847
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2851
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 556:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2855
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 557:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2860
		{
			yyVAL.expr = nil
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2864
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 559:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2869
		{
			yyVAL.str = string("")
		}
	case 560:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2873
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2879
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 562:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2883
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 563:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2889
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 564:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2894
		{
			yyVAL.expr = nil
		}
	case 565:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2898
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2904
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 567:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2908
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 568:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2912
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2918
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2922
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2926
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2930
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2934
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2938
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2942
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2946
		{
			yyVAL.expr = &NullVal{}
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2952
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 578:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2961
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 579:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2965
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 580:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2970
		{
			yyVAL.exprs = nil
		}
	case 581:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2974
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 582:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2979
		{
			yyVAL.expr = nil
		}
	case 583:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2983
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 584:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2988
		{
			yyVAL.orderBy = nil
		}
	case 585:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2992
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2998
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 587:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3002
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 588:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3008
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 589:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3013
		{
			yyVAL.str = AscScr
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3017
		{
			yyVAL.str = AscScr
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3021
		{
			yyVAL.str = DescScr
		}
	case 592:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3026
		{
			yyVAL.limit = nil
		}
	case 593:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3030
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 594:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3034
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 595:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3038
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 596:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3043
		{
			yyVAL.str = ""
		}
	case 597:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3047
		{
			yyVAL.str = ForUpdateStr
		}
	case 598:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3051
		{
			yyVAL.str = ShareModeStr
		}
	case 599:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3064
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3068
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 601:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3072
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 602:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3077
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 603:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3081
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 604:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3085
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3092
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 606:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3096
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 607:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3100
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 608:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3104
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 609:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3109
		{
			yyVAL.updateExprs = nil
		}
	case 610:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3113
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3119
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 612:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3123
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3129
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 614:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3133
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 615:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3139
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3145
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = yyDollar[1].valTuple[0]
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3155
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 618:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3159
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 619:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3165
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3171
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 621:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3175
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 622:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3181
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 623:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3185
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 624:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3189
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 625:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3193
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 627:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3200
		{
			yyVAL.bytes = []byte("charset")
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3207
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3211
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3215
		{
			yyVAL.expr = &Default{}
		}
	case 634:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3224
		{
			yyVAL.byt = 0
		}
	case 635:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3226
		{
			yyVAL.byt = 1
		}
	case 636:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3229
		{
			yyVAL.empty = struct{}{}
		}
	case 637:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3231
		{
			yyVAL.empty = struct{}{}
		}
	case 638:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3234
		{
			yyVAL.str = ""
		}
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3236
		{
			yyVAL.str = IgnoreStr
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3240
		{
			yyVAL.empty = struct{}{}
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3242
		{
			yyVAL.empty = struct{}{}
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3244
		{
			yyVAL.empty = struct{}{}
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3246
		{
			yyVAL.empty = struct{}{}
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3248
		{
			yyVAL.empty = struct{}{}
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3250
		{
			yyVAL.empty = struct{}{}
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3252
		{
			yyVAL.empty = struct{}{}
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3254
		{
			yyVAL.empty = struct{}{}
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3256
		{
			yyVAL.empty = struct{}{}
		}
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3258
		{
			yyVAL.empty = struct{}{}
		}
	case 650:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3261
		{
			yyVAL.empty = struct{}{}
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3263
		{
			yyVAL.empty = struct{}{}
		}
	case 652:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3265
		{
			yyVAL.empty = struct{}{}
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3269
		{
			yyVAL.empty = struct{}{}
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3271
		{
			yyVAL.empty = struct{}{}
		}
	case 655:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3274
		{
			yyVAL.empty = struct{}{}
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3276
		{
			yyVAL.empty = struct{}{}
		}
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3278
		{
			yyVAL.empty = struct{}{}
		}
	case 658:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3281
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 659:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3283
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3287
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3291
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3298
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3304
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].colIdent.String()))
		}
	case 665:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3308
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 667:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3315
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 957:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3630
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 958:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3639
		{
			decNesting(yylex)
		}
	case 959:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3644
		{
			skipToEnd(yylex)
		}
	case 960:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3649
		{
			skipToEnd(yylex)
		}
	case 961:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3653
		{
			skipToEnd(yylex)
		}
	case 962:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3657
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
