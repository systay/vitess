// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line sql.y:53
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	sqlVal               *SQLVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	colIdent             ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	colKeyOpt            ColumnKeyOption
	optVal               Expr
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexColumn          *IndexColumn
	indexColumns         []*IndexColumn
	constraintDefinition *ConstraintDefinition
	constraintInfo       ConstraintInfo
	ReferenceAction      ReferenceAction
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
	optLike              *OptLike
}

const LEX_ERROR = 57346
const UNION = 57347
const EXPLAIN = 57348
const SELECT = 57349
const STREAM = 57350
const INSERT = 57351
const UPDATE = 57352
const DELETE = 57353
const FROM = 57354
const WHERE = 57355
const GROUP = 57356
const HAVING = 57357
const ORDER = 57358
const BY = 57359
const LIMIT = 57360
const OFFSET = 57361
const FOR = 57362
const ALL = 57363
const DISTINCT = 57364
const AS = 57365
const EXISTS = 57366
const ASC = 57367
const DESC = 57368
const INTO = 57369
const DUPLICATE = 57370
const KEY = 57371
const DEFAULT = 57372
const SET = 57373
const LOCK = 57374
const UNLOCK = 57375
const KEYS = 57376
const VALUES = 57377
const LAST_INSERT_ID = 57378
const NEXT = 57379
const VALUE = 57380
const SHARE = 57381
const MODE = 57382
const SQL_NO_CACHE = 57383
const SQL_CACHE = 57384
const JOIN = 57385
const STRAIGHT_JOIN = 57386
const LEFT = 57387
const RIGHT = 57388
const INNER = 57389
const OUTER = 57390
const CROSS = 57391
const NATURAL = 57392
const USE = 57393
const FORCE = 57394
const ON = 57395
const USING = 57396
const ID = 57397
const HEX = 57398
const STRING = 57399
const INTEGRAL = 57400
const FLOAT = 57401
const HEXNUM = 57402
const VALUE_ARG = 57403
const LIST_ARG = 57404
const COMMENT = 57405
const COMMENT_KEYWORD = 57406
const BIT_LITERAL = 57407
const NULL = 57408
const TRUE = 57409
const FALSE = 57410
const OFF = 57411
const OR = 57412
const AND = 57413
const NOT = 57414
const BETWEEN = 57415
const CASE = 57416
const WHEN = 57417
const THEN = 57418
const ELSE = 57419
const END = 57420
const LE = 57421
const GE = 57422
const NE = 57423
const NULL_SAFE_EQUAL = 57424
const IS = 57425
const LIKE = 57426
const REGEXP = 57427
const IN = 57428
const SHIFT_LEFT = 57429
const SHIFT_RIGHT = 57430
const DIV = 57431
const MOD = 57432
const UNARY = 57433
const COLLATE = 57434
const BINARY = 57435
const UNDERSCORE_BINARY = 57436
const UNDERSCORE_UTF8MB4 = 57437
const INTERVAL = 57438
const JSON_EXTRACT_OP = 57439
const JSON_UNQUOTE_EXTRACT_OP = 57440
const CREATE = 57441
const ALTER = 57442
const DROP = 57443
const RENAME = 57444
const ANALYZE = 57445
const ADD = 57446
const FLUSH = 57447
const SCHEMA = 57448
const TABLE = 57449
const INDEX = 57450
const VIEW = 57451
const TO = 57452
const IGNORE = 57453
const IF = 57454
const UNIQUE = 57455
const PRIMARY = 57456
const COLUMN = 57457
const SPATIAL = 57458
const FULLTEXT = 57459
const KEY_BLOCK_SIZE = 57460
const ACTION = 57461
const CASCADE = 57462
const CONSTRAINT = 57463
const FOREIGN = 57464
const NO = 57465
const REFERENCES = 57466
const RESTRICT = 57467
const SHOW = 57468
const DESCRIBE = 57469
const DATE = 57470
const ESCAPE = 57471
const REPAIR = 57472
const OPTIMIZE = 57473
const TRUNCATE = 57474
const MAXVALUE = 57475
const PARTITION = 57476
const REORGANIZE = 57477
const LESS = 57478
const THAN = 57479
const PROCEDURE = 57480
const TRIGGER = 57481
const VINDEX = 57482
const VINDEXES = 57483
const STATUS = 57484
const VARIABLES = 57485
const WARNINGS = 57486
const SEQUENCE = 57487
const BEGIN = 57488
const START = 57489
const TRANSACTION = 57490
const COMMIT = 57491
const ROLLBACK = 57492
const BIT = 57493
const TINYINT = 57494
const SMALLINT = 57495
const MEDIUMINT = 57496
const INT = 57497
const INTEGER = 57498
const BIGINT = 57499
const INTNUM = 57500
const REAL = 57501
const DOUBLE = 57502
const FLOAT_TYPE = 57503
const DECIMAL = 57504
const NUMERIC = 57505
const TIME = 57506
const TIMESTAMP = 57507
const DATETIME = 57508
const YEAR = 57509
const CHAR = 57510
const VARCHAR = 57511
const BOOL = 57512
const CHARACTER = 57513
const VARBINARY = 57514
const NCHAR = 57515
const TEXT = 57516
const TINYTEXT = 57517
const MEDIUMTEXT = 57518
const LONGTEXT = 57519
const BLOB = 57520
const TINYBLOB = 57521
const MEDIUMBLOB = 57522
const LONGBLOB = 57523
const JSON = 57524
const ENUM = 57525
const GEOMETRY = 57526
const POINT = 57527
const LINESTRING = 57528
const POLYGON = 57529
const GEOMETRYCOLLECTION = 57530
const MULTIPOINT = 57531
const MULTILINESTRING = 57532
const MULTIPOLYGON = 57533
const NULLX = 57534
const AUTO_INCREMENT = 57535
const APPROXNUM = 57536
const SIGNED = 57537
const UNSIGNED = 57538
const ZEROFILL = 57539
const COLLATION = 57540
const DATABASES = 57541
const TABLES = 57542
const VITESS_METADATA = 57543
const VSCHEMA = 57544
const FULL = 57545
const PROCESSLIST = 57546
const COLUMNS = 57547
const FIELDS = 57548
const ENGINES = 57549
const PLUGINS = 57550
const NAMES = 57551
const CHARSET = 57552
const GLOBAL = 57553
const SESSION = 57554
const ISOLATION = 57555
const LEVEL = 57556
const READ = 57557
const WRITE = 57558
const ONLY = 57559
const REPEATABLE = 57560
const COMMITTED = 57561
const UNCOMMITTED = 57562
const SERIALIZABLE = 57563
const CURRENT_TIMESTAMP = 57564
const DATABASE = 57565
const CURRENT_DATE = 57566
const CURRENT_TIME = 57567
const LOCALTIME = 57568
const LOCALTIMESTAMP = 57569
const UTC_DATE = 57570
const UTC_TIME = 57571
const UTC_TIMESTAMP = 57572
const REPLACE = 57573
const CONVERT = 57574
const CAST = 57575
const SUBSTR = 57576
const SUBSTRING = 57577
const GROUP_CONCAT = 57578
const SEPARATOR = 57579
const TIMESTAMPADD = 57580
const TIMESTAMPDIFF = 57581
const MATCH = 57582
const AGAINST = 57583
const BOOLEAN = 57584
const LANGUAGE = 57585
const WITH = 57586
const QUERY = 57587
const EXPANSION = 57588
const UNUSED = 57589

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"EXPLAIN",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"SHOW",
	"DESCRIBE",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"SEQUENCE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"TABLES",
	"VITESS_METADATA",
	"VSCHEMA",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"PLUGINS",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 31,
	-2, 4,
	-1, 38,
	159, 301,
	160, 301,
	-2, 289,
	-1, 240,
	5, 31,
	-2, 25,
	-1, 263,
	113, 640,
	-2, 636,
	-1, 264,
	113, 641,
	-2, 637,
	-1, 332,
	83, 815,
	-2, 65,
	-1, 333,
	83, 771,
	-2, 66,
	-1, 338,
	83, 750,
	-2, 602,
	-1, 340,
	83, 792,
	-2, 604,
	-1, 610,
	1, 352,
	5, 352,
	13, 352,
	14, 352,
	15, 352,
	16, 352,
	18, 352,
	20, 352,
	31, 352,
	32, 352,
	43, 352,
	44, 352,
	45, 352,
	46, 352,
	47, 352,
	49, 352,
	50, 352,
	53, 352,
	54, 352,
	56, 352,
	57, 352,
	265, 352,
	-2, 370,
	-1, 613,
	54, 46,
	56, 46,
	-2, 50,
	-1, 761,
	113, 643,
	-2, 639,
	-1, 990,
	5, 32,
	-2, 437,
	-1, 1020,
	5, 31,
	-2, 576,
	-1, 1264,
	5, 32,
	-2, 577,
	-1, 1317,
	5, 31,
	-2, 579,
	-1, 1395,
	5, 32,
	-2, 580,
}

const yyPrivate = 57344

const yyLast = 12430

var yyAct = [...]int{

	264, 1429, 1419, 1226, 1383, 1023, 268, 566, 1166, 1284,
	874, 1041, 1200, 1329, 1297, 281, 1024, 1114, 847, 242,
	467, 1163, 1167, 897, 870, 954, 873, 58, 294, 1179,
	917, 1068, 845, 82, 710, 883, 1173, 207, 1138, 337,
	207, 786, 724, 1085, 1094, 834, 796, 626, 982, 887,
	606, 814, 763, 849, 498, 793, 1047, 504, 233, 438,
	331, 295, 52, 913, 625, 827, 510, 326, 207, 82,
	266, 615, 518, 207, 251, 207, 580, 328, 323, 306,
	57, 312, 313, 310, 311, 309, 308, 307, 1422, 1406,
	1417, 903, 1393, 1414, 1227, 314, 315, 1405, 1392, 565,
	3, 1155, 581, 1256, 234, 235, 236, 443, 607, 239,
	471, 255, 1056, 52, 52, 1055, 1194, 62, 1057, 1195,
	1196, 864, 247, 1358, 531, 530, 540, 541, 533, 534,
	535, 536, 537, 538, 539, 532, 865, 866, 542, 202,
	198, 199, 200, 238, 64, 65, 66, 67, 68, 237,
	492, 240, 241, 627, 487, 628, 1076, 896, 488, 485,
	486, 194, 1287, 196, 904, 232, 1116, 1247, 1304, 1245,
	480, 481, 490, 699, 1118, 696, 473, 1416, 475, 698,
	1413, 1376, 1384, 1113, 828, 888, 1330, 1437, 1042, 1044,
	1139, 456, 457, 445, 1433, 207, 196, 1110, 207, 1332,
	1119, 703, 612, 1112, 207, 689, 795, 472, 474, 491,
	207, 700, 697, 82, 1338, 82, 890, 82, 82, 1117,
	82, 890, 82, 1189, 1188, 1187, 1141, 441, 82, 448,
	1101, 209, 197, 469, 1365, 476, 1212, 477, 478, 204,
	479, 948, 482, 453, 947, 1069, 999, 1267, 493, 554,
	555, 1125, 1052, 1009, 195, 976, 201, 735, 82, 1099,
	1143, 621, 1147, 522, 1142, 1043, 1140, 1331, 463, 532,
	325, 1145, 542, 506, 468, 440, 468, 442, 468, 468,
	1144, 468, 860, 468, 871, 542, 732, 1213, 729, 468,
	517, 1359, 470, 1146, 1148, 257, 494, 495, 904, 1111,
	1431, 1109, 334, 1432, 770, 1430, 450, 1391, 451, 52,
	725, 452, 889, 1374, 71, 1339, 1337, 889, 768, 769,
	767, 207, 207, 207, 551, 956, 1100, 553, 516, 515,
	82, 1105, 1102, 1095, 1103, 1098, 82, 996, 1157, 1096,
	1097, 1347, 815, 1177, 629, 517, 691, 507, 554, 555,
	72, 815, 1104, 1006, 605, 564, 1438, 568, 569, 570,
	571, 572, 573, 574, 575, 576, 508, 579, 582, 582,
	582, 588, 582, 582, 588, 582, 596, 597, 598, 599,
	600, 601, 439, 611, 583, 585, 587, 589, 591, 593,
	594, 726, 459, 460, 461, 1439, 619, 449, 893, 1074,
	455, 614, 1379, 955, 894, 512, 462, 623, 1397, 1293,
	584, 586, 464, 590, 592, 437, 595, 531, 530, 540,
	541, 533, 534, 535, 536, 537, 538, 539, 532, 515,
	1292, 542, 1089, 1088, 444, 738, 739, 55, 207, 554,
	555, 1077, 994, 82, 993, 517, 1399, 766, 207, 207,
	82, 890, 1375, 734, 207, 1311, 787, 207, 788, 1290,
	207, 516, 515, 688, 207, 1122, 82, 82, 1086, 983,
	695, 82, 82, 82, 207, 82, 82, 1058, 517, 1059,
	439, 82, 82, 516, 515, 23, 713, 714, 959, 1372,
	733, 715, 716, 717, 1229, 719, 720, 1069, 516, 515,
	517, 721, 722, 712, 468, 1159, 1064, 516, 515, 789,
	82, 468, 446, 447, 207, 517, 753, 755, 756, 709,
	82, 708, 754, 604, 517, 613, 740, 468, 468, 819,
	1335, 1415, 468, 468, 468, 704, 468, 468, 995, 501,
	505, 193, 468, 468, 692, 293, 246, 889, 973, 974,
	975, 690, 886, 884, 764, 885, 523, 759, 1401, 497,
	882, 888, 761, 334, 82, 531, 530, 540, 541, 533,
	534, 535, 536, 537, 538, 539, 532, 687, 80, 542,
	805, 808, 465, 742, 1335, 1387, 816, 458, 516, 515,
	497, 567, 757, 1335, 497, 1335, 1366, 82, 82, 1344,
	578, 1335, 1334, 1343, 207, 517, 1209, 320, 321, 1282,
	1281, 891, 207, 207, 336, 52, 207, 207, 1269, 497,
	207, 207, 207, 82, 1048, 790, 791, 1266, 497, 1176,
	568, 836, 839, 840, 841, 837, 82, 838, 842, 798,
	637, 1180, 1181, 812, 1164, 1219, 1218, 1176, 855, 1048,
	693, 694, 857, 1215, 1216, 824, 701, 1215, 1214, 325,
	1262, 712, 707, 988, 497, 831, 497, 831, 800, 899,
	900, 901, 902, 846, 798, 497, 718, 611, 617, 853,
	1346, 611, 25, 861, 831, 910, 911, 912, 858, 862,
	207, 82, 1176, 82, 636, 635, 878, 207, 207, 207,
	207, 207, 1217, 207, 207, 59, 1018, 207, 82, 617,
	1019, 923, 854, 925, 616, 1128, 749, 919, 25, 1060,
	618, 863, 620, 1012, 207, 830, 207, 207, 952, 1011,
	55, 207, 535, 536, 537, 538, 539, 532, 25, 988,
	542, 616, 905, 906, 907, 988, 1316, 915, 916, 622,
	831, 618, 468, 616, 468, 736, 760, 702, 336, 988,
	336, 248, 336, 336, 55, 336, 55, 336, 1407, 468,
	964, 496, 1299, 336, 898, 761, 801, 802, 1274, 918,
	807, 810, 811, 1205, 1115, 727, 55, 1063, 284, 283,
	286, 287, 288, 289, 965, 966, 764, 285, 290, 1180,
	1181, 1424, 914, 520, 909, 823, 829, 825, 826, 55,
	908, 750, 751, 1300, 921, 1420, 1207, 1183, 1164, 856,
	978, 1090, 977, 836, 839, 840, 841, 837, 730, 838,
	842, 706, 207, 207, 207, 207, 207, 1025, 1035, 1037,
	1033, 840, 841, 1036, 207, 1034, 748, 207, 1186, 1185,
	1032, 207, 1031, 252, 253, 207, 334, 1411, 1404, 1124,
	961, 511, 261, 1409, 567, 1005, 971, 803, 804, 875,
	970, 499, 1081, 634, 82, 336, 509, 466, 1073, 1381,
	1260, 631, 1026, 500, 1061, 1029, 1380, 1049, 1038, 1021,
	1022, 1295, 922, 611, 611, 611, 611, 611, 1314, 942,
	943, 944, 945, 946, 1046, 949, 950, 1071, 846, 951,
	1045, 1053, 1050, 1065, 1051, 924, 611, 705, 1259, 1070,
	270, 844, 82, 82, 511, 869, 953, 1020, 1080, 243,
	1082, 1083, 1084, 960, 1352, 1066, 1067, 249, 250, 969,
	244, 1027, 1028, 1092, 1030, 59, 800, 968, 1351, 1302,
	1048, 489, 82, 1087, 972, 1000, 531, 530, 540, 541,
	533, 534, 535, 536, 537, 538, 539, 532, 207, 760,
	542, 997, 1120, 1106, 1426, 1425, 63, 82, 723, 513,
	1426, 1362, 1288, 731, 468, 1093, 61, 56, 336, 1,
	1418, 1078, 1079, 1228, 1296, 336, 1121, 930, 1382, 1328,
	1199, 987, 881, 872, 70, 436, 69, 1373, 880, 879,
	1336, 336, 336, 468, 1286, 892, 336, 336, 336, 1003,
	336, 336, 82, 82, 1165, 1025, 336, 336, 1132, 962,
	963, 1156, 505, 1131, 1150, 1137, 1149, 741, 1075, 895,
	1206, 1072, 1378, 642, 964, 640, 82, 641, 1168, 761,
	639, 644, 643, 638, 220, 744, 329, 843, 630, 1184,
	920, 82, 514, 82, 82, 520, 73, 1108, 336, 1107,
	926, 728, 483, 1198, 484, 1191, 222, 550, 967, 1054,
	1175, 1169, 1190, 52, 335, 1171, 737, 1197, 503, 1350,
	1301, 207, 1004, 577, 989, 797, 799, 813, 1203, 1204,
	1202, 269, 752, 1210, 1211, 282, 1193, 875, 207, 792,
	279, 1007, 280, 743, 82, 1017, 524, 82, 82, 82,
	207, 1170, 267, 259, 609, 817, 82, 602, 835, 207,
	833, 832, 324, 1182, 556, 557, 558, 559, 560, 561,
	562, 563, 821, 822, 1178, 608, 1127, 1234, 1255, 1357,
	747, 27, 60, 1221, 254, 19, 18, 17, 20, 16,
	15, 1236, 14, 1240, 1241, 1222, 1242, 1224, 336, 1244,
	1126, 1246, 454, 31, 1243, 21, 13, 12, 11, 10,
	9, 336, 22, 1025, 1235, 8, 552, 1261, 7, 6,
	611, 5, 4, 1271, 245, 24, 2, 0, 82, 0,
	0, 0, 0, 1270, 0, 0, 82, 0, 1061, 0,
	1130, 1280, 0, 0, 0, 0, 0, 1254, 497, 0,
	0, 82, 0, 0, 0, 1283, 0, 0, 82, 0,
	0, 0, 0, 0, 0, 0, 336, 0, 336, 0,
	0, 1294, 610, 1160, 0, 0, 0, 0, 0, 1276,
	1277, 1278, 1123, 336, 0, 531, 530, 540, 541, 533,
	534, 535, 536, 537, 538, 539, 532, 82, 82, 542,
	82, 0, 0, 0, 0, 82, 0, 82, 82, 82,
	207, 336, 468, 82, 1323, 1315, 1324, 1325, 1326, 0,
	1322, 1168, 0, 1220, 875, 1333, 875, 0, 1327, 0,
	82, 207, 1158, 0, 1340, 0, 1289, 0, 1291, 1348,
	1223, 0, 0, 0, 1341, 0, 1342, 0, 0, 985,
	0, 0, 1233, 986, 1169, 1363, 0, 1318, 0, 0,
	990, 991, 992, 1303, 0, 0, 82, 998, 0, 1370,
	1001, 1002, 1371, 0, 1192, 1168, 1008, 82, 82, 0,
	1010, 0, 0, 1013, 1014, 1015, 1016, 1345, 1386, 1130,
	1389, 1385, 0, 0, 0, 1317, 82, 0, 1394, 1025,
	0, 0, 0, 0, 0, 1040, 817, 207, 1169, 0,
	52, 0, 0, 0, 0, 82, 0, 762, 0, 0,
	771, 772, 773, 774, 775, 776, 777, 778, 779, 780,
	781, 782, 783, 784, 785, 1403, 1408, 1410, 82, 0,
	0, 0, 0, 0, 0, 0, 0, 1412, 1364, 336,
	0, 1423, 0, 0, 0, 0, 0, 0, 1434, 0,
	0, 875, 51, 25, 26, 53, 28, 29, 0, 0,
	0, 0, 0, 0, 0, 820, 765, 0, 0, 0,
	0, 0, 44, 0, 0, 1257, 0, 30, 48, 49,
	0, 1298, 0, 0, 0, 567, 1258, 1091, 336, 0,
	0, 0, 0, 1272, 0, 0, 1273, 39, 1421, 1275,
	0, 55, 936, 0, 0, 0, 502, 0, 533, 534,
	535, 536, 537, 538, 539, 532, 935, 336, 542, 0,
	0, 0, 0, 1349, 531, 530, 540, 541, 533, 534,
	535, 536, 537, 538, 539, 532, 0, 1136, 542, 0,
	0, 0, 336, 205, 940, 0, 231, 0, 0, 0,
	0, 0, 610, 934, 0, 0, 610, 0, 0, 0,
	610, 0, 32, 33, 35, 34, 37, 0, 50, 0,
	0, 258, 0, 0, 327, 336, 0, 0, 0, 205,
	0, 205, 0, 0, 817, 0, 0, 1172, 1174, 38,
	45, 0, 0, 46, 47, 36, 0, 0, 0, 1398,
	1298, 875, 0, 931, 928, 929, 0, 927, 0, 40,
	41, 1174, 42, 43, 530, 540, 541, 533, 534, 535,
	536, 537, 538, 539, 532, 0, 336, 542, 336, 1201,
	0, 0, 0, 0, 0, 1133, 0, 938, 941, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 979, 980, 981, 0, 531, 530, 540, 541, 533,
	534, 535, 536, 537, 538, 539, 532, 1388, 567, 542,
	0, 0, 0, 0, 933, 0, 0, 1253, 0, 1225,
	0, 1237, 1230, 1231, 1232, 0, 0, 0, 1239, 0,
	0, 336, 0, 0, 54, 0, 932, 0, 0, 1248,
	1249, 205, 0, 0, 205, 0, 0, 0, 765, 0,
	205, 0, 0, 0, 0, 0, 205, 0, 0, 1263,
	1264, 1265, 0, 1268, 540, 541, 533, 534, 535, 536,
	537, 538, 539, 532, 0, 937, 542, 0, 0, 0,
	1279, 0, 817, 0, 0, 0, 0, 0, 0, 0,
	939, 531, 530, 540, 541, 533, 534, 535, 536, 537,
	538, 539, 532, 336, 0, 542, 0, 0, 0, 0,
	0, 1285, 610, 610, 610, 610, 610, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 336, 610, 0, 0,
	0, 0, 0, 336, 0, 610, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1310, 0, 0, 0, 0,
	0, 0, 0, 0, 217, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 205, 205, 205,
	0, 0, 1319, 1320, 0, 1321, 0, 0, 227, 0,
	1285, 1252, 1285, 1285, 1285, 0, 0, 0, 1201, 0,
	0, 0, 0, 0, 0, 1353, 1354, 1355, 1356, 0,
	0, 0, 1360, 1361, 0, 1285, 1134, 1135, 0, 0,
	0, 0, 0, 0, 1367, 1368, 1369, 0, 0, 1151,
	1152, 0, 1153, 1154, 0, 0, 0, 0, 0, 210,
	0, 0, 0, 0, 1161, 1162, 213, 0, 0, 0,
	0, 1377, 0, 0, 221, 216, 0, 1390, 0, 1251,
	0, 0, 336, 336, 1395, 531, 530, 540, 541, 533,
	534, 535, 536, 537, 538, 539, 532, 0, 817, 542,
	0, 1396, 1400, 0, 0, 219, 0, 0, 0, 0,
	0, 226, 0, 0, 205, 0, 0, 0, 0, 0,
	1402, 0, 0, 0, 205, 205, 1208, 0, 0, 0,
	205, 0, 0, 205, 0, 0, 205, 0, 211, 0,
	711, 0, 0, 1285, 0, 0, 0, 1435, 1436, 0,
	205, 0, 1250, 531, 530, 540, 541, 533, 534, 535,
	536, 537, 538, 539, 532, 223, 214, 542, 224, 225,
	230, 0, 0, 0, 215, 218, 659, 212, 229, 228,
	0, 0, 0, 0, 0, 0, 1238, 0, 0, 0,
	205, 0, 526, 0, 529, 0, 0, 0, 0, 711,
	543, 544, 545, 546, 547, 548, 549, 0, 527, 528,
	525, 531, 530, 540, 541, 533, 534, 535, 536, 537,
	538, 539, 532, 0, 0, 542, 531, 530, 540, 541,
	533, 534, 535, 536, 537, 538, 539, 532, 984, 610,
	542, 258, 0, 0, 0, 0, 258, 258, 0, 0,
	258, 258, 258, 0, 647, 0, 818, 0, 531, 530,
	540, 541, 533, 534, 535, 536, 537, 538, 539, 532,
	0, 0, 542, 0, 0, 258, 258, 258, 258, 0,
	205, 0, 0, 0, 0, 0, 0, 0, 205, 851,
	660, 0, 205, 205, 0, 0, 205, 859, 711, 0,
	0, 0, 0, 1305, 1306, 1307, 1308, 1309, 0, 0,
	0, 1312, 1313, 673, 676, 677, 678, 679, 680, 681,
	0, 682, 683, 684, 685, 686, 661, 662, 663, 664,
	645, 646, 674, 0, 648, 0, 649, 650, 651, 652,
	653, 654, 655, 656, 657, 658, 665, 666, 667, 668,
	669, 670, 671, 672, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 205, 0, 0, 0,
	0, 0, 0, 205, 205, 205, 205, 205, 0, 205,
	205, 0, 0, 205, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	205, 0, 957, 958, 675, 0, 0, 205, 0, 0,
	0, 0, 711, 0, 0, 0, 0, 0, 140, 0,
	0, 0, 850, 0, 258, 0, 0, 104, 0, 0,
	0, 0, 0, 121, 0, 123, 0, 0, 161, 132,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 206, 0, 852,
	0, 0, 0, 0, 0, 0, 97, 0, 0, 0,
	0, 258, 0, 0, 1427, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 258,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 818, 205, 205,
	205, 205, 205, 0, 0, 0, 0, 0, 0, 0,
	1039, 110, 0, 205, 0, 208, 0, 851, 0, 0,
	147, 205, 164, 112, 120, 84, 91, 0, 111, 138,
	152, 156, 0, 0, 100, 0, 154, 142, 177, 0,
	143, 153, 124, 169, 148, 176, 184, 185, 166, 183,
	188, 158, 85, 165, 175, 98, 157, 87, 173, 163,
	130, 116, 117, 86, 0, 151, 103, 108, 102, 139,
	170, 171, 101, 191, 92, 182, 89, 93, 181, 137,
	168, 174, 131, 128, 88, 172, 129, 127, 119, 106,
	113, 145, 126, 146, 114, 134, 133, 135, 0, 0,
	0, 162, 179, 192, 95, 0, 167, 186, 187, 0,
	0, 96, 109, 105, 144, 136, 94, 115, 159, 118,
	125, 150, 190, 141, 155, 99, 178, 160, 0, 0,
	0, 0, 0, 0, 205, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 258, 0, 0, 83, 90, 122,
	189, 149, 107, 180, 0, 258, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 711, 0, 0, 0,
	0, 0, 0, 0, 0, 818, 0, 140, 0, 0,
	0, 0, 0, 0, 0, 0, 104, 0, 0, 0,
	0, 0, 121, 0, 123, 0, 0, 161, 132, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 81, 0, 0, 0,
	0, 0, 0, 0, 0, 97, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 205, 0, 0,
	0, 0, 531, 530, 540, 541, 533, 534, 535, 536,
	537, 538, 539, 532, 205, 0, 542, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 205, 0, 0, 0,
	110, 0, 0, 0, 208, 205, 0, 0, 0, 147,
	0, 164, 112, 120, 84, 91, 0, 111, 138, 152,
	156, 0, 0, 100, 0, 154, 142, 177, 0, 143,
	153, 124, 169, 148, 176, 184, 185, 166, 183, 188,
	158, 85, 165, 175, 98, 157, 87, 173, 163, 130,
	116, 117, 86, 818, 151, 103, 108, 102, 139, 170,
	171, 101, 191, 92, 182, 89, 93, 181, 137, 168,
	174, 131, 128, 88, 172, 129, 127, 119, 106, 113,
	145, 126, 146, 114, 134, 133, 135, 0, 0, 0,
	162, 179, 192, 95, 0, 167, 186, 187, 0, 0,
	96, 109, 105, 144, 136, 94, 115, 159, 118, 125,
	150, 190, 141, 155, 99, 178, 160, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 83, 90, 122, 189,
	149, 107, 180, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 851, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 205, 0, 0,
	0, 0, 424, 372, 413, 0, 384, 427, 362, 376,
	435, 377, 378, 406, 348, 392, 140, 374, 0, 365,
	343, 371, 344, 363, 386, 104, 389, 361, 415, 395,
	426, 121, 433, 123, 400, 0, 161, 132, 0, 0,
	388, 417, 390, 411, 383, 407, 353, 399, 428, 375,
	404, 429, 0, 0, 0, 81, 0, 876, 877, 818,
	0, 0, 0, 0, 97, 0, 402, 423, 373, 403,
	405, 342, 401, 205, 346, 349, 434, 419, 368, 369,
	1062, 0, 0, 0, 0, 0, 0, 387, 391, 408,
	381, 0, 0, 0, 0, 0, 0, 0, 0, 366,
	0, 398, 0, 0, 0, 350, 347, 0, 0, 385,
	0, 0, 0, 352, 0, 367, 409, 0, 341, 110,
	412, 418, 382, 208, 422, 380, 379, 425, 147, 0,
	164, 112, 120, 84, 91, 0, 111, 138, 152, 156,
	416, 364, 100, 370, 154, 142, 177, 397, 143, 153,
	124, 169, 148, 176, 184, 185, 166, 183, 188, 158,
	85, 165, 175, 98, 157, 87, 173, 163, 130, 116,
	117, 86, 0, 151, 103, 108, 102, 139, 170, 171,
	101, 191, 92, 182, 89, 93, 181, 137, 168, 174,
	131, 128, 88, 172, 129, 127, 119, 106, 113, 145,
	126, 146, 114, 134, 133, 135, 0, 345, 0, 162,
	179, 192, 95, 360, 167, 186, 187, 0, 0, 96,
	109, 105, 144, 136, 94, 115, 159, 118, 125, 150,
	190, 141, 155, 99, 178, 160, 356, 359, 354, 355,
	393, 394, 430, 431, 432, 410, 351, 0, 357, 358,
	0, 414, 420, 421, 396, 83, 90, 122, 189, 149,
	107, 180, 424, 372, 413, 0, 384, 427, 362, 376,
	435, 377, 378, 406, 348, 392, 140, 374, 0, 365,
	343, 371, 344, 363, 386, 104, 389, 361, 415, 395,
	426, 121, 433, 123, 400, 0, 161, 132, 0, 0,
	388, 417, 390, 411, 383, 407, 353, 399, 428, 375,
	404, 429, 0, 0, 0, 81, 0, 876, 877, 0,
	0, 0, 0, 0, 97, 0, 402, 423, 373, 403,
	405, 342, 401, 0, 346, 349, 434, 419, 368, 369,
	0, 0, 0, 0, 0, 0, 0, 387, 391, 408,
	381, 0, 0, 0, 0, 0, 0, 0, 0, 366,
	0, 398, 0, 0, 0, 350, 347, 0, 0, 385,
	0, 0, 0, 352, 0, 367, 409, 0, 341, 110,
	412, 418, 382, 208, 422, 380, 379, 425, 147, 0,
	164, 112, 120, 84, 91, 0, 111, 138, 152, 156,
	416, 364, 100, 370, 154, 142, 177, 397, 143, 153,
	124, 169, 148, 176, 184, 185, 166, 183, 188, 158,
	85, 165, 175, 98, 157, 87, 173, 163, 130, 116,
	117, 86, 0, 151, 103, 108, 102, 139, 170, 171,
	101, 191, 92, 182, 89, 93, 181, 137, 168, 174,
	131, 128, 88, 172, 129, 127, 119, 106, 113, 145,
	126, 146, 114, 134, 133, 135, 0, 345, 0, 162,
	179, 192, 95, 360, 167, 186, 187, 0, 0, 96,
	109, 105, 144, 136, 94, 115, 159, 118, 125, 150,
	190, 141, 155, 99, 178, 160, 356, 359, 354, 355,
	393, 394, 430, 431, 432, 410, 351, 0, 357, 358,
	0, 414, 420, 421, 396, 83, 90, 122, 189, 149,
	107, 180, 424, 372, 413, 0, 384, 427, 362, 376,
	435, 377, 378, 406, 348, 392, 140, 374, 0, 365,
	343, 371, 344, 363, 386, 104, 389, 361, 415, 395,
	426, 121, 433, 123, 400, 0, 161, 132, 0, 0,
	388, 417, 390, 411, 383, 407, 353, 399, 428, 375,
	404, 429, 55, 0, 0, 81, 0, 0, 0, 0,
	0, 0, 0, 0, 97, 0, 402, 423, 373, 403,
	405, 342, 401, 0, 346, 349, 434, 419, 368, 369,
	0, 0, 0, 0, 0, 0, 0, 387, 391, 408,
	381, 0, 0, 0, 0, 0, 0, 0, 0, 366,
	0, 398, 0, 0, 0, 350, 347, 0, 0, 385,
	0, 0, 0, 352, 0, 367, 409, 0, 341, 110,
	412, 418, 382, 208, 422, 380, 379, 425, 147, 0,
	164, 112, 120, 84, 91, 0, 111, 138, 152, 156,
	416, 364, 100, 370, 154, 142, 177, 397, 143, 153,
	124, 169, 148, 176, 184, 185, 166, 183, 188, 158,
	85, 165, 175, 98, 157, 87, 173, 163, 130, 116,
	117, 86, 0, 151, 103, 108, 102, 139, 170, 171,
	101, 191, 92, 182, 89, 93, 181, 137, 168, 174,
	131, 128, 88, 172, 129, 127, 119, 106, 113, 145,
	126, 146, 114, 134, 133, 135, 0, 345, 0, 162,
	179, 192, 95, 360, 167, 186, 187, 0, 0, 96,
	109, 105, 144, 136, 94, 115, 159, 118, 125, 150,
	190, 141, 155, 99, 178, 160, 356, 359, 354, 355,
	393, 394, 430, 431, 432, 410, 351, 0, 357, 358,
	0, 414, 420, 421, 396, 83, 90, 122, 189, 149,
	107, 180, 424, 372, 413, 0, 384, 427, 362, 376,
	435, 377, 378, 406, 348, 392, 140, 374, 0, 365,
	343, 371, 344, 363, 386, 104, 389, 361, 415, 395,
	426, 121, 433, 123, 400, 0, 161, 132, 0, 0,
	388, 417, 390, 411, 383, 407, 353, 399, 428, 375,
	404, 429, 0, 0, 0, 81, 0, 0, 0, 0,
	0, 0, 0, 0, 97, 0, 402, 423, 373, 403,
	405, 342, 401, 0, 346, 349, 434, 419, 368, 369,
	0, 0, 0, 0, 0, 0, 0, 387, 391, 408,
	381, 0, 0, 0, 0, 0, 0, 1129, 0, 366,
	0, 398, 0, 0, 0, 350, 347, 0, 0, 385,
	0, 0, 0, 352, 0, 367, 409, 0, 341, 110,
	412, 418, 382, 208, 422, 380, 379, 425, 147, 0,
	164, 112, 120, 84, 91, 0, 111, 138, 152, 156,
	416, 364, 100, 370, 154, 142, 177, 397, 143, 153,
	124, 169, 148, 176, 184, 185, 166, 183, 188, 158,
	85, 165, 175, 98, 157, 87, 173, 163, 130, 116,
	117, 86, 0, 151, 103, 108, 102, 139, 170, 171,
	101, 191, 92, 182, 89, 93, 181, 137, 168, 174,
	131, 128, 88, 172, 129, 127, 119, 106, 113, 145,
	126, 146, 114, 134, 133, 135, 0, 345, 0, 162,
	179, 192, 95, 360, 167, 186, 187, 0, 0, 96,
	109, 105, 144, 136, 94, 115, 159, 118, 125, 150,
	190, 141, 155, 99, 178, 160, 356, 359, 354, 355,
	393, 394, 430, 431, 432, 410, 351, 0, 357, 358,
	0, 414, 420, 421, 396, 83, 90, 122, 189, 149,
	107, 180, 424, 372, 413, 0, 384, 427, 362, 376,
	435, 377, 378, 406, 348, 392, 140, 374, 0, 365,
	343, 371, 344, 363, 386, 104, 389, 361, 415, 395,
	426, 121, 433, 123, 400, 0, 161, 132, 0, 0,
	388, 417, 390, 411, 383, 407, 353, 399, 428, 375,
	404, 429, 0, 0, 0, 206, 0, 0, 0, 0,
	0, 0, 0, 0, 97, 0, 402, 423, 373, 403,
	405, 342, 401, 0, 346, 349, 434, 419, 368, 369,
	0, 0, 0, 0, 0, 0, 0, 387, 391, 408,
	381, 0, 0, 0, 0, 0, 0, 860, 0, 366,
	0, 398, 0, 0, 0, 350, 347, 0, 0, 385,
	0, 0, 0, 352, 0, 367, 409, 0, 341, 110,
	412, 418, 382, 208, 422, 380, 379, 425, 147, 0,
	164, 112, 120, 84, 91, 0, 111, 138, 152, 156,
	416, 364, 100, 370, 154, 142, 177, 397, 143, 153,
	124, 169, 148, 176, 184, 185, 166, 183, 188, 158,
	85, 165, 175, 98, 157, 87, 173, 163, 130, 116,
	117, 86, 0, 151, 103, 108, 102, 139, 170, 171,
	101, 191, 92, 182, 89, 93, 181, 137, 168, 174,
	131, 128, 88, 172, 129, 127, 119, 106, 113, 145,
	126, 146, 114, 134, 133, 135, 0, 345, 0, 162,
	179, 192, 95, 360, 167, 186, 187, 0, 0, 96,
	109, 105, 144, 136, 94, 115, 159, 118, 125, 150,
	190, 141, 155, 99, 178, 160, 356, 359, 354, 355,
	393, 394, 430, 431, 432, 410, 351, 0, 357, 358,
	0, 414, 420, 421, 396, 83, 90, 122, 189, 149,
	107, 180, 424, 372, 413, 0, 384, 427, 362, 376,
	435, 377, 378, 406, 348, 392, 140, 374, 0, 365,
	343, 371, 344, 363, 386, 104, 389, 361, 415, 395,
	426, 121, 433, 123, 400, 0, 161, 132, 0, 0,
	388, 417, 390, 411, 383, 407, 353, 399, 428, 375,
	404, 429, 0, 0, 0, 263, 0, 0, 0, 0,
	0, 0, 0, 0, 97, 0, 402, 423, 373, 403,
	405, 342, 401, 0, 346, 349, 434, 419, 368, 369,
	0, 0, 0, 0, 0, 0, 0, 387, 391, 408,
	381, 0, 0, 0, 0, 0, 0, 758, 0, 366,
	0, 398, 0, 0, 0, 350, 347, 0, 0, 385,
	0, 0, 0, 352, 0, 367, 409, 0, 341, 110,
	412, 418, 382, 208, 422, 380, 379, 425, 147, 0,
	164, 112, 120, 84, 91, 0, 111, 138, 152, 156,
	416, 364, 100, 370, 154, 142, 177, 397, 143, 153,
	124, 169, 148, 176, 184, 185, 166, 183, 188, 158,
	85, 165, 175, 98, 157, 87, 173, 163, 130, 116,
	117, 86, 0, 151, 103, 108, 102, 139, 170, 171,
	101, 191, 92, 182, 89, 93, 181, 137, 168, 174,
	131, 128, 88, 172, 129, 127, 119, 106, 113, 145,
	126, 146, 114, 134, 133, 135, 0, 345, 0, 162,
	179, 192, 95, 360, 167, 186, 187, 0, 0, 96,
	109, 105, 144, 136, 94, 115, 159, 118, 125, 150,
	190, 141, 155, 99, 178, 160, 356, 359, 354, 355,
	393, 394, 430, 431, 432, 410, 351, 0, 357, 358,
	0, 414, 420, 421, 396, 83, 90, 122, 189, 149,
	107, 180, 424, 372, 413, 0, 384, 427, 362, 376,
	435, 377, 378, 406, 348, 392, 140, 374, 0, 365,
	343, 371, 344, 363, 386, 104, 389, 361, 415, 395,
	426, 121, 433, 123, 400, 0, 161, 132, 0, 0,
	388, 417, 390, 411, 383, 407, 353, 399, 428, 375,
	404, 429, 0, 0, 0, 81, 0, 0, 0, 0,
	0, 0, 0, 0, 97, 0, 402, 423, 373, 403,
	405, 342, 401, 0, 346, 349, 434, 419, 368, 369,
	0, 0, 0, 0, 0, 0, 0, 387, 391, 408,
	381, 0, 0, 0, 0, 0, 0, 0, 0, 366,
	0, 398, 0, 0, 0, 350, 347, 0, 0, 385,
	0, 0, 0, 352, 0, 367, 409, 0, 341, 110,
	412, 418, 382, 208, 422, 380, 379, 425, 147, 0,
	164, 112, 120, 84, 91, 0, 111, 138, 152, 156,
	416, 364, 100, 370, 154, 142, 177, 397, 143, 153,
	124, 169, 148, 176, 184, 185, 166, 183, 188, 158,
	85, 165, 175, 98, 157, 87, 173, 163, 130, 116,
	117, 86, 0, 151, 103, 108, 102, 139, 170, 171,
	101, 191, 92, 182, 89, 93, 181, 137, 168, 174,
	131, 128, 88, 172, 129, 127, 119, 106, 113, 145,
	126, 146, 114, 134, 133, 135, 0, 345, 0, 162,
	179, 192, 95, 360, 167, 186, 187, 0, 0, 96,
	109, 105, 144, 136, 94, 115, 159, 118, 125, 150,
	190, 141, 155, 99, 178, 160, 356, 359, 354, 355,
	393, 394, 430, 431, 432, 410, 351, 0, 357, 358,
	0, 414, 420, 421, 396, 83, 90, 122, 189, 149,
	107, 180, 424, 372, 413, 0, 384, 427, 362, 376,
	435, 377, 378, 406, 348, 392, 140, 374, 0, 365,
	343, 371, 344, 363, 386, 104, 389, 361, 415, 395,
	426, 121, 433, 123, 400, 0, 161, 132, 0, 0,
	388, 417, 390, 411, 383, 407, 353, 399, 428, 375,
	404, 429, 0, 0, 0, 263, 0, 0, 0, 0,
	0, 0, 0, 0, 97, 0, 402, 423, 373, 403,
	405, 342, 401, 0, 346, 349, 434, 419, 368, 369,
	0, 0, 0, 0, 0, 0, 0, 387, 391, 408,
	381, 0, 0, 0, 0, 0, 0, 0, 0, 366,
	0, 398, 0, 0, 0, 350, 347, 0, 0, 385,
	0, 0, 0, 352, 0, 367, 409, 0, 341, 110,
	412, 418, 382, 208, 422, 380, 379, 425, 147, 0,
	164, 112, 120, 84, 91, 0, 111, 138, 152, 156,
	416, 364, 100, 370, 154, 142, 177, 397, 143, 153,
	124, 169, 148, 176, 184, 185, 166, 183, 188, 158,
	85, 165, 175, 98, 157, 87, 173, 163, 130, 116,
	117, 86, 0, 151, 103, 108, 102, 139, 170, 171,
	101, 191, 92, 182, 89, 93, 181, 137, 168, 174,
	131, 128, 88, 172, 129, 127, 119, 106, 113, 145,
	126, 146, 114, 134, 133, 135, 0, 345, 0, 162,
	179, 192, 95, 360, 167, 186, 187, 0, 0, 96,
	109, 105, 144, 136, 94, 115, 159, 118, 125, 150,
	190, 141, 155, 99, 178, 160, 356, 359, 354, 355,
	393, 394, 430, 431, 432, 410, 351, 0, 357, 358,
	0, 414, 420, 421, 396, 83, 90, 122, 189, 149,
	107, 180, 424, 372, 413, 0, 384, 427, 362, 376,
	435, 377, 378, 406, 348, 392, 140, 374, 0, 365,
	343, 371, 344, 363, 386, 104, 389, 361, 415, 395,
	426, 121, 433, 123, 400, 0, 161, 132, 0, 0,
	388, 417, 390, 411, 383, 407, 353, 399, 428, 375,
	404, 429, 0, 0, 0, 81, 0, 0, 0, 0,
	0, 0, 0, 0, 97, 0, 402, 423, 373, 403,
	405, 342, 401, 0, 346, 349, 434, 419, 368, 369,
	0, 0, 0, 0, 0, 0, 0, 387, 391, 408,
	381, 0, 0, 0, 0, 0, 0, 0, 0, 366,
	0, 398, 0, 0, 0, 350, 347, 0, 0, 385,
	0, 0, 0, 352, 0, 367, 409, 0, 341, 110,
	412, 418, 382, 208, 422, 380, 379, 425, 147, 0,
	164, 112, 120, 84, 91, 0, 111, 138, 152, 156,
	416, 364, 100, 370, 154, 142, 177, 397, 143, 153,
	124, 169, 148, 176, 184, 185, 166, 183, 188, 158,
	85, 165, 175, 98, 157, 87, 173, 163, 130, 116,
	117, 86, 0, 151, 103, 108, 102, 139, 170, 171,
	101, 191, 92, 182, 89, 339, 181, 137, 168, 174,
	131, 128, 88, 172, 129, 127, 119, 106, 113, 145,
	126, 146, 114, 134, 133, 135, 0, 345, 0, 162,
	179, 192, 95, 360, 167, 186, 187, 0, 0, 96,
	109, 105, 144, 340, 338, 115, 159, 118, 125, 150,
	190, 141, 155, 99, 178, 160, 356, 359, 354, 355,
	393, 394, 430, 431, 432, 410, 351, 0, 357, 358,
	0, 414, 420, 421, 396, 83, 90, 122, 189, 149,
	107, 180, 424, 372, 413, 0, 384, 427, 362, 376,
	435, 377, 378, 406, 348, 392, 140, 374, 0, 365,
	343, 371, 344, 363, 386, 104, 389, 361, 415, 395,
	426, 121, 433, 123, 400, 0, 161, 132, 0, 0,
	388, 417, 390, 411, 383, 407, 353, 399, 428, 375,
	404, 429, 0, 0, 0, 206, 0, 0, 0, 0,
	0, 0, 0, 0, 97, 0, 402, 423, 373, 403,
	405, 342, 401, 0, 346, 349, 434, 419, 368, 369,
	0, 0, 0, 0, 0, 0, 0, 387, 391, 408,
	381, 0, 0, 0, 0, 0, 0, 0, 0, 366,
	0, 398, 0, 0, 0, 350, 347, 0, 0, 385,
	0, 0, 0, 352, 0, 367, 409, 0, 341, 110,
	412, 418, 382, 208, 422, 380, 379, 425, 147, 0,
	164, 112, 120, 84, 91, 0, 111, 138, 152, 156,
	416, 364, 100, 370, 154, 142, 177, 397, 143, 153,
	124, 169, 148, 176, 184, 185, 166, 183, 188, 158,
	85, 165, 175, 98, 157, 87, 173, 163, 130, 116,
	117, 86, 0, 151, 103, 108, 102, 139, 170, 171,
	101, 191, 92, 182, 89, 93, 181, 137, 168, 174,
	131, 128, 88, 172, 129, 127, 119, 106, 113, 145,
	126, 146, 114, 134, 133, 135, 0, 345, 0, 162,
	179, 192, 95, 360, 167, 186, 187, 0, 0, 96,
	109, 105, 144, 136, 94, 115, 159, 118, 125, 150,
	190, 141, 155, 99, 178, 160, 356, 359, 354, 355,
	393, 394, 430, 431, 432, 410, 351, 0, 357, 358,
	0, 414, 420, 421, 396, 83, 90, 122, 189, 149,
	107, 180, 424, 372, 413, 0, 384, 427, 362, 376,
	435, 377, 378, 406, 348, 392, 140, 374, 0, 365,
	343, 371, 344, 363, 386, 104, 389, 361, 415, 395,
	426, 121, 433, 123, 400, 0, 161, 132, 0, 0,
	388, 417, 390, 411, 383, 407, 353, 399, 428, 375,
	404, 429, 0, 0, 0, 81, 0, 0, 0, 0,
	0, 0, 0, 0, 97, 0, 402, 423, 373, 403,
	405, 342, 401, 0, 346, 349, 434, 419, 368, 369,
	0, 0, 0, 0, 0, 0, 0, 387, 391, 408,
	381, 0, 0, 0, 0, 0, 0, 0, 0, 366,
	0, 398, 0, 0, 0, 350, 347, 0, 0, 385,
	0, 0, 0, 352, 0, 367, 409, 0, 341, 110,
	412, 418, 382, 208, 422, 380, 379, 425, 147, 0,
	164, 112, 120, 84, 91, 0, 111, 138, 152, 156,
	416, 364, 100, 370, 154, 142, 177, 397, 143, 153,
	124, 169, 148, 176, 184, 185, 166, 183, 188, 158,
	85, 165, 624, 98, 157, 87, 173, 163, 130, 116,
	117, 86, 0, 151, 103, 108, 102, 139, 170, 171,
	101, 191, 92, 182, 89, 339, 181, 137, 168, 174,
	131, 128, 88, 172, 129, 127, 119, 106, 113, 145,
	126, 146, 114, 134, 133, 135, 0, 345, 0, 162,
	179, 192, 95, 360, 167, 186, 187, 0, 0, 96,
	109, 105, 144, 340, 338, 115, 159, 118, 125, 150,
	190, 141, 155, 99, 178, 160, 356, 359, 354, 355,
	393, 394, 430, 431, 432, 410, 351, 0, 357, 358,
	0, 414, 420, 421, 396, 83, 90, 122, 189, 149,
	107, 180, 424, 372, 413, 0, 384, 427, 362, 376,
	435, 377, 378, 406, 348, 392, 140, 374, 0, 365,
	343, 371, 344, 363, 386, 104, 389, 361, 415, 395,
	426, 121, 433, 123, 400, 0, 161, 132, 0, 0,
	388, 417, 390, 411, 383, 407, 353, 399, 428, 375,
	404, 429, 0, 0, 0, 81, 0, 0, 0, 0,
	0, 0, 0, 0, 97, 0, 402, 423, 373, 403,
	405, 342, 401, 0, 346, 349, 434, 419, 368, 369,
	0, 0, 0, 0, 0, 0, 0, 387, 391, 408,
	381, 0, 0, 0, 0, 0, 0, 0, 0, 366,
	0, 398, 0, 0, 0, 350, 347, 0, 0, 385,
	0, 0, 0, 352, 0, 367, 409, 0, 341, 110,
	412, 418, 382, 208, 422, 380, 379, 425, 147, 0,
	164, 112, 120, 84, 91, 0, 111, 138, 152, 156,
	416, 364, 100, 370, 154, 142, 177, 397, 143, 153,
	124, 169, 148, 176, 184, 185, 166, 183, 188, 158,
	85, 165, 330, 98, 157, 87, 173, 163, 130, 116,
	117, 86, 0, 151, 103, 108, 102, 139, 170, 171,
	101, 191, 92, 182, 89, 339, 181, 137, 168, 174,
	131, 128, 88, 172, 129, 127, 119, 106, 113, 145,
	126, 146, 114, 134, 133, 135, 0, 345, 0, 162,
	179, 192, 95, 360, 167, 186, 187, 0, 0, 96,
	109, 105, 144, 340, 338, 333, 332, 118, 125, 150,
	190, 141, 155, 99, 178, 160, 356, 359, 354, 355,
	393, 394, 430, 431, 432, 410, 351, 0, 357, 358,
	0, 414, 420, 421, 396, 83, 90, 122, 189, 149,
	107, 180, 140, 0, 0, 0, 0, 265, 0, 0,
	0, 104, 0, 262, 0, 0, 0, 121, 305, 123,
	0, 0, 161, 132, 0, 0, 0, 0, 296, 297,
	0, 0, 0, 0, 0, 0, 867, 0, 55, 0,
	0, 263, 284, 283, 286, 287, 288, 289, 0, 0,
	97, 285, 290, 291, 292, 868, 0, 0, 260, 277,
	0, 304, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 274, 275, 0, 0, 0, 0, 318, 0, 276,
	0, 0, 271, 272, 273, 278, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 110, 0, 0, 0, 208,
	0, 0, 316, 0, 147, 0, 164, 112, 120, 84,
	91, 0, 111, 138, 152, 156, 0, 0, 100, 0,
	154, 142, 177, 0, 143, 153, 124, 169, 148, 176,
	184, 185, 166, 183, 188, 158, 85, 165, 175, 98,
	157, 87, 173, 163, 130, 116, 117, 86, 0, 151,
	103, 108, 102, 139, 170, 171, 101, 191, 92, 182,
	89, 93, 181, 137, 168, 174, 131, 128, 88, 172,
	129, 127, 119, 106, 113, 145, 126, 146, 114, 134,
	133, 135, 0, 0, 0, 162, 179, 192, 95, 0,
	167, 186, 187, 0, 0, 96, 109, 105, 144, 136,
	94, 115, 159, 118, 125, 150, 190, 141, 155, 99,
	178, 160, 306, 317, 312, 313, 310, 311, 309, 308,
	307, 319, 298, 299, 300, 301, 303, 0, 314, 315,
	302, 83, 90, 122, 189, 149, 107, 180, 140, 0,
	0, 794, 0, 265, 0, 0, 0, 104, 0, 262,
	0, 0, 0, 121, 305, 123, 0, 0, 161, 132,
	0, 0, 0, 0, 296, 297, 0, 0, 0, 0,
	0, 0, 0, 0, 55, 0, 0, 263, 284, 283,
	286, 287, 288, 289, 0, 0, 97, 285, 290, 291,
	292, 0, 0, 0, 260, 277, 0, 304, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 274, 275, 256,
	0, 0, 0, 318, 0, 276, 0, 0, 271, 272,
	273, 278, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 110, 0, 0, 0, 208, 0, 0, 316, 0,
	147, 0, 164, 112, 120, 84, 91, 0, 111, 138,
	152, 156, 0, 0, 100, 0, 154, 142, 177, 0,
	143, 153, 124, 169, 148, 176, 184, 185, 166, 183,
	188, 158, 85, 165, 175, 98, 157, 87, 173, 163,
	130, 116, 117, 86, 0, 151, 103, 108, 102, 139,
	170, 171, 101, 191, 92, 182, 89, 93, 181, 137,
	168, 174, 131, 128, 88, 172, 129, 127, 119, 106,
	113, 145, 126, 146, 114, 134, 133, 135, 0, 0,
	0, 162, 179, 192, 95, 0, 167, 186, 187, 0,
	0, 96, 109, 105, 144, 136, 94, 115, 159, 118,
	125, 150, 190, 141, 155, 99, 178, 160, 306, 317,
	312, 313, 310, 311, 309, 308, 307, 319, 298, 299,
	300, 301, 303, 0, 314, 315, 302, 83, 90, 122,
	189, 149, 107, 180, 140, 0, 0, 0, 0, 265,
	0, 0, 0, 104, 0, 262, 0, 0, 0, 121,
	305, 123, 0, 0, 161, 132, 0, 0, 0, 0,
	296, 297, 0, 0, 0, 0, 0, 0, 0, 0,
	55, 0, 497, 263, 284, 283, 286, 287, 288, 289,
	0, 0, 97, 285, 290, 291, 292, 0, 0, 0,
	260, 277, 0, 304, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 274, 275, 0, 0, 0, 0, 318,
	0, 276, 0, 0, 271, 272, 273, 278, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 110, 0, 0,
	0, 208, 0, 0, 316, 0, 147, 0, 164, 112,
	120, 84, 91, 0, 111, 138, 152, 156, 0, 0,
	100, 0, 154, 142, 177, 0, 143, 153, 124, 169,
	148, 176, 184, 185, 166, 183, 188, 158, 85, 165,
	175, 98, 157, 87, 173, 163, 130, 116, 117, 86,
	0, 151, 103, 108, 102, 139, 170, 171, 101, 191,
	92, 182, 89, 93, 181, 137, 168, 174, 131, 128,
	88, 172, 129, 127, 119, 106, 113, 145, 126, 146,
	114, 134, 133, 135, 0, 0, 0, 162, 179, 192,
	95, 0, 167, 186, 187, 0, 0, 96, 109, 105,
	144, 136, 94, 115, 159, 118, 125, 150, 190, 141,
	155, 99, 178, 160, 306, 317, 312, 313, 310, 311,
	309, 308, 307, 319, 298, 299, 300, 301, 303, 0,
	314, 315, 302, 83, 90, 122, 189, 149, 107, 180,
	140, 0, 0, 0, 0, 265, 0, 0, 0, 104,
	0, 262, 0, 0, 0, 121, 305, 123, 0, 0,
	161, 132, 0, 0, 0, 0, 296, 297, 0, 0,
	0, 0, 0, 0, 0, 0, 55, 0, 0, 263,
	284, 283, 286, 287, 288, 289, 0, 0, 97, 285,
	290, 291, 292, 0, 0, 0, 260, 277, 0, 304,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 274,
	275, 256, 0, 0, 0, 318, 0, 276, 0, 0,
	271, 272, 273, 278, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 110, 0, 0, 0, 208, 0, 0,
	316, 0, 147, 0, 164, 112, 120, 84, 91, 0,
	111, 138, 152, 156, 0, 0, 100, 0, 154, 142,
	177, 0, 143, 153, 124, 169, 148, 176, 184, 185,
	166, 183, 188, 158, 85, 165, 175, 98, 157, 87,
	173, 163, 130, 116, 117, 86, 0, 151, 103, 108,
	102, 139, 170, 171, 101, 191, 92, 182, 89, 93,
	181, 137, 168, 174, 131, 128, 88, 172, 129, 127,
	119, 106, 113, 145, 126, 146, 114, 134, 133, 135,
	0, 0, 0, 162, 179, 192, 95, 0, 167, 186,
	187, 0, 0, 96, 109, 105, 144, 136, 94, 115,
	159, 118, 125, 150, 190, 141, 155, 99, 178, 160,
	306, 317, 312, 313, 310, 311, 309, 308, 307, 319,
	298, 299, 300, 301, 303, 0, 314, 315, 302, 83,
	90, 122, 189, 149, 107, 180, 140, 0, 0, 0,
	0, 265, 0, 0, 0, 104, 0, 262, 0, 0,
	0, 121, 305, 123, 0, 0, 161, 132, 0, 0,
	0, 0, 296, 297, 0, 0, 0, 0, 0, 0,
	0, 0, 55, 0, 0, 263, 284, 809, 286, 287,
	288, 289, 0, 0, 97, 285, 290, 291, 292, 0,
	0, 0, 260, 277, 0, 304, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 274, 275, 256, 0, 0,
	0, 318, 0, 276, 0, 0, 271, 272, 273, 278,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 110,
	0, 0, 0, 208, 0, 0, 316, 0, 147, 0,
	164, 112, 120, 84, 91, 0, 111, 138, 152, 156,
	0, 0, 100, 0, 154, 142, 177, 0, 143, 153,
	124, 169, 148, 176, 184, 185, 166, 183, 188, 158,
	85, 165, 175, 98, 157, 87, 173, 163, 130, 116,
	117, 86, 0, 151, 103, 108, 102, 139, 170, 171,
	101, 191, 92, 182, 89, 93, 181, 137, 168, 174,
	131, 128, 88, 172, 129, 127, 119, 106, 113, 145,
	126, 146, 114, 134, 133, 135, 0, 0, 0, 162,
	179, 192, 95, 0, 167, 186, 187, 0, 0, 96,
	109, 105, 144, 136, 94, 115, 159, 118, 125, 150,
	190, 141, 155, 99, 178, 160, 306, 317, 312, 313,
	310, 311, 309, 308, 307, 319, 298, 299, 300, 301,
	303, 0, 314, 315, 302, 83, 90, 122, 189, 149,
	107, 180, 140, 0, 0, 0, 0, 265, 0, 0,
	0, 104, 0, 262, 0, 0, 0, 121, 305, 123,
	0, 0, 161, 132, 0, 0, 0, 0, 296, 297,
	0, 0, 0, 0, 0, 0, 0, 0, 55, 0,
	0, 263, 284, 806, 286, 287, 288, 289, 0, 0,
	97, 285, 290, 291, 292, 0, 0, 0, 260, 277,
	0, 304, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 274, 275, 256, 0, 0, 0, 318, 0, 276,
	0, 0, 271, 272, 273, 278, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 110, 0, 0, 0, 208,
	0, 0, 316, 0, 147, 0, 164, 112, 120, 84,
	91, 0, 111, 138, 152, 156, 0, 0, 100, 0,
	154, 142, 177, 0, 143, 153, 124, 169, 148, 176,
	184, 185, 166, 183, 188, 158, 85, 165, 175, 98,
	157, 87, 173, 163, 130, 116, 117, 86, 0, 151,
	103, 108, 102, 139, 170, 171, 101, 191, 92, 182,
	89, 93, 181, 137, 168, 174, 131, 128, 88, 172,
	129, 127, 119, 106, 113, 145, 126, 146, 114, 134,
	133, 135, 0, 0, 0, 162, 179, 192, 95, 0,
	167, 186, 187, 0, 0, 96, 109, 105, 144, 136,
	94, 115, 159, 118, 125, 150, 190, 141, 155, 99,
	178, 160, 306, 317, 312, 313, 310, 311, 309, 308,
	307, 319, 298, 299, 300, 301, 303, 25, 314, 315,
	302, 83, 90, 122, 189, 149, 107, 180, 0, 140,
	0, 0, 0, 0, 265, 0, 0, 0, 104, 0,
	262, 0, 0, 0, 121, 305, 123, 0, 0, 161,
	132, 0, 0, 0, 0, 296, 297, 0, 0, 0,
	0, 0, 0, 0, 0, 55, 0, 0, 263, 284,
	283, 286, 287, 288, 289, 0, 0, 97, 285, 290,
	291, 292, 0, 0, 0, 260, 277, 0, 304, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 274, 275,
	0, 0, 0, 0, 318, 0, 276, 0, 0, 271,
	272, 273, 278, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 110, 0, 0, 0, 208, 0, 0, 316,
	0, 147, 0, 164, 112, 120, 84, 91, 0, 111,
	138, 152, 156, 0, 0, 100, 0, 154, 142, 177,
	0, 143, 153, 124, 169, 148, 176, 184, 185, 166,
	183, 188, 158, 85, 165, 175, 98, 157, 87, 173,
	163, 130, 116, 117, 86, 0, 151, 103, 108, 102,
	139, 170, 171, 101, 191, 92, 182, 89, 93, 181,
	137, 168, 174, 131, 128, 88, 172, 129, 127, 119,
	106, 113, 145, 126, 146, 114, 134, 133, 135, 0,
	0, 0, 162, 179, 192, 95, 0, 167, 186, 187,
	0, 0, 96, 109, 105, 144, 136, 94, 115, 159,
	118, 125, 150, 190, 141, 155, 99, 178, 160, 306,
	317, 312, 313, 310, 311, 309, 308, 307, 319, 298,
	299, 300, 301, 303, 0, 314, 315, 302, 83, 90,
	122, 189, 149, 107, 180, 140, 0, 0, 0, 0,
	265, 0, 0, 0, 104, 0, 262, 0, 0, 0,
	121, 305, 123, 0, 0, 161, 132, 0, 0, 0,
	0, 296, 297, 0, 0, 0, 0, 0, 0, 0,
	0, 55, 0, 0, 263, 284, 283, 286, 287, 288,
	289, 0, 0, 97, 285, 290, 291, 292, 0, 0,
	0, 260, 277, 0, 304, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 274, 275, 0, 0, 0, 0,
	318, 0, 276, 0, 0, 271, 272, 273, 278, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 110, 0,
	0, 0, 208, 0, 0, 316, 0, 147, 0, 164,
	112, 120, 84, 91, 0, 111, 138, 152, 156, 0,
	0, 100, 0, 154, 142, 177, 0, 143, 153, 124,
	169, 148, 176, 184, 185, 166, 183, 188, 158, 85,
	165, 175, 98, 157, 87, 173, 163, 130, 116, 117,
	86, 0, 151, 103, 108, 102, 139, 170, 171, 101,
	191, 92, 182, 89, 93, 181, 137, 168, 174, 131,
	128, 88, 172, 129, 127, 119, 106, 113, 145, 126,
	146, 114, 134, 133, 135, 0, 0, 0, 162, 179,
	192, 95, 0, 167, 186, 187, 0, 0, 96, 109,
	105, 144, 136, 94, 115, 159, 118, 125, 150, 190,
	141, 155, 99, 178, 160, 306, 317, 312, 313, 310,
	311, 309, 308, 307, 319, 298, 299, 300, 301, 303,
	0, 314, 315, 302, 83, 90, 122, 189, 149, 107,
	180, 140, 0, 0, 0, 0, 0, 0, 0, 0,
	104, 0, 0, 0, 0, 0, 121, 305, 123, 0,
	0, 161, 132, 0, 0, 0, 0, 296, 297, 0,
	0, 0, 0, 0, 0, 0, 0, 55, 0, 0,
	263, 284, 283, 286, 287, 288, 289, 0, 0, 97,
	285, 290, 291, 292, 0, 0, 0, 0, 277, 0,
	304, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	274, 275, 0, 0, 0, 0, 318, 0, 276, 0,
	0, 271, 272, 273, 278, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 110, 0, 0, 0, 208, 0,
	0, 316, 0, 147, 0, 164, 112, 120, 84, 91,
	0, 111, 138, 152, 156, 0, 0, 100, 0, 154,
	142, 177, 1428, 143, 153, 124, 169, 148, 176, 184,
	185, 166, 183, 188, 158, 85, 165, 175, 98, 157,
	87, 173, 163, 130, 116, 117, 86, 0, 151, 103,
	108, 102, 139, 170, 171, 101, 191, 92, 182, 89,
	93, 181, 137, 168, 174, 131, 128, 88, 172, 129,
	127, 119, 106, 113, 145, 126, 146, 114, 134, 133,
	135, 0, 0, 0, 162, 179, 192, 95, 0, 167,
	186, 187, 0, 0, 96, 109, 105, 144, 136, 94,
	115, 159, 118, 125, 150, 190, 141, 155, 99, 178,
	160, 306, 317, 312, 313, 310, 311, 309, 308, 307,
	319, 298, 299, 300, 301, 303, 0, 314, 315, 302,
	83, 90, 122, 189, 149, 107, 180, 140, 0, 0,
	0, 0, 0, 0, 0, 0, 104, 0, 0, 0,
	0, 0, 121, 305, 123, 0, 0, 161, 132, 0,
	0, 0, 0, 296, 297, 0, 0, 0, 0, 0,
	0, 0, 0, 55, 0, 497, 263, 284, 283, 286,
	287, 288, 289, 0, 0, 97, 285, 290, 291, 292,
	0, 0, 0, 0, 277, 0, 304, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 274, 275, 0, 0,
	0, 0, 318, 0, 276, 0, 0, 271, 272, 273,
	278, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	110, 0, 0, 0, 208, 0, 0, 316, 0, 147,
	0, 164, 112, 120, 84, 91, 0, 111, 138, 152,
	156, 0, 0, 100, 0, 154, 142, 177, 0, 143,
	153, 124, 169, 148, 176, 184, 185, 166, 183, 188,
	158, 85, 165, 175, 98, 157, 87, 173, 163, 130,
	116, 117, 86, 0, 151, 103, 108, 102, 139, 170,
	171, 101, 191, 92, 182, 89, 93, 181, 137, 168,
	174, 131, 128, 88, 172, 129, 127, 119, 106, 113,
	145, 126, 146, 114, 134, 133, 135, 0, 0, 0,
	162, 179, 192, 95, 0, 167, 186, 187, 0, 0,
	96, 109, 105, 144, 136, 94, 115, 159, 118, 125,
	150, 190, 141, 155, 99, 178, 160, 306, 317, 312,
	313, 310, 311, 309, 308, 307, 319, 298, 299, 300,
	301, 303, 0, 314, 315, 302, 83, 90, 122, 189,
	149, 107, 180, 140, 0, 0, 0, 0, 0, 0,
	0, 0, 104, 0, 0, 0, 0, 0, 121, 305,
	123, 0, 0, 161, 132, 0, 0, 0, 0, 296,
	297, 0, 0, 0, 0, 0, 0, 0, 0, 55,
	0, 0, 263, 284, 283, 286, 287, 288, 289, 0,
	0, 97, 285, 290, 291, 292, 0, 0, 0, 0,
	277, 0, 304, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 274, 275, 0, 0, 0, 0, 318, 0,
	276, 0, 0, 271, 272, 273, 278, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 110, 0, 0, 0,
	208, 0, 0, 316, 0, 147, 0, 164, 112, 120,
	84, 91, 0, 111, 138, 152, 156, 0, 0, 100,
	0, 154, 142, 177, 0, 143, 153, 124, 169, 148,
	176, 184, 185, 166, 183, 188, 158, 85, 165, 175,
	98, 157, 87, 173, 163, 130, 116, 117, 86, 0,
	151, 103, 108, 102, 139, 170, 171, 101, 191, 92,
	182, 89, 93, 181, 137, 168, 174, 131, 128, 88,
	172, 129, 127, 119, 106, 113, 145, 126, 146, 114,
	134, 133, 135, 0, 0, 0, 162, 179, 192, 95,
	0, 167, 186, 187, 0, 0, 96, 109, 105, 144,
	136, 94, 115, 159, 118, 125, 150, 190, 141, 155,
	99, 178, 160, 306, 317, 312, 313, 310, 311, 309,
	308, 307, 319, 298, 299, 300, 301, 303, 0, 314,
	315, 302, 83, 90, 122, 189, 149, 107, 180, 140,
	0, 0, 0, 519, 0, 0, 0, 0, 104, 0,
	0, 0, 0, 0, 121, 0, 123, 0, 0, 161,
	132, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 81, 0,
	521, 0, 0, 0, 0, 0, 0, 97, 0, 0,
	0, 0, 0, 516, 515, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	517, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 110, 0, 0, 0, 208, 0, 0, 0,
	0, 147, 0, 164, 112, 120, 84, 91, 0, 111,
	138, 152, 156, 0, 0, 100, 0, 154, 142, 177,
	0, 143, 153, 124, 169, 148, 176, 184, 185, 166,
	183, 188, 158, 85, 165, 175, 98, 157, 87, 173,
	163, 130, 116, 117, 86, 0, 151, 103, 108, 102,
	139, 170, 171, 101, 191, 92, 182, 89, 93, 181,
	137, 168, 174, 131, 128, 88, 172, 129, 127, 119,
	106, 113, 145, 126, 146, 114, 134, 133, 135, 0,
	0, 0, 162, 179, 192, 95, 0, 167, 186, 187,
	0, 0, 96, 109, 105, 144, 136, 94, 115, 159,
	118, 125, 150, 190, 141, 155, 99, 178, 160, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 140, 0, 83, 90,
	122, 189, 149, 107, 180, 104, 0, 0, 0, 0,
	0, 121, 0, 123, 0, 0, 161, 132, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 81, 0, 0, 0, 0,
	0, 0, 0, 0, 97, 0, 0, 0, 0, 0,
	75, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 110,
	77, 78, 0, 74, 0, 0, 0, 79, 147, 0,
	164, 112, 120, 84, 91, 0, 111, 138, 152, 156,
	0, 0, 100, 0, 154, 142, 177, 0, 143, 153,
	124, 169, 148, 176, 184, 185, 166, 183, 188, 158,
	85, 165, 175, 98, 157, 87, 173, 163, 130, 116,
	117, 86, 0, 151, 103, 108, 102, 139, 170, 171,
	101, 191, 92, 182, 89, 93, 181, 137, 168, 174,
	131, 128, 88, 172, 129, 127, 119, 106, 113, 145,
	126, 146, 114, 134, 133, 135, 0, 0, 0, 162,
	179, 192, 95, 0, 167, 186, 187, 0, 0, 96,
	109, 105, 144, 136, 94, 115, 159, 118, 125, 150,
	190, 141, 155, 99, 178, 160, 0, 76, 0, 0,
	0, 25, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 140, 0, 83, 90, 122, 189, 149,
	107, 180, 104, 0, 0, 0, 0, 0, 121, 0,
	123, 0, 0, 161, 132, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 55,
	0, 0, 81, 0, 0, 0, 0, 0, 0, 0,
	0, 97, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 110, 0, 0, 0,
	208, 0, 0, 0, 0, 147, 0, 164, 112, 120,
	84, 91, 0, 111, 138, 152, 156, 0, 0, 100,
	0, 154, 142, 177, 0, 143, 153, 124, 169, 148,
	176, 184, 185, 166, 183, 188, 158, 85, 165, 175,
	98, 157, 87, 173, 163, 130, 116, 117, 86, 0,
	151, 103, 108, 102, 139, 170, 171, 101, 191, 92,
	182, 89, 93, 181, 137, 168, 174, 131, 128, 88,
	172, 129, 127, 119, 106, 113, 145, 126, 146, 114,
	134, 133, 135, 0, 0, 0, 162, 179, 192, 95,
	0, 167, 186, 187, 0, 0, 96, 109, 105, 144,
	136, 94, 115, 159, 118, 125, 150, 190, 141, 155,
	99, 178, 160, 0, 0, 0, 0, 0, 25, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	140, 0, 83, 90, 122, 189, 149, 107, 180, 104,
	0, 0, 0, 0, 0, 121, 0, 123, 0, 0,
	161, 132, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 55, 0, 0, 206,
	0, 0, 0, 0, 0, 0, 0, 0, 97, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 110, 0, 0, 0, 208, 0, 0,
	0, 0, 147, 0, 164, 112, 120, 84, 91, 0,
	111, 138, 152, 156, 0, 0, 100, 0, 154, 142,
	177, 0, 143, 153, 124, 169, 148, 176, 184, 185,
	166, 183, 188, 158, 85, 165, 175, 98, 157, 87,
	173, 163, 130, 116, 117, 86, 0, 151, 103, 108,
	102, 139, 170, 171, 101, 191, 92, 182, 89, 93,
	181, 137, 168, 174, 131, 128, 88, 172, 129, 127,
	119, 106, 113, 145, 126, 146, 114, 134, 133, 135,
	0, 0, 0, 162, 179, 192, 95, 0, 167, 186,
	187, 0, 0, 96, 109, 105, 144, 136, 94, 115,
	159, 118, 125, 150, 190, 141, 155, 99, 178, 160,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 83,
	90, 122, 189, 149, 107, 180, 140, 0, 0, 0,
	850, 0, 0, 0, 0, 104, 0, 0, 0, 0,
	0, 121, 0, 123, 0, 0, 161, 132, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 206, 0, 852, 0, 0,
	0, 0, 0, 0, 97, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 110,
	0, 0, 0, 208, 0, 0, 0, 0, 147, 0,
	164, 112, 120, 84, 91, 0, 111, 138, 152, 156,
	0, 0, 100, 0, 154, 142, 177, 0, 848, 153,
	124, 169, 148, 176, 184, 185, 166, 183, 188, 158,
	85, 165, 175, 98, 157, 87, 173, 163, 130, 116,
	117, 86, 0, 151, 103, 108, 102, 139, 170, 171,
	101, 191, 92, 182, 89, 93, 181, 137, 168, 174,
	131, 128, 88, 172, 129, 127, 119, 106, 113, 145,
	126, 146, 114, 134, 133, 135, 0, 0, 0, 162,
	179, 192, 95, 0, 167, 186, 187, 0, 0, 96,
	109, 105, 144, 136, 94, 115, 159, 118, 125, 150,
	190, 141, 155, 99, 178, 160, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 140, 0, 83, 90, 122, 189, 149,
	107, 180, 104, 0, 0, 0, 0, 0, 121, 0,
	123, 0, 0, 161, 132, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 81, 0, 0, 745, 0, 0, 746, 0,
	0, 97, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 110, 0, 0, 0,
	208, 0, 0, 0, 0, 147, 0, 164, 112, 120,
	84, 91, 0, 111, 138, 152, 156, 0, 0, 100,
	0, 154, 142, 177, 0, 143, 153, 124, 169, 148,
	176, 184, 185, 166, 183, 188, 158, 85, 165, 175,
	98, 157, 87, 173, 163, 130, 116, 117, 86, 0,
	151, 103, 108, 102, 139, 170, 171, 101, 191, 92,
	182, 89, 93, 181, 137, 168, 174, 131, 128, 88,
	172, 129, 127, 119, 106, 113, 145, 126, 146, 114,
	134, 133, 135, 0, 0, 0, 162, 179, 192, 95,
	0, 167, 186, 187, 0, 0, 96, 109, 105, 144,
	136, 94, 115, 159, 118, 125, 150, 190, 141, 155,
	99, 178, 160, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	140, 0, 83, 90, 122, 189, 149, 107, 180, 104,
	0, 633, 0, 0, 0, 121, 0, 123, 0, 0,
	161, 132, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 81,
	0, 632, 0, 0, 0, 0, 0, 0, 97, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 110, 0, 0, 0, 208, 0, 0,
	0, 0, 147, 0, 164, 112, 120, 84, 91, 0,
	111, 138, 152, 156, 0, 0, 100, 0, 154, 142,
	177, 0, 143, 153, 124, 169, 148, 176, 184, 185,
	166, 183, 188, 158, 85, 165, 175, 98, 157, 87,
	173, 163, 130, 116, 117, 86, 0, 151, 103, 108,
	102, 139, 170, 171, 101, 191, 92, 182, 89, 93,
	181, 137, 168, 174, 131, 128, 88, 172, 129, 127,
	119, 106, 113, 145, 126, 146, 114, 134, 133, 135,
	0, 0, 0, 162, 179, 192, 95, 0, 167, 186,
	187, 0, 0, 96, 109, 105, 144, 136, 94, 115,
	159, 118, 125, 150, 190, 141, 155, 99, 178, 160,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 140, 0, 83,
	90, 122, 189, 149, 107, 180, 104, 0, 0, 0,
	0, 0, 121, 0, 123, 0, 0, 161, 132, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 55, 0, 0, 206, 0, 0, 0,
	0, 0, 0, 0, 0, 97, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	110, 0, 0, 0, 208, 0, 0, 0, 0, 147,
	0, 164, 112, 120, 84, 91, 0, 111, 138, 152,
	156, 0, 0, 100, 0, 154, 142, 177, 0, 143,
	153, 124, 169, 148, 176, 184, 185, 166, 183, 188,
	158, 85, 165, 175, 98, 157, 87, 173, 163, 130,
	116, 117, 86, 0, 151, 103, 108, 102, 139, 170,
	171, 101, 191, 92, 182, 89, 93, 181, 137, 168,
	174, 131, 128, 88, 172, 129, 127, 119, 106, 113,
	145, 126, 146, 114, 134, 133, 135, 0, 0, 0,
	162, 179, 192, 95, 0, 167, 186, 187, 0, 0,
	96, 109, 105, 144, 136, 94, 115, 159, 118, 125,
	150, 190, 141, 155, 99, 178, 160, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 140, 0, 83, 90, 122, 189,
	149, 107, 180, 104, 0, 0, 0, 0, 0, 121,
	0, 123, 0, 0, 161, 132, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 206, 0, 852, 0, 0, 0, 0,
	0, 0, 97, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 110, 0, 0,
	0, 208, 0, 0, 0, 0, 147, 0, 164, 112,
	120, 84, 91, 0, 111, 138, 152, 156, 0, 0,
	100, 0, 154, 142, 177, 0, 143, 153, 124, 169,
	148, 176, 184, 185, 166, 183, 188, 158, 85, 165,
	175, 98, 157, 87, 173, 163, 130, 116, 117, 86,
	0, 151, 103, 108, 102, 139, 170, 171, 101, 191,
	92, 182, 89, 93, 181, 137, 168, 174, 131, 128,
	88, 172, 129, 127, 119, 106, 113, 145, 126, 146,
	114, 134, 133, 135, 0, 0, 0, 162, 179, 192,
	95, 0, 167, 186, 187, 0, 0, 96, 109, 105,
	144, 136, 94, 115, 159, 118, 125, 150, 190, 141,
	155, 99, 178, 160, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 140, 0, 83, 90, 122, 189, 149, 107, 180,
	104, 0, 0, 0, 0, 0, 121, 0, 123, 0,
	0, 161, 132, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	81, 0, 521, 0, 0, 0, 0, 0, 0, 97,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 110, 0, 0, 0, 208, 0,
	0, 0, 0, 147, 0, 164, 112, 120, 84, 91,
	0, 111, 138, 152, 156, 0, 0, 100, 0, 154,
	142, 177, 0, 143, 153, 124, 169, 148, 176, 184,
	185, 166, 183, 188, 158, 85, 165, 175, 98, 157,
	87, 173, 163, 130, 116, 117, 86, 0, 151, 103,
	108, 102, 139, 170, 171, 101, 191, 92, 182, 89,
	93, 181, 137, 168, 174, 131, 128, 88, 172, 129,
	127, 119, 106, 113, 145, 126, 146, 114, 134, 133,
	135, 0, 0, 0, 162, 179, 192, 95, 0, 167,
	186, 187, 0, 0, 96, 109, 105, 144, 136, 94,
	115, 159, 118, 125, 150, 190, 141, 155, 99, 178,
	160, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 140,
	83, 90, 122, 189, 149, 107, 180, 603, 104, 0,
	0, 0, 0, 0, 121, 0, 123, 0, 0, 161,
	132, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 206, 0,
	0, 0, 0, 0, 0, 0, 0, 97, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 110, 0, 0, 0, 208, 0, 0, 0,
	0, 147, 0, 164, 112, 120, 84, 91, 0, 111,
	138, 152, 156, 0, 0, 100, 0, 154, 142, 177,
	0, 143, 153, 124, 169, 148, 176, 184, 185, 166,
	183, 188, 158, 85, 165, 175, 98, 157, 87, 173,
	163, 130, 116, 117, 86, 0, 151, 103, 108, 102,
	139, 170, 171, 101, 191, 92, 182, 89, 93, 181,
	137, 168, 174, 131, 128, 88, 172, 129, 127, 119,
	106, 113, 145, 126, 146, 114, 134, 133, 135, 0,
	0, 0, 162, 179, 192, 95, 0, 167, 186, 187,
	0, 0, 96, 109, 105, 144, 136, 94, 115, 159,
	118, 125, 150, 190, 141, 155, 99, 178, 160, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 322,
	0, 0, 0, 0, 0, 0, 140, 0, 83, 90,
	122, 189, 149, 107, 180, 104, 0, 0, 0, 0,
	0, 121, 0, 123, 0, 0, 161, 132, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 206, 0, 0, 0, 0,
	0, 0, 0, 0, 97, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 110,
	0, 0, 0, 208, 0, 0, 0, 0, 147, 0,
	164, 112, 120, 84, 91, 0, 111, 138, 152, 156,
	0, 0, 100, 0, 154, 142, 177, 0, 143, 153,
	124, 169, 148, 176, 184, 185, 166, 183, 188, 158,
	85, 165, 175, 98, 157, 87, 173, 163, 130, 116,
	117, 86, 0, 151, 103, 108, 102, 139, 170, 171,
	101, 191, 92, 182, 89, 93, 181, 137, 168, 174,
	131, 128, 88, 172, 129, 127, 119, 106, 113, 145,
	126, 146, 114, 134, 133, 135, 0, 0, 0, 162,
	179, 192, 95, 0, 167, 186, 187, 0, 0, 96,
	109, 105, 144, 136, 94, 115, 159, 118, 125, 150,
	190, 141, 155, 99, 178, 160, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 140, 0, 83, 90, 122, 189, 149,
	107, 180, 104, 0, 0, 0, 0, 0, 121, 0,
	123, 0, 0, 161, 132, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 206, 0, 0, 0, 0, 0, 0, 0,
	0, 97, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 110, 0, 203, 0,
	208, 0, 0, 0, 0, 147, 0, 164, 112, 120,
	84, 91, 0, 111, 138, 152, 156, 0, 0, 100,
	0, 154, 142, 177, 0, 143, 153, 124, 169, 148,
	176, 184, 185, 166, 183, 188, 158, 85, 165, 175,
	98, 157, 87, 173, 163, 130, 116, 117, 86, 0,
	151, 103, 108, 102, 139, 170, 171, 101, 191, 92,
	182, 89, 93, 181, 137, 168, 174, 131, 128, 88,
	172, 129, 127, 119, 106, 113, 145, 126, 146, 114,
	134, 133, 135, 0, 0, 0, 162, 179, 192, 95,
	0, 167, 186, 187, 0, 0, 96, 109, 105, 144,
	136, 94, 115, 159, 118, 125, 150, 190, 141, 155,
	99, 178, 160, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	140, 0, 83, 90, 122, 189, 149, 107, 180, 104,
	0, 0, 0, 0, 0, 121, 0, 123, 0, 0,
	161, 132, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 81,
	0, 0, 0, 0, 0, 0, 0, 0, 97, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 110, 0, 0, 0, 208, 0, 0,
	0, 0, 147, 0, 164, 112, 120, 84, 91, 0,
	111, 138, 152, 156, 0, 0, 100, 0, 154, 142,
	177, 0, 143, 153, 124, 169, 148, 176, 184, 185,
	166, 183, 188, 158, 85, 165, 175, 98, 157, 87,
	173, 163, 130, 116, 117, 86, 0, 151, 103, 108,
	102, 139, 170, 171, 101, 191, 92, 182, 89, 93,
	181, 137, 168, 174, 131, 128, 88, 172, 129, 127,
	119, 106, 113, 145, 126, 146, 114, 134, 133, 135,
	0, 0, 0, 162, 179, 192, 95, 0, 167, 186,
	187, 0, 0, 96, 109, 105, 144, 136, 94, 115,
	159, 118, 125, 150, 190, 141, 155, 99, 178, 160,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 140, 0, 83,
	90, 122, 189, 149, 107, 180, 104, 0, 0, 0,
	0, 0, 121, 0, 123, 0, 0, 161, 132, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 206, 0, 0, 0,
	0, 0, 0, 0, 0, 97, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	110, 0, 0, 0, 208, 0, 0, 0, 0, 147,
	0, 164, 112, 120, 84, 91, 0, 111, 138, 152,
	156, 0, 0, 100, 0, 154, 142, 177, 0, 143,
	153, 124, 169, 148, 176, 184, 185, 166, 183, 188,
	158, 85, 165, 175, 98, 157, 87, 173, 163, 130,
	116, 117, 86, 0, 151, 103, 108, 102, 139, 170,
	171, 101, 191, 92, 182, 89, 93, 181, 137, 168,
	174, 131, 128, 88, 172, 129, 127, 119, 106, 113,
	145, 126, 146, 114, 134, 133, 135, 0, 0, 0,
	162, 179, 192, 95, 0, 167, 186, 187, 0, 0,
	96, 109, 105, 144, 136, 94, 115, 159, 118, 125,
	150, 190, 141, 155, 99, 178, 160, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 140, 0, 83, 90, 122, 189,
	149, 107, 180, 104, 0, 0, 0, 0, 0, 121,
	0, 123, 0, 0, 161, 132, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 263, 0, 0, 0, 0, 0, 0,
	0, 0, 97, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 110, 0, 0,
	0, 208, 0, 0, 0, 0, 147, 0, 164, 112,
	120, 84, 91, 0, 111, 138, 152, 156, 0, 0,
	100, 0, 154, 142, 177, 0, 143, 153, 124, 169,
	148, 176, 184, 185, 166, 183, 188, 158, 85, 165,
	175, 98, 157, 87, 173, 163, 130, 116, 117, 86,
	0, 151, 103, 108, 102, 139, 170, 171, 101, 191,
	92, 182, 89, 93, 181, 137, 168, 174, 131, 128,
	88, 172, 129, 127, 119, 106, 113, 145, 126, 146,
	114, 134, 133, 135, 0, 0, 0, 162, 179, 192,
	95, 0, 167, 186, 187, 0, 0, 96, 109, 105,
	144, 136, 94, 115, 159, 118, 125, 150, 190, 141,
	155, 99, 178, 160, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 83, 90, 122, 189, 149, 107, 180,
}
var yyPact = [...]int{

	1426, -1000, -185, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 929, 981, -1000, -1000, -1000, -1000, -1000,
	-1000, 259, 8837, 35, 108, 16, 11454, 107, 1760, 11928,
	-1000, 0, -1000, -1000, -1000, -1000, -1000, -1000, -68, -74,
	-1000, 731, 731, -1000, -1000, -1000, -1000, -1000, 911, 923,
	754, 916, 812, -1000, 6631, 68, 68, 11217, 5647, -1000,
	-1000, 324, 11928, 102, 11928, -141, 64, 64, 64, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 105, 11928, 190, -1000, 11928, 63, 529,
	63, 63, 63, 11928, -1000, 155, -1000, -1000, -1000, 11928,
	524, 846, 3307, 52, 3307, -1000, 3307, 3307, -1000, 3307,
	11, 3307, -63, 938, 12, -8, -1000, 3307, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 533, 851, 7616, 7616, 929, -1000, 731, -1000, -1000,
	-1000, 839, -1000, -1000, 339, 967, -1000, 8600, 150, -1000,
	7616, 1927, 709, -1000, -1000, 709, -1000, -1000, 135, -1000,
	-1000, 8354, 8354, 8354, 8354, 8354, 8354, 8354, 8354, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 709, -1000, 7370, 709, 709, 709, 709,
	709, 709, 709, 709, 7616, 709, 709, 709, 709, 709,
	709, 709, 709, 709, 709, 709, 709, 709, 709, 709,
	10980, 10268, 11928, 697, 666, -1000, -1000, 148, 693, 5387,
	-77, -1000, -1000, -1000, 261, 10031, -1000, -1000, -1000, 842,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 638, 11928, -1000, 1955,
	-1000, 519, 3307, 79, 493, 271, 486, 11928, 11928, 3307,
	18, 55, 49, 11928, 701, 74, 11928, 893, 778, 11928,
	463, 461, -1000, 5127, -1000, 3307, 3307, -1000, -1000, -1000,
	3307, 3307, 3307, 11928, 3307, 3307, -1000, -1000, -1000, -1000,
	3307, 3307, -1000, 966, 298, -1000, -1000, -1000, -1000, 7616,
	197, -1000, 775, -1000, -1000, -1000, -1000, -1000, -1000, 973,
	193, 434, 144, 699, -1000, 410, 911, 533, 812, 9794,
	802, -1000, -1000, 11928, -1000, 7616, 7616, 447, -1000, 10742,
	-1000, -1000, 4087, 200, 8354, 382, 227, 8354, 8354, 8354,
	8354, 8354, 8354, 8354, 8354, 8354, 8354, 8354, 8354, 8354,
	8354, 8354, 398, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 451, -1000, 731, 729, 729, 177, 177, 177, 177,
	177, 177, 177, 2488, 6139, 533, 618, 255, 7370, 6631,
	6631, 7616, 7616, 7123, 6877, 6631, 902, 263, 255, 12165,
	-1000, -1000, 8108, -1000, -1000, -1000, -1000, -1000, 533, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 11691, 11691, 6631, 6631,
	6631, 6631, 33, 11928, -1000, 694, 780, -1000, -1000, -1000,
	898, 9311, 9557, 33, 658, 10268, 11928, -1000, -1000, 10268,
	11928, 3827, 4867, 693, -77, 665, -1000, -110, -97, 5893,
	176, -1000, -1000, -1000, -1000, 3047, 422, 554, 329, -56,
	-1000, -1000, -1000, 719, -1000, 719, 719, 719, 719, -24,
	-24, -24, -24, -1000, -1000, -1000, -1000, -1000, 755, 749,
	-1000, 719, 719, 719, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 747, 747, 747, 724, 724, 760, -1000, 11928,
	3307, 891, 3307, -1000, 1466, -1000, 11928, 11928, 11928, 11928,
	11928, 123, 11928, 11928, 685, -1000, 11928, 3307, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 11928, 312, 11928, 11928, 255, -1000, 428,
	11928, -1000, 821, 7616, 7616, 4607, 7616, -1000, -1000, -1000,
	851, -1000, 902, 927, -1000, 835, 831, 6631, -1000, -1000,
	200, 355, -1000, -1000, 479, -1000, -1000, -1000, -1000, 142,
	709, -1000, 471, -1000, -1000, -1000, -1000, 382, 8354, 8354,
	8354, 323, 471, 1974, 1608, 1499, 177, 632, 632, 164,
	164, 164, 164, 164, 1390, 1390, -1000, -1000, -1000, 533,
	-1000, -1000, -1000, 533, 6631, 683, -1000, -1000, 7616, -1000,
	533, 607, 607, 388, 515, 325, 959, 607, 234, 943,
	607, 607, 6631, 272, -1000, 7616, 533, -1000, 140, -1000,
	1161, 673, 667, 607, 533, 607, 607, 675, 709, -1000,
	12165, 10268, 10268, 10268, 10268, 10268, -1000, 809, 807, -1000,
	797, 795, 796, 11928, -1000, 609, 9311, 137, 709, -1000,
	10505, -1000, -1000, 937, 10268, 611, -1000, 611, -1000, 139,
	-1000, -1000, 665, -77, -120, -1000, -1000, -1000, -1000, 255,
	-1000, 419, 663, 2787, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 732, 448, -1000, 884, 192, 187, 439, 878, -1000,
	-1000, -1000, 848, -1000, 330, -58, -1000, -1000, 380, -24,
	-24, -1000, -1000, 176, 841, 176, 176, 176, 408, 408,
	-1000, -1000, -1000, -1000, 372, -1000, -1000, -1000, 371, -1000,
	768, 11691, 3307, -1000, -1000, -1000, -1000, 201, 201, 174,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 32, 730, -1000, -1000, -1000, -1000, 9, 17, 73,
	-1000, 3307, -1000, 298, -1000, 405, 7616, -1000, -1000, -1000,
	-1000, 819, 255, 255, 138, -1000, -1000, 11928, -1000, -1000,
	-1000, -1000, 703, -1000, -1000, -1000, 3567, 6631, -1000, 323,
	471, 1541, -1000, 8354, 8354, -1000, -1000, 607, 6631, 255,
	-1000, -1000, -1000, 81, 398, 81, 8354, 8354, -1000, 8354,
	8354, -1000, -157, 689, 256, -1000, 7616, 425, -1000, 4607,
	-1000, 8354, 8354, -1000, -1000, -1000, -1000, 765, 12165, 709,
	-1000, 9074, 11691, 636, -1000, 260, 780, 746, 764, 588,
	-1000, -1000, -1000, -1000, 806, -1000, 805, -1000, -1000, -1000,
	-1000, -1000, 100, 99, 98, 11691, -1000, 929, 7616, 611,
	-1000, -1000, 182, -1000, -1000, -116, -117, -1000, -1000, -1000,
	3047, -1000, 3047, 11691, 46, -1000, 439, 439, -1000, -1000,
	-1000, 728, 763, 8354, -1000, -1000, -1000, 549, 176, 176,
	-1000, 178, -1000, -1000, -1000, 601, -1000, 597, 646, 589,
	11928, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 11928, -1000, -1000,
	-1000, -1000, -1000, 11691, -167, 436, 11691, 11691, 11691, 11928,
	-1000, 312, -1000, 255, -1000, 4347, -1000, 937, 10268, -1000,
	-1000, 533, -1000, 8354, 471, 471, -1000, -1000, 533, 719,
	719, -1000, 719, 724, -1000, 719, -4, 719, -6, 533,
	533, 1942, 1869, 1801, 1637, 709, -151, -1000, 255, 7616,
	-1000, 1410, 862, -1000, 852, 591, 604, -1000, -1000, 6385,
	533, 571, 134, 562, -1000, 929, 12165, 7616, -1000, -1000,
	7616, 723, -1000, 7616, -1000, -1000, -1000, 709, 709, 709,
	562, 911, 255, -1000, -1000, -1000, -1000, 2787, -1000, 553,
	-1000, 719, -1000, -1000, -1000, 11691, -48, 972, 471, -1000,
	-1000, -1000, -1000, -1000, -24, 399, -24, 369, -1000, 348,
	3307, -1000, -1000, -1000, -1000, 864, -1000, 4347, -1000, -1000,
	717, 759, -1000, -1000, -1000, 935, 628, -1000, 471, -1000,
	-1000, 110, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	8354, 8354, 8354, 8354, 8354, 533, 395, 255, 8354, 8354,
	869, -1000, 709, -1000, -1000, 711, 11691, 11691, -1000, 11691,
	911, -1000, 255, 255, 11691, 255, 11691, 11691, 11691, 2209,
	-1000, 132, 11691, -1000, 545, -1000, 185, -1000, -160, 176,
	-1000, 176, 546, 542, -1000, 709, 624, -1000, 258, 11691,
	11928, 933, 917, -1000, -1000, 1161, 1161, 1161, 1161, 30,
	-1000, -1000, 1161, 1161, 971, -1000, 709, -1000, 731, 121,
	-1000, -1000, -1000, 539, 537, 537, 537, 137, 132, -1000,
	431, 230, 392, -1000, 40, 11691, 335, 857, -1000, 850,
	-1000, -1000, -1000, -1000, -1000, 31, 4347, 3047, 528, -1000,
	-1000, 7616, 7616, -1000, -1000, -1000, -1000, 533, 48, -170,
	-1000, -1000, 12165, 604, 533, 11691, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 347, -1000, -1000, 11928, -1000, -1000, 386,
	-1000, -1000, 502, -1000, 11691, -1000, -1000, 730, 255, 583,
	-1000, 818, -163, -174, 573, -1000, -1000, -1000, 713, -1000,
	-1000, 31, 828, -167, -1000, 817, -1000, 11691, -1000, 27,
	-1000, -168, 474, 23, -172, 762, 709, -175, 748, -1000,
	964, 7862, -1000, -1000, 970, 163, 163, 1161, 533, -1000,
	-1000, -1000, 51, 326, -1000, -1000, -1000, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 1196, 99, 485, 1195, 1194, 1192, 1191, 1189, 1188,
	1185, 1182, 1180, 1179, 1178, 1177, 1176, 1175, 1173, 1172,
	1162, 1160, 1159, 1158, 1157, 1156, 1155, 117, 1154, 1152,
	1151, 66, 1150, 74, 1149, 1148, 48, 206, 55, 46,
	295, 1146, 32, 50, 108, 1145, 29, 1144, 1133, 78,
	1132, 1131, 45, 1130, 1128, 202, 1127, 67, 1124, 11,
	56, 1123, 1122, 1116, 1115, 70, 862, 1113, 1112, 15,
	1110, 1105, 102, 1102, 52, 7, 8, 28, 22, 1101,
	920, 6, 1097, 51, 1093, 1092, 1090, 1089, 27, 1088,
	57, 1086, 19, 54, 1085, 9, 65, 36, 21, 5,
	77, 64, 1084, 16, 60, 47, 1079, 1078, 541, 1077,
	1076, 42, 1074, 1072, 25, 1071, 191, 434, 1070, 1069,
	1067, 1066, 39, 0, 545, 233, 72, 1062, 1060, 1058,
	1486, 34, 53, 18, 1057, 58, 20, 41, 1056, 1054,
	38, 1053, 1052, 1051, 1050, 1047, 1045, 1043, 23, 1042,
	1041, 1040, 91, 24, 1039, 1038, 63, 30, 1015, 1014,
	1010, 43, 59, 1009, 1008, 49, 31, 1007, 1006, 1005,
	1004, 1003, 26, 10, 1002, 12, 1000, 13, 999, 35,
	998, 4, 997, 14, 994, 3, 993, 17, 44, 1,
	990, 2, 989, 987, 61, 529, 71, 976, 76,
}
var yyR1 = [...]int{

	0, 192, 193, 193, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 11, 2, 2, 2, 6,
	3, 4, 4, 5, 5, 7, 7, 30, 30, 8,
	9, 9, 9, 9, 196, 196, 49, 49, 50, 50,
	96, 96, 10, 10, 10, 10, 101, 101, 105, 105,
	105, 106, 106, 106, 106, 138, 138, 12, 12, 12,
	12, 12, 12, 12, 187, 187, 186, 185, 185, 184,
	184, 183, 18, 168, 170, 170, 169, 169, 169, 169,
	162, 141, 141, 141, 141, 144, 144, 142, 142, 142,
	142, 142, 142, 142, 142, 142, 143, 143, 143, 143,
	143, 145, 145, 145, 145, 145, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 147, 147, 147, 147, 147, 147, 147, 147, 161,
	161, 148, 148, 156, 156, 157, 157, 157, 154, 154,
	155, 155, 158, 158, 158, 150, 150, 151, 151, 159,
	159, 152, 152, 152, 153, 153, 153, 160, 160, 160,
	160, 160, 149, 149, 163, 163, 178, 178, 177, 177,
	177, 167, 167, 174, 174, 174, 174, 174, 165, 165,
	166, 166, 176, 176, 175, 164, 164, 179, 179, 179,
	179, 190, 191, 189, 189, 189, 189, 189, 171, 171,
	171, 172, 172, 172, 173, 173, 173, 13, 13, 13,
	13, 13, 13, 13, 13, 13, 13, 13, 13, 13,
	13, 13, 188, 188, 188, 188, 188, 188, 188, 188,
	188, 188, 188, 182, 180, 180, 181, 181, 14, 19,
	19, 15, 15, 15, 15, 15, 16, 16, 20, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 112, 112, 110,
	110, 113, 113, 111, 111, 111, 114, 114, 114, 115,
	115, 139, 139, 139, 22, 22, 24, 24, 25, 26,
	23, 23, 23, 23, 23, 23, 17, 197, 27, 28,
	28, 29, 29, 29, 33, 33, 33, 31, 31, 32,
	32, 38, 38, 37, 37, 39, 39, 39, 39, 127,
	127, 127, 126, 126, 41, 41, 42, 42, 43, 43,
	44, 44, 44, 44, 58, 58, 95, 95, 97, 97,
	45, 45, 45, 45, 46, 46, 47, 47, 48, 48,
	134, 134, 133, 133, 133, 132, 132, 51, 51, 51,
	53, 52, 52, 52, 52, 54, 54, 56, 56, 55,
	55, 57, 59, 59, 59, 59, 60, 60, 40, 40,
	40, 40, 40, 40, 40, 109, 109, 62, 62, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 73,
	73, 73, 73, 73, 73, 63, 63, 63, 63, 63,
	63, 63, 36, 36, 74, 74, 74, 80, 75, 75,
	66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
	66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
	66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
	66, 66, 70, 70, 70, 68, 68, 68, 68, 68,
	68, 68, 68, 68, 68, 68, 68, 68, 69, 69,
	69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
	69, 69, 69, 69, 198, 198, 72, 71, 71, 71,
	71, 71, 71, 34, 34, 34, 34, 34, 137, 137,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 84, 84, 35, 35, 82, 82, 83,
	85, 85, 81, 81, 81, 65, 65, 65, 65, 65,
	65, 65, 65, 67, 67, 67, 86, 86, 87, 87,
	88, 88, 89, 89, 90, 91, 91, 91, 92, 92,
	92, 92, 93, 93, 93, 64, 64, 64, 64, 64,
	64, 94, 94, 94, 94, 98, 98, 76, 76, 78,
	78, 77, 79, 99, 99, 103, 100, 100, 104, 104,
	104, 104, 102, 102, 102, 129, 129, 129, 107, 107,
	116, 116, 117, 117, 108, 108, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 119, 119, 119, 120,
	120, 121, 121, 121, 128, 128, 124, 124, 125, 125,
	130, 130, 131, 131, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	194, 195, 135, 136, 136, 136,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 2, 4, 6, 7, 5,
	10, 1, 3, 1, 3, 7, 8, 1, 1, 9,
	8, 7, 6, 6, 1, 1, 1, 3, 1, 3,
	0, 4, 3, 4, 5, 4, 1, 3, 3, 2,
	2, 2, 2, 2, 1, 1, 1, 2, 2, 8,
	4, 6, 5, 5, 0, 2, 1, 0, 2, 1,
	3, 3, 4, 4, 2, 4, 1, 3, 3, 3,
	8, 3, 1, 1, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 2, 2,
	2, 1, 2, 2, 2, 1, 4, 4, 2, 2,
	3, 3, 3, 3, 1, 1, 1, 1, 1, 6,
	6, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 0, 3, 0, 5, 0, 3, 5, 0, 1,
	0, 1, 0, 1, 2, 0, 2, 0, 3, 0,
	1, 0, 3, 3, 0, 2, 2, 0, 2, 1,
	2, 1, 0, 2, 5, 4, 1, 2, 2, 3,
	2, 0, 1, 2, 3, 3, 2, 2, 1, 1,
	0, 1, 1, 3, 2, 3, 1, 10, 11, 11,
	12, 3, 3, 1, 1, 2, 2, 2, 0, 1,
	3, 1, 2, 3, 1, 1, 1, 6, 7, 7,
	7, 7, 4, 5, 7, 5, 5, 5, 12, 7,
	5, 9, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 7, 1, 3, 8, 8, 3, 3,
	5, 4, 6, 5, 4, 4, 3, 2, 3, 4,
	4, 3, 4, 4, 4, 4, 4, 4, 3, 2,
	3, 3, 2, 3, 4, 3, 7, 5, 4, 2,
	4, 4, 3, 3, 5, 2, 3, 1, 1, 0,
	1, 1, 1, 0, 2, 2, 0, 2, 2, 0,
	2, 0, 1, 1, 2, 1, 1, 2, 1, 1,
	2, 2, 2, 2, 3, 3, 2, 0, 2, 0,
	2, 1, 2, 2, 0, 1, 1, 0, 1, 0,
	1, 0, 1, 1, 3, 1, 2, 3, 5, 0,
	1, 2, 1, 1, 0, 2, 1, 3, 1, 1,
	1, 3, 1, 3, 3, 7, 1, 3, 1, 3,
	4, 4, 4, 3, 2, 4, 0, 1, 0, 2,
	0, 1, 0, 1, 2, 1, 1, 1, 2, 2,
	1, 2, 3, 2, 3, 2, 2, 2, 1, 1,
	3, 3, 0, 5, 5, 5, 0, 2, 1, 3,
	3, 2, 3, 1, 2, 0, 3, 1, 1, 3,
	3, 4, 4, 5, 3, 4, 5, 6, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 0, 2, 1, 1, 1, 3, 1, 3,
	1, 1, 1, 1, 1, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	2, 2, 2, 2, 2, 2, 2, 3, 1, 1,
	1, 1, 4, 5, 6, 4, 4, 6, 6, 6,
	8, 8, 8, 8, 9, 7, 5, 4, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 8, 8, 0, 2, 3, 4, 4, 4,
	4, 4, 4, 0, 3, 4, 7, 3, 1, 1,
	2, 3, 3, 1, 2, 2, 1, 2, 1, 2,
	2, 1, 2, 0, 1, 0, 2, 1, 2, 4,
	0, 2, 1, 3, 5, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 0, 3, 0, 2,
	0, 3, 1, 3, 2, 0, 1, 1, 0, 2,
	4, 4, 0, 2, 4, 2, 1, 3, 5, 4,
	6, 1, 3, 3, 5, 0, 5, 1, 3, 1,
	2, 3, 1, 1, 3, 3, 1, 3, 3, 3,
	3, 3, 1, 2, 1, 1, 1, 1, 1, 1,
	0, 2, 0, 3, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 1, 1, 1,
	1, 0, 1, 1, 0, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -192, -1, -2, -6, -7, -8, -9, -10, -12,
	-13, -14, -15, -16, -20, -21, -22, -24, -25, -26,
	-23, -17, -11, -3, -4, 7, 8, -30, 10, 11,
	31, -18, 116, 117, 119, 118, 149, 120, 143, 51,
	163, 164, 166, 167, 26, 144, 147, 148, 32, 33,
	122, 6, -194, 9, 248, 55, -193, 265, -88, 16,
	-29, 5, -27, -197, -27, -27, -27, -27, -27, -168,
	-170, 55, 91, -121, 126, 73, 240, 123, 124, 130,
	-124, 58, -123, 258, 136, 163, 174, 168, 195, 187,
	259, 137, 185, 188, 227, 215, 222, 67, 166, 236,
	145, 183, 179, 177, 28, 224, 200, 263, 178, 223,
	122, 139, 134, 201, 205, 228, 172, 173, 230, 199,
	135, 34, 260, 36, 153, 231, 203, 198, 194, 197,
	171, 193, 40, 207, 206, 208, 226, 190, 140, 180,
	19, 234, 148, 151, 225, 202, 204, 131, 155, 262,
	232, 176, 141, 152, 147, 235, 142, 167, 162, 229,
	238, 39, 212, 170, 133, 164, 159, 217, 191, 154,
	181, 182, 196, 169, 192, 165, 156, 149, 237, 213,
	264, 189, 186, 160, 157, 158, 218, 219, 161, 261,
	233, 184, 214, -108, 126, 219, 128, 124, 124, 125,
	126, 240, 123, 124, -55, -130, 58, -123, 126, 124,
	109, 188, 227, 116, 216, 224, 125, 34, 225, 155,
	-139, 124, -110, 215, 218, 219, 161, 58, 229, 228,
	220, -130, 165, -135, -135, -135, -135, 217, 217, -135,
	-2, -2, -92, 18, 17, -5, -3, -194, 7, 21,
	22, -33, 41, 42, -28, -39, 100, -40, -130, -61,
	75, -66, 30, 58, -123, 24, -65, -62, -81, -79,
	-80, 109, 110, 111, 98, 99, 106, 76, 112, -70,
	-68, -69, -71, 60, 59, 68, 61, 62, 63, 64,
	69, 70, 71, -124, -77, -194, 45, 46, 249, 250,
	251, 252, 257, 253, 78, 35, 239, 247, 246, 245,
	243, 244, 241, 242, 255, 256, 129, 240, 104, 248,
	-108, -108, 12, -49, -50, -55, -57, -130, -100, -138,
	165, -104, 229, 228, -125, -102, -124, -122, 227, 188,
	226, 121, 74, 23, 25, 210, 77, 109, 17, 78,
	108, 249, 116, 49, 241, 242, 239, 251, 252, 240,
	216, 30, 11, 26, 144, 22, 102, 118, 81, 82,
	146, 24, 6, 71, 20, 52, 12, 14, 15, 129,
	128, 93, 125, 47, 9, 112, 27, 90, 43, 29,
	45, 91, 18, 243, 244, 32, 257, 150, 104, 50,
	37, 75, 69, 72, 53, 73, 16, 48, 92, 119,
	248, 46, 123, 7, 254, 31, 143, 44, 124, 80,
	255, 256, 127, 70, 5, 130, 33, 10, 51, 54,
	245, 246, 247, 35, 79, 13, -169, 91, -162, 58,
	-55, 125, -55, 248, -117, 129, -117, -117, 124, -55,
	116, 118, 121, 53, -19, -55, -116, 129, 58, -116,
	-116, -116, -55, 113, -55, 58, 31, -136, -194, -125,
	240, 58, 155, 124, 156, 126, -136, -136, -136, -136,
	159, 160, -136, -113, -112, 222, 223, 217, 221, 13,
	160, 217, 158, -136, -135, -135, -195, 57, -93, 20,
	32, -40, -130, -89, -90, -40, -88, -2, -27, 37,
	-31, 22, 66, 12, -127, 74, 73, 90, -126, 23,
	-124, 60, 113, -40, -63, 93, 75, 91, 92, 77,
	95, 94, 105, 98, 99, 100, 101, 102, 103, 104,
	96, 97, 108, 83, 84, 85, 86, 87, 88, 89,
	-109, -194, -80, -194, 114, 115, -66, -66, -66, -66,
	-66, -66, -66, -66, -194, -2, -75, -40, -194, -194,
	-194, -194, -194, -194, -194, -194, -194, -84, -40, -194,
	-198, -72, -194, -198, -72, -198, -72, -198, -194, -198,
	-72, -198, -72, -198, -198, -72, -194, -194, -194, -194,
	-194, -194, -56, 27, -55, -42, -43, -44, -45, -58,
	-80, -194, -55, -55, -49, -196, 56, 12, 54, -196,
	56, 113, 56, -100, 165, -101, -105, 230, 232, 83,
	-129, -124, 60, 30, 31, 57, 56, -55, -141, -144,
	-146, -145, -147, -142, -143, 185, 186, 109, 189, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 31,
	145, 181, 182, 183, 184, 201, 202, 203, 204, 205,
	206, 207, 208, 168, 187, 259, 169, 170, 171, 172,
	173, 174, 176, 177, 178, 179, 180, 58, -136, 126,
	58, 75, 58, -55, -55, -136, 157, 157, 124, 124,
	162, -55, 56, 127, -49, 24, 53, -55, 58, 58,
	-131, -130, -122, -136, -136, -136, -136, -136, -55, -136,
	-136, -136, -136, 12, -111, 12, 93, -40, -115, 91,
	53, 10, 93, 56, 19, 113, 56, -91, 25, 26,
	-92, -195, -33, -67, -124, 61, 64, -32, 44, -55,
	-40, -40, -73, 69, 75, 70, 71, -126, 100, -131,
	-125, -122, -66, -74, -77, -80, 65, 93, 91, 92,
	77, -66, -66, -66, -66, -66, -66, -66, -66, -66,
	-66, -66, -66, -66, -66, -66, -137, 58, 60, 58,
	-65, -65, -124, -38, 22, -37, -39, -195, 56, -195,
	-2, -37, -37, -40, -40, -81, 60, -37, -81, 60,
	-37, -37, -31, -82, -83, 79, -81, -124, -130, -195,
	-66, -124, -124, -37, -38, -37, -37, -96, 151, -55,
	31, 56, -51, -53, -52, -54, 43, 47, 49, 44,
	45, 46, 50, -134, 23, -42, -194, -133, 151, -132,
	23, -130, 60, -96, 54, -42, -55, -42, -57, -130,
	100, -104, -101, 56, 231, 233, 234, 53, 72, -40,
	-153, 108, -171, -172, -173, -125, 60, 61, -162, -163,
	-164, -174, 138, -179, 131, 133, 130, -165, 139, 125,
	29, 57, -158, 69, 75, -154, 213, -148, 55, -148,
	-148, -148, -148, -152, 188, -152, -152, -152, 55, 55,
	-148, -148, -148, -156, 55, -156, -156, -157, 55, -157,
	-128, 54, -55, -136, 24, -136, -118, 121, 118, 119,
	-182, 117, 210, 188, 67, 30, 16, 249, 151, 264,
	58, 152, -55, -55, -55, -55, -55, 121, 118, -55,
	-55, -55, -136, -55, -114, 91, 13, -130, -130, 60,
	-55, 39, -40, -40, -131, -90, -93, -107, 20, 12,
	35, 35, -37, 69, 70, 71, 113, -194, -74, -66,
	-66, -66, -36, 146, 74, -195, -195, -37, 56, -40,
	-195, -195, -195, 56, 54, 23, 12, 12, -195, 12,
	12, -195, -195, -37, -85, -83, 81, -40, -195, 113,
	-195, 56, 56, -195, -195, -195, -195, -64, 31, 35,
	-2, -194, -194, -99, -103, -81, -43, -44, -44, -43,
	-44, 43, 43, 43, 48, 43, 48, 43, -52, -130,
	-195, -59, 51, 128, 52, -194, -132, -60, 13, -42,
	-60, -60, 113, -105, -106, 235, 232, 238, 58, 60,
	56, -173, 83, 55, 58, 29, -165, -165, -166, 58,
	-166, 29, -150, 30, 69, -155, 214, 61, -152, -152,
	-153, 31, -153, -153, -153, -161, 60, -161, 61, 61,
	53, -124, -136, -135, -188, 132, 138, 139, 134, 58,
	125, 29, 131, 133, 151, 130, -188, -119, -120, 127,
	23, 125, 29, 151, -187, 54, 157, 210, 157, 127,
	-136, -111, 60, -40, 40, 113, -55, -41, 12, 100,
	-125, -38, -36, 74, -66, -66, -195, -39, -140, 109,
	185, 145, 183, 179, 199, 190, 212, 181, 213, -137,
	-140, -66, -66, -66, -66, 258, -88, 82, -40, 80,
	-125, -66, -66, -98, 53, -99, -76, -78, -77, -194,
	-2, -94, -124, -97, -124, -60, 56, 83, -47, -46,
	53, 54, -48, 53, -46, 43, 43, 125, 125, 125,
	-97, -88, -40, -60, 232, 236, 237, -172, -173, -176,
	-175, -124, -179, -166, -166, 55, -151, 53, -66, 57,
	-153, -153, 58, 109, 57, 56, 57, 56, 57, 56,
	-55, -135, -135, -55, -135, -124, -185, 261, -186, 58,
	-124, -124, -124, -55, -114, -60, -42, -195, -66, -195,
	-148, -148, -148, -157, -148, 173, -148, 173, -195, -195,
	20, 20, 20, 20, -194, -35, 254, -40, 56, 56,
	28, -98, 56, -195, -195, -195, 56, 113, -195, 56,
	-88, -103, -40, -40, 55, -40, -194, -194, -194, -195,
	-92, 57, 56, -148, -95, -124, -159, 210, 10, -152,
	60, -152, 61, 61, -136, 27, -184, -183, -125, 55,
	54, -86, 14, -152, 58, -66, -66, -66, -66, -66,
	-195, 60, -66, -66, 29, -78, 35, -2, -194, -124,
	-124, -124, -92, -95, -95, -95, -95, -133, -178, -177,
	54, 135, 67, -175, 57, 56, -160, 131, 29, 130,
	-69, -153, -153, 57, 57, -194, 56, 83, -95, -55,
	-87, 15, 17, -195, -195, -195, -195, -34, 93, 261,
	-195, -195, 10, -76, -2, 113, 57, -195, -195, -195,
	-59, -177, 58, -167, 83, 60, 141, -124, -149, 67,
	29, 29, -180, -181, 151, -183, -173, 57, -40, -75,
	-195, 259, 50, 262, -99, -195, -124, 61, -55, 60,
	-195, 56, -124, -187, 40, 260, 263, 55, -181, 35,
	-185, 40, -95, 153, 261, 57, 154, 262, -190, -191,
	53, -194, 263, -191, 53, 11, 10, -66, 150, -189,
	142, 137, 140, 31, -189, -195, -195, 136, 30, 69,
}
var yyDef = [...]int{

	24, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 560, 0, 317, 317, 317, 317, 317,
	317, 0, 631, 614, 0, 0, 0, 0, -2, 305,
	306, 0, 308, 309, 852, 852, 852, 852, 0, 0,
	852, 0, 0, 37, 38, 850, 1, 3, 568, 0,
	0, 321, 324, 319, 0, 614, 614, 0, 0, 67,
	68, 0, 0, 0, 840, 0, 612, 612, 612, 632,
	633, 636, 637, 739, 740, 741, 742, 743, 744, 745,
	746, 747, 748, 749, 750, 751, 752, 753, 754, 755,
	756, 757, 758, 759, 760, 761, 762, 763, 764, 765,
	766, 767, 768, 769, 770, 771, 772, 773, 774, 775,
	776, 777, 778, 779, 780, 781, 782, 783, 784, 785,
	786, 787, 788, 789, 790, 791, 792, 793, 794, 795,
	796, 797, 798, 799, 800, 801, 802, 803, 804, 805,
	806, 807, 808, 809, 810, 811, 812, 813, 814, 815,
	816, 817, 818, 819, 820, 821, 822, 823, 824, 825,
	826, 827, 828, 829, 830, 831, 832, 833, 834, 835,
	836, 837, 838, 839, 841, 842, 843, 844, 845, 846,
	847, 848, 849, 0, 0, 0, 615, 0, 610, 0,
	610, 610, 610, 0, 257, 389, 640, 641, 840, 0,
	0, 0, 853, 0, 853, 269, 853, 853, 272, 853,
	0, 853, 0, 279, 0, 0, 285, 853, 302, 303,
	290, 304, 307, 310, 311, 312, 313, 852, 852, 316,
	-2, 31, 572, 0, 0, 560, 33, 0, 317, 322,
	323, 327, 325, 326, 318, 0, 335, 339, 0, 398,
	0, 403, 405, -2, -2, 0, 440, 441, 442, 443,
	444, 0, 0, 0, 0, 0, 0, 0, 0, 468,
	469, 470, 471, 545, 546, 547, 548, 549, 550, 551,
	552, 407, 408, 542, 592, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 533, 0, 504, 504, 504, 504,
	504, 504, 504, 504, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 46, 48, 389, 52, 0,
	831, 596, -2, -2, 0, 0, 638, 639, -2, 749,
	-2, 644, 645, 646, 647, 648, 649, 650, 651, 652,
	653, 654, 655, 656, 657, 658, 659, 660, 661, 662,
	663, 664, 665, 666, 667, 668, 669, 670, 671, 672,
	673, 674, 675, 676, 677, 678, 679, 680, 681, 682,
	683, 684, 685, 686, 687, 688, 689, 690, 691, 692,
	693, 694, 695, 696, 697, 698, 699, 700, 701, 702,
	703, 704, 705, 706, 707, 708, 709, 710, 711, 712,
	713, 714, 715, 716, 717, 718, 719, 720, 721, 722,
	723, 724, 725, 726, 727, 728, 729, 730, 731, 732,
	733, 734, 735, 736, 737, 738, 0, 0, 86, 0,
	84, 0, 853, 0, 0, 0, 0, 0, 0, 853,
	0, 0, 0, 0, 248, 0, 0, 0, 0, 0,
	0, 0, 256, 0, 258, 853, 853, 261, 854, 855,
	853, 853, 853, 0, 853, 853, 268, 270, 271, 273,
	853, 853, 275, 0, 293, 291, 292, 287, 288, 0,
	299, 282, 283, 286, 314, 315, 32, 851, 26, 0,
	0, 569, 0, 561, 562, 565, 568, 31, 324, 0,
	329, 328, 320, 0, 336, 0, 0, 0, 340, 0,
	342, 343, 0, 401, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 425, 426, 427, 428, 429, 430, 431,
	404, 0, 418, 0, 0, 0, 460, 461, 462, 463,
	464, 465, 466, 0, 331, 31, 0, 438, 0, 0,
	0, 0, 0, 0, 0, 0, 327, 0, 534, 0,
	488, 496, 0, 489, 497, 490, 498, 491, 0, 492,
	499, 493, 500, 494, 495, 501, 0, 0, 0, 331,
	0, 0, 50, 0, 388, 0, 346, 348, 349, 350,
	-2, 0, 372, -2, 0, 0, 0, 44, 45, 0,
	0, 0, 0, 53, 831, 55, 56, 0, 0, 0,
	164, 605, 606, 607, 603, 208, 0, 0, 152, 148,
	92, 93, 94, 141, 96, 141, 141, 141, 141, 161,
	161, 161, 161, 124, 125, 126, 127, 128, 0, 0,
	111, 141, 141, 141, 115, 131, 132, 133, 134, 135,
	136, 137, 138, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 143, 143, 143, 145, 145, 634, 70, 0,
	853, 0, 853, 82, 0, 222, 0, 0, 0, 0,
	0, 0, 0, 0, 251, 611, 0, 853, 254, 255,
	390, 642, 643, 259, 260, 262, 263, 264, 265, 266,
	267, 274, 278, 0, 296, 0, 0, 280, 281, 0,
	0, 573, 0, 0, 0, 0, 0, 564, 566, 567,
	572, 34, 327, 0, 553, 0, 0, 0, 330, 29,
	399, 400, 402, 419, 0, 421, 423, 341, 337, 0,
	543, -2, 409, 410, 434, 435, 436, 0, 0, 0,
	0, 432, 414, 0, 445, 446, 447, 448, 449, 450,
	451, 452, 453, 454, 455, 456, 459, 518, 519, 0,
	457, 458, 467, 0, 0, 332, 333, 437, 0, 591,
	31, 0, 0, 0, 0, 442, 545, 0, 442, 545,
	0, 0, 0, 540, 537, 0, 0, 542, 0, 505,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 387,
	0, 0, 0, 0, 0, 0, 377, 0, 0, 380,
	0, 0, 0, 0, 371, 0, 0, 392, 799, 373,
	0, 375, 376, 396, 0, 396, 47, 396, 49, 0,
	391, 597, 54, 0, 0, 59, 60, 598, 599, 600,
	601, 0, 83, 209, 211, 214, 215, 216, 87, 88,
	89, 0, 0, 196, 0, 0, 190, 190, 0, 188,
	189, 85, 155, 153, 0, 150, 149, 95, 0, 161,
	161, 118, 119, 164, 0, 164, 164, 164, 0, 0,
	112, 113, 114, 106, 0, 107, 108, 109, 0, 110,
	0, 0, 853, 72, 613, 73, 852, 0, 0, 626,
	223, 616, 617, 618, 619, 620, 621, 622, 623, 624,
	625, 0, 74, 225, 227, 226, 230, 0, 0, 0,
	249, 853, 253, 293, 277, 0, 0, 294, 295, 300,
	284, 0, 570, 571, 0, 563, 27, 0, 608, 609,
	554, 555, 344, 420, 422, 424, 0, 331, 411, 432,
	415, 0, 412, 0, 0, 406, 472, 0, 0, 439,
	-2, 475, 476, 0, 0, 0, 0, 0, 511, 0,
	0, 512, 0, 560, 0, 538, 0, 0, 487, 0,
	506, 0, 0, 507, 508, 509, 510, 585, 0, 0,
	-2, 0, 0, 396, 593, 0, 347, 366, 368, 0,
	363, 378, 379, 381, 0, 383, 0, 385, 386, 351,
	353, 354, 0, 0, 0, 0, 374, 560, 0, 396,
	42, 43, 0, 57, 58, 0, 0, 64, 165, 166,
	0, 212, 0, 0, 0, 183, 190, 190, 186, 191,
	187, 0, 157, 0, 154, 91, 151, 0, 164, 164,
	120, 0, 121, 122, 123, 0, 139, 0, 0, 0,
	0, 635, 71, 217, 852, 232, 233, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 852, 0, 852, 627,
	628, 629, 630, 0, 77, 0, 0, 0, 0, 0,
	252, 296, 297, 298, 574, 0, 28, 396, 0, 338,
	544, 0, 413, 0, 433, 416, 473, 334, 0, 141,
	141, 523, 141, 145, 526, 141, 528, 141, 531, 0,
	0, 0, 0, 0, 0, 0, 535, 486, 541, 0,
	543, 0, 0, 35, 0, 585, 575, 587, 589, 0,
	31, 0, 581, 0, 358, 560, 0, 0, 360, 367,
	0, 0, 361, 0, 362, 382, 384, 0, 0, 0,
	0, 568, 397, 41, 61, 62, 63, 210, 213, 0,
	192, 141, 195, 184, 185, 0, 159, 0, 156, 142,
	116, 117, 162, 163, 161, 0, 161, 0, 146, 0,
	853, 218, 219, 220, 221, 0, 224, 0, 75, 76,
	0, 0, 229, 250, 276, 556, 345, 474, 417, 477,
	520, 161, 524, 525, 527, 529, 530, 532, 479, 478,
	0, 0, 0, 0, 0, 0, 0, 539, 0, 0,
	0, 36, 0, 590, -2, 0, 0, 0, 51, 0,
	568, 594, 595, 364, 0, 369, 0, 0, 0, 372,
	40, 175, 0, 194, 0, 356, 167, 160, 0, 164,
	140, 164, 0, 0, 69, 0, 78, 79, 0, 0,
	0, 558, 0, 521, 522, 0, 0, 0, 0, 513,
	485, 536, 0, 0, 0, 588, 0, -2, 0, 583,
	582, 359, 39, 0, 0, 0, 0, 392, 174, 176,
	0, 181, 0, 193, 0, 0, 172, 0, 169, 171,
	158, 129, 130, 144, 147, 0, 0, 0, 0, 231,
	30, 0, 0, 480, 482, 481, 483, 0, 0, 0,
	502, 503, 0, 578, 31, 0, 365, 393, 394, 395,
	355, 177, 178, 0, 182, 180, 0, 357, 90, 0,
	168, 170, 0, 244, 0, 80, 81, 74, 559, 557,
	484, 0, 0, 0, 586, -2, 584, 179, 0, 173,
	243, 0, 0, 77, 514, 0, 517, 0, 245, 0,
	228, 515, 0, 0, 0, 197, 0, 0, 198, 199,
	0, 0, 516, 200, 0, 0, 0, 0, 0, 201,
	203, 204, 0, 0, 202, 246, 247, 205, 206, 207,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 76, 3, 3, 3, 103, 95, 3,
	55, 57, 100, 98, 56, 99, 113, 101, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 265,
	84, 83, 85, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 105, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 94, 3, 106,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 77, 78, 79, 80, 81, 82, 86, 87, 88,
	89, 90, 91, 92, 93, 96, 97, 102, 104, 107,
	108, 109, 110, 111, 112, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:317
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:322
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:323
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:327
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 24:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:350
		{
			setParseTree(yylex, nil)
		}
	case 25:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:356
		{
			yyVAL.statement = &Explain{InnerSelect: yyDollar[2].selStmt.(*Select)}
		}
	case 26:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:362
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 27:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:370
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 28:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:374
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 29:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:380
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 30:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:387
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:393
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:397
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:403
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 34:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:407
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 35:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:414
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:426
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:438
		{
			yyVAL.str = InsertStr
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:442
		{
			yyVAL.str = ReplaceStr
		}
	case 39:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:448
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].updateExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 40:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:454
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 41:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:458
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 42:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:462
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 43:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:466
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:471
		{
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:472
		{
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:476
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:480
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:486
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:490
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 50:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:495
		{
			yyVAL.partitions = nil
		}
	case 51:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:499
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:505
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 53:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:509
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 54:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:513
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 55:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:517
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:523
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:527
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 58:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:533
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(yyDollar[3].str))}
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:537
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(TxReadWrite))}
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:541
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(TxReadOnly))}
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:547
		{
			yyVAL.str = IsolationLevelRepeatableRead
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:551
		{
			yyVAL.str = IsolationLevelReadCommitted
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:555
		{
			yyVAL.str = IsolationLevelReadUncommitted
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:559
		{
			yyVAL.str = IsolationLevelSerializable
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:565
		{
			yyVAL.str = SessionStr
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:569
		{
			yyVAL.str = GlobalStr
		}
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:575
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:580
		{
			// Create table [name] like [name]
			yyDollar[1].ddl.OptLike = yyDollar[2].optLike
			yyVAL.statement = yyDollar[1].ddl
		}
	case 69:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:586
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName}
		}
	case 70:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:591
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 71:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:595
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[5].tableName.ToViewName()}
		}
	case 72:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:599
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 73:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:603
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 74:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:608
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:612
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:618
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 77:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:623
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:628
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:634
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 80:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:639
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:645
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 82:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:651
		{
			yyVAL.ddl = &DDL{Action: CreateStr, Table: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 83:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:658
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:665
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[2].tableName}
		}
	case 85:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:669
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[3].tableName}
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:675
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:680
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:684
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:688
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 90:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:694
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].sqlVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:705
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:716
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].sqlVal
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:721
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:727
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:731
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:735
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:739
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:743
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:747
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:751
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:755
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:759
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:765
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:771
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:777
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:783
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:789
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:797
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:801
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:805
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:809
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:813
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 116:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:819
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 117:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:823
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:827
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:831
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:835
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:839
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:843
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:847
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:851
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:855
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:859
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:863
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:867
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 129:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:871
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 130:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:876
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:882
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:886
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:890
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:894
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:898
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:902
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:906
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:910
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:916
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:921
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 141:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:926
		{
			yyVAL.sqlVal = nil
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:930
		{
			yyVAL.sqlVal = NewIntVal(yyDollar[2].bytes)
		}
	case 143:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:935
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 144:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:939
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 145:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:947
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:951
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 147:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:957
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 148:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:965
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:969
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 150:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:974
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:978
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 152:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:984
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:988
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:992
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 155:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:997
		{
			yyVAL.optVal = nil
		}
	case 156:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1001
		{
			yyVAL.optVal = yyDollar[2].expr
		}
	case 157:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1006
		{
			yyVAL.optVal = nil
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1010
		{
			yyVAL.optVal = yyDollar[3].expr
		}
	case 159:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1015
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1019
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 161:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1024
		{
			yyVAL.str = ""
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1028
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1032
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1037
		{
			yyVAL.str = ""
		}
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1041
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1045
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 167:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1050
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1054
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1058
		{
			yyVAL.colKeyOpt = colKey
		}
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1062
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1066
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 172:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1071
		{
			yyVAL.sqlVal = nil
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1075
		{
			yyVAL.sqlVal = NewStrVal(yyDollar[2].bytes)
		}
	case 174:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1081
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 175:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1085
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1091
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1095
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1101
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 179:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1105
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1110
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 181:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1116
		{
			yyVAL.str = ""
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1120
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1126
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1130
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 185:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1134
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1138
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1142
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1148
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1152
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 190:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1157
		{
			yyVAL.str = ""
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1161
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1167
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1171
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 194:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1177
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].sqlVal}
		}
	case 195:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1183
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].bytes), Details: yyDollar[3].constraintInfo}
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1187
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 197:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1194
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 198:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1198
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 199:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1202
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 200:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1206
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 201:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1212
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 202:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1218
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1224
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1228
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1232
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1236
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1240
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 208:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1245
		{
			yyVAL.str = ""
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1249
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 210:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1253
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1261
		{
			yyVAL.str = yyDollar[1].str
		}
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1265
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 213:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1269
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1275
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1279
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1283
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 217:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1289
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 218:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1293
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 219:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1297
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 220:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1301
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[4].tableName}, ToTables: TableNames{yyDollar[7].tableName}}
		}
	case 221:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1306
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 222:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1311
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 223:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1315
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 224:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1319
		{
			yyVAL.statement = &DDL{
				Action: CreateVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name:   NewColIdent(yyDollar[5].tableName.Name.String()),
					Type:   yyDollar[6].colIdent,
					Params: yyDollar[7].vindexParams,
				},
			}
		}
	case 225:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1331
		{
			yyVAL.statement = &DDL{
				Action: DropVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name: NewColIdent(yyDollar[5].tableName.Name.String()),
				},
			}
		}
	case 226:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1341
		{
			yyVAL.statement = &DDL{Action: AddVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 227:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1345
		{
			yyVAL.statement = &DDL{Action: DropVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 228:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1349
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 229:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1362
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 230:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1372
		{
			yyVAL.statement = &DDL{Action: AddSequenceStr, Table: yyDollar[5].tableName}
		}
	case 231:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1376
		{
			yyVAL.statement = &DDL{
				Action: AddAutoIncStr,
				Table:  yyDollar[4].tableName,
				AutoIncSpec: &AutoIncSpec{
					Column:   yyDollar[7].colIdent,
					Sequence: yyDollar[9].tableName,
				},
			}
		}
	case 243:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1402
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1408
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 245:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1412
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 246:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1418
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 247:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1422
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 248:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1428
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 249:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1434
		{
			yyVAL.ddl = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 250:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1438
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 251:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1446
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 252:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1454
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName}
		}
	case 253:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1459
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: TableNames{yyDollar[4].tableName.ToViewName()}, IfExists: exists}
		}
	case 254:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1467
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 255:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1471
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 256:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1477
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 257:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1481
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 258:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1486
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName}
		}
	case 259:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1492
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 260:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1497
		{
			yyVAL.statement = &Show{Type: CharsetStr}
		}
	case 261:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1501
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 262:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1505
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 263:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1510
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 264:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1514
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 265:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1518
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 266:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1522
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 267:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1526
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 268:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1530
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1534
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 270:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1538
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 271:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1542
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1546
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 273:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1550
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 274:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1554
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1558
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 276:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1562
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 277:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1567
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[3].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 278:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1577
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1581
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 280:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1585
		{
			// Cannot dereference $4 directly, or else the parser stackcannot be pooled. See yyParsePooled
			showCollationFilterOpt := yyDollar[4].expr
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: &showCollationFilterOpt}
		}
	case 281:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1591
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Scope: string(yyDollar[2].bytes), Type: string(yyDollar[3].bytes), ShowTablesOpt: showTablesOpt}
		}
	case 282:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1596
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 283:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1600
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 284:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1604
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName}
		}
	case 285:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1608
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 286:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1622
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1628
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1632
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 289:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1638
		{
			yyVAL.str = ""
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1642
		{
			yyVAL.str = "full "
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1648
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1652
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 293:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1658
		{
			yyVAL.str = ""
		}
	case 294:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1662
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 295:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1666
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 296:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1672
		{
			yyVAL.showFilter = nil
		}
	case 297:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1676
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1680
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 299:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1686
		{
			yyVAL.showFilter = nil
		}
	case 300:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1690
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 301:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1696
		{
			yyVAL.str = ""
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1700
		{
			yyVAL.str = SessionStr
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1704
		{
			yyVAL.str = GlobalStr
		}
	case 304:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1710
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1714
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1720
		{
			yyVAL.statement = &Begin{}
		}
	case 307:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1724
		{
			yyVAL.statement = &Begin{}
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1730
		{
			yyVAL.statement = &Commit{}
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1736
		{
			yyVAL.statement = &Rollback{}
		}
	case 310:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1742
		{
			yyVAL.statement = &OtherRead{}
		}
	case 311:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1746
		{
			yyVAL.statement = &OtherRead{}
		}
	case 312:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1750
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 313:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1754
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 314:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1758
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 315:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1762
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 316:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1768
		{
			yyVAL.statement = &DDL{Action: FlushStr}
		}
	case 317:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1772
		{
			setAllowComments(yylex, true)
		}
	case 318:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1776
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 319:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1782
		{
			yyVAL.bytes2 = nil
		}
	case 320:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1786
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1792
		{
			yyVAL.str = UnionStr
		}
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1796
		{
			yyVAL.str = UnionAllStr
		}
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1800
		{
			yyVAL.str = UnionDistinctStr
		}
	case 324:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1805
		{
			yyVAL.str = ""
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1809
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1813
		{
			yyVAL.str = SQLCacheStr
		}
	case 327:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1818
		{
			yyVAL.str = ""
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1822
		{
			yyVAL.str = DistinctStr
		}
	case 329:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1827
		{
			yyVAL.str = ""
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1831
		{
			yyVAL.str = StraightJoinHint
		}
	case 331:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1836
		{
			yyVAL.selectExprs = nil
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1840
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1846
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 334:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1850
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1856
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 336:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1860
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 337:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1864
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 338:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1868
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 339:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1873
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1877
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 341:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1881
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1888
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 344:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1893
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 345:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1897
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1903
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 347:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1907
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1917
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 351:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1921
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1925
		{
			// missed alias for subquery
			yylex.Error("Every derived table must have its own alias")
			return 1
		}
	case 353:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1931
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 354:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1937
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 355:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1941
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1947
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1951
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1957
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1961
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 360:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1974
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 361:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1978
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 362:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1982
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 363:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1986
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 364:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1992
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 365:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1994
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 366:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1998
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2000
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 368:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2004
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 369:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2006
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 370:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2009
		{
			yyVAL.empty = struct{}{}
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2011
		{
			yyVAL.empty = struct{}{}
		}
	case 372:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2014
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2018
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 374:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2022
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2029
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2035
		{
			yyVAL.str = JoinStr
		}
	case 378:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2039
		{
			yyVAL.str = JoinStr
		}
	case 379:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2043
		{
			yyVAL.str = JoinStr
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2049
		{
			yyVAL.str = StraightJoinStr
		}
	case 381:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2055
		{
			yyVAL.str = LeftJoinStr
		}
	case 382:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2059
		{
			yyVAL.str = LeftJoinStr
		}
	case 383:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2063
		{
			yyVAL.str = RightJoinStr
		}
	case 384:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2067
		{
			yyVAL.str = RightJoinStr
		}
	case 385:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2073
		{
			yyVAL.str = NaturalJoinStr
		}
	case 386:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2077
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 387:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2087
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2091
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2097
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 390:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2101
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 391:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2107
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 392:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2112
		{
			yyVAL.indexHints = nil
		}
	case 393:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2116
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 394:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2120
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 395:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2124
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 396:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2129
		{
			yyVAL.expr = nil
		}
	case 397:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2133
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2139
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 399:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2143
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 400:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2147
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 401:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2151
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 402:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2155
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2159
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 404:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2163
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 405:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2169
		{
			yyVAL.str = ""
		}
	case 406:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2173
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2179
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2183
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 409:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2189
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 410:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2193
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 411:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2197
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 412:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2201
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 413:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2205
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 414:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2209
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 415:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2213
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 416:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2217
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 417:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2221
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 418:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2225
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2231
		{
			yyVAL.str = IsNullStr
		}
	case 420:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2235
		{
			yyVAL.str = IsNotNullStr
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2239
		{
			yyVAL.str = IsTrueStr
		}
	case 422:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2243
		{
			yyVAL.str = IsNotTrueStr
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2247
		{
			yyVAL.str = IsFalseStr
		}
	case 424:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2251
		{
			yyVAL.str = IsNotFalseStr
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2257
		{
			yyVAL.str = EqualStr
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2261
		{
			yyVAL.str = LessThanStr
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2265
		{
			yyVAL.str = GreaterThanStr
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2269
		{
			yyVAL.str = LessEqualStr
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2273
		{
			yyVAL.str = GreaterEqualStr
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2277
		{
			yyVAL.str = NotEqualStr
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2281
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 432:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2286
		{
			yyVAL.expr = nil
		}
	case 433:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2290
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2296
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2300
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2304
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 437:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2310
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2316
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2320
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2326
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2330
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2334
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2338
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2342
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 445:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2346
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 446:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2350
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 447:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2354
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 448:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2358
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 449:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2362
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 450:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2366
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 451:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2370
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 452:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2374
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 453:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2378
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 454:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2382
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 455:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2386
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 456:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2390
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2394
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 458:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2398
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 459:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2402
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 460:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2406
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 461:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2410
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 462:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2414
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Str, Expr: yyDollar[2].expr}
		}
	case 463:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2418
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 464:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2426
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 465:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2440
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 466:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2444
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 467:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2448
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 472:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2466
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 473:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2470
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 474:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2474
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 475:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2484
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 476:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2488
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 477:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2492
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 478:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2496
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 479:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2500
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 480:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2504
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 481:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2508
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 482:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2512
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 483:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2516
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 484:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2520
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 485:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2524
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 486:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2528
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 487:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2532
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 488:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2542
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 489:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2546
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 490:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2550
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 491:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2555
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 492:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2560
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 493:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2565
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 494:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2571
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 495:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2576
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 496:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2581
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 497:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2585
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 498:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2589
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_time"), Fsp: yyDollar[2].expr}
		}
	case 499:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2594
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtime"), Fsp: yyDollar[2].expr}
		}
	case 500:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2599
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtimestamp"), Fsp: yyDollar[2].expr}
		}
	case 501:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2604
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_time"), Fsp: yyDollar[2].expr}
		}
	case 502:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2608
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampadd"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 503:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2612
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampdiff"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 506:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2622
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 507:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2632
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 508:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2636
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 509:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2640
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 510:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2644
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 511:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2648
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 512:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2652
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 513:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2658
		{
			yyVAL.str = ""
		}
	case 514:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2662
		{
			yyVAL.str = BooleanModeStr
		}
	case 515:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2666
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 516:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2670
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 517:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2674
		{
			yyVAL.str = QueryExpansionStr
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2680
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2684
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 520:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2690
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 521:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2694
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 522:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2698
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: string(yyDollar[3].bytes)}
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2702
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 524:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2706
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 525:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2710
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2716
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 527:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2720
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2724
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 529:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2728
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 530:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2732
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2736
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 532:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2740
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 533:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2745
		{
			yyVAL.expr = nil
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2749
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 535:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2754
		{
			yyVAL.str = string("")
		}
	case 536:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2758
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2764
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 538:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2768
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 539:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2774
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 540:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2779
		{
			yyVAL.expr = nil
		}
	case 541:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2783
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2789
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 543:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2793
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 544:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2797
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2803
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2807
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2811
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2815
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2819
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2823
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2827
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2831
		{
			yyVAL.expr = &NullVal{}
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2837
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 554:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2846
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 555:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2850
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 556:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2855
		{
			yyVAL.exprs = nil
		}
	case 557:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2859
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 558:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2864
		{
			yyVAL.expr = nil
		}
	case 559:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2868
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 560:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2873
		{
			yyVAL.orderBy = nil
		}
	case 561:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2877
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2883
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 563:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2887
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 564:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2893
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 565:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2898
		{
			yyVAL.str = AscScr
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2902
		{
			yyVAL.str = AscScr
		}
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2906
		{
			yyVAL.str = DescScr
		}
	case 568:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2911
		{
			yyVAL.limit = nil
		}
	case 569:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2915
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 570:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2919
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 571:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2923
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 572:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2928
		{
			yyVAL.str = ""
		}
	case 573:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2932
		{
			yyVAL.str = ForUpdateStr
		}
	case 574:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2936
		{
			yyVAL.str = ShareModeStr
		}
	case 575:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2949
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2953
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 577:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2957
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 578:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2962
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 579:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2966
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 580:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2970
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2977
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 582:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2981
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 583:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2985
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 584:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2989
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 585:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2994
		{
			yyVAL.updateExprs = nil
		}
	case 586:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2998
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3004
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 588:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3008
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3014
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 590:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3018
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 591:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3024
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3030
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3040
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 594:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3044
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 595:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3050
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3056
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 597:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3060
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 598:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3066
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 599:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3070
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 600:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3074
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 601:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3078
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 603:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3085
		{
			yyVAL.bytes = []byte("charset")
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3092
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3096
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3100
		{
			yyVAL.expr = &Default{}
		}
	case 610:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3109
		{
			yyVAL.byt = 0
		}
	case 611:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3111
		{
			yyVAL.byt = 1
		}
	case 612:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3114
		{
			yyVAL.empty = struct{}{}
		}
	case 613:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3116
		{
			yyVAL.empty = struct{}{}
		}
	case 614:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3119
		{
			yyVAL.str = ""
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3121
		{
			yyVAL.str = IgnoreStr
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3125
		{
			yyVAL.empty = struct{}{}
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3127
		{
			yyVAL.empty = struct{}{}
		}
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3129
		{
			yyVAL.empty = struct{}{}
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3131
		{
			yyVAL.empty = struct{}{}
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3133
		{
			yyVAL.empty = struct{}{}
		}
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3135
		{
			yyVAL.empty = struct{}{}
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3137
		{
			yyVAL.empty = struct{}{}
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3139
		{
			yyVAL.empty = struct{}{}
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3141
		{
			yyVAL.empty = struct{}{}
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3143
		{
			yyVAL.empty = struct{}{}
		}
	case 626:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3146
		{
			yyVAL.empty = struct{}{}
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3148
		{
			yyVAL.empty = struct{}{}
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3150
		{
			yyVAL.empty = struct{}{}
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3154
		{
			yyVAL.empty = struct{}{}
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3156
		{
			yyVAL.empty = struct{}{}
		}
	case 631:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3159
		{
			yyVAL.empty = struct{}{}
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3161
		{
			yyVAL.empty = struct{}{}
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3163
		{
			yyVAL.empty = struct{}{}
		}
	case 634:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3166
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 635:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3168
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3172
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3176
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3183
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3189
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3193
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3200
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 850:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3432
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 851:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3441
		{
			decNesting(yylex)
		}
	case 852:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3446
		{
			skipToEnd(yylex)
		}
	case 853:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3451
		{
			skipToEnd(yylex)
		}
	case 854:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3455
		{
			skipToEnd(yylex)
		}
	case 855:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3459
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
