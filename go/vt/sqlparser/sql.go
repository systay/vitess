// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line sql.y:53
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	sqlVal               *SQLVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	characteristic       Characteristic
	characteristics      []Characteristic
	colIdent             ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	colKeyOpt            ColumnKeyOption
	optVal               Expr
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexColumn          *IndexColumn
	indexColumns         []*IndexColumn
	constraintDefinition *ConstraintDefinition
	constraintInfo       ConstraintInfo
	ReferenceAction      ReferenceAction
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
	optLike              *OptLike
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const KEY = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const UNLOCK = 57374
const KEYS = 57375
const DO = 57376
const DISTINCTROW = 57377
const VALUES = 57378
const LAST_INSERT_ID = 57379
const NEXT = 57380
const VALUE = 57381
const SHARE = 57382
const MODE = 57383
const SQL_NO_CACHE = 57384
const SQL_CACHE = 57385
const SQL_CALC_FOUND_ROWS = 57386
const JOIN = 57387
const STRAIGHT_JOIN = 57388
const LEFT = 57389
const RIGHT = 57390
const INNER = 57391
const OUTER = 57392
const CROSS = 57393
const NATURAL = 57394
const USE = 57395
const FORCE = 57396
const ON = 57397
const USING = 57398
const ID = 57399
const AT_ID = 57400
const AT_AT_ID = 57401
const HEX = 57402
const STRING = 57403
const INTEGRAL = 57404
const FLOAT = 57405
const HEXNUM = 57406
const VALUE_ARG = 57407
const LIST_ARG = 57408
const COMMENT = 57409
const COMMENT_KEYWORD = 57410
const BIT_LITERAL = 57411
const NULL = 57412
const TRUE = 57413
const FALSE = 57414
const OFF = 57415
const OR = 57416
const AND = 57417
const NOT = 57418
const BETWEEN = 57419
const CASE = 57420
const WHEN = 57421
const THEN = 57422
const ELSE = 57423
const END = 57424
const LE = 57425
const GE = 57426
const NE = 57427
const NULL_SAFE_EQUAL = 57428
const IS = 57429
const LIKE = 57430
const REGEXP = 57431
const IN = 57432
const SHIFT_LEFT = 57433
const SHIFT_RIGHT = 57434
const DIV = 57435
const MOD = 57436
const UNARY = 57437
const COLLATE = 57438
const BINARY = 57439
const UNDERSCORE_BINARY = 57440
const UNDERSCORE_UTF8MB4 = 57441
const UNDERSCORE_UTF8 = 57442
const UNDERSCORE_LATIN1 = 57443
const INTERVAL = 57444
const JSON_EXTRACT_OP = 57445
const JSON_UNQUOTE_EXTRACT_OP = 57446
const CREATE = 57447
const ALTER = 57448
const DROP = 57449
const RENAME = 57450
const ANALYZE = 57451
const ADD = 57452
const FLUSH = 57453
const SCHEMA = 57454
const TABLE = 57455
const INDEX = 57456
const VIEW = 57457
const TO = 57458
const IGNORE = 57459
const IF = 57460
const UNIQUE = 57461
const PRIMARY = 57462
const COLUMN = 57463
const SPATIAL = 57464
const FULLTEXT = 57465
const KEY_BLOCK_SIZE = 57466
const CHECK = 57467
const INDEXES = 57468
const ACTION = 57469
const CASCADE = 57470
const CONSTRAINT = 57471
const FOREIGN = 57472
const NO = 57473
const REFERENCES = 57474
const RESTRICT = 57475
const SHOW = 57476
const DESCRIBE = 57477
const EXPLAIN = 57478
const DATE = 57479
const ESCAPE = 57480
const REPAIR = 57481
const OPTIMIZE = 57482
const TRUNCATE = 57483
const MAXVALUE = 57484
const PARTITION = 57485
const REORGANIZE = 57486
const LESS = 57487
const THAN = 57488
const PROCEDURE = 57489
const TRIGGER = 57490
const VINDEX = 57491
const VINDEXES = 57492
const STATUS = 57493
const VARIABLES = 57494
const WARNINGS = 57495
const SEQUENCE = 57496
const BEGIN = 57497
const START = 57498
const TRANSACTION = 57499
const COMMIT = 57500
const ROLLBACK = 57501
const BIT = 57502
const TINYINT = 57503
const SMALLINT = 57504
const MEDIUMINT = 57505
const INT = 57506
const INTEGER = 57507
const BIGINT = 57508
const INTNUM = 57509
const REAL = 57510
const DOUBLE = 57511
const FLOAT_TYPE = 57512
const DECIMAL = 57513
const NUMERIC = 57514
const TIME = 57515
const TIMESTAMP = 57516
const DATETIME = 57517
const YEAR = 57518
const CHAR = 57519
const VARCHAR = 57520
const BOOL = 57521
const CHARACTER = 57522
const VARBINARY = 57523
const NCHAR = 57524
const TEXT = 57525
const TINYTEXT = 57526
const MEDIUMTEXT = 57527
const LONGTEXT = 57528
const BLOB = 57529
const TINYBLOB = 57530
const MEDIUMBLOB = 57531
const LONGBLOB = 57532
const JSON = 57533
const ENUM = 57534
const GEOMETRY = 57535
const POINT = 57536
const LINESTRING = 57537
const POLYGON = 57538
const GEOMETRYCOLLECTION = 57539
const MULTIPOINT = 57540
const MULTILINESTRING = 57541
const MULTIPOLYGON = 57542
const NULLX = 57543
const AUTO_INCREMENT = 57544
const APPROXNUM = 57545
const SIGNED = 57546
const UNSIGNED = 57547
const ZEROFILL = 57548
const COLLATION = 57549
const DATABASES = 57550
const TABLES = 57551
const VITESS_METADATA = 57552
const VSCHEMA = 57553
const FULL = 57554
const PROCESSLIST = 57555
const COLUMNS = 57556
const FIELDS = 57557
const ENGINES = 57558
const PLUGINS = 57559
const EXTENDED = 57560
const NAMES = 57561
const CHARSET = 57562
const GLOBAL = 57563
const SESSION = 57564
const ISOLATION = 57565
const LEVEL = 57566
const READ = 57567
const WRITE = 57568
const ONLY = 57569
const REPEATABLE = 57570
const COMMITTED = 57571
const UNCOMMITTED = 57572
const SERIALIZABLE = 57573
const CURRENT_TIMESTAMP = 57574
const DATABASE = 57575
const CURRENT_DATE = 57576
const CURRENT_TIME = 57577
const LOCALTIME = 57578
const LOCALTIMESTAMP = 57579
const UTC_DATE = 57580
const UTC_TIME = 57581
const UTC_TIMESTAMP = 57582
const REPLACE = 57583
const CONVERT = 57584
const CAST = 57585
const SUBSTR = 57586
const SUBSTRING = 57587
const GROUP_CONCAT = 57588
const SEPARATOR = 57589
const TIMESTAMPADD = 57590
const TIMESTAMPDIFF = 57591
const MATCH = 57592
const AGAINST = 57593
const BOOLEAN = 57594
const LANGUAGE = 57595
const WITH = 57596
const QUERY = 57597
const EXPANSION = 57598
const UNUSED = 57599
const ARRAY = 57600
const CUME_DIST = 57601
const DESCRIPTION = 57602
const DENSE_RANK = 57603
const EMPTY = 57604
const EXCEPT = 57605
const FIRST_VALUE = 57606
const GROUPING = 57607
const GROUPS = 57608
const JSON_TABLE = 57609
const LAG = 57610
const LAST_VALUE = 57611
const LATERAL = 57612
const LEAD = 57613
const MEMBER = 57614
const NTH_VALUE = 57615
const NTILE = 57616
const OF = 57617
const OVER = 57618
const PERCENT_RANK = 57619
const RANK = 57620
const RECURSIVE = 57621
const ROW_NUMBER = 57622
const SYSTEM = 57623
const WINDOW = 57624
const ACTIVE = 57625
const ADMIN = 57626
const BUCKETS = 57627
const CLONE = 57628
const COMPONENT = 57629
const DEFINITION = 57630
const ENFORCED = 57631
const EXCLUDE = 57632
const FOLLOWING = 57633
const GEOMCOLLECTION = 57634
const GET_MASTER_PUBLIC_KEY = 57635
const HISTOGRAM = 57636
const HISTORY = 57637
const INACTIVE = 57638
const INVISIBLE = 57639
const LOCKED = 57640
const MASTER_COMPRESSION_ALGORITHMS = 57641
const MASTER_PUBLIC_KEY_PATH = 57642
const MASTER_TLS_CIPHERSUITES = 57643
const MASTER_ZSTD_COMPRESSION_LEVEL = 57644
const NESTED = 57645
const NETWORK_NAMESPACE = 57646
const NOWAIT = 57647
const NULLS = 57648
const OJ = 57649
const OLD = 57650
const OPTIONAL = 57651
const ORDINALITY = 57652
const ORGANIZATION = 57653
const OTHERS = 57654
const PATH = 57655
const PERSIST = 57656
const PERSIST_ONLY = 57657
const PRECEDING = 57658
const PRIVILEGE_CHECKS_USER = 57659
const PROCESS = 57660
const RANDOM = 57661
const REFERENCE = 57662
const REQUIRE_ROW_FORMAT = 57663
const RESOURCE = 57664
const RESPECT = 57665
const RESTART = 57666
const RETAIN = 57667
const REUSE = 57668
const ROLE = 57669
const SECONDARY = 57670
const SECONDARY_ENGINE = 57671
const SECONDARY_LOAD = 57672
const SECONDARY_UNLOAD = 57673
const SKIP = 57674
const SRID = 57675
const THREAD_PRIORITY = 57676
const TIES = 57677
const UNBOUNDED = 57678
const VCPU = 57679
const VISIBLE = 57680
const FORMAT = 57681
const TREE = 57682
const VITESS = 57683
const TRADITIONAL = 57684

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"DO",
	"DISTINCTROW",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"SQL_CALC_FOUND_ROWS",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"UNDERSCORE_UTF8",
	"UNDERSCORE_LATIN1",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"CHECK",
	"INDEXES",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"SEQUENCE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"TABLES",
	"VITESS_METADATA",
	"VSCHEMA",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"PLUGINS",
	"EXTENDED",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"ARRAY",
	"CUME_DIST",
	"DESCRIPTION",
	"DENSE_RANK",
	"EMPTY",
	"EXCEPT",
	"FIRST_VALUE",
	"GROUPING",
	"GROUPS",
	"JSON_TABLE",
	"LAG",
	"LAST_VALUE",
	"LATERAL",
	"LEAD",
	"MEMBER",
	"NTH_VALUE",
	"NTILE",
	"OF",
	"OVER",
	"PERCENT_RANK",
	"RANK",
	"RECURSIVE",
	"ROW_NUMBER",
	"SYSTEM",
	"WINDOW",
	"ACTIVE",
	"ADMIN",
	"BUCKETS",
	"CLONE",
	"COMPONENT",
	"DEFINITION",
	"ENFORCED",
	"EXCLUDE",
	"FOLLOWING",
	"GEOMCOLLECTION",
	"GET_MASTER_PUBLIC_KEY",
	"HISTOGRAM",
	"HISTORY",
	"INACTIVE",
	"INVISIBLE",
	"LOCKED",
	"MASTER_COMPRESSION_ALGORITHMS",
	"MASTER_PUBLIC_KEY_PATH",
	"MASTER_TLS_CIPHERSUITES",
	"MASTER_ZSTD_COMPRESSION_LEVEL",
	"NESTED",
	"NETWORK_NAMESPACE",
	"NOWAIT",
	"NULLS",
	"OJ",
	"OLD",
	"OPTIONAL",
	"ORDINALITY",
	"ORGANIZATION",
	"OTHERS",
	"PATH",
	"PERSIST",
	"PERSIST_ONLY",
	"PRECEDING",
	"PRIVILEGE_CHECKS_USER",
	"PROCESS",
	"RANDOM",
	"REFERENCE",
	"REQUIRE_ROW_FORMAT",
	"RESOURCE",
	"RESPECT",
	"RESTART",
	"RETAIN",
	"REUSE",
	"ROLE",
	"SECONDARY",
	"SECONDARY_ENGINE",
	"SECONDARY_LOAD",
	"SECONDARY_UNLOAD",
	"SKIP",
	"SRID",
	"THREAD_PRIORITY",
	"TIES",
	"UNBOUNDED",
	"VCPU",
	"VISIBLE",
	"FORMAT",
	"TREE",
	"VITESS",
	"TRADITIONAL",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 38,
	-2, 4,
	-1, 40,
	33, 304,
	131, 304,
	143, 304,
	168, 318,
	169, 318,
	-2, 306,
	-1, 65,
	38, 357,
	-2, 365,
	-1, 375,
	119, 689,
	-2, 685,
	-1, 376,
	119, 690,
	-2, 686,
	-1, 388,
	38, 358,
	-2, 370,
	-1, 389,
	38, 359,
	-2, 371,
	-1, 412,
	87, 940,
	-2, 71,
	-1, 413,
	87, 857,
	-2, 72,
	-1, 418,
	87, 825,
	-2, 651,
	-1, 420,
	87, 888,
	-2, 653,
	-1, 607,
	5, 38,
	-2, 336,
	-1, 729,
	1, 395,
	5, 395,
	12, 395,
	13, 395,
	14, 395,
	15, 395,
	17, 395,
	19, 395,
	30, 395,
	31, 395,
	45, 395,
	46, 395,
	47, 395,
	48, 395,
	49, 395,
	51, 395,
	52, 395,
	55, 395,
	56, 395,
	58, 395,
	59, 395,
	360, 395,
	-2, 413,
	-1, 732,
	56, 53,
	58, 53,
	-2, 57,
	-1, 906,
	119, 692,
	-2, 688,
	-1, 1104,
	5, 39,
	-2, 481,
	-1, 1153,
	5, 38,
	-2, 624,
	-1, 1410,
	5, 39,
	-2, 625,
	-1, 1464,
	5, 38,
	-2, 627,
	-1, 1539,
	5, 39,
	-2, 628,
}

const yyPrivate = 57344

const yyLast = 17205

var yyAct = [...]int{

	375, 1573, 1563, 1002, 1249, 1156, 1443, 1430, 1366, 319,
	1477, 1307, 1529, 1174, 334, 1340, 975, 939, 348, 1157,
	1031, 1304, 1137, 1011, 1001, 1045, 704, 1308, 1200, 1314,
	417, 664, 1266, 998, 1320, 84, 831, 1144, 893, 274,
	900, 294, 274, 1226, 1095, 1217, 1015, 274, 850, 745,
	663, 3, 977, 962, 870, 709, 925, 541, 411, 973,
	955, 744, 572, 1041, 716, 406, 731, 390, 726, 317,
	403, 274, 84, 725, 734, 542, 274, 677, 274, 857,
	62, 305, 7, 1566, 310, 678, 1550, 561, 6, 1064,
	5, 1561, 1537, 1558, 1367, 65, 1025, 581, 1549, 1536,
	1283, 1395, 546, 1063, 1334, 272, 380, 992, 86, 87,
	88, 262, 321, 301, 260, 308, 264, 583, 27, 307,
	56, 30, 31, 396, 67, 68, 69, 70, 71, 601,
	306, 1335, 1336, 309, 86, 87, 88, 405, 270, 266,
	267, 268, 543, 1208, 545, 1062, 1503, 626, 625, 635,
	636, 628, 629, 630, 631, 632, 633, 634, 627, 1433,
	360, 637, 366, 367, 364, 365, 363, 362, 361, 54,
	993, 994, 746, 1024, 747, 1032, 368, 369, 578, 1188,
	580, 1386, 1187, 1251, 1384, 1189, 596, 300, 600, 414,
	597, 594, 595, 86, 87, 88, 820, 1059, 1056, 1057,
	599, 1055, 589, 590, 1253, 817, 1560, 1557, 1522, 1016,
	263, 1530, 577, 579, 1248, 1267, 819, 956, 1478, 1577,
	1581, 586, 562, 1175, 1177, 548, 264, 1486, 858, 859,
	860, 903, 261, 1480, 1066, 1069, 1252, 821, 1254, 824,
	626, 625, 635, 636, 628, 629, 630, 631, 632, 633,
	634, 627, 818, 808, 637, 1330, 1269, 1018, 1245, 269,
	1329, 274, 553, 554, 1247, 1328, 274, 544, 563, 551,
	277, 1061, 274, 1018, 265, 649, 650, 1511, 274, 570,
	558, 1076, 576, 84, 1075, 1113, 1413, 84, 1110, 84,
	1271, 1184, 1275, 1060, 1270, 84, 1268, 1096, 575, 1149,
	1123, 1273, 84, 1479, 1176, 86, 87, 88, 988, 1018,
	1272, 1103, 740, 720, 662, 568, 1535, 999, 627, 585,
	1504, 637, 637, 1274, 1276, 851, 855, 552, 1294, 845,
	1032, 587, 560, 1065, 1575, 1487, 1485, 1576, 567, 1574,
	1292, 86, 87, 88, 569, 617, 1520, 555, 1067, 556,
	877, 1495, 557, 607, 574, 1318, 564, 565, 566, 748,
	1017, 86, 87, 88, 875, 876, 874, 1246, 1293, 1244,
	57, 611, 1285, 1236, 926, 810, 1017, 86, 87, 88,
	615, 74, 1297, 1298, 588, 610, 591, 616, 615, 612,
	613, 608, 602, 609, 649, 650, 617, 649, 650, 84,
	1206, 274, 274, 274, 617, 1232, 1233, 1234, 1109, 1525,
	84, 852, 1017, 547, 278, 846, 84, 1014, 1012, 75,
	1013, 616, 615, 281, 86, 87, 88, 1010, 1016, 647,
	1353, 288, 713, 1541, 706, 616, 615, 573, 617, 680,
	682, 684, 686, 688, 690, 691, 1582, 681, 683, 1439,
	687, 689, 617, 692, 1021, 616, 615, 1438, 710, 540,
	1022, 724, 1287, 616, 615, 286, 377, 723, 743, 732,
	1221, 293, 617, 733, 259, 701, 1235, 1220, 873, 738,
	617, 1240, 1237, 1228, 1238, 1231, 926, 1227, 1120, 1209,
	1583, 1229, 1230, 703, 549, 550, 1543, 1521, 279, 1108,
	1455, 1107, 1088, 1089, 1090, 1239, 628, 629, 630, 631,
	632, 633, 634, 627, 729, 1436, 637, 865, 867, 868,
	616, 615, 1218, 866, 1086, 290, 282, 414, 291, 292,
	298, 86, 87, 88, 283, 285, 295, 617, 280, 297,
	296, 274, 836, 400, 401, 806, 84, 1492, 809, 1491,
	811, 274, 274, 84, 84, 84, 86, 87, 88, 274,
	895, 1349, 274, 1483, 1559, 274, 829, 830, 1019, 274,
	700, 84, 53, 1545, 703, 1317, 84, 84, 84, 274,
	84, 84, 1483, 1533, 630, 631, 632, 633, 634, 627,
	84, 84, 637, 337, 336, 339, 340, 341, 342, 833,
	1483, 703, 338, 343, 86, 87, 88, 756, 1191, 1483,
	1512, 1483, 1482, 1428, 1427, 1415, 703, 812, 813, 708,
	1412, 703, 1359, 1358, 705, 822, 1408, 378, 405, 1355,
	1356, 828, 825, 1145, 835, 982, 382, 735, 894, 871,
	1355, 1354, 614, 807, 736, 841, 27, 896, 948, 703,
	814, 815, 816, 964, 967, 968, 969, 965, 736, 966,
	970, 84, 27, 1321, 1322, 959, 703, 948, 834, 1494,
	1151, 614, 703, 838, 839, 840, 1152, 842, 843, 959,
	914, 917, 755, 754, 1145, 1357, 927, 847, 848, 737,
	959, 739, 1463, 906, 84, 84, 958, 54, 1305, 905,
	949, 1317, 27, 737, 1295, 735, 1192, 991, 84, 1126,
	1125, 948, 735, 54, 379, 274, 909, 823, 84, 897,
	898, 741, 377, 274, 959, 376, 1551, 1445, 1026, 1250,
	1317, 274, 274, 872, 1420, 274, 274, 935, 936, 274,
	274, 274, 84, 1046, 1345, 1321, 1322, 948, 1195, 1042,
	1037, 906, 1036, 54, 1446, 84, 542, 954, 1049, 1568,
	85, 1564, 1347, 1555, 275, 377, 1324, 275, 1305, 1222,
	856, 833, 275, 827, 1168, 1327, 1326, 1165, 950, 1169,
	904, 951, 952, 1166, 1170, 1164, 968, 969, 1167, 957,
	1033, 1034, 1035, 981, 983, 1548, 275, 85, 985, 1458,
	989, 275, 984, 275, 990, 986, 1399, 707, 1553, 274,
	84, 1143, 84, 1006, 1068, 1142, 922, 1213, 274, 274,
	274, 274, 274, 753, 274, 274, 571, 1205, 274, 84,
	923, 1047, 1133, 964, 967, 968, 969, 965, 904, 966,
	970, 1441, 1527, 729, 1134, 274, 1526, 729, 1461, 1203,
	274, 729, 274, 274, 1197, 1406, 1052, 274, 826, 414,
	972, 1027, 1028, 1029, 1030, 1141, 1043, 1044, 384, 385,
	940, 1405, 1003, 1140, 941, 1050, 705, 1038, 1039, 1040,
	1404, 1301, 1145, 598, 1070, 1071, 1072, 1073, 1074, 1114,
	1077, 1078, 1111, 871, 1079, 703, 391, 849, 910, 911,
	1570, 1569, 916, 919, 920, 714, 1570, 1051, 1508, 1053,
	392, 1081, 1434, 1083, 1291, 379, 1082, 711, 712, 394,
	64, 393, 66, 1087, 61, 1, 1080, 934, 1562, 1091,
	937, 938, 391, 1368, 626, 625, 635, 636, 628, 629,
	630, 631, 632, 633, 634, 627, 392, 1442, 637, 1058,
	274, 1528, 1476, 388, 389, 394, 1339, 393, 1009, 1000,
	274, 274, 274, 274, 274, 73, 539, 72, 1158, 1519,
	844, 584, 274, 1008, 1007, 274, 1484, 1432, 1020, 274,
	1207, 1119, 1023, 274, 1346, 1204, 275, 872, 1524, 761,
	759, 275, 760, 758, 763, 762, 757, 275, 287, 409,
	1190, 971, 84, 275, 1146, 1193, 1153, 749, 85, 1147,
	1048, 1196, 85, 715, 85, 1201, 1201, 76, 1148, 1180,
	85, 1182, 1243, 1183, 1171, 909, 1242, 85, 1054, 1160,
	1161, 1179, 1163, 1159, 854, 284, 1162, 592, 593, 289,
	645, 1185, 1181, 1139, 1202, 1186, 415, 408, 1210, 1211,
	84, 84, 1312, 1132, 1296, 1136, 1403, 1300, 1118, 674,
	1198, 1199, 729, 924, 320, 1212, 864, 1214, 1215, 1216,
	335, 332, 729, 729, 729, 729, 729, 333, 943, 1150,
	84, 619, 318, 1219, 312, 728, 721, 729, 963, 961,
	960, 404, 1323, 1319, 727, 729, 947, 387, 1394, 1502,
	1241, 386, 921, 46, 84, 603, 302, 29, 63, 894,
	395, 20, 19, 18, 22, 17, 16, 15, 559, 1003,
	33, 24, 23, 14, 85, 13, 275, 275, 275, 12,
	1256, 1257, 11, 1100, 1101, 85, 1225, 1258, 10, 9,
	274, 85, 1278, 1264, 1284, 8, 4, 1277, 1224, 606,
	84, 21, 381, 1117, 906, 84, 84, 1306, 26, 25,
	905, 1158, 2, 0, 0, 0, 0, 0, 0, 0,
	0, 1309, 0, 0, 0, 0, 0, 1255, 0, 84,
	635, 636, 628, 629, 630, 631, 632, 633, 634, 627,
	0, 0, 637, 84, 1316, 84, 84, 1325, 1338, 1201,
	1201, 0, 0, 0, 0, 1311, 1299, 1332, 1331, 0,
	0, 0, 0, 0, 1352, 0, 0, 1337, 0, 1333,
	1342, 1265, 0, 274, 0, 0, 0, 1343, 1344, 625,
	635, 636, 628, 629, 630, 631, 632, 633, 634, 627,
	0, 1288, 637, 274, 1350, 1351, 0, 0, 0, 84,
	0, 1369, 84, 84, 84, 274, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 275, 1265, 349, 55,
	0, 85, 0, 0, 0, 0, 275, 275, 85, 85,
	85, 0, 0, 0, 275, 0, 0, 275, 0, 1360,
	275, 0, 0, 0, 275, 0, 85, 1382, 0, 0,
	0, 85, 85, 85, 275, 85, 85, 0, 1361, 1363,
	1003, 0, 1003, 0, 0, 85, 85, 0, 1402, 1374,
	1375, 1373, 0, 1362, 55, 1364, 0, 1158, 1407, 0,
	0, 0, 383, 0, 0, 0, 0, 1417, 84, 0,
	0, 1193, 0, 1416, 0, 0, 84, 0, 1398, 0,
	1426, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 84, 0, 0, 1379, 1380, 0, 1381, 84, 0,
	1383, 0, 1385, 0, 0, 1435, 0, 1437, 0, 0,
	0, 1448, 346, 0, 0, 0, 85, 0, 626, 625,
	635, 636, 628, 629, 630, 631, 632, 633, 634, 627,
	0, 1447, 637, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1454, 84, 84, 0, 84, 83, 0, 85,
	85, 84, 0, 84, 84, 84, 274, 1309, 1470, 84,
	1471, 1473, 1474, 85, 1469, 398, 1462, 1460, 1429, 0,
	275, 0, 1475, 85, 1481, 0, 84, 274, 275, 1488,
	0, 0, 0, 1496, 416, 1003, 275, 275, 1440, 0,
	275, 275, 1464, 0, 275, 275, 275, 85, 0, 1489,
	930, 1490, 0, 0, 0, 1509, 0, 0, 0, 1518,
	85, 0, 1309, 0, 84, 1444, 0, 1517, 311, 1516,
	0, 0, 0, 0, 0, 84, 84, 0, 0, 1532,
	0, 1531, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 84, 1497, 1538, 0, 1510, 0, 1158, 0,
	0, 0, 0, 274, 0, 0, 0, 0, 0, 0,
	0, 84, 0, 0, 275, 85, 0, 85, 1547, 0,
	0, 0, 0, 275, 275, 275, 275, 275, 0, 275,
	275, 582, 84, 275, 85, 582, 1554, 582, 1552, 1556,
	1397, 0, 0, 582, 0, 1567, 0, 0, 0, 0,
	275, 55, 1578, 0, 0, 275, 0, 275, 275, 0,
	0, 0, 275, 0, 646, 648, 0, 0, 0, 1542,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	626, 625, 635, 636, 628, 629, 630, 631, 632, 633,
	634, 627, 1444, 1003, 637, 661, 0, 0, 665, 666,
	667, 668, 669, 670, 671, 672, 673, 0, 676, 679,
	679, 679, 685, 679, 679, 685, 679, 693, 694, 695,
	696, 697, 698, 699, 0, 0, 0, 0, 0, 0,
	0, 0, 55, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 314, 416, 0, 0, 0, 416,
	730, 416, 1392, 0, 0, 275, 0, 416, 0, 0,
	0, 0, 0, 0, 604, 275, 275, 275, 275, 275,
	0, 0, 0, 0, 0, 0, 0, 275, 0, 0,
	275, 0, 0, 0, 275, 0, 0, 0, 275, 0,
	0, 0, 621, 0, 624, 0, 0, 0, 0, 0,
	638, 639, 640, 641, 642, 643, 644, 85, 622, 623,
	620, 626, 625, 635, 636, 628, 629, 630, 631, 632,
	633, 634, 627, 0, 0, 637, 0, 0, 0, 618,
	0, 626, 625, 635, 636, 628, 629, 630, 631, 632,
	633, 634, 627, 0, 0, 637, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 85, 85, 0, 0, 0,
	0, 718, 0, 0, 0, 311, 0, 0, 0, 0,
	0, 0, 416, 0, 675, 0, 0, 0, 750, 0,
	0, 0, 0, 1391, 0, 85, 0, 0, 0, 0,
	0, 0, 0, 0, 582, 0, 0, 0, 0, 0,
	0, 582, 582, 582, 0, 0, 1390, 0, 0, 85,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 582,
	0, 0, 0, 0, 582, 582, 582, 0, 582, 582,
	0, 702, 0, 0, 0, 0, 0, 0, 582, 582,
	0, 0, 0, 0, 0, 275, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 85, 0, 0, 0, 0,
	85, 85, 626, 625, 635, 636, 628, 629, 630, 631,
	632, 633, 634, 627, 0, 0, 637, 0, 0, 0,
	0, 0, 0, 0, 85, 626, 625, 635, 636, 628,
	629, 630, 631, 632, 633, 634, 627, 55, 85, 637,
	85, 85, 0, 0, 0, 0, 0, 0, 416, 0,
	0, 0, 1389, 0, 665, 416, 416, 416, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 275, 0,
	0, 0, 0, 416, 0, 0, 0, 0, 416, 416,
	416, 0, 416, 416, 0, 0, 0, 0, 275, 0,
	0, 0, 416, 416, 85, 0, 0, 85, 85, 85,
	275, 0, 0, 0, 0, 0, 0, 651, 652, 653,
	654, 655, 656, 657, 658, 659, 660, 0, 0, 974,
	0, 0, 0, 730, 0, 0, 0, 730, 0, 0,
	837, 626, 625, 635, 636, 628, 629, 630, 631, 632,
	633, 634, 627, 0, 0, 637, 0, 0, 0, 0,
	0, 0, 0, 0, 853, 0, 0, 0, 0, 0,
	0, 0, 0, 899, 0, 416, 0, 0, 0, 0,
	861, 862, 863, 0, 0, 0, 0, 0, 0, 928,
	0, 0, 0, 85, 0, 0, 0, 0, 0, 0,
	0, 85, 0, 0, 0, 0, 932, 933, 582, 0,
	582, 0, 0, 0, 0, 0, 85, 1259, 0, 0,
	944, 0, 0, 85, 0, 0, 0, 582, 0, 0,
	718, 311, 0, 416, 912, 913, 0, 626, 625, 635,
	636, 628, 629, 630, 631, 632, 633, 634, 627, 0,
	0, 637, 0, 0, 416, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 907, 908, 0, 416, 85, 85,
	0, 85, 0, 0, 0, 0, 85, 0, 85, 85,
	85, 275, 0, 0, 85, 0, 0, 0, 0, 0,
	0, 0, 0, 27, 28, 56, 30, 31, 0, 0,
	0, 85, 275, 1102, 0, 0, 0, 942, 0, 0,
	0, 0, 60, 0, 997, 0, 0, 32, 49, 50,
	0, 52, 416, 0, 416, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 85,
	41, 416, 0, 0, 54, 0, 0, 0, 730, 0,
	85, 85, 0, 0, 1154, 1155, 0, 0, 730, 730,
	730, 730, 730, 0, 0, 0, 0, 85, 1097, 0,
	0, 0, 0, 974, 0, 1178, 0, 0, 275, 0,
	0, 730, 0, 0, 0, 0, 85, 0, 626, 625,
	635, 636, 628, 629, 630, 631, 632, 633, 634, 627,
	0, 0, 637, 0, 0, 0, 0, 85, 0, 34,
	35, 37, 36, 39, 869, 51, 0, 878, 879, 880,
	881, 882, 883, 884, 885, 886, 887, 888, 889, 890,
	891, 892, 0, 0, 0, 0, 0, 0, 40, 59,
	58, 0, 0, 47, 48, 38, 0, 0, 0, 582,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 42,
	43, 0, 44, 45, 0, 0, 0, 0, 0, 0,
	0, 928, 0, 0, 931, 0, 0, 0, 582, 626,
	625, 635, 636, 628, 629, 630, 631, 632, 633, 634,
	627, 0, 1121, 637, 0, 0, 0, 1098, 0, 0,
	0, 1099, 0, 0, 0, 0, 1135, 1138, 0, 0,
	1104, 1105, 1106, 0, 416, 0, 0, 1112, 0, 0,
	1115, 1116, 0, 0, 0, 0, 0, 0, 1122, 0,
	0, 0, 1124, 0, 0, 1127, 1128, 1129, 1130, 1131,
	0, 0, 0, 347, 0, 57, 0, 0, 0, 0,
	0, 1310, 0, 55, 0, 0, 0, 0, 0, 0,
	0, 0, 1223, 416, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1173, 0, 0, 0, 0, 0,
	0, 0, 273, 0, 0, 299, 0, 0, 0, 0,
	273, 0, 416, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 399, 0, 0, 407, 0, 416, 0, 0, 273,
	0, 273, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 416, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 416, 0, 928, 0, 0, 1313, 1315, 0,
	1092, 1093, 1094, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1393, 0, 0, 0, 1286, 0, 0, 0,
	0, 1315, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1262, 1263, 0, 0, 416, 0, 416, 1341, 0,
	0, 1302, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1422, 1423, 1424,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 582,
	0, 1365, 0, 0, 1370, 1371, 1372, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 273, 0, 0, 1310, 0, 273,
	1465, 0, 0, 0, 0, 273, 0, 0, 0, 0,
	0, 273, 0, 0, 0, 0, 0, 0, 0, 0,
	928, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1493, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	416, 0, 0, 1396, 0, 0, 0, 0, 1431, 1400,
	1401, 1138, 1310, 0, 55, 1377, 0, 1378, 0, 0,
	0, 0, 0, 416, 0, 0, 311, 0, 1387, 1388,
	416, 0, 0, 0, 1418, 0, 0, 1419, 0, 0,
	1421, 1260, 1261, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1279, 1280, 0, 1281, 1282,
	0, 1409, 1410, 1411, 0, 1414, 0, 0, 0, 0,
	1289, 1290, 0, 0, 0, 1466, 1467, 0, 1468, 0,
	0, 399, 1425, 1431, 0, 1431, 1431, 1431, 0, 0,
	0, 1341, 0, 0, 273, 273, 273, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1431, 1565,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1459, 311, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 778, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1523, 0, 0, 0,
	1348, 0, 0, 0, 0, 0, 0, 416, 416, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 928, 0, 1472, 1540, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1546, 0, 0, 0, 0, 0, 0,
	1498, 1499, 1500, 1501, 1376, 1505, 0, 1506, 1507, 0,
	0, 0, 0, 0, 1431, 0, 766, 0, 0, 0,
	0, 0, 1513, 0, 1514, 1515, 0, 0, 0, 0,
	0, 0, 0, 0, 273, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 273, 273, 0, 0, 0, 0,
	0, 0, 273, 1534, 0, 273, 0, 779, 273, 0,
	0, 1539, 832, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 273, 0, 0, 0, 0, 0, 0, 1544,
	792, 795, 796, 797, 798, 799, 800, 0, 801, 802,
	803, 804, 805, 780, 781, 782, 783, 764, 765, 793,
	0, 767, 0, 768, 769, 770, 771, 772, 773, 774,
	775, 776, 777, 784, 785, 786, 787, 788, 789, 790,
	791, 0, 1579, 1580, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1449, 1450, 1451, 1452, 1453, 0,
	0, 0, 1456, 1457, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 399, 832, 0, 0, 0,
	399, 399, 0, 0, 399, 399, 399, 0, 0, 0,
	929, 0, 794, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 399,
	399, 399, 399, 399, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 273, 0,
	0, 0, 0, 0, 832, 0, 273, 0, 0, 0,
	0, 0, 0, 0, 273, 979, 0, 0, 273, 273,
	0, 0, 273, 987, 832, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 273, 0, 0, 0, 0, 0, 0, 0,
	1571, 273, 273, 273, 273, 273, 0, 273, 273, 0,
	0, 273, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 273, 0,
	0, 0, 0, 273, 0, 1084, 1085, 0, 0, 0,
	273, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 399, 399, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 399, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 399, 273, 0, 0, 0, 0, 0, 0,
	0, 0, 929, 273, 273, 273, 273, 273, 0, 0,
	0, 0, 0, 0, 0, 1172, 0, 0, 273, 0,
	0, 0, 979, 0, 0, 0, 273, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 399, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 832, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 273, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 929, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 273, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 273, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 273, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 929, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 979,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	273, 526, 514, 0, 471, 529, 444, 461, 537, 462,
	465, 502, 429, 484, 174, 459, 0, 448, 424, 455,
	425, 446, 473, 118, 477, 443, 516, 487, 528, 146,
	0, 449, 535, 148, 493, 0, 220, 162, 0, 0,
	0, 475, 518, 482, 511, 470, 503, 434, 492, 530,
	460, 500, 531, 0, 0, 0, 86, 87, 88, 0,
	1004, 1005, 929, 0, 0, 0, 0, 108, 0, 497,
	525, 457, 499, 501, 423, 494, 273, 427, 430, 536,
	521, 452, 453, 1194, 0, 0, 0, 0, 0, 0,
	474, 483, 508, 468, 0, 0, 0, 0, 0, 0,
	0, 0, 450, 0, 491, 0, 0, 0, 431, 428,
	0, 0, 0, 0, 472, 0, 0, 0, 433, 0,
	451, 509, 0, 421, 127, 513, 520, 469, 276, 524,
	467, 466, 527, 193, 0, 224, 130, 145, 104, 142,
	90, 100, 0, 129, 171, 200, 204, 517, 447, 456,
	112, 454, 202, 181, 240, 490, 183, 201, 149, 230,
	194, 239, 249, 250, 227, 247, 254, 217, 93, 226,
	238, 109, 212, 95, 236, 223, 160, 139, 140, 94,
	0, 198, 117, 125, 114, 173, 233, 234, 113, 257,
	101, 246, 97, 102, 245, 167, 229, 237, 161, 154,
	96, 235, 159, 153, 144, 121, 132, 191, 151, 192,
	133, 164, 163, 165, 0, 426, 0, 221, 243, 258,
	106, 442, 228, 252, 253, 0, 0, 107, 126, 120,
	190, 124, 166, 103, 135, 218, 143, 150, 197, 256,
	180, 203, 110, 242, 219, 438, 441, 436, 437, 485,
	486, 532, 533, 534, 510, 432, 0, 439, 440, 0,
	515, 522, 523, 489, 89, 98, 147, 255, 195, 123,
	244, 422, 435, 116, 445, 0, 0, 458, 463, 464,
	476, 478, 479, 480, 481, 488, 495, 496, 498, 504,
	505, 506, 507, 512, 519, 538, 91, 92, 99, 105,
	111, 115, 119, 122, 128, 131, 134, 136, 137, 138,
	141, 152, 155, 156, 157, 158, 168, 169, 170, 172,
	175, 176, 177, 178, 179, 182, 184, 185, 186, 187,
	188, 189, 196, 199, 205, 206, 207, 208, 209, 210,
	211, 213, 214, 215, 216, 222, 225, 231, 232, 241,
	248, 251, 526, 514, 0, 471, 529, 444, 461, 537,
	462, 465, 502, 429, 484, 174, 459, 0, 448, 424,
	455, 425, 446, 473, 118, 477, 443, 516, 487, 528,
	146, 0, 449, 535, 148, 493, 0, 220, 162, 0,
	0, 0, 475, 518, 482, 511, 470, 503, 434, 492,
	530, 460, 500, 531, 0, 0, 0, 86, 87, 88,
	0, 1004, 1005, 0, 0, 0, 0, 0, 108, 0,
	497, 525, 457, 499, 501, 423, 494, 0, 427, 430,
	536, 521, 452, 453, 0, 0, 0, 0, 0, 0,
	0, 474, 483, 508, 468, 0, 0, 0, 0, 0,
	0, 0, 0, 450, 0, 491, 0, 0, 0, 431,
	428, 0, 0, 0, 0, 472, 0, 0, 0, 433,
	0, 451, 509, 0, 421, 127, 513, 520, 469, 276,
	524, 467, 466, 527, 193, 0, 224, 130, 145, 104,
	142, 90, 100, 0, 129, 171, 200, 204, 517, 447,
	456, 112, 454, 202, 181, 240, 490, 183, 201, 149,
	230, 194, 239, 249, 250, 227, 247, 254, 217, 93,
	226, 238, 109, 212, 95, 236, 223, 160, 139, 140,
	94, 0, 198, 117, 125, 114, 173, 233, 234, 113,
	257, 101, 246, 97, 102, 245, 167, 229, 237, 161,
	154, 96, 235, 159, 153, 144, 121, 132, 191, 151,
	192, 133, 164, 163, 165, 0, 426, 0, 221, 243,
	258, 106, 442, 228, 252, 253, 0, 0, 107, 126,
	120, 190, 124, 166, 103, 135, 218, 143, 150, 197,
	256, 180, 203, 110, 242, 219, 438, 441, 436, 437,
	485, 486, 532, 533, 534, 510, 432, 0, 439, 440,
	0, 515, 522, 523, 489, 89, 98, 147, 255, 195,
	123, 244, 422, 435, 116, 445, 0, 0, 458, 463,
	464, 476, 478, 479, 480, 481, 488, 495, 496, 498,
	504, 505, 506, 507, 512, 519, 538, 91, 92, 99,
	105, 111, 115, 119, 122, 128, 131, 134, 136, 137,
	138, 141, 152, 155, 156, 157, 158, 168, 169, 170,
	172, 175, 176, 177, 178, 179, 182, 184, 185, 186,
	187, 188, 189, 196, 199, 205, 206, 207, 208, 209,
	210, 211, 213, 214, 215, 216, 222, 225, 231, 232,
	241, 248, 251, 526, 514, 0, 471, 529, 444, 461,
	537, 462, 465, 502, 429, 484, 174, 459, 0, 448,
	424, 455, 425, 446, 473, 118, 477, 443, 516, 487,
	528, 146, 0, 449, 535, 148, 493, 0, 220, 162,
	0, 0, 0, 475, 518, 482, 511, 470, 503, 434,
	492, 530, 460, 500, 531, 377, 0, 0, 86, 87,
	88, 0, 0, 0, 0, 0, 0, 0, 0, 108,
	0, 497, 525, 457, 499, 501, 423, 494, 0, 427,
	430, 536, 521, 452, 453, 0, 0, 0, 0, 0,
	0, 0, 474, 483, 508, 468, 0, 0, 0, 0,
	0, 0, 0, 0, 450, 0, 491, 0, 0, 0,
	431, 428, 0, 0, 0, 0, 472, 0, 0, 0,
	433, 0, 451, 509, 0, 421, 127, 513, 520, 469,
	276, 524, 467, 466, 527, 193, 0, 224, 130, 145,
	104, 142, 90, 100, 0, 129, 171, 200, 204, 517,
	447, 456, 112, 454, 202, 181, 240, 490, 183, 201,
	149, 230, 194, 239, 249, 250, 227, 247, 254, 217,
	93, 226, 238, 109, 212, 95, 236, 223, 160, 139,
	140, 94, 0, 198, 117, 125, 114, 173, 233, 234,
	113, 257, 101, 246, 97, 102, 245, 167, 229, 237,
	161, 154, 96, 235, 159, 153, 144, 121, 132, 191,
	151, 192, 133, 164, 163, 165, 0, 426, 0, 221,
	243, 258, 106, 442, 228, 252, 253, 0, 0, 107,
	126, 120, 190, 124, 166, 103, 135, 218, 143, 150,
	197, 256, 180, 203, 110, 242, 219, 438, 441, 436,
	437, 485, 486, 532, 533, 534, 510, 432, 0, 439,
	440, 0, 515, 522, 523, 489, 89, 98, 147, 255,
	195, 123, 244, 422, 435, 116, 445, 0, 0, 458,
	463, 464, 476, 478, 479, 480, 481, 488, 495, 496,
	498, 504, 505, 506, 507, 512, 519, 538, 91, 92,
	99, 105, 111, 115, 119, 122, 128, 131, 134, 136,
	137, 138, 141, 152, 155, 156, 157, 158, 168, 169,
	170, 172, 175, 176, 177, 178, 179, 182, 184, 185,
	186, 187, 188, 189, 196, 199, 205, 206, 207, 208,
	209, 210, 211, 213, 214, 215, 216, 222, 225, 231,
	232, 241, 248, 251, 526, 514, 0, 471, 529, 444,
	461, 537, 462, 465, 502, 429, 484, 174, 459, 0,
	448, 424, 455, 425, 446, 473, 118, 477, 443, 516,
	487, 528, 146, 0, 449, 535, 148, 493, 0, 220,
	162, 0, 0, 0, 475, 518, 482, 511, 470, 503,
	434, 492, 530, 460, 500, 531, 0, 0, 0, 86,
	87, 88, 0, 0, 0, 0, 0, 0, 0, 0,
	108, 0, 497, 525, 457, 499, 501, 423, 494, 0,
	427, 430, 536, 521, 452, 453, 0, 0, 0, 0,
	0, 0, 0, 474, 483, 508, 468, 0, 0, 0,
	0, 0, 0, 1303, 0, 450, 0, 491, 0, 0,
	0, 431, 428, 0, 0, 0, 0, 472, 0, 0,
	0, 433, 0, 451, 509, 0, 421, 127, 513, 520,
	469, 276, 524, 467, 466, 527, 193, 0, 224, 130,
	145, 104, 142, 90, 100, 0, 129, 171, 200, 204,
	517, 447, 456, 112, 454, 202, 181, 240, 490, 183,
	201, 149, 230, 194, 239, 249, 250, 227, 247, 254,
	217, 93, 226, 238, 109, 212, 95, 236, 223, 160,
	139, 140, 94, 0, 198, 117, 125, 114, 173, 233,
	234, 113, 257, 101, 246, 97, 102, 245, 167, 229,
	237, 161, 154, 96, 235, 159, 153, 144, 121, 132,
	191, 151, 192, 133, 164, 163, 165, 0, 426, 0,
	221, 243, 258, 106, 442, 228, 252, 253, 0, 0,
	107, 126, 120, 190, 124, 166, 103, 135, 218, 143,
	150, 197, 256, 180, 203, 110, 242, 219, 438, 441,
	436, 437, 485, 486, 532, 533, 534, 510, 432, 0,
	439, 440, 0, 515, 522, 523, 489, 89, 98, 147,
	255, 195, 123, 244, 422, 435, 116, 445, 0, 0,
	458, 463, 464, 476, 478, 479, 480, 481, 488, 495,
	496, 498, 504, 505, 506, 507, 512, 519, 538, 91,
	92, 99, 105, 111, 115, 119, 122, 128, 131, 134,
	136, 137, 138, 141, 152, 155, 156, 157, 158, 168,
	169, 170, 172, 175, 176, 177, 178, 179, 182, 184,
	185, 186, 187, 188, 189, 196, 199, 205, 206, 207,
	208, 209, 210, 211, 213, 214, 215, 216, 222, 225,
	231, 232, 241, 248, 251, 526, 514, 0, 471, 529,
	444, 461, 537, 462, 465, 502, 429, 484, 174, 459,
	0, 448, 424, 455, 425, 446, 473, 118, 477, 443,
	516, 487, 528, 146, 0, 449, 535, 148, 493, 0,
	220, 162, 0, 0, 0, 475, 518, 482, 511, 470,
	503, 434, 492, 530, 460, 500, 531, 0, 0, 0,
	86, 87, 88, 0, 0, 0, 0, 0, 0, 0,
	0, 108, 0, 497, 525, 457, 499, 501, 423, 494,
	0, 427, 430, 536, 521, 452, 453, 0, 0, 0,
	0, 0, 0, 0, 474, 483, 508, 468, 0, 0,
	0, 0, 0, 0, 988, 0, 450, 0, 491, 0,
	0, 0, 431, 428, 0, 0, 0, 0, 472, 0,
	0, 0, 433, 0, 451, 509, 0, 421, 127, 513,
	520, 469, 276, 524, 467, 466, 527, 193, 0, 224,
	130, 145, 104, 142, 90, 100, 0, 129, 171, 200,
	204, 517, 447, 456, 112, 454, 202, 181, 240, 490,
	183, 201, 149, 230, 194, 239, 249, 250, 227, 247,
	254, 217, 93, 226, 238, 109, 212, 95, 236, 223,
	160, 139, 140, 94, 0, 198, 117, 125, 114, 173,
	233, 234, 113, 257, 101, 246, 97, 102, 245, 167,
	229, 237, 161, 154, 96, 235, 159, 153, 144, 121,
	132, 191, 151, 192, 133, 164, 163, 165, 0, 426,
	0, 221, 243, 258, 106, 442, 228, 252, 253, 0,
	0, 107, 126, 120, 190, 124, 166, 103, 135, 218,
	143, 150, 197, 256, 180, 203, 110, 242, 219, 438,
	441, 436, 437, 485, 486, 532, 533, 534, 510, 432,
	0, 439, 440, 0, 515, 522, 523, 489, 89, 98,
	147, 255, 195, 123, 244, 422, 435, 116, 445, 0,
	0, 458, 463, 464, 476, 478, 479, 480, 481, 488,
	495, 496, 498, 504, 505, 506, 507, 512, 519, 538,
	91, 92, 99, 105, 111, 115, 119, 122, 128, 131,
	134, 136, 137, 138, 141, 152, 155, 156, 157, 158,
	168, 169, 170, 172, 175, 176, 177, 178, 179, 182,
	184, 185, 186, 187, 188, 189, 196, 199, 205, 206,
	207, 208, 209, 210, 211, 213, 214, 215, 216, 222,
	225, 231, 232, 241, 248, 251, 526, 514, 0, 471,
	529, 444, 461, 537, 462, 465, 502, 429, 484, 174,
	459, 0, 448, 424, 455, 425, 446, 473, 118, 477,
	443, 516, 487, 528, 146, 0, 449, 535, 148, 493,
	0, 220, 162, 0, 0, 0, 475, 518, 482, 511,
	470, 503, 434, 492, 530, 460, 500, 531, 0, 0,
	0, 86, 87, 88, 0, 0, 0, 0, 0, 0,
	0, 0, 108, 0, 497, 525, 457, 499, 501, 423,
	494, 0, 427, 430, 536, 521, 452, 453, 0, 0,
	0, 0, 0, 0, 0, 474, 483, 508, 468, 0,
	0, 0, 0, 0, 0, 953, 0, 450, 0, 491,
	0, 0, 0, 431, 428, 0, 0, 0, 0, 472,
	0, 0, 0, 433, 0, 451, 509, 0, 421, 127,
	513, 520, 469, 276, 524, 467, 466, 527, 193, 0,
	224, 130, 145, 104, 142, 90, 100, 0, 129, 171,
	200, 204, 517, 447, 456, 112, 454, 202, 181, 240,
	490, 183, 201, 149, 230, 194, 239, 249, 250, 227,
	247, 254, 217, 93, 226, 238, 109, 212, 95, 236,
	223, 160, 139, 140, 94, 0, 198, 117, 125, 114,
	173, 233, 234, 113, 257, 101, 246, 97, 102, 245,
	167, 229, 237, 161, 154, 96, 235, 159, 153, 144,
	121, 132, 191, 151, 192, 133, 164, 163, 165, 0,
	426, 0, 221, 243, 258, 106, 442, 228, 252, 253,
	0, 0, 107, 126, 120, 190, 124, 166, 103, 135,
	218, 143, 150, 197, 256, 180, 203, 110, 242, 219,
	438, 441, 436, 437, 485, 486, 532, 533, 534, 510,
	432, 0, 439, 440, 0, 515, 522, 523, 489, 89,
	98, 147, 255, 195, 123, 244, 422, 435, 116, 445,
	0, 0, 458, 463, 464, 476, 478, 479, 480, 481,
	488, 495, 496, 498, 504, 505, 506, 507, 512, 519,
	538, 91, 92, 99, 105, 111, 115, 119, 122, 128,
	131, 134, 136, 137, 138, 141, 152, 155, 156, 157,
	158, 168, 169, 170, 172, 175, 176, 177, 178, 179,
	182, 184, 185, 186, 187, 188, 189, 196, 199, 205,
	206, 207, 208, 209, 210, 211, 213, 214, 215, 216,
	222, 225, 231, 232, 241, 248, 251, 526, 514, 0,
	471, 529, 444, 461, 537, 462, 465, 502, 429, 484,
	174, 459, 0, 448, 424, 455, 425, 446, 473, 118,
	477, 443, 516, 487, 528, 146, 0, 449, 535, 148,
	493, 0, 220, 162, 0, 0, 0, 475, 518, 482,
	511, 470, 503, 434, 492, 530, 460, 500, 531, 0,
	0, 0, 86, 87, 88, 0, 0, 0, 0, 0,
	0, 0, 0, 108, 0, 497, 525, 457, 499, 501,
	423, 494, 0, 427, 430, 536, 521, 452, 453, 0,
	0, 0, 0, 0, 0, 0, 474, 483, 508, 468,
	0, 0, 0, 0, 0, 0, 0, 0, 450, 0,
	491, 0, 0, 0, 431, 428, 0, 0, 0, 0,
	472, 0, 0, 0, 433, 0, 451, 509, 0, 421,
	127, 513, 520, 469, 276, 524, 467, 466, 527, 193,
	0, 224, 130, 145, 104, 142, 90, 100, 0, 129,
	171, 200, 204, 517, 447, 456, 112, 454, 202, 181,
	240, 490, 183, 201, 149, 230, 194, 239, 249, 250,
	227, 247, 254, 217, 93, 226, 238, 109, 212, 95,
	236, 223, 160, 139, 140, 94, 0, 198, 117, 125,
	114, 173, 233, 234, 113, 257, 101, 246, 97, 102,
	245, 167, 229, 237, 161, 154, 96, 235, 159, 153,
	144, 121, 132, 191, 151, 192, 133, 164, 163, 165,
	0, 426, 0, 221, 243, 258, 106, 442, 228, 252,
	253, 0, 0, 107, 126, 120, 190, 124, 166, 103,
	135, 218, 143, 150, 197, 256, 180, 203, 110, 242,
	219, 438, 441, 436, 437, 485, 486, 532, 533, 534,
	510, 432, 0, 439, 440, 0, 515, 522, 523, 489,
	89, 98, 147, 255, 195, 123, 244, 422, 435, 116,
	445, 0, 0, 458, 463, 464, 476, 478, 479, 480,
	481, 488, 495, 496, 498, 504, 505, 506, 507, 512,
	519, 538, 91, 92, 99, 105, 111, 115, 119, 122,
	128, 131, 134, 136, 137, 138, 141, 152, 155, 156,
	157, 158, 168, 169, 170, 172, 175, 176, 177, 178,
	179, 182, 184, 185, 186, 187, 188, 189, 196, 199,
	205, 206, 207, 208, 209, 210, 211, 213, 214, 215,
	216, 222, 225, 231, 232, 241, 248, 251, 526, 514,
	0, 471, 529, 444, 461, 537, 462, 465, 502, 429,
	484, 174, 459, 0, 448, 424, 455, 425, 446, 473,
	118, 477, 443, 516, 487, 528, 146, 0, 449, 535,
	148, 493, 0, 220, 162, 0, 0, 0, 475, 518,
	482, 511, 470, 503, 434, 492, 530, 460, 500, 531,
	0, 0, 0, 86, 87, 88, 0, 0, 0, 0,
	0, 0, 0, 0, 108, 0, 497, 525, 457, 499,
	501, 423, 494, 0, 427, 430, 536, 521, 452, 453,
	0, 0, 0, 0, 0, 0, 0, 474, 483, 508,
	468, 0, 0, 0, 0, 0, 0, 0, 0, 450,
	0, 491, 0, 0, 0, 431, 428, 0, 0, 0,
	0, 472, 0, 0, 0, 433, 0, 451, 509, 0,
	421, 127, 513, 520, 469, 276, 524, 467, 466, 527,
	193, 0, 224, 130, 145, 104, 142, 90, 100, 0,
	129, 171, 200, 204, 517, 447, 456, 112, 454, 202,
	181, 240, 490, 183, 201, 149, 230, 194, 239, 249,
	250, 227, 247, 254, 217, 93, 226, 238, 109, 212,
	95, 236, 223, 160, 139, 140, 94, 0, 198, 117,
	125, 114, 173, 233, 234, 113, 257, 101, 246, 97,
	419, 245, 167, 229, 237, 161, 154, 96, 235, 159,
	153, 144, 121, 132, 191, 151, 192, 133, 164, 163,
	165, 0, 426, 0, 221, 243, 258, 106, 442, 228,
	252, 253, 0, 0, 107, 126, 120, 190, 124, 420,
	418, 135, 218, 143, 150, 197, 256, 180, 203, 110,
	242, 219, 438, 441, 436, 437, 485, 486, 532, 533,
	534, 510, 432, 0, 439, 440, 0, 515, 522, 523,
	489, 89, 98, 147, 255, 195, 123, 244, 422, 435,
	116, 445, 0, 0, 458, 463, 464, 476, 478, 479,
	480, 481, 488, 495, 496, 498, 504, 505, 506, 507,
	512, 519, 538, 91, 92, 99, 105, 111, 115, 119,
	122, 128, 131, 134, 136, 137, 138, 141, 152, 155,
	156, 157, 158, 168, 169, 170, 172, 175, 176, 177,
	178, 179, 182, 184, 185, 186, 187, 188, 189, 196,
	199, 205, 206, 207, 208, 209, 210, 211, 213, 214,
	215, 216, 222, 225, 231, 232, 241, 248, 251, 526,
	514, 0, 471, 529, 444, 461, 537, 462, 465, 502,
	429, 484, 174, 459, 0, 448, 424, 455, 425, 446,
	473, 118, 477, 443, 516, 487, 528, 146, 0, 449,
	535, 148, 493, 0, 220, 162, 0, 0, 0, 475,
	518, 482, 511, 470, 503, 434, 492, 530, 460, 500,
	531, 0, 0, 0, 86, 87, 88, 0, 0, 0,
	0, 0, 0, 0, 0, 108, 0, 497, 525, 457,
	499, 501, 423, 494, 0, 427, 430, 536, 521, 452,
	453, 0, 0, 0, 0, 0, 0, 0, 474, 483,
	508, 468, 0, 0, 0, 0, 0, 0, 0, 0,
	450, 0, 491, 0, 0, 0, 431, 428, 0, 0,
	0, 0, 472, 0, 0, 0, 433, 0, 451, 509,
	0, 421, 127, 513, 520, 469, 276, 524, 467, 466,
	527, 193, 0, 224, 130, 145, 104, 142, 90, 100,
	0, 129, 171, 200, 204, 517, 447, 456, 112, 454,
	202, 181, 240, 490, 183, 201, 149, 230, 194, 239,
	249, 250, 227, 247, 254, 217, 93, 226, 742, 109,
	212, 95, 236, 223, 160, 139, 140, 94, 0, 198,
	117, 125, 114, 173, 233, 234, 113, 257, 101, 246,
	97, 419, 245, 167, 229, 237, 161, 154, 96, 235,
	159, 153, 144, 121, 132, 191, 151, 192, 133, 164,
	163, 165, 0, 426, 0, 221, 243, 258, 106, 442,
	228, 252, 253, 0, 0, 107, 126, 120, 190, 124,
	420, 418, 135, 218, 143, 150, 197, 256, 180, 203,
	110, 242, 219, 438, 441, 436, 437, 485, 486, 532,
	533, 534, 510, 432, 0, 439, 440, 0, 515, 522,
	523, 489, 89, 98, 147, 255, 195, 123, 244, 422,
	435, 116, 445, 0, 0, 458, 463, 464, 476, 478,
	479, 480, 481, 488, 495, 496, 498, 504, 505, 506,
	507, 512, 519, 538, 91, 92, 99, 105, 111, 115,
	119, 122, 128, 131, 134, 136, 137, 138, 141, 152,
	155, 156, 157, 158, 168, 169, 170, 172, 175, 176,
	177, 178, 179, 182, 184, 185, 186, 187, 188, 189,
	196, 199, 205, 206, 207, 208, 209, 210, 211, 213,
	214, 215, 216, 222, 225, 231, 232, 241, 248, 251,
	526, 514, 0, 471, 529, 444, 461, 537, 462, 465,
	502, 429, 484, 174, 459, 0, 448, 424, 455, 425,
	446, 473, 118, 477, 443, 516, 487, 528, 146, 0,
	449, 535, 148, 493, 0, 220, 162, 0, 0, 0,
	475, 518, 482, 511, 470, 503, 434, 492, 530, 460,
	500, 531, 0, 0, 0, 86, 87, 88, 0, 0,
	0, 0, 0, 0, 0, 0, 108, 0, 497, 525,
	457, 499, 501, 423, 494, 0, 427, 430, 536, 521,
	452, 453, 0, 0, 0, 0, 0, 0, 0, 474,
	483, 508, 468, 0, 0, 0, 0, 0, 0, 0,
	0, 450, 0, 491, 0, 0, 0, 431, 428, 0,
	0, 0, 0, 472, 0, 0, 0, 433, 0, 451,
	509, 0, 421, 127, 513, 520, 469, 276, 524, 467,
	466, 527, 193, 0, 224, 130, 145, 104, 142, 90,
	100, 0, 129, 171, 200, 204, 517, 447, 456, 112,
	454, 202, 181, 240, 490, 183, 201, 149, 230, 194,
	239, 249, 250, 227, 247, 254, 217, 93, 226, 410,
	109, 212, 95, 236, 223, 160, 139, 140, 94, 0,
	198, 117, 125, 114, 173, 233, 234, 113, 257, 101,
	246, 97, 419, 245, 167, 229, 237, 161, 154, 96,
	235, 159, 153, 144, 121, 132, 191, 151, 192, 133,
	164, 163, 165, 0, 426, 0, 221, 243, 258, 106,
	442, 228, 252, 253, 0, 0, 107, 126, 120, 190,
	124, 420, 418, 413, 412, 143, 150, 197, 256, 180,
	203, 110, 242, 219, 438, 441, 436, 437, 485, 486,
	532, 533, 534, 510, 432, 0, 439, 440, 0, 515,
	522, 523, 489, 89, 98, 147, 255, 195, 123, 244,
	422, 435, 116, 445, 0, 0, 458, 463, 464, 476,
	478, 479, 480, 481, 488, 495, 496, 498, 504, 505,
	506, 507, 512, 519, 538, 91, 92, 99, 105, 111,
	115, 119, 122, 128, 131, 134, 136, 137, 138, 141,
	152, 155, 156, 157, 158, 168, 169, 170, 172, 175,
	176, 177, 178, 179, 182, 184, 185, 186, 187, 188,
	189, 196, 199, 205, 206, 207, 208, 209, 210, 211,
	213, 214, 215, 216, 222, 225, 231, 232, 241, 248,
	251, 174, 0, 0, 901, 0, 316, 0, 0, 0,
	118, 0, 315, 0, 0, 0, 146, 0, 902, 359,
	148, 0, 0, 220, 162, 0, 0, 0, 0, 0,
	350, 351, 0, 0, 0, 0, 0, 0, 0, 0,
	377, 0, 0, 86, 87, 88, 337, 336, 339, 340,
	341, 342, 0, 0, 108, 338, 343, 344, 345, 0,
	0, 0, 313, 330, 0, 358, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 327, 328, 397, 0, 0,
	0, 373, 0, 329, 0, 0, 322, 323, 325, 324,
	326, 331, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 127, 372, 0, 0, 276, 0, 0, 370, 0,
	193, 0, 224, 130, 145, 104, 142, 90, 100, 0,
	129, 171, 200, 204, 0, 0, 0, 112, 0, 202,
	181, 240, 0, 183, 201, 149, 230, 194, 239, 249,
	250, 227, 247, 254, 217, 93, 226, 238, 109, 212,
	95, 236, 223, 160, 139, 140, 94, 0, 198, 117,
	125, 114, 173, 233, 234, 113, 257, 101, 246, 97,
	102, 245, 167, 229, 237, 161, 154, 96, 235, 159,
	153, 144, 121, 132, 191, 151, 192, 133, 164, 163,
	165, 0, 0, 0, 221, 243, 258, 106, 0, 228,
	252, 253, 0, 0, 107, 126, 120, 190, 124, 166,
	103, 135, 218, 143, 150, 197, 256, 180, 203, 110,
	242, 219, 360, 371, 366, 367, 364, 365, 363, 362,
	361, 374, 352, 353, 354, 355, 357, 0, 368, 369,
	356, 89, 98, 147, 255, 195, 123, 244, 0, 0,
	116, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 91, 92, 99, 105, 111, 115, 119,
	122, 128, 131, 134, 136, 137, 138, 141, 152, 155,
	156, 157, 158, 168, 169, 170, 172, 175, 176, 177,
	178, 179, 182, 184, 185, 186, 187, 188, 189, 196,
	199, 205, 206, 207, 208, 209, 210, 211, 213, 214,
	215, 216, 222, 225, 231, 232, 241, 248, 251, 174,
	0, 0, 0, 0, 316, 0, 0, 0, 118, 0,
	315, 0, 0, 0, 146, 0, 0, 359, 148, 0,
	0, 220, 162, 0, 0, 0, 0, 0, 350, 351,
	0, 0, 0, 0, 0, 0, 995, 0, 377, 0,
	0, 86, 87, 88, 337, 336, 339, 340, 341, 342,
	0, 0, 108, 338, 343, 344, 345, 996, 0, 0,
	313, 330, 0, 358, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 327, 328, 0, 0, 0, 0, 373,
	0, 329, 0, 0, 322, 323, 325, 324, 326, 331,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 127,
	372, 0, 0, 276, 0, 0, 370, 0, 193, 0,
	224, 130, 145, 104, 142, 90, 100, 0, 129, 171,
	200, 204, 0, 0, 0, 112, 0, 202, 181, 240,
	0, 183, 201, 149, 230, 194, 239, 249, 250, 227,
	247, 254, 217, 93, 226, 238, 109, 212, 95, 236,
	223, 160, 139, 140, 94, 0, 198, 117, 125, 114,
	173, 233, 234, 113, 257, 101, 246, 97, 102, 245,
	167, 229, 237, 161, 154, 96, 235, 159, 153, 144,
	121, 132, 191, 151, 192, 133, 164, 163, 165, 0,
	0, 0, 221, 243, 258, 106, 0, 228, 252, 253,
	0, 0, 107, 126, 120, 190, 124, 166, 103, 135,
	218, 143, 150, 197, 256, 180, 203, 110, 242, 219,
	360, 371, 366, 367, 364, 365, 363, 362, 361, 374,
	352, 353, 354, 355, 357, 0, 368, 369, 356, 89,
	98, 147, 255, 195, 123, 244, 0, 0, 116, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 91, 92, 99, 105, 111, 115, 119, 122, 128,
	131, 134, 136, 137, 138, 141, 152, 155, 156, 157,
	158, 168, 169, 170, 172, 175, 176, 177, 178, 179,
	182, 184, 185, 186, 187, 188, 189, 196, 199, 205,
	206, 207, 208, 209, 210, 211, 213, 214, 215, 216,
	222, 225, 231, 232, 241, 248, 251, 174, 0, 0,
	0, 0, 316, 0, 0, 0, 118, 0, 315, 0,
	0, 0, 146, 0, 0, 359, 148, 0, 0, 220,
	162, 0, 0, 0, 0, 0, 350, 351, 0, 0,
	0, 0, 0, 0, 0, 0, 377, 0, 703, 86,
	87, 88, 337, 336, 339, 340, 341, 342, 0, 0,
	108, 338, 343, 344, 345, 0, 0, 0, 313, 330,
	0, 358, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 327, 328, 0, 0, 0, 0, 373, 0, 329,
	0, 0, 322, 323, 325, 324, 326, 331, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 127, 372, 0,
	0, 276, 0, 0, 370, 0, 193, 0, 224, 130,
	145, 104, 142, 90, 100, 0, 129, 171, 200, 204,
	0, 0, 0, 112, 0, 202, 181, 240, 0, 183,
	201, 149, 230, 194, 239, 249, 250, 227, 247, 254,
	217, 93, 226, 238, 109, 212, 95, 236, 223, 160,
	139, 140, 94, 0, 198, 117, 125, 114, 173, 233,
	234, 113, 257, 101, 246, 97, 102, 245, 167, 229,
	237, 161, 154, 96, 235, 159, 153, 144, 121, 132,
	191, 151, 192, 133, 164, 163, 165, 0, 0, 0,
	221, 243, 258, 106, 0, 228, 252, 253, 0, 0,
	107, 126, 120, 190, 124, 166, 103, 135, 218, 143,
	150, 197, 256, 180, 203, 110, 242, 219, 360, 371,
	366, 367, 364, 365, 363, 362, 361, 374, 352, 353,
	354, 355, 357, 0, 368, 369, 356, 89, 98, 147,
	255, 195, 123, 244, 0, 0, 116, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 91,
	92, 99, 105, 111, 115, 119, 122, 128, 131, 134,
	136, 137, 138, 141, 152, 155, 156, 157, 158, 168,
	169, 170, 172, 175, 176, 177, 178, 179, 182, 184,
	185, 186, 187, 188, 189, 196, 199, 205, 206, 207,
	208, 209, 210, 211, 213, 214, 215, 216, 222, 225,
	231, 232, 241, 248, 251, 174, 0, 0, 0, 0,
	316, 0, 0, 0, 118, 0, 315, 0, 0, 0,
	146, 0, 0, 359, 148, 0, 0, 220, 162, 0,
	0, 0, 0, 0, 350, 351, 0, 0, 0, 0,
	0, 0, 0, 0, 377, 0, 0, 86, 87, 88,
	337, 336, 339, 340, 341, 342, 0, 0, 108, 338,
	343, 344, 345, 0, 0, 0, 313, 330, 0, 358,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 327,
	328, 397, 0, 0, 0, 373, 0, 329, 0, 0,
	322, 323, 325, 324, 326, 331, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 127, 372, 0, 0, 276,
	0, 0, 370, 0, 193, 0, 224, 130, 145, 104,
	142, 90, 100, 0, 129, 171, 200, 204, 0, 0,
	0, 112, 0, 202, 181, 240, 0, 183, 201, 149,
	230, 194, 239, 249, 250, 227, 247, 254, 217, 93,
	226, 238, 109, 212, 95, 236, 223, 160, 139, 140,
	94, 0, 198, 117, 125, 114, 173, 233, 234, 113,
	257, 101, 246, 97, 102, 245, 167, 229, 237, 161,
	154, 96, 235, 159, 153, 144, 121, 132, 191, 151,
	192, 133, 164, 163, 165, 0, 0, 0, 221, 243,
	258, 106, 0, 228, 252, 253, 0, 0, 107, 126,
	120, 190, 124, 166, 103, 135, 218, 143, 150, 197,
	256, 180, 203, 110, 242, 219, 360, 371, 366, 367,
	364, 365, 363, 362, 361, 374, 352, 353, 354, 355,
	357, 0, 368, 369, 356, 89, 98, 147, 255, 195,
	123, 244, 0, 0, 116, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 91, 92, 99,
	105, 111, 115, 119, 122, 128, 131, 134, 136, 137,
	138, 141, 152, 155, 156, 157, 158, 168, 169, 170,
	172, 175, 176, 177, 178, 179, 182, 184, 185, 186,
	187, 188, 189, 196, 199, 205, 206, 207, 208, 209,
	210, 211, 213, 214, 215, 216, 222, 225, 231, 232,
	241, 248, 251, 174, 0, 0, 0, 0, 316, 0,
	0, 0, 118, 0, 315, 0, 0, 0, 146, 0,
	0, 359, 148, 0, 0, 220, 162, 0, 0, 0,
	0, 0, 350, 351, 0, 0, 0, 0, 0, 0,
	0, 0, 377, 0, 0, 86, 87, 88, 337, 918,
	339, 340, 341, 342, 0, 0, 108, 338, 343, 344,
	345, 0, 0, 0, 313, 330, 0, 358, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 327, 328, 397,
	0, 0, 0, 373, 0, 329, 0, 0, 322, 323,
	325, 324, 326, 331, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 127, 372, 0, 0, 276, 0, 0,
	370, 0, 193, 0, 224, 130, 145, 104, 142, 90,
	100, 0, 129, 171, 200, 204, 0, 0, 0, 112,
	0, 202, 181, 240, 0, 183, 201, 149, 230, 194,
	239, 249, 250, 227, 247, 254, 217, 93, 226, 238,
	109, 212, 95, 236, 223, 160, 139, 140, 94, 0,
	198, 117, 125, 114, 173, 233, 234, 113, 257, 101,
	246, 97, 102, 245, 167, 229, 237, 161, 154, 96,
	235, 159, 153, 144, 121, 132, 191, 151, 192, 133,
	164, 163, 165, 0, 0, 0, 221, 243, 258, 106,
	0, 228, 252, 253, 0, 0, 107, 126, 120, 190,
	124, 166, 103, 135, 218, 143, 150, 197, 256, 180,
	203, 110, 242, 219, 360, 371, 366, 367, 364, 365,
	363, 362, 361, 374, 352, 353, 354, 355, 357, 0,
	368, 369, 356, 89, 98, 147, 255, 195, 123, 244,
	0, 0, 116, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 91, 92, 99, 105, 111,
	115, 119, 122, 128, 131, 134, 136, 137, 138, 141,
	152, 155, 156, 157, 158, 168, 169, 170, 172, 175,
	176, 177, 178, 179, 182, 184, 185, 186, 187, 188,
	189, 196, 199, 205, 206, 207, 208, 209, 210, 211,
	213, 214, 215, 216, 222, 225, 231, 232, 241, 248,
	251, 174, 0, 0, 0, 0, 316, 0, 0, 0,
	118, 0, 315, 0, 0, 0, 146, 0, 0, 359,
	148, 0, 0, 220, 162, 0, 0, 0, 0, 0,
	350, 351, 0, 0, 0, 0, 0, 0, 0, 0,
	377, 0, 0, 86, 87, 88, 337, 915, 339, 340,
	341, 342, 0, 0, 108, 338, 343, 344, 345, 0,
	0, 0, 313, 330, 0, 358, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 327, 328, 397, 0, 0,
	0, 373, 0, 329, 0, 0, 322, 323, 325, 324,
	326, 331, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 127, 372, 0, 0, 276, 0, 0, 370, 0,
	193, 0, 224, 130, 145, 104, 142, 90, 100, 0,
	129, 171, 200, 204, 0, 0, 0, 112, 0, 202,
	181, 240, 0, 183, 201, 149, 230, 194, 239, 249,
	250, 227, 247, 254, 217, 93, 226, 238, 109, 212,
	95, 236, 223, 160, 139, 140, 94, 0, 198, 117,
	125, 114, 173, 233, 234, 113, 257, 101, 246, 97,
	102, 245, 167, 229, 237, 161, 154, 96, 235, 159,
	153, 144, 121, 132, 191, 151, 192, 133, 164, 163,
	165, 0, 0, 0, 221, 243, 258, 106, 0, 228,
	252, 253, 0, 0, 107, 126, 120, 190, 124, 166,
	103, 135, 218, 143, 150, 197, 256, 180, 203, 110,
	242, 219, 360, 371, 366, 367, 364, 365, 363, 362,
	361, 374, 352, 353, 354, 355, 357, 0, 368, 369,
	356, 89, 98, 147, 255, 195, 123, 244, 0, 0,
	116, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 91, 92, 99, 105, 111, 115, 119,
	122, 128, 131, 134, 136, 137, 138, 141, 152, 155,
	156, 157, 158, 168, 169, 170, 172, 175, 176, 177,
	178, 179, 182, 184, 185, 186, 187, 188, 189, 196,
	199, 205, 206, 207, 208, 209, 210, 211, 213, 214,
	215, 216, 222, 225, 231, 232, 241, 248, 251, 27,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 174, 0, 0, 0, 0, 316, 0, 0, 0,
	118, 0, 315, 0, 0, 0, 146, 0, 0, 359,
	148, 0, 0, 220, 162, 0, 0, 0, 0, 0,
	350, 351, 0, 0, 0, 0, 0, 0, 0, 0,
	54, 0, 0, 86, 87, 88, 337, 336, 339, 340,
	341, 342, 0, 0, 108, 338, 343, 344, 345, 0,
	0, 0, 313, 330, 0, 358, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 327, 328, 0, 0, 0,
	0, 373, 0, 329, 0, 0, 322, 323, 325, 324,
	326, 331, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 127, 372, 0, 0, 276, 0, 0, 370, 0,
	193, 0, 224, 130, 145, 104, 142, 90, 100, 0,
	129, 171, 200, 204, 0, 0, 0, 112, 0, 202,
	181, 240, 0, 183, 201, 149, 230, 194, 239, 249,
	250, 227, 247, 254, 217, 93, 226, 238, 109, 212,
	95, 236, 223, 160, 139, 140, 94, 0, 198, 117,
	125, 114, 173, 233, 234, 113, 257, 101, 246, 97,
	102, 245, 167, 229, 237, 161, 154, 96, 235, 159,
	153, 144, 121, 132, 191, 151, 192, 133, 164, 163,
	165, 0, 0, 0, 221, 243, 258, 106, 0, 228,
	252, 253, 0, 0, 107, 126, 120, 190, 124, 166,
	103, 135, 218, 143, 150, 197, 256, 180, 203, 110,
	242, 219, 360, 371, 366, 367, 364, 365, 363, 362,
	361, 374, 352, 353, 354, 355, 357, 0, 368, 369,
	356, 89, 98, 147, 255, 195, 123, 244, 0, 0,
	116, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 91, 92, 99, 105, 111, 115, 119,
	122, 128, 131, 134, 136, 137, 138, 141, 152, 155,
	156, 157, 158, 168, 169, 170, 172, 175, 176, 177,
	178, 179, 182, 184, 185, 186, 187, 188, 189, 196,
	199, 205, 206, 207, 208, 209, 210, 211, 213, 214,
	215, 216, 222, 225, 231, 232, 241, 248, 251, 174,
	0, 0, 0, 0, 316, 0, 0, 0, 118, 0,
	315, 0, 0, 0, 146, 0, 0, 359, 148, 0,
	0, 220, 162, 0, 0, 0, 0, 0, 350, 351,
	0, 0, 0, 0, 0, 0, 0, 0, 377, 0,
	0, 86, 87, 88, 337, 336, 339, 340, 341, 342,
	0, 0, 108, 338, 343, 344, 345, 0, 0, 0,
	313, 330, 0, 358, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 327, 328, 0, 0, 0, 0, 373,
	0, 329, 0, 0, 322, 323, 325, 324, 326, 331,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 127,
	372, 0, 0, 276, 0, 0, 370, 0, 193, 0,
	224, 130, 145, 104, 142, 90, 100, 0, 129, 171,
	200, 204, 0, 0, 0, 112, 0, 202, 181, 240,
	0, 183, 201, 149, 230, 194, 239, 249, 250, 227,
	247, 254, 217, 93, 226, 238, 109, 212, 95, 236,
	223, 160, 139, 140, 94, 0, 198, 117, 125, 114,
	173, 233, 234, 113, 257, 101, 246, 97, 102, 245,
	167, 229, 237, 161, 154, 96, 235, 159, 153, 144,
	121, 132, 191, 151, 192, 133, 164, 163, 165, 0,
	0, 0, 221, 243, 258, 106, 0, 228, 252, 253,
	0, 0, 107, 126, 120, 190, 124, 166, 103, 135,
	218, 143, 150, 197, 256, 180, 203, 110, 242, 219,
	360, 371, 366, 367, 364, 365, 363, 362, 361, 374,
	352, 353, 354, 355, 357, 0, 368, 369, 356, 89,
	98, 147, 255, 195, 123, 244, 0, 0, 116, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 91, 92, 99, 105, 111, 115, 119, 122, 128,
	131, 134, 136, 137, 138, 141, 152, 155, 156, 157,
	158, 168, 169, 170, 172, 175, 176, 177, 178, 179,
	182, 184, 185, 186, 187, 188, 189, 196, 199, 205,
	206, 207, 208, 209, 210, 211, 213, 214, 215, 216,
	222, 225, 231, 232, 241, 248, 251, 174, 0, 0,
	0, 0, 0, 0, 0, 0, 118, 0, 0, 0,
	0, 0, 146, 0, 0, 359, 148, 0, 0, 220,
	162, 0, 0, 0, 0, 0, 350, 351, 0, 0,
	0, 0, 0, 0, 0, 0, 377, 0, 0, 86,
	87, 88, 337, 336, 339, 340, 341, 342, 0, 0,
	108, 338, 343, 344, 345, 0, 0, 0, 0, 330,
	0, 358, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 327, 328, 0, 0, 0, 0, 373, 0, 329,
	0, 0, 322, 323, 325, 324, 326, 331, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 127, 372, 0,
	0, 276, 0, 0, 370, 0, 193, 0, 224, 130,
	145, 104, 142, 90, 100, 0, 129, 171, 200, 204,
	0, 0, 0, 112, 0, 202, 181, 240, 1572, 183,
	201, 149, 230, 194, 239, 249, 250, 227, 247, 254,
	217, 93, 226, 238, 109, 212, 95, 236, 223, 160,
	139, 140, 94, 0, 198, 117, 125, 114, 173, 233,
	234, 113, 257, 101, 246, 97, 102, 245, 167, 229,
	237, 161, 154, 96, 235, 159, 153, 144, 121, 132,
	191, 151, 192, 133, 164, 163, 165, 0, 0, 0,
	221, 243, 258, 106, 0, 228, 252, 253, 0, 0,
	107, 126, 120, 190, 124, 166, 103, 135, 218, 143,
	150, 197, 256, 180, 203, 110, 242, 219, 360, 371,
	366, 367, 364, 365, 363, 362, 361, 374, 352, 353,
	354, 355, 357, 0, 368, 369, 356, 89, 98, 147,
	255, 195, 123, 244, 0, 0, 116, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 91,
	92, 99, 105, 111, 115, 119, 122, 128, 131, 134,
	136, 137, 138, 141, 152, 155, 156, 157, 158, 168,
	169, 170, 172, 175, 176, 177, 178, 179, 182, 184,
	185, 186, 187, 188, 189, 196, 199, 205, 206, 207,
	208, 209, 210, 211, 213, 214, 215, 216, 222, 225,
	231, 232, 241, 248, 251, 174, 0, 0, 0, 0,
	0, 0, 0, 0, 118, 0, 0, 0, 0, 0,
	146, 0, 0, 359, 148, 0, 0, 220, 162, 0,
	0, 0, 0, 0, 350, 351, 0, 0, 0, 0,
	0, 0, 0, 0, 377, 0, 703, 86, 87, 88,
	337, 336, 339, 340, 341, 342, 0, 0, 108, 338,
	343, 344, 345, 0, 0, 0, 0, 330, 0, 358,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 327,
	328, 0, 0, 0, 0, 373, 0, 329, 0, 0,
	322, 323, 325, 324, 326, 331, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 127, 372, 0, 0, 276,
	0, 0, 370, 0, 193, 0, 224, 130, 145, 104,
	142, 90, 100, 0, 129, 171, 200, 204, 0, 0,
	0, 112, 0, 202, 181, 240, 0, 183, 201, 149,
	230, 194, 239, 249, 250, 227, 247, 254, 217, 93,
	226, 238, 109, 212, 95, 236, 223, 160, 139, 140,
	94, 0, 198, 117, 125, 114, 173, 233, 234, 113,
	257, 101, 246, 97, 102, 245, 167, 229, 237, 161,
	154, 96, 235, 159, 153, 144, 121, 132, 191, 151,
	192, 133, 164, 163, 165, 0, 0, 0, 221, 243,
	258, 106, 0, 228, 252, 253, 0, 0, 107, 126,
	120, 190, 124, 166, 103, 135, 218, 143, 150, 197,
	256, 180, 203, 110, 242, 219, 360, 371, 366, 367,
	364, 365, 363, 362, 361, 374, 352, 353, 354, 355,
	357, 0, 368, 369, 356, 89, 98, 147, 255, 195,
	123, 244, 0, 0, 116, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 91, 92, 99,
	105, 111, 115, 119, 122, 128, 131, 134, 136, 137,
	138, 141, 152, 155, 156, 157, 158, 168, 169, 170,
	172, 175, 176, 177, 178, 179, 182, 184, 185, 186,
	187, 188, 189, 196, 199, 205, 206, 207, 208, 209,
	210, 211, 213, 214, 215, 216, 222, 225, 231, 232,
	241, 248, 251, 174, 0, 0, 0, 0, 0, 0,
	0, 0, 118, 0, 0, 0, 0, 0, 146, 0,
	0, 359, 148, 0, 0, 220, 162, 0, 0, 0,
	0, 0, 350, 351, 0, 0, 0, 0, 0, 0,
	0, 0, 377, 0, 0, 86, 87, 88, 337, 336,
	339, 340, 341, 342, 0, 0, 108, 338, 343, 344,
	345, 0, 0, 0, 0, 330, 0, 358, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 327, 328, 0,
	0, 0, 0, 373, 0, 329, 0, 0, 322, 323,
	325, 324, 326, 331, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 127, 372, 0, 0, 276, 0, 0,
	370, 0, 193, 0, 224, 130, 145, 104, 142, 90,
	100, 0, 129, 171, 200, 204, 0, 0, 0, 112,
	0, 202, 181, 240, 0, 183, 201, 149, 230, 194,
	239, 249, 250, 227, 247, 254, 217, 93, 226, 238,
	109, 212, 95, 236, 223, 160, 139, 140, 94, 0,
	198, 117, 125, 114, 173, 233, 234, 113, 257, 101,
	246, 97, 102, 245, 167, 229, 237, 161, 154, 96,
	235, 159, 153, 144, 121, 132, 191, 151, 192, 133,
	164, 163, 165, 0, 0, 0, 221, 243, 258, 106,
	0, 228, 252, 253, 0, 0, 107, 126, 120, 190,
	124, 166, 103, 135, 218, 143, 150, 197, 256, 180,
	203, 110, 242, 219, 360, 371, 366, 367, 364, 365,
	363, 362, 361, 374, 352, 353, 354, 355, 357, 0,
	368, 369, 356, 89, 98, 147, 255, 195, 123, 244,
	0, 0, 116, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 91, 92, 99, 105, 111,
	115, 119, 122, 128, 131, 134, 136, 137, 138, 141,
	152, 155, 156, 157, 158, 168, 169, 170, 172, 175,
	176, 177, 178, 179, 182, 184, 185, 186, 187, 188,
	189, 196, 199, 205, 206, 207, 208, 209, 210, 211,
	213, 214, 215, 216, 222, 225, 231, 232, 241, 248,
	251, 174, 0, 0, 0, 0, 0, 0, 0, 0,
	118, 0, 0, 0, 0, 0, 146, 0, 0, 0,
	148, 0, 0, 220, 162, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 86, 87, 88, 0, 0, 0, 0,
	0, 0, 0, 0, 108, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 626, 625, 635, 636, 628, 629, 630, 631, 632,
	633, 634, 627, 0, 0, 637, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 127, 0, 0, 0, 276, 0, 0, 0, 0,
	193, 0, 224, 130, 145, 104, 142, 90, 100, 0,
	129, 171, 200, 204, 0, 0, 0, 112, 0, 202,
	181, 240, 0, 183, 201, 149, 230, 194, 239, 249,
	250, 227, 247, 254, 217, 93, 226, 238, 109, 212,
	95, 236, 223, 160, 139, 140, 94, 0, 198, 117,
	125, 114, 173, 233, 234, 113, 257, 101, 246, 97,
	102, 245, 167, 229, 237, 161, 154, 96, 235, 159,
	153, 144, 121, 132, 191, 151, 192, 133, 164, 163,
	165, 0, 0, 0, 221, 243, 258, 106, 0, 228,
	252, 253, 0, 0, 107, 126, 120, 190, 124, 166,
	103, 135, 218, 143, 150, 197, 256, 180, 203, 110,
	242, 219, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 89, 98, 147, 255, 195, 123, 244, 0, 0,
	116, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 91, 92, 99, 105, 111, 115, 119,
	122, 128, 131, 134, 136, 137, 138, 141, 152, 155,
	156, 157, 158, 168, 169, 170, 172, 175, 176, 177,
	178, 179, 182, 184, 185, 186, 187, 188, 189, 196,
	199, 205, 206, 207, 208, 209, 210, 211, 213, 214,
	215, 216, 222, 225, 231, 232, 241, 248, 251, 174,
	0, 0, 0, 717, 0, 0, 0, 0, 118, 0,
	0, 0, 0, 0, 146, 0, 0, 0, 148, 0,
	0, 220, 162, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 86, 87, 88, 0, 719, 0, 0, 0, 0,
	0, 0, 108, 0, 0, 0, 0, 0, 616, 615,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 617, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 127,
	0, 0, 0, 276, 0, 0, 0, 0, 193, 0,
	224, 130, 145, 104, 142, 90, 100, 0, 129, 171,
	200, 204, 0, 0, 0, 112, 0, 202, 181, 240,
	0, 183, 201, 149, 230, 194, 239, 249, 250, 227,
	247, 254, 217, 93, 226, 238, 109, 212, 95, 236,
	223, 160, 139, 140, 94, 0, 198, 117, 125, 114,
	173, 233, 234, 113, 257, 101, 246, 97, 102, 245,
	167, 229, 237, 161, 154, 96, 235, 159, 153, 144,
	121, 132, 191, 151, 192, 133, 164, 163, 165, 0,
	0, 0, 221, 243, 258, 106, 0, 228, 252, 253,
	0, 0, 107, 126, 120, 190, 124, 166, 103, 135,
	218, 143, 150, 197, 256, 180, 203, 110, 242, 219,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 89,
	98, 147, 255, 195, 123, 244, 0, 0, 116, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 91, 92, 99, 105, 111, 115, 119, 122, 128,
	131, 134, 136, 137, 138, 141, 152, 155, 156, 157,
	158, 168, 169, 170, 172, 175, 176, 177, 178, 179,
	182, 184, 185, 186, 187, 188, 189, 196, 199, 205,
	206, 207, 208, 209, 210, 211, 213, 214, 215, 216,
	222, 225, 231, 232, 241, 248, 251, 174, 0, 0,
	0, 0, 0, 0, 0, 0, 118, 0, 0, 0,
	0, 0, 146, 0, 0, 0, 148, 0, 0, 220,
	162, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	87, 88, 0, 0, 0, 0, 0, 0, 0, 0,
	108, 0, 0, 0, 0, 0, 78, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 127, 80, 81,
	0, 77, 0, 0, 0, 82, 193, 0, 224, 130,
	145, 104, 142, 90, 100, 0, 129, 171, 200, 204,
	0, 0, 0, 112, 0, 202, 181, 240, 0, 183,
	201, 149, 230, 194, 239, 249, 250, 227, 247, 254,
	217, 93, 226, 238, 109, 212, 95, 236, 223, 160,
	139, 140, 94, 0, 198, 117, 125, 114, 173, 233,
	234, 113, 257, 101, 246, 97, 102, 245, 167, 229,
	237, 161, 154, 96, 235, 159, 153, 144, 121, 132,
	191, 151, 192, 133, 164, 163, 165, 0, 0, 0,
	221, 243, 258, 106, 0, 228, 252, 253, 0, 0,
	107, 126, 120, 190, 124, 166, 103, 135, 218, 143,
	150, 197, 256, 180, 203, 110, 242, 219, 0, 79,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 89, 98, 147,
	255, 195, 123, 244, 0, 0, 116, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 91,
	92, 99, 105, 111, 115, 119, 122, 128, 131, 134,
	136, 137, 138, 141, 152, 155, 156, 157, 158, 168,
	169, 170, 172, 175, 176, 177, 178, 179, 182, 184,
	185, 186, 187, 188, 189, 196, 199, 205, 206, 207,
	208, 209, 210, 211, 213, 214, 215, 216, 222, 225,
	231, 232, 241, 248, 251, 174, 0, 0, 0, 0,
	0, 0, 0, 0, 118, 0, 0, 0, 0, 0,
	146, 0, 0, 0, 148, 0, 0, 220, 162, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 87, 88,
	0, 0, 0, 0, 0, 0, 0, 0, 108, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 304, 0, 127, 0, 0, 0, 276,
	0, 0, 0, 0, 193, 0, 224, 130, 145, 104,
	142, 90, 100, 0, 129, 171, 200, 204, 0, 0,
	0, 112, 0, 202, 181, 240, 0, 183, 201, 149,
	230, 194, 239, 249, 250, 227, 247, 254, 217, 93,
	226, 238, 109, 212, 95, 236, 223, 160, 139, 140,
	94, 0, 198, 117, 125, 114, 173, 233, 234, 113,
	257, 101, 246, 97, 102, 245, 167, 229, 237, 161,
	154, 96, 235, 159, 153, 144, 121, 132, 191, 151,
	192, 133, 164, 163, 165, 0, 0, 0, 221, 243,
	258, 106, 0, 228, 252, 253, 0, 0, 107, 126,
	120, 190, 124, 166, 103, 135, 218, 143, 150, 197,
	256, 180, 203, 110, 242, 219, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 89, 98, 147, 255, 195,
	123, 244, 0, 0, 116, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 91, 92, 99,
	105, 111, 115, 119, 122, 128, 131, 134, 136, 137,
	138, 141, 152, 155, 156, 157, 158, 168, 169, 170,
	172, 175, 176, 177, 178, 179, 182, 184, 185, 186,
	187, 188, 189, 196, 199, 205, 206, 207, 208, 209,
	210, 211, 213, 214, 215, 216, 222, 225, 231, 232,
	241, 248, 251, 303, 174, 0, 0, 0, 978, 0,
	0, 0, 0, 118, 0, 0, 0, 0, 0, 146,
	0, 0, 0, 148, 0, 0, 220, 162, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 86, 87, 88, 0,
	980, 0, 0, 0, 0, 0, 0, 108, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 127, 0, 0, 0, 276, 0,
	0, 0, 0, 193, 0, 224, 130, 145, 104, 142,
	90, 100, 0, 129, 171, 200, 204, 0, 0, 0,
	112, 0, 202, 181, 240, 0, 183, 201, 149, 230,
	194, 239, 249, 250, 227, 247, 254, 217, 93, 226,
	238, 109, 212, 95, 236, 223, 160, 139, 140, 94,
	0, 198, 117, 125, 114, 173, 233, 234, 113, 257,
	101, 246, 97, 102, 245, 167, 229, 237, 161, 154,
	96, 235, 159, 153, 144, 121, 132, 191, 151, 192,
	133, 164, 163, 165, 0, 0, 0, 221, 243, 258,
	106, 0, 228, 252, 253, 0, 0, 107, 126, 120,
	190, 124, 166, 103, 135, 218, 143, 150, 197, 256,
	180, 203, 110, 242, 219, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 89, 98, 147, 255, 195, 123,
	244, 0, 0, 116, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 91, 92, 99, 105,
	111, 115, 119, 122, 128, 131, 134, 136, 137, 138,
	141, 152, 155, 156, 157, 158, 168, 169, 170, 172,
	175, 176, 177, 178, 179, 182, 184, 185, 186, 187,
	188, 189, 196, 199, 205, 206, 207, 208, 209, 210,
	211, 213, 214, 215, 216, 222, 225, 231, 232, 241,
	248, 251, 27, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 174, 0, 0, 0, 0, 0,
	0, 0, 0, 118, 0, 0, 0, 0, 0, 146,
	0, 0, 0, 148, 0, 0, 220, 162, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 54, 0, 0, 86, 87, 88, 0,
	0, 0, 0, 0, 0, 0, 0, 108, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 127, 0, 0, 0, 276, 0,
	0, 0, 0, 193, 0, 224, 130, 145, 104, 142,
	90, 100, 0, 129, 171, 200, 204, 0, 0, 0,
	112, 0, 202, 181, 240, 0, 183, 201, 149, 230,
	194, 239, 249, 250, 227, 247, 254, 217, 93, 226,
	238, 109, 212, 95, 236, 223, 160, 139, 140, 94,
	0, 198, 117, 125, 114, 173, 233, 234, 113, 257,
	101, 246, 97, 102, 245, 167, 229, 237, 161, 154,
	96, 235, 159, 153, 144, 121, 132, 191, 151, 192,
	133, 164, 163, 165, 0, 0, 0, 221, 243, 258,
	106, 0, 228, 252, 253, 0, 0, 107, 126, 120,
	190, 124, 166, 103, 135, 218, 143, 150, 197, 256,
	180, 203, 110, 242, 219, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 89, 98, 147, 255, 195, 123,
	244, 0, 0, 116, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 91, 92, 99, 105,
	111, 115, 119, 122, 128, 131, 134, 136, 137, 138,
	141, 152, 155, 156, 157, 158, 168, 169, 170, 172,
	175, 176, 177, 178, 179, 182, 184, 185, 186, 187,
	188, 189, 196, 199, 205, 206, 207, 208, 209, 210,
	211, 213, 214, 215, 216, 222, 225, 231, 232, 241,
	248, 251, 174, 0, 0, 0, 978, 0, 0, 0,
	0, 118, 0, 0, 0, 0, 0, 146, 0, 0,
	0, 148, 0, 0, 220, 162, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 87, 88, 0, 980, 0,
	0, 0, 0, 0, 0, 108, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 127, 0, 0, 0, 276, 0, 0, 0,
	0, 193, 0, 224, 130, 145, 104, 142, 90, 100,
	0, 129, 171, 200, 204, 0, 0, 0, 112, 0,
	202, 181, 240, 0, 976, 201, 149, 230, 194, 239,
	249, 250, 227, 247, 254, 217, 93, 226, 238, 109,
	212, 95, 236, 223, 160, 139, 140, 94, 0, 198,
	117, 125, 114, 173, 233, 234, 113, 257, 101, 246,
	97, 102, 245, 167, 229, 237, 161, 154, 96, 235,
	159, 153, 144, 121, 132, 191, 151, 192, 133, 164,
	163, 165, 0, 0, 0, 221, 243, 258, 106, 0,
	228, 252, 253, 0, 0, 107, 126, 120, 190, 124,
	166, 103, 135, 218, 143, 150, 197, 256, 180, 203,
	110, 242, 219, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 89, 98, 147, 255, 195, 123, 244, 0,
	0, 116, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 91, 92, 99, 105, 111, 115,
	119, 122, 128, 131, 134, 136, 137, 138, 141, 152,
	155, 156, 157, 158, 168, 169, 170, 172, 175, 176,
	177, 178, 179, 182, 184, 185, 186, 187, 188, 189,
	196, 199, 205, 206, 207, 208, 209, 210, 211, 213,
	214, 215, 216, 222, 225, 231, 232, 241, 248, 251,
	174, 0, 0, 0, 0, 0, 0, 0, 0, 118,
	0, 0, 0, 0, 0, 146, 0, 0, 0, 148,
	0, 0, 220, 162, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 87, 88, 0, 0, 945, 0, 0,
	946, 0, 0, 108, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	127, 0, 0, 0, 276, 0, 0, 0, 0, 193,
	0, 224, 130, 145, 104, 142, 90, 100, 0, 129,
	171, 200, 204, 0, 0, 0, 112, 0, 202, 181,
	240, 0, 183, 201, 149, 230, 194, 239, 249, 250,
	227, 247, 254, 217, 93, 226, 238, 109, 212, 95,
	236, 223, 160, 139, 140, 94, 0, 198, 117, 125,
	114, 173, 233, 234, 113, 257, 101, 246, 97, 102,
	245, 167, 229, 237, 161, 154, 96, 235, 159, 153,
	144, 121, 132, 191, 151, 192, 133, 164, 163, 165,
	0, 0, 0, 221, 243, 258, 106, 0, 228, 252,
	253, 0, 0, 107, 126, 120, 190, 124, 166, 103,
	135, 218, 143, 150, 197, 256, 180, 203, 110, 242,
	219, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	89, 98, 147, 255, 195, 123, 244, 0, 0, 116,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 91, 92, 99, 105, 111, 115, 119, 122,
	128, 131, 134, 136, 137, 138, 141, 152, 155, 156,
	157, 158, 168, 169, 170, 172, 175, 176, 177, 178,
	179, 182, 184, 185, 186, 187, 188, 189, 196, 199,
	205, 206, 207, 208, 209, 210, 211, 213, 214, 215,
	216, 222, 225, 231, 232, 241, 248, 251, 174, 0,
	0, 0, 0, 0, 0, 0, 0, 118, 0, 752,
	0, 0, 0, 146, 0, 0, 0, 148, 0, 0,
	220, 162, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 87, 88, 0, 751, 0, 0, 0, 0, 0,
	0, 108, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 127, 0,
	0, 0, 276, 0, 0, 0, 0, 193, 0, 224,
	130, 145, 104, 142, 90, 100, 0, 129, 171, 200,
	204, 0, 0, 0, 112, 0, 202, 181, 240, 0,
	183, 201, 149, 230, 194, 239, 249, 250, 227, 247,
	254, 217, 93, 226, 238, 109, 212, 95, 236, 223,
	160, 139, 140, 94, 0, 198, 117, 125, 114, 173,
	233, 234, 113, 257, 101, 246, 97, 102, 245, 167,
	229, 237, 161, 154, 96, 235, 159, 153, 144, 121,
	132, 191, 151, 192, 133, 164, 163, 165, 0, 0,
	0, 221, 243, 258, 106, 0, 228, 252, 253, 0,
	0, 107, 126, 120, 190, 124, 166, 103, 135, 218,
	143, 150, 197, 256, 180, 203, 110, 242, 219, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 89, 98,
	147, 255, 195, 123, 244, 0, 0, 116, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	91, 92, 99, 105, 111, 115, 119, 122, 128, 131,
	134, 136, 137, 138, 141, 152, 155, 156, 157, 158,
	168, 169, 170, 172, 175, 176, 177, 178, 179, 182,
	184, 185, 186, 187, 188, 189, 196, 199, 205, 206,
	207, 208, 209, 210, 211, 213, 214, 215, 216, 222,
	225, 231, 232, 241, 248, 251, 174, 0, 0, 0,
	0, 0, 0, 0, 0, 118, 0, 0, 0, 0,
	0, 146, 0, 0, 0, 148, 0, 0, 220, 162,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 703, 86, 87,
	88, 0, 0, 0, 0, 0, 0, 0, 0, 108,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 127, 0, 0, 0,
	276, 0, 0, 0, 0, 193, 0, 224, 130, 145,
	104, 142, 90, 100, 0, 129, 171, 200, 204, 0,
	0, 0, 112, 0, 202, 181, 240, 0, 183, 201,
	149, 230, 194, 239, 249, 250, 227, 247, 254, 217,
	93, 226, 238, 109, 212, 95, 236, 223, 160, 139,
	140, 94, 0, 198, 117, 125, 114, 173, 233, 234,
	113, 257, 101, 246, 97, 102, 245, 167, 229, 237,
	161, 154, 96, 235, 159, 153, 144, 121, 132, 191,
	151, 192, 133, 164, 163, 165, 0, 0, 0, 221,
	243, 258, 106, 0, 228, 252, 253, 0, 0, 107,
	126, 120, 190, 124, 166, 103, 135, 218, 143, 150,
	197, 256, 180, 203, 110, 242, 219, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 89, 98, 147, 255,
	195, 123, 244, 0, 0, 116, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 91, 92,
	99, 105, 111, 115, 119, 122, 128, 131, 134, 136,
	137, 138, 141, 152, 155, 156, 157, 158, 168, 169,
	170, 172, 175, 176, 177, 178, 179, 182, 184, 185,
	186, 187, 188, 189, 196, 199, 205, 206, 207, 208,
	209, 210, 211, 213, 214, 215, 216, 222, 225, 231,
	232, 241, 248, 251, 174, 0, 0, 0, 0, 0,
	0, 0, 0, 118, 0, 0, 0, 0, 0, 146,
	0, 0, 0, 148, 0, 0, 220, 162, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 377, 0, 0, 86, 87, 88, 0,
	0, 0, 0, 0, 0, 0, 0, 108, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 127, 0, 0, 0, 276, 0,
	0, 0, 0, 193, 0, 224, 130, 145, 104, 142,
	90, 100, 0, 129, 171, 200, 204, 0, 0, 0,
	112, 0, 202, 181, 240, 0, 183, 201, 149, 230,
	194, 239, 249, 250, 227, 247, 254, 217, 93, 226,
	238, 109, 212, 95, 236, 223, 160, 139, 140, 94,
	0, 198, 117, 125, 114, 173, 233, 234, 113, 257,
	101, 246, 97, 102, 245, 167, 229, 237, 161, 154,
	96, 235, 159, 153, 144, 121, 132, 191, 151, 192,
	133, 164, 163, 165, 0, 0, 0, 221, 243, 258,
	106, 0, 228, 252, 253, 0, 0, 107, 126, 120,
	190, 124, 166, 103, 135, 218, 143, 150, 197, 256,
	180, 203, 110, 242, 219, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 89, 98, 147, 255, 195, 123,
	244, 0, 0, 116, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 91, 92, 99, 105,
	111, 115, 119, 122, 128, 131, 134, 136, 137, 138,
	141, 152, 155, 156, 157, 158, 168, 169, 170, 172,
	175, 176, 177, 178, 179, 182, 184, 185, 186, 187,
	188, 189, 196, 199, 205, 206, 207, 208, 209, 210,
	211, 213, 214, 215, 216, 222, 225, 231, 232, 241,
	248, 251, 174, 0, 0, 0, 0, 0, 0, 0,
	0, 118, 0, 0, 0, 0, 0, 146, 0, 0,
	0, 148, 0, 0, 220, 162, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 87, 88, 0, 980, 0,
	0, 0, 0, 0, 0, 108, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 127, 0, 0, 0, 276, 0, 0, 0,
	0, 193, 0, 224, 130, 145, 104, 142, 90, 100,
	0, 129, 171, 200, 204, 0, 0, 0, 112, 0,
	202, 181, 240, 0, 183, 201, 149, 230, 194, 239,
	249, 250, 227, 247, 254, 217, 93, 226, 238, 109,
	212, 95, 236, 223, 160, 139, 140, 94, 0, 198,
	117, 125, 114, 173, 233, 234, 113, 257, 101, 246,
	97, 102, 245, 167, 229, 237, 161, 154, 96, 235,
	159, 153, 144, 121, 132, 191, 151, 192, 133, 164,
	163, 165, 0, 0, 0, 221, 243, 258, 106, 0,
	228, 252, 253, 0, 0, 107, 126, 120, 190, 124,
	166, 103, 135, 218, 143, 150, 197, 256, 180, 203,
	110, 242, 219, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 89, 98, 147, 255, 195, 123, 244, 0,
	0, 116, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 91, 92, 99, 105, 111, 115,
	119, 122, 128, 131, 134, 136, 137, 138, 141, 152,
	155, 156, 157, 158, 168, 169, 170, 172, 175, 176,
	177, 178, 179, 182, 184, 185, 186, 187, 188, 189,
	196, 199, 205, 206, 207, 208, 209, 210, 211, 213,
	214, 215, 216, 222, 225, 231, 232, 241, 248, 251,
	174, 0, 0, 0, 0, 0, 0, 0, 0, 118,
	0, 0, 0, 0, 0, 146, 0, 0, 0, 148,
	0, 0, 220, 162, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 87, 88, 0, 719, 0, 0, 0,
	0, 0, 0, 108, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	127, 0, 0, 0, 276, 0, 0, 0, 0, 193,
	0, 224, 130, 145, 104, 142, 90, 100, 0, 129,
	171, 200, 204, 0, 0, 0, 112, 0, 202, 181,
	240, 0, 183, 201, 149, 230, 194, 239, 249, 250,
	227, 247, 254, 217, 93, 226, 238, 109, 212, 95,
	236, 223, 160, 139, 140, 94, 0, 198, 117, 125,
	114, 173, 233, 234, 113, 257, 101, 246, 97, 102,
	245, 167, 229, 237, 161, 154, 96, 235, 159, 153,
	144, 121, 132, 191, 151, 192, 133, 164, 163, 165,
	0, 0, 0, 221, 243, 258, 106, 0, 228, 252,
	253, 0, 0, 107, 126, 120, 190, 124, 166, 103,
	135, 218, 143, 150, 197, 256, 180, 203, 110, 242,
	219, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	89, 98, 147, 255, 195, 123, 244, 0, 0, 116,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 91, 92, 99, 105, 111, 115, 119, 122,
	128, 131, 134, 136, 137, 138, 141, 152, 155, 156,
	157, 158, 168, 169, 170, 172, 175, 176, 177, 178,
	179, 182, 184, 185, 186, 187, 188, 189, 196, 199,
	205, 206, 207, 208, 209, 210, 211, 213, 214, 215,
	216, 222, 225, 231, 232, 241, 248, 251, 174, 0,
	0, 0, 0, 0, 0, 0, 722, 118, 0, 0,
	0, 0, 0, 146, 0, 0, 0, 148, 0, 0,
	220, 162, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 87, 88, 0, 0, 0, 0, 0, 0, 0,
	0, 108, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 127, 0,
	0, 0, 276, 0, 0, 0, 0, 193, 0, 224,
	130, 145, 104, 142, 90, 100, 0, 129, 171, 200,
	204, 0, 0, 0, 112, 0, 202, 181, 240, 0,
	183, 201, 149, 230, 194, 239, 249, 250, 227, 247,
	254, 217, 93, 226, 238, 109, 212, 95, 236, 223,
	160, 139, 140, 94, 0, 198, 117, 125, 114, 173,
	233, 234, 113, 257, 101, 246, 97, 102, 245, 167,
	229, 237, 161, 154, 96, 235, 159, 153, 144, 121,
	132, 191, 151, 192, 133, 164, 163, 165, 0, 0,
	0, 221, 243, 258, 106, 0, 228, 252, 253, 0,
	0, 107, 126, 120, 190, 124, 166, 103, 135, 218,
	143, 150, 197, 256, 180, 203, 110, 242, 219, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 89, 98,
	147, 255, 195, 123, 244, 0, 0, 116, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	91, 92, 99, 105, 111, 115, 119, 122, 128, 131,
	134, 136, 137, 138, 141, 152, 155, 156, 157, 158,
	168, 169, 170, 172, 175, 176, 177, 178, 179, 182,
	184, 185, 186, 187, 188, 189, 196, 199, 205, 206,
	207, 208, 209, 210, 211, 213, 214, 215, 216, 222,
	225, 231, 232, 241, 248, 251, 174, 0, 0, 0,
	0, 0, 0, 0, 0, 118, 0, 0, 0, 0,
	0, 146, 0, 0, 0, 148, 0, 0, 220, 162,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 86, 87,
	88, 0, 605, 0, 0, 0, 0, 0, 0, 108,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 127, 0, 0, 0,
	276, 0, 0, 0, 0, 193, 0, 224, 130, 145,
	104, 142, 90, 100, 0, 129, 171, 200, 204, 0,
	0, 0, 112, 0, 202, 181, 240, 0, 183, 201,
	149, 230, 194, 239, 249, 250, 227, 247, 254, 217,
	93, 226, 238, 109, 212, 95, 236, 223, 160, 139,
	140, 94, 0, 198, 117, 125, 114, 173, 233, 234,
	113, 257, 101, 246, 97, 102, 245, 167, 229, 237,
	161, 154, 96, 235, 159, 153, 144, 121, 132, 191,
	151, 192, 133, 164, 163, 165, 0, 0, 0, 221,
	243, 258, 106, 0, 228, 252, 253, 0, 0, 107,
	126, 120, 190, 124, 166, 103, 135, 218, 143, 150,
	197, 256, 180, 203, 110, 242, 219, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 89, 98, 147, 255,
	195, 123, 244, 0, 0, 116, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 91, 92,
	99, 105, 111, 115, 119, 122, 128, 131, 134, 136,
	137, 138, 141, 152, 155, 156, 157, 158, 168, 169,
	170, 172, 175, 176, 177, 178, 179, 182, 184, 185,
	186, 187, 188, 189, 196, 199, 205, 206, 207, 208,
	209, 210, 211, 213, 214, 215, 216, 222, 225, 231,
	232, 241, 248, 251, 402, 0, 0, 0, 0, 0,
	0, 174, 0, 0, 0, 0, 0, 0, 0, 0,
	118, 0, 0, 0, 0, 0, 146, 0, 0, 0,
	148, 0, 0, 220, 162, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 86, 87, 88, 0, 0, 0, 0,
	0, 0, 0, 0, 108, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 127, 0, 0, 0, 276, 0, 0, 0, 0,
	193, 0, 224, 130, 145, 104, 142, 90, 100, 0,
	129, 171, 200, 204, 0, 0, 0, 112, 0, 202,
	181, 240, 0, 183, 201, 149, 230, 194, 239, 249,
	250, 227, 247, 254, 217, 93, 226, 238, 109, 212,
	95, 236, 223, 160, 139, 140, 94, 0, 198, 117,
	125, 114, 173, 233, 234, 113, 257, 101, 246, 97,
	102, 245, 167, 229, 237, 161, 154, 96, 235, 159,
	153, 144, 121, 132, 191, 151, 192, 133, 164, 163,
	165, 0, 0, 0, 221, 243, 258, 106, 0, 228,
	252, 253, 0, 0, 107, 126, 120, 190, 124, 166,
	103, 135, 218, 143, 150, 197, 256, 180, 203, 110,
	242, 219, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 89, 98, 147, 255, 195, 123, 244, 0, 0,
	116, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 91, 92, 99, 105, 111, 115, 119,
	122, 128, 131, 134, 136, 137, 138, 141, 152, 155,
	156, 157, 158, 168, 169, 170, 172, 175, 176, 177,
	178, 179, 182, 184, 185, 186, 187, 188, 189, 196,
	199, 205, 206, 207, 208, 209, 210, 211, 213, 214,
	215, 216, 222, 225, 231, 232, 241, 248, 251, 174,
	0, 0, 0, 0, 0, 0, 0, 0, 118, 0,
	0, 0, 0, 0, 146, 0, 0, 0, 148, 0,
	0, 220, 162, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 86, 87, 88, 0, 0, 0, 0, 0, 0,
	0, 0, 108, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 127,
	0, 271, 0, 276, 0, 0, 0, 0, 193, 0,
	224, 130, 145, 104, 142, 90, 100, 0, 129, 171,
	200, 204, 0, 0, 0, 112, 0, 202, 181, 240,
	0, 183, 201, 149, 230, 194, 239, 249, 250, 227,
	247, 254, 217, 93, 226, 238, 109, 212, 95, 236,
	223, 160, 139, 140, 94, 0, 198, 117, 125, 114,
	173, 233, 234, 113, 257, 101, 246, 97, 102, 245,
	167, 229, 237, 161, 154, 96, 235, 159, 153, 144,
	121, 132, 191, 151, 192, 133, 164, 163, 165, 0,
	0, 0, 221, 243, 258, 106, 0, 228, 252, 253,
	0, 0, 107, 126, 120, 190, 124, 166, 103, 135,
	218, 143, 150, 197, 256, 180, 203, 110, 242, 219,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 89,
	98, 147, 255, 195, 123, 244, 0, 0, 116, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 91, 92, 99, 105, 111, 115, 119, 122, 128,
	131, 134, 136, 137, 138, 141, 152, 155, 156, 157,
	158, 168, 169, 170, 172, 175, 176, 177, 178, 179,
	182, 184, 185, 186, 187, 188, 189, 196, 199, 205,
	206, 207, 208, 209, 210, 211, 213, 214, 215, 216,
	222, 225, 231, 232, 241, 248, 251, 174, 0, 0,
	0, 0, 0, 0, 0, 0, 118, 0, 0, 0,
	0, 0, 146, 0, 0, 0, 148, 0, 0, 220,
	162, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	87, 88, 0, 0, 0, 0, 0, 0, 0, 0,
	108, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 127, 0, 0,
	0, 276, 0, 0, 0, 0, 193, 0, 224, 130,
	145, 104, 142, 90, 100, 0, 129, 171, 200, 204,
	0, 0, 0, 112, 0, 202, 181, 240, 0, 183,
	201, 149, 230, 194, 239, 249, 250, 227, 247, 254,
	217, 93, 226, 238, 109, 212, 95, 236, 223, 160,
	139, 140, 94, 0, 198, 117, 125, 114, 173, 233,
	234, 113, 257, 101, 246, 97, 102, 245, 167, 229,
	237, 161, 154, 96, 235, 159, 153, 144, 121, 132,
	191, 151, 192, 133, 164, 163, 165, 0, 0, 0,
	221, 243, 258, 106, 0, 228, 252, 253, 0, 0,
	107, 126, 120, 190, 124, 166, 103, 135, 218, 143,
	150, 197, 256, 180, 203, 110, 242, 219, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 89, 98, 147,
	255, 195, 123, 244, 0, 0, 116, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 91,
	92, 99, 105, 111, 115, 119, 122, 128, 131, 134,
	136, 137, 138, 141, 152, 155, 156, 157, 158, 168,
	169, 170, 172, 175, 176, 177, 178, 179, 182, 184,
	185, 186, 187, 188, 189, 196, 199, 205, 206, 207,
	208, 209, 210, 211, 213, 214, 215, 216, 222, 225,
	231, 232, 241, 248, 251,
}
var yyPact = [...]int{

	2157, -1000, -280, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 915, -1000, -1000, -1000,
	-1000, -1000, -1000, 324, 11759, -18, 144, 9, 16511, 140,
	301, 16849, -1000, 13, -1000, -1000, 12097, -1000, -1000, -107,
	-111, -1000, 9731, -1000, 909, 696, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 708, 848, 911, -1000, 8367, 92, 92,
	16173, 7015, -1000, -1000, 364, 16849, 136, 16849, -156, 90,
	90, 90, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 139,
	16849, 471, 471, 225, -1000, 16849, 87, 471, 87, 87,
	87, 16849, -1000, 196, -1000, -1000, -1000, 16849, 471, 796,
	342, 48, 4558, -1000, 188, -1000, 4558, 34, 4558, -40,
	871, 31, -38, -1000, 4558, -1000, -1000, -1000, -1000, -1000,
	-1000, 15828, 112, 284, -1000, -1000, -1000, -1000, -1000, -1000,
	584, 344, -1000, 9731, 1633, 665, 665, -1000, -1000, 155,
	-1000, -1000, 10745, 10745, 10745, 10745, 10745, 10745, 10745, 10745,
	10745, 10745, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 665, 195, -1000, 9393,
	665, 665, 665, 665, 665, 665, 665, 665, 9731, 665,
	665, 665, 665, 665, 665, 665, 665, 665, 665, 665,
	665, 665, 665, 665, 665, -1000, -1000, -1000, 511, -1000,
	434, 861, -1000, 696, -1000, -1000, 769, 8367, -1000, -1000,
	875, -1000, -1000, -1000, -1000, 362, 894, -1000, 11421, 194,
	15490, 14476, 16849, 647, 633, -1000, -1000, 193, 663, 6664,
	-68, -1000, -1000, -1000, 272, 13800, -1000, -1000, -1000, 793,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 624,
	16849, -1000, 2823, -1000, 471, 4558, 121, 471, 296, 471,
	16849, 16849, 4558, 4558, 4558, 39, 86, 66, 16849, 659,
	106, 16849, 835, 718, 16849, 471, 471, -1000, 5962, -1000,
	4558, 342, -1000, 478, 9731, 4558, 4558, 4558, 16849, 4558,
	4558, -1000, -1000, -1000, 318, -1000, -1000, -1000, -1000, 4558,
	4558, -1000, 886, 314, -1000, -1000, -1000, -1000, 9731, 231,
	-1000, 715, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -129, -1000, -1000, 9731, 9731, 9731, 444, 251, 10745,
	409, 269, 10745, 10745, 10745, 10745, 10745, 10745, 10745, 10745,
	10745, 10745, 10745, 10745, 10745, 10745, 10745, 496, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 471, -1000, 696, 530,
	530, 210, 210, 210, 210, 210, 210, 210, 210, 210,
	11083, 7353, 5962, 434, 613, 9393, 8367, 8367, 9731, 9731,
	9043, 8705, 8367, 795, 291, 344, 16849, -1000, -1000, 10407,
	-1000, -1000, -1000, -1000, -1000, 434, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 16849, 16849, 8367, 8367, 8367, 8367, 8367,
	-1000, 875, -1000, -1000, 853, 858, 434, 13462, 689, -1000,
	875, -1000, -1000, -1000, 16849, -1000, -1000, 15152, -1000, -1000,
	5611, 57, 16849, -1000, 666, 788, -1000, -1000, -1000, 838,
	12786, 13124, 57, 579, 14476, 16849, -1000, -1000, 14476, 16849,
	5260, 6313, -68, -1000, 649, -1000, -134, -73, 7691, 205,
	-1000, -1000, -1000, -1000, 4207, 281, 509, 381, -49, -1000,
	-1000, -1000, 671, -1000, 671, 671, 671, 671, -22, -22,
	-22, -22, -1000, -1000, -1000, -1000, -1000, 695, 693, -1000,
	671, 671, 671, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 692, 692, 692, 686, 686, 702, -1000, 16849, 4558,
	833, 4558, -1000, 74, -1000, -1000, -1000, 16849, 16849, 16849,
	16849, 16849, 157, 16849, 16849, 654, -1000, 16849, 4558, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 344, -1000, -1000,
	-1000, -1000, -1000, -1000, 16849, -1000, -1000, -1000, -1000, 16849,
	342, 16849, 16849, 344, -1000, 460, 16849, -1000, -1000, -1000,
	-1000, 344, 251, 302, -1000, -1000, 429, -1000, -1000, 2251,
	-1000, -1000, -1000, -1000, 409, 10745, 10745, 10745, 142, 2251,
	2160, 1080, 1130, 210, 480, 480, 209, 209, 209, 209,
	209, 404, 404, -1000, -1000, -1000, 434, -1000, -1000, -1000,
	434, 8367, 8367, 653, 665, 192, -1000, -1000, -1000, 434,
	590, 590, 443, 386, 277, 881, 590, 274, 878, 590,
	590, 8367, -1000, -1000, 403, -1000, 9731, 434, -1000, 181,
	-1000, 836, 652, 651, 590, 434, 434, 590, 590, 813,
	9731, 9731, -1000, 854, -1000, 779, 775, 870, 8367, 14476,
	875, -1000, -1000, -1000, 180, 640, 665, -1000, 16849, 14476,
	14476, 14476, 14476, 14476, -1000, 740, 732, -1000, 738, 729,
	739, 16849, -1000, 607, 12786, 170, 665, -1000, 14814, -1000,
	-1000, 870, 14476, 621, -1000, 621, -1000, 172, -1000, -1000,
	649, -68, -63, -1000, -1000, -1000, -1000, 344, -1000, 544,
	648, 3856, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 691,
	471, -1000, 826, 229, 245, 471, 821, -1000, -1000, -1000,
	798, -1000, 327, -80, -1000, -1000, 424, -22, -22, -1000,
	-1000, 205, 787, 205, 205, 205, 458, 458, -1000, -1000,
	-1000, -1000, 412, -1000, -1000, -1000, 405, -1000, 714, 16849,
	4558, -1000, -1000, -1000, -1000, 345, 345, 236, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 54,
	673, -1000, -1000, -1000, -1000, 17, 38, 105, -1000, 4558,
	-1000, 314, 314, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 142, 2251, 2009, -1000, 10745, 10745, -1000, -1000,
	590, 590, 8367, 5962, -1000, -1000, -1000, 102, 496, 102,
	10745, 10745, -1000, 10745, 10745, -1000, -168, 609, 286, -1000,
	9731, 378, -1000, 5962, -1000, 10745, 10745, -1000, -1000, -1000,
	-1000, -1000, -1000, 905, 243, 310, 646, -1000, 358, 16849,
	-1000, -1000, -1000, -1000, 868, 9731, -1000, 632, -1000, 4909,
	713, 16849, 665, -1000, 12786, 16849, 672, -1000, 268, 788,
	690, 711, 608, -1000, -1000, -1000, -1000, 731, -1000, 730,
	-1000, -1000, -1000, -1000, -1000, 134, 129, 124, 16849, -1000,
	861, 621, -1000, -1000, 204, -1000, -1000, -138, -115, -1000,
	-1000, -1000, 4207, -1000, 4207, 16849, 62, -1000, 471, 471,
	-1000, -1000, -1000, 687, 707, 10745, -1000, -1000, -1000, 502,
	205, 205, -1000, 317, -1000, -1000, -1000, 582, -1000, 571,
	627, 564, 16849, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 16849, -1000, -1000, -1000, -1000, -1000, 16849, -177,
	471, 16849, 16849, 16849, 16849, -1000, 342, 342, -1000, 10745,
	2251, 2251, -1000, -1000, 434, -1000, 434, 671, 671, -1000,
	671, 686, -1000, 671, 2, 671, -1, 434, 434, 1913,
	1807, 1784, 1653, 665, -163, -1000, 344, 9731, -1000, 1502,
	1290, -1000, 766, 9731, 9731, 9731, -1000, -1000, -1000, -1000,
	866, 855, 344, -1000, -1000, 828, 643, 568, -1000, -1000,
	8029, 434, 562, 167, 557, -1000, 861, 16849, 9731, -1000,
	-1000, 9731, 677, -1000, 9731, -1000, -1000, -1000, 665, 665,
	665, 557, 853, -1000, -1000, -1000, -1000, 3856, -1000, 555,
	-1000, 671, -1000, -1000, -1000, 16849, -60, 903, 2251, -1000,
	-1000, -1000, -1000, -1000, -22, 451, -22, 392, -1000, 384,
	4558, -1000, -1000, -1000, -1000, 815, -1000, 5962, -1000, -1000,
	670, 698, -1000, -1000, -1000, -1000, 2251, -1000, -1000, -1000,
	133, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 10745,
	10745, 10745, 10745, 10745, 853, 436, 344, 10745, 10745, 758,
	344, 344, -1000, -1000, 9731, 9731, 820, -1000, 665, -1000,
	-1000, 656, 16849, 16849, -1000, 16849, 853, -1000, 344, 344,
	16849, 344, 14138, 16849, 16849, 12436, -1000, 162, 16849, -1000,
	553, -1000, 199, -1000, -89, 205, -1000, 205, 490, 488,
	-1000, 665, 611, -1000, 264, 16849, 16849, -1000, -1000, 836,
	836, 836, 836, 49, 434, -1000, 836, 836, -1000, 344,
	584, 899, -1000, 665, -1000, 696, 158, -1000, -1000, -1000,
	551, 542, -1000, 542, 542, 170, 162, -1000, 471, 259,
	433, -1000, 59, 16849, 338, 818, -1000, 814, -1000, -1000,
	-1000, -1000, -1000, 51, 5962, 4207, 524, -1000, -1000, -1000,
	-1000, -1000, 434, 47, -180, -1000, -1000, -1000, 16849, 568,
	434, 16849, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 368,
	-1000, -1000, 16849, -1000, -1000, 432, -1000, -1000, 515, -1000,
	16849, -1000, -1000, 673, -1000, 754, -172, -187, 517, -1000,
	-1000, -1000, 669, -1000, -1000, 51, 772, -177, -1000, 722,
	-1000, 16849, -1000, 45, -1000, -178, 505, 43, -181, 706,
	665, -190, 704, -1000, 891, 10069, -1000, -1000, 897, 189,
	189, 836, 434, -1000, -1000, -1000, 76, 417, -1000, -1000,
	-1000, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 1162, 50, 572, 1159, 1158, 1152, 1151, 1149, 1146,
	90, 88, 82, 1145, 1139, 1138, 1132, 1129, 1125, 1123,
	1122, 1121, 1120, 1118, 1117, 1116, 1115, 1114, 1113, 1112,
	1111, 95, 1110, 1108, 1107, 1106, 1105, 1103, 1102, 1101,
	1099, 1098, 44, 231, 40, 55, 1097, 67, 1435, 1096,
	59, 73, 68, 1094, 34, 1093, 1092, 70, 1091, 1090,
	53, 1089, 1088, 66, 1086, 65, 1085, 13, 37, 1084,
	1082, 1081, 1079, 69, 1664, 1078, 1077, 14, 1071, 1070,
	85, 1066, 54, 31, 11, 18, 27, 1064, 112, 9,
	1063, 56, 1059, 1058, 1057, 1056, 26, 1055, 22, 1054,
	17, 1053, 1052, 7, 60, 29, 21, 5, 1047, 1046,
	19, 58, 49, 61, 1045, 1043, 474, 1040, 1039, 48,
	1038, 1037, 1035, 62, 1034, 87, 413, 1028, 1026, 1022,
	1017, 30, 725, 1382, 117, 64, 1013, 1010, 1007, 2413,
	36, 52, 16, 1001, 81, 97, 38, 999, 998, 32,
	996, 995, 994, 993, 992, 990, 989, 96, 988, 985,
	984, 20, 33, 982, 980, 63, 25, 978, 977, 976,
	45, 57, 974, 973, 46, 971, 970, 28, 969, 967,
	966, 965, 959, 24, 3, 958, 15, 956, 10, 952,
	23, 951, 12, 949, 6, 947, 8, 0, 933, 4,
	43, 1, 928, 2, 925, 924, 1268, 1470, 74, 922,
	77,
}
var yyR1 = [...]int{

	0, 204, 205, 205, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 197, 197, 197,
	21, 4, 4, 2, 2, 2, 9, 3, 5, 5,
	6, 6, 10, 10, 34, 34, 11, 12, 12, 12,
	12, 208, 208, 57, 57, 58, 58, 104, 104, 13,
	14, 14, 113, 113, 112, 112, 112, 114, 114, 114,
	114, 147, 147, 15, 15, 15, 15, 15, 15, 15,
	199, 199, 198, 196, 196, 195, 195, 194, 22, 179,
	181, 181, 180, 180, 180, 180, 171, 150, 150, 150,
	150, 153, 153, 151, 151, 151, 151, 151, 151, 151,
	151, 151, 152, 152, 152, 152, 152, 154, 154, 154,
	154, 154, 155, 155, 155, 155, 155, 155, 155, 155,
	155, 155, 155, 155, 155, 155, 155, 156, 156, 156,
	156, 156, 156, 156, 156, 170, 170, 157, 157, 165,
	165, 166, 166, 166, 163, 163, 164, 164, 167, 167,
	167, 159, 159, 160, 160, 168, 168, 161, 161, 161,
	162, 162, 162, 169, 169, 169, 169, 169, 158, 158,
	172, 172, 189, 189, 188, 188, 188, 178, 178, 185,
	185, 185, 185, 185, 175, 175, 175, 176, 176, 174,
	174, 177, 177, 187, 187, 186, 173, 173, 190, 190,
	190, 190, 202, 203, 201, 201, 201, 201, 201, 182,
	182, 182, 183, 183, 183, 184, 184, 184, 16, 16,
	16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
	16, 16, 16, 16, 16, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 193,
	191, 191, 192, 192, 17, 23, 23, 18, 18, 18,
	18, 18, 19, 19, 24, 25, 25, 25, 25, 25,
	25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
	25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
	25, 25, 120, 120, 122, 122, 118, 118, 121, 121,
	119, 119, 119, 123, 123, 123, 124, 124, 148, 148,
	148, 26, 26, 28, 28, 29, 30, 35, 35, 35,
	35, 35, 35, 37, 37, 37, 8, 8, 8, 8,
	36, 36, 36, 7, 7, 27, 27, 27, 27, 20,
	209, 31, 32, 32, 33, 33, 33, 39, 39, 39,
	38, 38, 38, 44, 44, 46, 46, 46, 46, 46,
	47, 47, 47, 47, 47, 47, 43, 43, 45, 45,
	45, 45, 136, 136, 136, 135, 135, 49, 49, 50,
	50, 51, 51, 52, 52, 52, 52, 66, 66, 103,
	103, 105, 105, 53, 53, 53, 53, 54, 54, 55,
	55, 56, 56, 143, 143, 142, 142, 142, 141, 141,
	59, 59, 59, 61, 60, 60, 60, 60, 62, 62,
	64, 64, 63, 63, 65, 67, 67, 67, 67, 67,
	68, 68, 48, 48, 48, 48, 48, 48, 48, 117,
	117, 70, 70, 69, 69, 69, 69, 69, 69, 69,
	69, 69, 69, 81, 81, 81, 81, 81, 81, 71,
	71, 71, 71, 71, 71, 71, 42, 42, 82, 82,
	82, 88, 83, 83, 74, 74, 74, 74, 74, 74,
	74, 74, 74, 74, 74, 74, 74, 74, 74, 74,
	74, 74, 74, 74, 74, 74, 74, 74, 74, 74,
	74, 74, 74, 74, 74, 74, 74, 74, 78, 78,
	78, 78, 76, 76, 76, 76, 76, 76, 76, 76,
	76, 76, 76, 76, 76, 77, 77, 77, 77, 77,
	77, 77, 77, 77, 77, 77, 77, 77, 77, 77,
	77, 210, 210, 80, 79, 79, 79, 79, 79, 79,
	79, 40, 40, 40, 40, 40, 146, 146, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 92, 92, 41, 41, 90, 90, 91, 93, 93,
	89, 89, 89, 73, 73, 73, 73, 73, 73, 73,
	73, 75, 75, 75, 94, 94, 95, 95, 96, 96,
	97, 97, 98, 99, 99, 99, 100, 100, 100, 100,
	101, 101, 101, 72, 72, 72, 72, 72, 72, 102,
	102, 102, 102, 106, 106, 84, 84, 86, 86, 85,
	87, 107, 107, 110, 108, 108, 108, 111, 111, 111,
	111, 109, 109, 109, 138, 138, 138, 115, 115, 125,
	125, 126, 126, 116, 116, 127, 127, 127, 127, 127,
	127, 127, 127, 127, 127, 128, 128, 128, 129, 129,
	130, 130, 130, 137, 137, 133, 133, 134, 134, 139,
	139, 140, 140, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 206, 207, 144, 145, 145, 145,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 1, 1, 1,
	2, 1, 3, 1, 6, 7, 5, 8, 1, 3,
	1, 3, 7, 8, 1, 1, 9, 8, 7, 6,
	6, 1, 1, 1, 3, 1, 3, 0, 4, 3,
	5, 4, 1, 3, 3, 2, 2, 2, 2, 2,
	1, 1, 1, 2, 2, 8, 4, 6, 5, 5,
	0, 2, 1, 0, 2, 1, 3, 3, 4, 4,
	2, 4, 1, 3, 3, 3, 8, 3, 1, 1,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 2, 2, 1, 2, 2,
	2, 1, 4, 4, 2, 2, 3, 3, 3, 3,
	1, 1, 1, 1, 1, 6, 6, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 0, 3, 0,
	5, 0, 3, 5, 0, 1, 0, 1, 0, 1,
	2, 0, 2, 0, 3, 0, 1, 0, 3, 3,
	0, 2, 2, 0, 2, 1, 2, 1, 0, 2,
	5, 4, 1, 2, 2, 3, 2, 0, 1, 2,
	3, 3, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 0, 1, 1, 3, 2, 3, 1, 10, 11,
	11, 12, 3, 3, 1, 1, 2, 2, 2, 0,
	1, 3, 1, 2, 3, 1, 1, 1, 6, 7,
	7, 7, 7, 4, 5, 4, 4, 7, 5, 5,
	5, 12, 7, 5, 9, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 7,
	1, 3, 8, 8, 3, 3, 5, 4, 6, 5,
	4, 4, 3, 2, 3, 4, 4, 3, 4, 4,
	4, 4, 4, 4, 3, 2, 7, 2, 3, 4,
	3, 7, 5, 4, 2, 4, 4, 3, 3, 5,
	2, 3, 1, 1, 0, 1, 0, 1, 1, 1,
	0, 2, 2, 0, 2, 2, 0, 2, 0, 1,
	1, 2, 1, 1, 2, 1, 1, 0, 3, 3,
	3, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 1, 1, 3, 3, 2, 2, 3, 3, 2,
	0, 2, 0, 2, 1, 2, 2, 0, 1, 1,
	0, 1, 1, 0, 1, 0, 1, 2, 3, 4,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 2,
	3, 5, 0, 1, 2, 1, 1, 0, 2, 1,
	3, 1, 1, 1, 3, 1, 3, 3, 7, 1,
	3, 1, 3, 4, 4, 4, 3, 2, 4, 0,
	1, 0, 2, 0, 1, 0, 1, 2, 1, 1,
	1, 2, 2, 1, 2, 3, 2, 3, 2, 2,
	2, 1, 1, 3, 3, 0, 5, 4, 5, 5,
	0, 2, 1, 3, 3, 2, 3, 1, 2, 0,
	3, 1, 1, 3, 3, 4, 4, 5, 3, 4,
	5, 6, 2, 1, 2, 1, 2, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 0, 2, 1, 1,
	1, 3, 1, 3, 1, 1, 1, 1, 1, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 3, 1, 1, 1, 1, 4, 5,
	5, 6, 4, 4, 6, 6, 6, 8, 8, 8,
	8, 9, 8, 5, 4, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 8,
	8, 0, 2, 3, 4, 4, 4, 4, 4, 4,
	4, 0, 3, 4, 7, 3, 1, 1, 2, 3,
	3, 1, 2, 2, 1, 2, 1, 2, 2, 1,
	2, 0, 1, 0, 2, 1, 2, 4, 0, 2,
	1, 3, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 0, 3, 0, 2, 0, 3,
	1, 3, 2, 0, 1, 1, 0, 2, 4, 4,
	0, 2, 4, 2, 1, 3, 5, 4, 6, 1,
	3, 3, 5, 0, 5, 1, 3, 1, 2, 3,
	1, 1, 3, 3, 1, 2, 3, 3, 3, 3,
	3, 1, 2, 1, 1, 1, 1, 1, 1, 0,
	2, 0, 3, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 1, 1, 1, 1,
	0, 1, 1, 0, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -204, -1, -2, -9, -10, -11, -12, -13, -14,
	-15, -16, -17, -18, -19, -24, -25, -26, -28, -29,
	-30, -7, -27, -20, -21, -4, -5, 6, 7, -34,
	9, 10, 30, -22, 122, 123, 125, 124, 158, 126,
	151, 53, 172, 173, 175, 176, -37, 156, 157, 31,
	32, 128, 34, -3, 57, -206, 8, 258, 153, 152,
	25, -205, 360, -33, 5, -31, -209, -31, -31, -31,
	-31, -31, -179, -181, 57, 95, -130, 132, 77, 250,
	129, 130, 136, -133, -197, -132, 60, 61, 62, 268,
	144, 300, 301, 172, 183, 177, 204, 196, 269, 302,
	145, 194, 197, 237, 142, 303, 224, 231, 71, 175,
	246, 304, 154, 192, 188, 305, 277, 186, 27, 306,
	233, 209, 307, 273, 235, 187, 232, 128, 308, 147,
	140, 309, 210, 214, 310, 238, 311, 312, 313, 181,
	182, 314, 143, 240, 208, 141, 33, 270, 37, 162,
	241, 212, 315, 207, 203, 316, 317, 318, 319, 206,
	180, 202, 41, 216, 215, 217, 236, 199, 320, 321,
	322, 148, 323, 189, 18, 324, 325, 326, 327, 328,
	244, 157, 329, 160, 330, 331, 332, 333, 334, 335,
	234, 211, 213, 137, 164, 272, 336, 242, 185, 337,
	149, 161, 156, 245, 150, 338, 339, 340, 341, 342,
	343, 344, 176, 345, 346, 347, 348, 171, 239, 248,
	40, 221, 349, 179, 139, 350, 173, 168, 226, 200,
	163, 351, 352, 190, 191, 205, 178, 201, 174, 165,
	158, 353, 247, 222, 274, 198, 195, 169, 354, 166,
	167, 355, 227, 228, 170, 271, 243, 193, 223, -116,
	132, 250, 129, 228, 134, 130, 130, 131, 132, 250,
	129, 130, -63, -139, -197, -132, 132, 130, 113, 197,
	237, 122, 225, 233, -122, 234, 164, -148, 130, -118,
	224, 227, 228, 170, -197, 235, 239, 238, 229, -139,
	174, -63, -35, 356, 126, -144, -144, 226, 226, -144,
	-83, -48, -69, 79, -74, 29, 23, -73, -70, -89,
	-87, -88, 113, 114, 116, 115, 117, 102, 103, 110,
	80, 118, -78, -76, -77, -79, 64, 63, 72, 65,
	66, 67, 68, 73, 74, 75, -133, -139, -85, -206,
	47, 48, 259, 260, 261, 262, 267, 263, 82, 36,
	249, 257, 256, 255, 253, 254, 251, 252, 265, 266,
	135, 250, 129, 108, 258, -197, -132, 57, -3, 6,
	-2, -6, -3, -206, 20, 21, -39, -46, 42, 43,
	-47, 21, 35, 46, 44, -32, -45, 104, -48, -139,
	-116, -116, 11, -57, -58, -63, -65, -139, -108, -147,
	174, -111, 239, 238, -134, -109, -133, -131, 237, 197,
	236, 127, 275, 78, 22, 24, 219, 81, 113, 16,
	82, 112, 259, 122, 51, 276, 251, 252, 249, 261,
	262, 250, 225, 29, 10, 278, 25, 152, 21, 35,
	106, 124, 85, 86, 155, 23, 153, 75, 281, 19,
	54, 11, 13, 282, 283, 14, 135, 134, 97, 131,
	49, 8, 118, 26, 94, 45, 284, 28, 285, 286,
	287, 288, 47, 95, 17, 253, 254, 31, 289, 267,
	159, 108, 52, 38, 79, 290, 291, 73, 292, 76,
	55, 77, 15, 50, 293, 294, 295, 296, 96, 125,
	258, 48, 297, 129, 6, 264, 30, 151, 46, 298,
	130, 84, 265, 266, 133, 74, 5, 136, 32, 9,
	53, 56, 255, 256, 257, 36, 83, 12, 299, -180,
	95, -171, -197, -63, 131, -63, 258, -126, 135, -126,
	-126, 130, -63, -197, -197, 122, 124, 127, 55, -23,
	-63, -125, 135, -197, -125, -125, -125, -63, 119, -63,
	-197, 30, -123, 95, 12, 250, -197, 164, 130, 165,
	132, -145, -206, -134, -175, 131, 33, 143, -145, 168,
	169, -145, -121, -120, 231, 232, 226, 230, 12, 169,
	226, 167, -145, -36, -133, 64, -8, -2, -11, -10,
	-12, 87, -144, -144, 58, 78, 77, 94, -48, -71,
	97, 79, 95, 96, 81, 99, 98, 109, 102, 103,
	104, 105, 106, 107, 108, 100, 101, 112, 87, 88,
	89, 90, 91, 92, 93, -117, -206, -88, -206, 120,
	121, -74, -74, -74, -74, -74, -74, -74, -74, -74,
	-74, -206, 119, -2, -83, -206, -206, -206, -206, -206,
	-206, -206, -206, -206, -92, -48, -206, -210, -80, -206,
	-210, -80, -210, -80, -210, -206, -210, -80, -210, -80,
	-210, -210, -80, -206, -206, -206, -206, -206, -206, -206,
	59, -31, -207, 59, -96, 15, -2, 38, -43, -45,
	-47, 42, 43, 70, 11, -136, -135, 22, -133, 64,
	119, -64, 26, -63, -50, -51, -52, -53, -66, -88,
	-206, -63, -63, -57, -208, 58, 11, 56, -208, 58,
	119, 58, 174, -111, -113, -112, 240, 242, 87, -138,
	-133, 64, 29, 30, 59, 58, -63, -150, -153, -155,
	-154, -156, -151, -152, 194, 195, 113, 198, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 30, 154,
	190, 191, 192, 193, 210, 211, 212, 213, 214, 215,
	216, 217, 177, 196, 269, 178, 179, 180, 181, 182,
	183, 185, 186, 187, 188, 189, -197, -145, 132, -197,
	79, -197, -63, -63, -145, -145, -145, 166, 166, 130,
	130, 171, -63, 58, 133, -57, 23, 55, -63, -197,
	-197, -140, -139, -131, -145, -123, 64, -48, -145, -145,
	-145, -63, -145, -145, -176, 11, 97, -145, -145, 11,
	-119, 11, 97, -48, -124, 95, 55, 208, 357, 358,
	359, -48, -48, -48, -81, 73, 79, 74, 75, -74,
	-82, -85, -88, 69, 97, 95, 96, 81, -74, -74,
	-74, -74, -74, -74, -74, -74, -74, -74, -74, -74,
	-74, -74, -74, -146, -197, 64, -197, -73, -73, -133,
	-44, 21, 35, -43, -134, -140, -131, -207, -207, -2,
	-43, -43, -48, -48, -89, 64, -43, -89, 64, -43,
	-43, -38, 21, 35, -90, -91, 83, -89, -133, -139,
	-207, -74, -133, -133, -43, -44, -44, -43, -43, -100,
	17, 16, -207, -75, -133, 65, 68, -49, 58, 11,
	-47, -63, -135, 104, -140, -104, 160, -63, 30, 58,
	-59, -61, -60, -62, 45, 49, 51, 46, 47, 48,
	52, -143, 22, -50, -206, -142, 160, -141, 22, -139,
	64, -104, 56, -50, -63, -50, -65, -139, 104, -111,
	-113, 58, 241, 243, 244, 55, 76, -48, -162, 112,
	-182, -183, -184, -134, 64, 65, -171, -172, -173, -185,
	146, -190, 137, 139, 136, -174, 147, 131, 28, 59,
	-167, 73, 79, -163, 222, -157, 57, -157, -157, -157,
	-157, -161, 197, -161, -161, -161, 57, 57, -157, -157,
	-157, -165, 57, -165, -165, -166, 57, -166, -137, 56,
	-63, -145, 23, -145, -127, 127, 124, 125, -193, 123,
	219, 197, 71, 29, 15, 259, 160, 274, -197, 161,
	-63, -63, -63, -63, -63, 127, 124, -63, -63, -63,
	-145, -63, -63, -123, -139, -139, 64, -63, 73, 74,
	75, -82, -74, -74, -74, -42, 155, 78, -207, -207,
	-43, -43, -206, 119, -207, -207, -207, 58, 56, 22,
	11, 11, -207, 11, 11, -207, -207, -43, -93, -91,
	85, -48, -207, 119, -207, 58, 58, -207, -207, -207,
	-207, -207, -101, 19, 31, -48, -97, -98, -48, -115,
	19, 11, 36, 36, -68, 12, -45, -50, -47, 119,
	-72, 30, 36, -2, -206, -206, -107, -110, -89, -51,
	-52, -52, -51, -52, 45, 45, 45, 50, 45, 50,
	45, -60, -139, -207, -67, 53, 134, 54, -206, -141,
	-68, -50, -68, -68, 119, -112, -114, 245, 242, 248,
	-197, 64, 58, -184, 87, 57, -197, 28, -174, -174,
	-177, -197, -177, 28, -159, 29, 73, -164, 223, 65,
	-161, -161, -162, 30, -162, -162, -162, -170, 64, -170,
	65, 65, 55, -133, -145, -144, -200, 142, 138, 146,
	147, 140, 60, 61, 62, 131, 28, 137, 139, 160,
	136, -200, -128, -129, 133, 22, 131, 28, 160, -199,
	56, 166, 219, 166, 133, -145, -119, -119, -42, 78,
	-74, -74, -207, -207, -44, -134, -149, 113, 194, 154,
	192, 188, 208, 199, 221, 190, 222, -146, -149, -74,
	-74, -74, -74, 268, -96, 86, -48, 84, -134, -74,
	-74, 9, 97, 58, 18, 58, -99, 24, 25, -63,
	-94, 13, -48, 104, -106, 55, -107, -84, -86, -85,
	-206, -2, -102, -133, -105, -133, -68, 58, 87, -55,
	-54, 55, 56, -56, 55, -54, 45, 45, 131, 131,
	131, -105, -96, -68, 242, 246, 247, -183, -184, -187,
	-186, -133, -190, -177, -177, 57, -160, 55, -74, 59,
	-162, -162, -197, 113, 59, 58, 59, 58, 59, 58,
	-63, -144, -144, -63, -144, -133, -196, 271, -198, -197,
	-133, -133, -133, -63, -123, -123, -74, -207, -207, -157,
	-157, -157, -166, -157, 182, -157, 182, -207, -207, 19,
	19, 19, 19, -206, -41, 264, -48, 58, 58, 40,
	-48, -48, -98, -95, 14, 16, 27, -106, 58, -207,
	-207, -207, 58, 119, -207, 58, -96, -110, -48, -48,
	57, -48, -206, -206, -206, -207, -100, 59, 58, -157,
	-103, -133, -168, 219, 9, -161, 64, -161, 65, 65,
	-145, 26, -195, -194, -134, 57, 56, -161, -197, -74,
	-74, -74, -74, -74, -100, 64, -74, -74, 41, -48,
	-83, 28, -86, 36, -2, -206, -133, -133, -133, -100,
	-103, -103, -207, -103, -103, -142, -189, -188, 56, 141,
	71, -186, 59, 58, -169, 137, 28, 136, -77, -162,
	-162, 59, 59, -206, 58, 87, -103, -63, -207, -207,
	-207, -207, -40, 97, 271, -207, -207, -207, 9, -84,
	-2, 119, 59, -207, -207, -207, -67, -188, -197, -178,
	87, 64, 149, -133, -158, 71, 28, 28, -191, -192,
	160, -194, -184, 59, -207, 269, 52, 272, -107, -207,
	-133, 65, -63, 64, -207, 58, -133, -199, 41, 270,
	273, 57, -192, 36, -196, 41, -103, 162, 271, 59,
	163, 272, -202, -203, 55, -206, 273, -203, 55, 10,
	9, -74, 159, -201, 150, 145, 148, 30, -201, -207,
	-207, 144, 29, 73,
}
var yyDef = [...]int{

	26, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 25, 33, 0, 350, 350, 350,
	350, 350, 350, 0, 680, 663, 0, 0, 0, 0,
	-2, 322, 323, 0, 325, 326, 327, 984, 984, 0,
	0, 984, 0, 31, 982, 0, 44, 45, 333, 334,
	335, 1, 3, 0, 354, -2, 352, 0, 663, 663,
	0, 0, 73, 74, 0, 0, 0, 971, 0, 661,
	661, 661, 681, 682, 685, 686, 27, 28, 29, 811,
	812, 813, 814, 815, 816, 817, 818, 819, 820, 821,
	822, 823, 824, 825, 826, 827, 828, 829, 830, 831,
	832, 833, 834, 835, 836, 837, 838, 839, 840, 841,
	842, 843, 844, 845, 846, 847, 848, 849, 850, 851,
	852, 853, 854, 855, 856, 857, 858, 859, 860, 861,
	862, 863, 864, 865, 866, 867, 868, 869, 870, 871,
	872, 873, 874, 875, 876, 877, 878, 879, 880, 881,
	882, 883, 884, 885, 886, 887, 888, 889, 890, 891,
	892, 893, 894, 895, 896, 897, 898, 899, 900, 901,
	902, 903, 904, 905, 906, 907, 908, 909, 910, 911,
	912, 913, 914, 915, 916, 917, 918, 919, 920, 921,
	922, 923, 924, 925, 926, 927, 928, 929, 930, 931,
	932, 933, 934, 935, 936, 937, 938, 939, 940, 941,
	942, 943, 944, 945, 946, 947, 948, 949, 950, 951,
	952, 953, 954, 955, 956, 957, 958, 959, 960, 961,
	962, 963, 964, 965, 966, 967, 968, 969, 970, 972,
	973, 974, 975, 976, 977, 978, 979, 980, 981, 0,
	0, 0, 0, 0, 664, 0, 659, 0, 659, 659,
	659, 0, 273, 432, 689, 690, 971, 0, 0, 0,
	313, 0, 985, 285, 0, 287, 985, 0, 985, 0,
	294, 0, 0, 300, 985, 305, 319, 320, 307, 321,
	324, 340, 0, 0, 332, 345, 346, 984, 984, 349,
	30, 482, 442, 0, 447, 449, 0, 484, 485, 486,
	487, 488, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 514, 515, 516, 517, 593, 594, 595, 596,
	597, 598, 599, 600, 451, 452, 590, 0, 640, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 581, 0,
	551, 551, 551, 551, 551, 551, 551, 551, 0, 0,
	0, 0, 0, 0, 0, -2, -2, 982, 0, 350,
	38, 608, 40, 0, 355, 356, 0, 0, -2, -2,
	366, 372, 373, 374, 375, 351, 0, 378, 382, 0,
	0, 0, 0, 0, 0, 53, 55, 432, 59, 0,
	960, 644, -2, -2, 0, 0, 687, 688, -2, 824,
	-2, 693, 694, 695, 696, 697, 698, 699, 700, 701,
	702, 703, 704, 705, 706, 707, 708, 709, 710, 711,
	712, 713, 714, 715, 716, 717, 718, 719, 720, 721,
	722, 723, 724, 725, 726, 727, 728, 729, 730, 731,
	732, 733, 734, 735, 736, 737, 738, 739, 740, 741,
	742, 743, 744, 745, 746, 747, 748, 749, 750, 751,
	752, 753, 754, 755, 756, 757, 758, 759, 760, 761,
	762, 763, 764, 765, 766, 767, 768, 769, 770, 771,
	772, 773, 774, 775, 776, 777, 778, 779, 780, 781,
	782, 783, 784, 785, 786, 787, 788, 789, 790, 791,
	792, 793, 794, 795, 796, 797, 798, 799, 800, 801,
	802, 803, 804, 805, 806, 807, 808, 809, 810, 0,
	0, 92, 0, 90, 0, 985, 0, 0, 0, 0,
	0, 0, 985, 985, 985, 0, 0, 0, 0, 264,
	0, 0, 0, 0, 0, 0, 0, 272, 0, 274,
	985, 313, 277, 0, 0, 985, 985, 985, 0, 985,
	985, 284, 986, 987, 0, 194, 195, 196, 288, 985,
	985, 290, 0, 310, 308, 309, 302, 303, 0, 316,
	297, 298, 301, 343, 341, 342, 344, -2, 337, 338,
	339, 0, 347, 348, 0, 0, 0, 0, 445, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 469, 470,
	471, 472, 473, 474, 475, 448, 0, 462, 0, 0,
	0, 504, 505, 506, 507, 508, 509, 510, 511, 512,
	0, 363, 0, 38, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 360, 0, 582, 0, 535, 543, 0,
	536, 544, 537, 545, 538, 0, 539, 546, 540, 547,
	541, 542, 548, 0, 0, 0, 363, 363, 0, 0,
	32, 365, 39, 983, 616, 0, 38, 0, 387, 376,
	367, 370, 371, 353, 0, 379, 383, 0, 385, 386,
	0, 57, 0, 431, 0, 389, 391, 392, 393, -2,
	0, 415, -2, 0, 0, 0, 51, 52, 0, 0,
	0, 0, 960, 645, 61, 62, 0, 0, 0, 170,
	654, 655, 656, 652, 219, 0, 0, 158, 154, 98,
	99, 100, 147, 102, 147, 147, 147, 147, 167, 167,
	167, 167, 130, 131, 132, 133, 134, 0, 0, 117,
	147, 147, 147, 121, 137, 138, 139, 140, 141, 142,
	143, 144, 103, 104, 105, 106, 107, 108, 109, 110,
	111, 149, 149, 149, 151, 151, 683, 76, 0, 985,
	0, 985, 88, 0, 233, 235, 236, 0, 0, 0,
	0, 0, 0, 0, 0, 267, 660, 0, 985, 270,
	271, 433, 691, 692, 275, 276, 314, 315, 278, 279,
	280, 281, 282, 283, 0, 197, 198, 289, 293, 0,
	313, 0, 0, 295, 296, 0, 0, 328, 329, 330,
	331, 483, 443, 444, 446, 463, 0, 465, 467, 453,
	454, 478, 479, 480, 0, 0, 0, 0, 476, 458,
	0, 489, 490, 491, 492, 493, 494, 495, 496, 497,
	498, 499, 500, 503, 566, 567, 0, 501, 502, 513,
	0, 0, 0, 364, 591, 0, -2, 481, 639, 38,
	0, 0, 0, 0, 486, 593, 0, 486, 593, 0,
	0, 0, 361, 362, 588, 585, 0, 0, 590, 0,
	552, 0, 0, 0, 0, 0, 0, 0, 0, 620,
	0, 0, 41, 0, 601, 0, 0, 440, 0, 0,
	368, 36, 384, 380, 0, 0, 0, 430, 0, 0,
	0, 0, 0, 0, 420, 0, 0, 423, 0, 0,
	0, 0, 414, 0, 0, 435, 905, 416, 0, 418,
	419, 440, 0, 440, 54, 440, 56, 0, 434, 646,
	60, 0, 0, 65, 66, 647, 648, 649, 650, 0,
	89, 220, 222, 225, 226, 227, 93, 94, 95, 0,
	0, 207, 0, 0, 201, 201, 0, 199, 200, 91,
	161, 159, 0, 156, 155, 101, 0, 167, 167, 124,
	125, 170, 0, 170, 170, 170, 0, 0, 118, 119,
	120, 112, 0, 113, 114, 115, 0, 116, 0, 0,
	985, 78, 662, 79, 984, 0, 0, 675, 234, 665,
	666, 667, 668, 669, 670, 671, 672, 673, 674, 0,
	80, 238, 240, 239, 243, 0, 0, 0, 265, 985,
	269, 310, 310, 292, 311, 312, 317, 299, 464, 466,
	468, 455, 476, 459, 0, 456, 0, 0, 450, 518,
	0, 0, 363, 0, -2, 522, 523, 0, 0, 0,
	0, 0, 559, 0, 0, 560, 0, 608, 0, 586,
	0, 0, 534, 0, 553, 0, 0, 554, 555, 556,
	557, 558, 34, 0, 0, 617, 609, 610, 613, 0,
	657, 658, 602, 603, 604, 0, 377, 388, 369, 0,
	633, 0, 0, -2, 0, 0, 440, 641, 0, 390,
	409, 411, 0, 406, 421, 422, 424, 0, 426, 0,
	428, 429, 394, 396, 397, 0, 0, 0, 0, 417,
	608, 440, 49, 50, 0, 63, 64, 0, 0, 70,
	171, 172, 0, 223, 0, 0, 0, 189, 201, 201,
	192, 202, 193, 0, 163, 0, 160, 97, 157, 0,
	170, 170, 126, 0, 127, 128, 129, 0, 145, 0,
	0, 0, 0, 684, 77, 228, 984, 245, 246, 247,
	248, 249, 250, 251, 252, 253, 254, 255, 256, 257,
	258, 984, 0, 984, 676, 677, 678, 679, 0, 83,
	0, 0, 0, 0, 0, 268, 313, 313, 457, 0,
	477, 460, 519, 520, 0, 592, 0, 147, 147, 571,
	147, 151, 574, 147, 576, 147, 579, 0, 0, 0,
	0, 0, 0, 0, 583, 533, 589, 0, 591, 0,
	0, 621, 0, 0, 0, 0, 612, 614, 615, 35,
	606, 0, 441, 381, 42, 0, 633, 623, 635, 637,
	0, 38, 0, 629, 0, 401, 608, 0, 0, 403,
	410, 0, 0, 404, 0, 405, 425, 427, 0, 0,
	0, 0, 616, 48, 67, 68, 69, 221, 224, 0,
	203, 147, 206, 190, 191, 0, 165, 0, 162, 148,
	122, 123, 168, 169, 167, 0, 167, 0, 152, 0,
	985, 229, 230, 231, 232, 0, 237, 0, 81, 82,
	0, 0, 242, 266, 286, 291, 461, 521, 524, 568,
	167, 572, 573, 575, 577, 578, 580, 526, 525, 0,
	0, 0, 0, 0, 616, 0, 587, 0, 0, 0,
	618, 619, 611, 37, 0, 0, 0, 43, 0, 638,
	-2, 0, 0, 0, 58, 0, 616, 642, 643, 407,
	0, 412, 0, 0, 0, 415, 47, 181, 0, 205,
	0, 399, 173, 166, 0, 170, 146, 170, 0, 0,
	75, 0, 84, 85, 0, 0, 0, 569, 570, 0,
	0, 0, 0, 561, 0, 584, 0, 0, 622, 607,
	605, 0, 636, 0, -2, 0, 631, 630, 402, 46,
	0, 0, 437, 0, 0, 435, 180, 182, 0, 187,
	0, 204, 0, 0, 178, 0, 175, 177, 164, 135,
	136, 150, 153, 0, 0, 0, 0, 244, 527, 529,
	528, 530, 0, 0, 0, 532, 549, 550, 0, 626,
	38, 0, 408, 436, 438, 439, 398, 183, 184, 0,
	188, 186, 0, 400, 96, 0, 174, 176, 0, 260,
	0, 86, 87, 80, 531, 0, 0, 0, 634, -2,
	632, 185, 0, 179, 259, 0, 0, 83, 562, 0,
	565, 0, 261, 0, 241, 563, 0, 0, 0, 208,
	0, 0, 209, 210, 0, 0, 564, 211, 0, 0,
	0, 0, 0, 212, 214, 215, 0, 0, 213, 262,
	263, 216, 217, 218,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 80, 3, 3, 3, 107, 99, 3,
	57, 59, 104, 102, 58, 103, 119, 105, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 360,
	88, 87, 89, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 109, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 98, 3, 110,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 81, 82, 83, 84, 85,
	86, 90, 91, 92, 93, 94, 95, 96, 97, 100,
	101, 106, 108, 111, 112, 113, 114, 115, 116, 117,
	118, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}
var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:336
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:341
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:342
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:346
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 26:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:371
		{
			setParseTree(yylex, nil)
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:377
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), NoAt)
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:381
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), SingleAt)
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:385
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), DoubleAt)
		}
	case 30:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:391
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:397
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:401
		{
			yyVAL.selStmt = yyDollar[2].selStmt
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:407
		{
			sel := yyDollar[1].selStmt.(*Select)
			yyVAL.selStmt = sel
		}
	case 34:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:412
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 35:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:416
		{
			yyVAL.selStmt = NewSelect(Comments(yyDollar[2].bytes2), SelectExprs{Nextval{Expr: yyDollar[5].expr}}, []string{yyDollar[3].str} /*options*/, TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}, nil /*where*/, nil /*groupBy*/, nil /*having*/)
		}
	case 36:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:422
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 37:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:430
		{
			yyVAL.selStmt = NewSelect(Comments(yyDollar[2].bytes2), yyDollar[4].selectExprs /*SelectExprs*/, yyDollar[3].strs /*options*/, yyDollar[5].tableExprs /*from*/, NewWhere(WhereStr, yyDollar[6].expr), GroupBy(yyDollar[7].exprs), NewWhere(HavingStr, yyDollar[8].expr))
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:436
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 39:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:440
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:446
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 41:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:450
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 42:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:457
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 43:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:469
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:481
		{
			yyVAL.str = InsertStr
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:485
		{
			yyVAL.str = ReplaceStr
		}
	case 46:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:491
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].updateExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 47:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:497
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 48:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:501
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 49:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:505
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 50:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:509
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:514
		{
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:515
		{
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:519
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:523
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:529
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:533
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 57:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:538
		{
			yyVAL.partitions = nil
		}
	case 58:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:542
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:548
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 60:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:554
		{
			yyVAL.statement = &SetTransaction{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Characteristics: yyDollar[5].characteristics}
		}
	case 61:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:558
		{
			yyVAL.statement = &SetTransaction{Comments: Comments(yyDollar[2].bytes2), Characteristics: yyDollar[4].characteristics}
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:564
		{
			yyVAL.characteristics = []Characteristic{yyDollar[1].characteristic}
		}
	case 63:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:568
		{
			yyVAL.characteristics = append(yyVAL.characteristics, yyDollar[3].characteristic)
		}
	case 64:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:574
		{
			yyVAL.characteristic = &IsolationLevel{Level: string(yyDollar[3].str)}
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:578
		{
			yyVAL.characteristic = &AccessMode{Mode: TxReadWrite}
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:582
		{
			yyVAL.characteristic = &AccessMode{Mode: TxReadOnly}
		}
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:588
		{
			yyVAL.str = RepeatableRead
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:592
		{
			yyVAL.str = ReadCommitted
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:596
		{
			yyVAL.str = ReadUncommitted
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:600
		{
			yyVAL.str = Serializable
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:606
		{
			yyVAL.str = SessionStr
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:610
		{
			yyVAL.str = GlobalStr
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:616
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:621
		{
			// Create table [name] like [name]
			yyDollar[1].ddl.OptLike = yyDollar[2].optLike
			yyVAL.statement = yyDollar[1].ddl
		}
	case 75:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:627
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName}
		}
	case 76:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:632
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 77:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:636
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[5].tableName.ToViewName()}
		}
	case 78:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:640
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].colIdent.String())}
		}
	case 79:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:644
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].colIdent.String())}
		}
	case 80:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:649
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 81:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:653
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:659
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 83:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:664
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:669
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:675
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:680
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:686
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 88:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:692
		{
			yyVAL.ddl = &DDL{Action: CreateStr, Table: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 89:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:699
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 90:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:706
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[2].tableName}
		}
	case 91:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:710
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[3].tableName}
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:716
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:721
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:725
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:729
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 96:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:735
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].sqlVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:746
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:757
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].sqlVal
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:762
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:768
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:772
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:776
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:780
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:784
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:788
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:792
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:796
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:800
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:806
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:812
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:818
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:824
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:830
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:838
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:842
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:846
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:850
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:854
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 122:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:860
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 123:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:864
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:868
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:872
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 126:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:876
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:880
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:884
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:888
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:892
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:896
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:900
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:904
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:908
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 135:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:912
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 136:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:917
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:923
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:927
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:931
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:935
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:939
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:943
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:947
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:951
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:957
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:962
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 147:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:967
		{
			yyVAL.sqlVal = nil
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:971
		{
			yyVAL.sqlVal = NewIntVal(yyDollar[2].bytes)
		}
	case 149:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:976
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 150:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:980
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 151:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:988
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:992
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 153:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:998
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 154:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1006
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1010
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 156:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1015
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1019
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 158:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1025
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1029
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 160:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1033
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 161:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1038
		{
			yyVAL.optVal = nil
		}
	case 162:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1042
		{
			yyVAL.optVal = yyDollar[2].expr
		}
	case 163:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1047
		{
			yyVAL.optVal = nil
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1051
		{
			yyVAL.optVal = yyDollar[3].expr
		}
	case 165:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1056
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1060
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 167:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1065
		{
			yyVAL.str = ""
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1069
		{
			yyVAL.str = string(yyDollar[3].colIdent.String())
		}
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1073
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 170:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1078
		{
			yyVAL.str = ""
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1082
		{
			yyVAL.str = string(yyDollar[2].colIdent.String())
		}
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1086
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 173:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1091
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 174:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1095
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1099
		{
			yyVAL.colKeyOpt = colKey
		}
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1103
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1107
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 178:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1112
		{
			yyVAL.sqlVal = nil
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1116
		{
			yyVAL.sqlVal = NewStrVal(yyDollar[2].bytes)
		}
	case 180:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1122
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 181:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1126
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1132
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1136
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1142
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].colIdent.String())}
		}
	case 185:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1146
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1151
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 187:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1157
		{
			yyVAL.str = ""
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1161
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1167
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1171
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1175
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1179
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 193:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1183
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1189
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1193
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1197
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1204
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1208
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1214
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1218
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 201:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1223
		{
			yyVAL.str = ""
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1227
		{
			yyVAL.str = string(yyDollar[1].colIdent.String())
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1233
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 204:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1237
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1243
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].sqlVal}
		}
	case 206:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1249
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].colIdent.String()), Details: yyDollar[3].constraintInfo}
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1253
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 208:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1260
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 209:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1264
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 210:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1268
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 211:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1272
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 212:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1278
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 213:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1284
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1290
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1294
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 216:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1298
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1302
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1306
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 219:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1311
		{
			yyVAL.str = ""
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1315
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 221:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1319
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1327
		{
			yyVAL.str = yyDollar[1].str
		}
	case 223:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1331
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 224:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1335
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1341
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1345
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1349
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 228:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1355
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 229:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1359
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 230:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1363
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 231:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1367
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[4].tableName}, ToTables: TableNames{yyDollar[7].tableName}}
		}
	case 232:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1372
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 233:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1377
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 234:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1381
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 235:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1385
		{
			yyVAL.statement = &DBDDL{Action: AlterStr, DBName: string(yyDollar[3].colIdent.String())}
		}
	case 236:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1389
		{
			yyVAL.statement = &DBDDL{Action: AlterStr, DBName: string(yyDollar[3].colIdent.String())}
		}
	case 237:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1393
		{
			yyVAL.statement = &DDL{
				Action: CreateVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name:   NewColIdent(yyDollar[5].tableName.Name.String()),
					Type:   yyDollar[6].colIdent,
					Params: yyDollar[7].vindexParams,
				},
			}
		}
	case 238:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1405
		{
			yyVAL.statement = &DDL{
				Action: DropVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name: NewColIdent(yyDollar[5].tableName.Name.String()),
				},
			}
		}
	case 239:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1415
		{
			yyVAL.statement = &DDL{Action: AddVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 240:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1419
		{
			yyVAL.statement = &DDL{Action: DropVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 241:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1423
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 242:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1436
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 243:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1446
		{
			yyVAL.statement = &DDL{Action: AddSequenceStr, Table: yyDollar[5].tableName}
		}
	case 244:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1450
		{
			yyVAL.statement = &DDL{
				Action: AddAutoIncStr,
				Table:  yyDollar[4].tableName,
				AutoIncSpec: &AutoIncSpec{
					Column:   yyDollar[7].colIdent,
					Sequence: yyDollar[9].tableName,
				},
			}
		}
	case 259:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1479
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1485
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 261:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1489
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 262:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1495
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 263:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1499
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 264:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1505
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 265:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1511
		{
			yyVAL.ddl = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 266:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1515
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 267:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1523
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 268:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1531
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName}
		}
	case 269:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1536
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: TableNames{yyDollar[4].tableName.ToViewName()}, IfExists: exists}
		}
	case 270:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1544
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].colIdent.String())}
		}
	case 271:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1548
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].colIdent.String())}
		}
	case 272:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1554
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 273:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1558
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 274:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1563
		{
			yyVAL.statement = &OtherRead{}
		}
	case 275:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1569
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].colIdent.String())}
		}
	case 276:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1574
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Type: CharsetStr, ShowTablesOpt: showTablesOpt}
		}
	case 277:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1579
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowTablesOpt: showTablesOpt}
		}
	case 278:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1584
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 279:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1589
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].colIdent.String())}
		}
	case 280:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1593
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 281:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1597
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 282:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1601
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 283:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1605
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 284:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1609
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 285:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1613
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 286:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1617
		{
			showTablesOpt := &ShowTablesOpt{DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Extended: string(yyDollar[2].str), Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 287:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1622
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1626
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 289:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1630
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 290:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1634
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 291:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1638
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 292:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1643
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[3].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 293:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1653
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 294:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1657
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 295:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1661
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: yyDollar[4].expr}
		}
	case 296:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1665
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Scope: string(yyDollar[2].bytes), Type: string(yyDollar[3].bytes), ShowTablesOpt: showTablesOpt}
		}
	case 297:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1670
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 298:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1674
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 299:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1678
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName}
		}
	case 300:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1682
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 301:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1696
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].colIdent.String())}
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1702
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1706
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 304:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1712
		{
			yyVAL.str = ""
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1716
		{
			yyVAL.str = "extended "
		}
	case 306:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1722
		{
			yyVAL.str = ""
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1726
		{
			yyVAL.str = "full "
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1732
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1736
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 310:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1742
		{
			yyVAL.str = ""
		}
	case 311:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1746
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 312:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1750
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 313:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1756
		{
			yyVAL.showFilter = nil
		}
	case 314:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1760
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 315:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1764
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 316:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1770
		{
			yyVAL.showFilter = nil
		}
	case 317:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1774
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 318:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1780
		{
			yyVAL.str = ""
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1784
		{
			yyVAL.str = SessionStr
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1788
		{
			yyVAL.str = GlobalStr
		}
	case 321:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1794
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1798
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1804
		{
			yyVAL.statement = &Begin{}
		}
	case 324:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1808
		{
			yyVAL.statement = &Begin{}
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1814
		{
			yyVAL.statement = &Commit{}
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1820
		{
			yyVAL.statement = &Rollback{}
		}
	case 327:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1825
		{
			yyVAL.str = ""
		}
	case 328:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1829
		{
			yyVAL.str = JSONStr
		}
	case 329:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1833
		{
			yyVAL.str = TreeStr
		}
	case 330:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1837
		{
			yyVAL.str = VitessStr
		}
	case 331:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1841
		{
			yyVAL.str = TraditionalStr
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1845
		{
			yyVAL.str = AnalyzeStr
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1851
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1855
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1859
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1865
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1869
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1873
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1877
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 340:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1882
		{
			yyVAL.str = ""
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1886
		{
			yyVAL.str = ""
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1890
		{
			yyVAL.str = ""
		}
	case 343:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1896
		{
			yyVAL.statement = &OtherRead{}
		}
	case 344:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1900
		{
			yyVAL.statement = &Explain{Type: yyDollar[2].str, Statement: yyDollar[3].statement}
		}
	case 345:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1906
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 346:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1910
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 347:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1914
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 348:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1918
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 349:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1924
		{
			yyVAL.statement = &DDL{Action: FlushStr}
		}
	case 350:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1928
		{
			setAllowComments(yylex, true)
		}
	case 351:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1932
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 352:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1938
		{
			yyVAL.bytes2 = nil
		}
	case 353:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1942
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1948
		{
			yyVAL.str = UnionStr
		}
	case 355:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1952
		{
			yyVAL.str = UnionAllStr
		}
	case 356:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1956
		{
			yyVAL.str = UnionDistinctStr
		}
	case 357:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1961
		{
			yyVAL.str = ""
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1965
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1969
		{
			yyVAL.str = SQLCacheStr
		}
	case 360:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1974
		{
			yyVAL.str = ""
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1978
		{
			yyVAL.str = DistinctStr
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1982
		{
			yyVAL.str = DistinctStr
		}
	case 363:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1987
		{
			yyVAL.selectExprs = nil
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1991
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 365:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1996
		{
			yyVAL.strs = nil
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2000
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 367:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2004
		{ // TODO: This is a hack since I couldn't get it to work in a nicer way. I got 'conflicts: 8 shift/reduce'
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str}
		}
	case 368:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2008
		{
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str, yyDollar[3].str}
		}
	case 369:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2012
		{
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str, yyDollar[3].str, yyDollar[4].str}
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2018
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2022
		{
			yyVAL.str = SQLCacheStr
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2026
		{
			yyVAL.str = DistinctStr
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2030
		{
			yyVAL.str = DistinctStr
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2034
		{
			yyVAL.str = StraightJoinHint
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2038
		{
			yyVAL.str = SQLCalcFoundRowsStr
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2044
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 377:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2048
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2054
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 379:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2058
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 380:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2062
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 381:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2066
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 382:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2071
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2075
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 384:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2079
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2086
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 387:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2091
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 388:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2095
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2101
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 390:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2105
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2115
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 394:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2119
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2123
		{
			// missed alias for subquery
			yylex.Error("Every derived table must have its own alias")
			return 1
		}
	case 396:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2129
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 397:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2135
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 398:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2139
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2145
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 400:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2149
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2155
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 402:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2159
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 403:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2172
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 404:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2176
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 405:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2180
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 406:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2184
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 407:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2190
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 408:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2192
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 409:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2196
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2198
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 411:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2202
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 412:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2204
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 413:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2207
		{
			yyVAL.empty = struct{}{}
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2209
		{
			yyVAL.empty = struct{}{}
		}
	case 415:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2212
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2216
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 417:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2220
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2227
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2233
		{
			yyVAL.str = JoinStr
		}
	case 421:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2237
		{
			yyVAL.str = JoinStr
		}
	case 422:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2241
		{
			yyVAL.str = JoinStr
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2247
		{
			yyVAL.str = StraightJoinStr
		}
	case 424:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2253
		{
			yyVAL.str = LeftJoinStr
		}
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2257
		{
			yyVAL.str = LeftJoinStr
		}
	case 426:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2261
		{
			yyVAL.str = RightJoinStr
		}
	case 427:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2265
		{
			yyVAL.str = RightJoinStr
		}
	case 428:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2271
		{
			yyVAL.str = NaturalJoinStr
		}
	case 429:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2275
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 430:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2285
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2289
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2295
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2299
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 434:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2305
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 435:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2310
		{
			yyVAL.indexHints = nil
		}
	case 436:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2314
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 437:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2318
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr}
		}
	case 438:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2322
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 439:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2326
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 440:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2331
		{
			yyVAL.expr = nil
		}
	case 441:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2335
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2341
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 443:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2345
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 444:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2349
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 445:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2353
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 446:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2357
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2361
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 448:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2365
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 449:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2371
		{
			yyVAL.str = ""
		}
	case 450:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2375
		{
			yyVAL.str = string(yyDollar[2].colIdent.String())
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2381
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2385
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 453:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2391
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 454:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2395
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 455:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2399
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 456:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2403
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 457:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2407
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 458:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2411
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 459:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2415
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 460:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2419
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 461:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2423
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 462:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2427
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2433
		{
			yyVAL.str = IsNullStr
		}
	case 464:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2437
		{
			yyVAL.str = IsNotNullStr
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2441
		{
			yyVAL.str = IsTrueStr
		}
	case 466:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2445
		{
			yyVAL.str = IsNotTrueStr
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2449
		{
			yyVAL.str = IsFalseStr
		}
	case 468:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2453
		{
			yyVAL.str = IsNotFalseStr
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2459
		{
			yyVAL.str = EqualStr
		}
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2463
		{
			yyVAL.str = LessThanStr
		}
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2467
		{
			yyVAL.str = GreaterThanStr
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2471
		{
			yyVAL.str = LessEqualStr
		}
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2475
		{
			yyVAL.str = GreaterEqualStr
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2479
		{
			yyVAL.str = NotEqualStr
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2483
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 476:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2488
		{
			yyVAL.expr = nil
		}
	case 477:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2492
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2498
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2502
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2506
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 481:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2512
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2518
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 483:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2522
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2528
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2532
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2536
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2540
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2544
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 489:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2548
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 490:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2552
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 491:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2556
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 492:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2560
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 493:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2564
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 494:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2568
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 495:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2572
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 496:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2576
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 497:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2580
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 498:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2584
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 499:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2588
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 500:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2592
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 501:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2596
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 502:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2600
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 503:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2604
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 504:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2608
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 505:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2612
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 506:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2616
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8Str, Expr: yyDollar[2].expr}
		}
	case 507:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2620
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Str, Expr: yyDollar[2].expr}
		}
	case 508:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2624
		{
			yyVAL.expr = &UnaryExpr{Operator: Latin1Str, Expr: yyDollar[2].expr}
		}
	case 509:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2628
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 510:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2636
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 511:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2650
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 512:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2654
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 513:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2658
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 518:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2676
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 519:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2680
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 520:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2684
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 521:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2688
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 522:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2698
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 523:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2702
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 524:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2706
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 525:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2710
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 526:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2714
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 527:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2718
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 528:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2722
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 529:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2726
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 530:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2730
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 531:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2734
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 532:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2738
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str, Limit: yyDollar[7].limit}
		}
	case 533:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2742
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 534:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2746
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 535:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2756
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 536:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2760
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 537:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2764
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 538:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2769
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 539:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2774
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 540:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2779
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 541:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2785
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 542:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2790
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 543:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2795
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 544:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2799
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 545:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2803
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_time"), Fsp: yyDollar[2].expr}
		}
	case 546:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2808
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtime"), Fsp: yyDollar[2].expr}
		}
	case 547:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2813
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtimestamp"), Fsp: yyDollar[2].expr}
		}
	case 548:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2818
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_time"), Fsp: yyDollar[2].expr}
		}
	case 549:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2822
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampadd"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 550:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2826
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampdiff"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 553:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2836
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 554:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2846
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 555:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2850
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 556:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2854
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("schema"), Exprs: yyDollar[3].selectExprs}
		}
	case 557:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2858
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 558:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2862
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 559:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2866
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 560:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2870
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 561:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2876
		{
			yyVAL.str = ""
		}
	case 562:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2880
		{
			yyVAL.str = BooleanModeStr
		}
	case 563:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2884
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 564:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2888
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 565:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2892
		{
			yyVAL.str = QueryExpansionStr
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2898
		{
			yyVAL.str = string(yyDollar[1].colIdent.String())
		}
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2902
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 568:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2908
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 569:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2912
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 570:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2916
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: string(yyDollar[3].colIdent.String())}
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2920
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 572:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2924
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 573:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2928
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2934
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 575:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2938
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2942
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 577:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2946
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 578:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2950
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2954
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 580:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2958
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 581:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2963
		{
			yyVAL.expr = nil
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2967
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 583:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2972
		{
			yyVAL.str = string("")
		}
	case 584:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2976
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2982
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 586:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2986
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 587:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2992
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 588:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2997
		{
			yyVAL.expr = nil
		}
	case 589:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3001
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3007
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 591:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3011
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 592:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3015
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3021
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3025
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3029
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3033
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3037
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3041
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3045
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3049
		{
			yyVAL.expr = &NullVal{}
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3055
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 602:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3064
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 603:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3068
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 604:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3073
		{
			yyVAL.exprs = nil
		}
	case 605:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3077
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 606:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3082
		{
			yyVAL.expr = nil
		}
	case 607:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3086
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 608:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3091
		{
			yyVAL.orderBy = nil
		}
	case 609:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3095
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3101
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 611:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3105
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 612:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3111
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 613:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3116
		{
			yyVAL.str = AscScr
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3120
		{
			yyVAL.str = AscScr
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3124
		{
			yyVAL.str = DescScr
		}
	case 616:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3129
		{
			yyVAL.limit = nil
		}
	case 617:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3133
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 618:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3137
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 619:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3141
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 620:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3146
		{
			yyVAL.str = ""
		}
	case 621:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3150
		{
			yyVAL.str = ForUpdateStr
		}
	case 622:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3154
		{
			yyVAL.str = ShareModeStr
		}
	case 623:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3167
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3171
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 625:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3175
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 626:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3180
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 627:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3184
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 628:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3188
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3195
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 630:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3199
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 631:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3203
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 632:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3207
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 633:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3212
		{
			yyVAL.updateExprs = nil
		}
	case 634:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3216
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3222
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 636:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3226
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3232
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 638:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3236
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 639:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3242
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3248
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = yyDollar[1].valTuple[0]
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3258
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 642:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3262
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 643:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3268
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3274
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 645:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3278
		{
			yyDollar[2].setExpr.Scope = yyDollar[1].str
			yyVAL.setExprs = SetExprs{yyDollar[2].setExpr}
		}
	case 646:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3283
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 647:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3289
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 648:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3293
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 649:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3297
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 650:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3301
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 652:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3308
		{
			yyVAL.bytes = []byte("charset")
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3315
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3319
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3323
		{
			yyVAL.expr = &Default{}
		}
	case 659:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3332
		{
			yyVAL.byt = 0
		}
	case 660:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3334
		{
			yyVAL.byt = 1
		}
	case 661:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3337
		{
			yyVAL.empty = struct{}{}
		}
	case 662:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3339
		{
			yyVAL.empty = struct{}{}
		}
	case 663:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3342
		{
			yyVAL.str = ""
		}
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3344
		{
			yyVAL.str = IgnoreStr
		}
	case 665:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3348
		{
			yyVAL.empty = struct{}{}
		}
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3350
		{
			yyVAL.empty = struct{}{}
		}
	case 667:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3352
		{
			yyVAL.empty = struct{}{}
		}
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3354
		{
			yyVAL.empty = struct{}{}
		}
	case 669:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3356
		{
			yyVAL.empty = struct{}{}
		}
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3358
		{
			yyVAL.empty = struct{}{}
		}
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3360
		{
			yyVAL.empty = struct{}{}
		}
	case 672:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3362
		{
			yyVAL.empty = struct{}{}
		}
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3364
		{
			yyVAL.empty = struct{}{}
		}
	case 674:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3366
		{
			yyVAL.empty = struct{}{}
		}
	case 675:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3369
		{
			yyVAL.empty = struct{}{}
		}
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3371
		{
			yyVAL.empty = struct{}{}
		}
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3373
		{
			yyVAL.empty = struct{}{}
		}
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3377
		{
			yyVAL.empty = struct{}{}
		}
	case 679:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3379
		{
			yyVAL.empty = struct{}{}
		}
	case 680:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3382
		{
			yyVAL.empty = struct{}{}
		}
	case 681:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3384
		{
			yyVAL.empty = struct{}{}
		}
	case 682:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3386
		{
			yyVAL.empty = struct{}{}
		}
	case 683:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3389
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 684:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3391
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3395
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 686:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3399
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 688:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3406
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 689:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3412
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].colIdent.String()))
		}
	case 690:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3416
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 692:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3423
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 982:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3738
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 983:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3747
		{
			decNesting(yylex)
		}
	case 984:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3752
		{
			skipToEnd(yylex)
		}
	case 985:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3757
		{
			skipToEnd(yylex)
		}
	case 986:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3761
		{
			skipToEnd(yylex)
		}
	case 987:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3765
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
