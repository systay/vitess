// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line sql.y:53
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	sqlVal               *SQLVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	colIdent             ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	colKeyOpt            ColumnKeyOption
	optVal               Expr
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexColumn          *IndexColumn
	indexColumns         []*IndexColumn
	constraintDefinition *ConstraintDefinition
	constraintInfo       ConstraintInfo
	ReferenceAction      ReferenceAction
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
	optLike              *OptLike
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const KEY = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const UNLOCK = 57374
const KEYS = 57375
const DISTINCTROW = 57376
const SQL_CALC_FOUND_ROWS = 57377
const VALUES = 57378
const LAST_INSERT_ID = 57379
const NEXT = 57380
const VALUE = 57381
const SHARE = 57382
const MODE = 57383
const SQL_NO_CACHE = 57384
const SQL_CACHE = 57385
const JOIN = 57386
const STRAIGHT_JOIN = 57387
const LEFT = 57388
const RIGHT = 57389
const INNER = 57390
const OUTER = 57391
const CROSS = 57392
const NATURAL = 57393
const USE = 57394
const FORCE = 57395
const ON = 57396
const USING = 57397
const ID = 57398
const HEX = 57399
const STRING = 57400
const INTEGRAL = 57401
const FLOAT = 57402
const HEXNUM = 57403
const VALUE_ARG = 57404
const LIST_ARG = 57405
const COMMENT = 57406
const COMMENT_KEYWORD = 57407
const BIT_LITERAL = 57408
const NULL = 57409
const TRUE = 57410
const FALSE = 57411
const OFF = 57412
const OR = 57413
const AND = 57414
const NOT = 57415
const BETWEEN = 57416
const CASE = 57417
const WHEN = 57418
const THEN = 57419
const ELSE = 57420
const END = 57421
const LE = 57422
const GE = 57423
const NE = 57424
const NULL_SAFE_EQUAL = 57425
const IS = 57426
const LIKE = 57427
const REGEXP = 57428
const IN = 57429
const SHIFT_LEFT = 57430
const SHIFT_RIGHT = 57431
const DIV = 57432
const MOD = 57433
const UNARY = 57434
const COLLATE = 57435
const BINARY = 57436
const UNDERSCORE_BINARY = 57437
const UNDERSCORE_UTF8MB4 = 57438
const INTERVAL = 57439
const JSON_EXTRACT_OP = 57440
const JSON_UNQUOTE_EXTRACT_OP = 57441
const CREATE = 57442
const ALTER = 57443
const DROP = 57444
const RENAME = 57445
const ANALYZE = 57446
const ADD = 57447
const FLUSH = 57448
const SCHEMA = 57449
const TABLE = 57450
const INDEX = 57451
const VIEW = 57452
const TO = 57453
const IGNORE = 57454
const IF = 57455
const UNIQUE = 57456
const PRIMARY = 57457
const COLUMN = 57458
const SPATIAL = 57459
const FULLTEXT = 57460
const KEY_BLOCK_SIZE = 57461
const CHECK = 57462
const ACTION = 57463
const CASCADE = 57464
const CONSTRAINT = 57465
const FOREIGN = 57466
const NO = 57467
const REFERENCES = 57468
const RESTRICT = 57469
const SHOW = 57470
const DESCRIBE = 57471
const EXPLAIN = 57472
const DATE = 57473
const ESCAPE = 57474
const REPAIR = 57475
const OPTIMIZE = 57476
const TRUNCATE = 57477
const MAXVALUE = 57478
const PARTITION = 57479
const REORGANIZE = 57480
const LESS = 57481
const THAN = 57482
const PROCEDURE = 57483
const TRIGGER = 57484
const VINDEX = 57485
const VINDEXES = 57486
const STATUS = 57487
const VARIABLES = 57488
const WARNINGS = 57489
const SEQUENCE = 57490
const BEGIN = 57491
const START = 57492
const TRANSACTION = 57493
const COMMIT = 57494
const ROLLBACK = 57495
const BIT = 57496
const TINYINT = 57497
const SMALLINT = 57498
const MEDIUMINT = 57499
const INT = 57500
const INTEGER = 57501
const BIGINT = 57502
const INTNUM = 57503
const REAL = 57504
const DOUBLE = 57505
const FLOAT_TYPE = 57506
const DECIMAL = 57507
const NUMERIC = 57508
const TIME = 57509
const TIMESTAMP = 57510
const DATETIME = 57511
const YEAR = 57512
const CHAR = 57513
const VARCHAR = 57514
const BOOL = 57515
const CHARACTER = 57516
const VARBINARY = 57517
const NCHAR = 57518
const TEXT = 57519
const TINYTEXT = 57520
const MEDIUMTEXT = 57521
const LONGTEXT = 57522
const BLOB = 57523
const TINYBLOB = 57524
const MEDIUMBLOB = 57525
const LONGBLOB = 57526
const JSON = 57527
const ENUM = 57528
const GEOMETRY = 57529
const POINT = 57530
const LINESTRING = 57531
const POLYGON = 57532
const GEOMETRYCOLLECTION = 57533
const MULTIPOINT = 57534
const MULTILINESTRING = 57535
const MULTIPOLYGON = 57536
const NULLX = 57537
const AUTO_INCREMENT = 57538
const APPROXNUM = 57539
const SIGNED = 57540
const UNSIGNED = 57541
const ZEROFILL = 57542
const COLLATION = 57543
const DATABASES = 57544
const TABLES = 57545
const VITESS_METADATA = 57546
const VSCHEMA = 57547
const FULL = 57548
const PROCESSLIST = 57549
const COLUMNS = 57550
const FIELDS = 57551
const ENGINES = 57552
const PLUGINS = 57553
const NAMES = 57554
const CHARSET = 57555
const GLOBAL = 57556
const SESSION = 57557
const ISOLATION = 57558
const LEVEL = 57559
const READ = 57560
const WRITE = 57561
const ONLY = 57562
const REPEATABLE = 57563
const COMMITTED = 57564
const UNCOMMITTED = 57565
const SERIALIZABLE = 57566
const CURRENT_TIMESTAMP = 57567
const DATABASE = 57568
const CURRENT_DATE = 57569
const CURRENT_TIME = 57570
const LOCALTIME = 57571
const LOCALTIMESTAMP = 57572
const UTC_DATE = 57573
const UTC_TIME = 57574
const UTC_TIMESTAMP = 57575
const REPLACE = 57576
const CONVERT = 57577
const CAST = 57578
const SUBSTR = 57579
const SUBSTRING = 57580
const GROUP_CONCAT = 57581
const SEPARATOR = 57582
const TIMESTAMPADD = 57583
const TIMESTAMPDIFF = 57584
const MATCH = 57585
const AGAINST = 57586
const BOOLEAN = 57587
const LANGUAGE = 57588
const WITH = 57589
const QUERY = 57590
const EXPANSION = 57591
const UNUSED = 57592
const ARRAY = 57593
const CUME_DIST = 57594
const DESCRIPTION = 57595
const DENSE_RANK = 57596
const EMPTY = 57597
const EXCEPT = 57598
const FIRST_VALUE = 57599
const GROUPING = 57600
const GROUPS = 57601
const JSON_TABLE = 57602
const LAG = 57603
const LAST_VALUE = 57604
const LATERAL = 57605
const LEAD = 57606
const MEMBER = 57607
const NTH_VALUE = 57608
const NTILE = 57609
const OF = 57610
const OVER = 57611
const PERCENT_RANK = 57612
const RANK = 57613
const RECURSIVE = 57614
const ROW_NUMBER = 57615
const SYSTEM = 57616
const WINDOW = 57617
const ACTIVE = 57618
const ADMIN = 57619
const BUCKETS = 57620
const CLONE = 57621
const COMPONENT = 57622
const DEFINITION = 57623
const ENFORCED = 57624
const EXCLUDE = 57625
const FOLLOWING = 57626
const GEOMCOLLECTION = 57627
const GET_MASTER_PUBLIC_KEY = 57628
const HISTOGRAM = 57629
const HISTORY = 57630
const INACTIVE = 57631
const INVISIBLE = 57632
const LOCKED = 57633
const MASTER_COMPRESSION_ALGORITHMS = 57634
const MASTER_PUBLIC_KEY_PATH = 57635
const MASTER_TLS_CIPHERSUITES = 57636
const MASTER_ZSTD_COMPRESSION_LEVEL = 57637
const NESTED = 57638
const NETWORK_NAMESPACE = 57639
const NOWAIT = 57640
const NULLS = 57641
const OJ = 57642
const OLD = 57643
const OPTIONAL = 57644
const ORDINALITY = 57645
const ORGANIZATION = 57646
const OTHERS = 57647
const PATH = 57648
const PERSIST = 57649
const PERSIST_ONLY = 57650
const PRECEDING = 57651
const PRIVILEGE_CHECKS_USER = 57652
const PROCESS = 57653
const RANDOM = 57654
const REFERENCE = 57655
const REQUIRE_ROW_FORMAT = 57656
const RESOURCE = 57657
const RESPECT = 57658
const RESTART = 57659
const RETAIN = 57660
const REUSE = 57661
const ROLE = 57662
const SECONDARY = 57663
const SECONDARY_ENGINE = 57664
const SECONDARY_LOAD = 57665
const SECONDARY_UNLOAD = 57666
const SKIP = 57667
const SRID = 57668
const THREAD_PRIORITY = 57669
const TIES = 57670
const UNBOUNDED = 57671
const VCPU = 57672
const VISIBLE = 57673

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"DISTINCTROW",
	"SQL_CALC_FOUND_ROWS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"CHECK",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"SEQUENCE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"TABLES",
	"VITESS_METADATA",
	"VSCHEMA",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"PLUGINS",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"ARRAY",
	"CUME_DIST",
	"DESCRIPTION",
	"DENSE_RANK",
	"EMPTY",
	"EXCEPT",
	"FIRST_VALUE",
	"GROUPING",
	"GROUPS",
	"JSON_TABLE",
	"LAG",
	"LAST_VALUE",
	"LATERAL",
	"LEAD",
	"MEMBER",
	"NTH_VALUE",
	"NTILE",
	"OF",
	"OVER",
	"PERCENT_RANK",
	"RANK",
	"RECURSIVE",
	"ROW_NUMBER",
	"SYSTEM",
	"WINDOW",
	"ACTIVE",
	"ADMIN",
	"BUCKETS",
	"CLONE",
	"COMPONENT",
	"DEFINITION",
	"ENFORCED",
	"EXCLUDE",
	"FOLLOWING",
	"GEOMCOLLECTION",
	"GET_MASTER_PUBLIC_KEY",
	"HISTOGRAM",
	"HISTORY",
	"INACTIVE",
	"INVISIBLE",
	"LOCKED",
	"MASTER_COMPRESSION_ALGORITHMS",
	"MASTER_PUBLIC_KEY_PATH",
	"MASTER_TLS_CIPHERSUITES",
	"MASTER_ZSTD_COMPRESSION_LEVEL",
	"NESTED",
	"NETWORK_NAMESPACE",
	"NOWAIT",
	"NULLS",
	"OJ",
	"OLD",
	"OPTIONAL",
	"ORDINALITY",
	"ORGANIZATION",
	"OTHERS",
	"PATH",
	"PERSIST",
	"PERSIST_ONLY",
	"PRECEDING",
	"PRIVILEGE_CHECKS_USER",
	"PROCESS",
	"RANDOM",
	"REFERENCE",
	"REQUIRE_ROW_FORMAT",
	"RESOURCE",
	"RESPECT",
	"RESTART",
	"RETAIN",
	"REUSE",
	"ROLE",
	"SECONDARY",
	"SECONDARY_ENGINE",
	"SECONDARY_LOAD",
	"SECONDARY_UNLOAD",
	"SKIP",
	"SRID",
	"THREAD_PRIORITY",
	"TIES",
	"UNBOUNDED",
	"VCPU",
	"VISIBLE",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 29,
	-2, 4,
	-1, 37,
	162, 302,
	163, 302,
	-2, 290,
	-1, 322,
	114, 646,
	-2, 642,
	-1, 323,
	114, 647,
	-2, 643,
	-1, 392,
	84, 895,
	-2, 63,
	-1, 393,
	84, 813,
	-2, 64,
	-1, 398,
	84, 782,
	-2, 608,
	-1, 400,
	84, 843,
	-2, 610,
	-1, 697,
	1, 357,
	5, 357,
	12, 357,
	13, 357,
	14, 357,
	15, 357,
	17, 357,
	19, 357,
	30, 357,
	31, 357,
	44, 357,
	45, 357,
	46, 357,
	47, 357,
	48, 357,
	50, 357,
	51, 357,
	54, 357,
	55, 357,
	57, 357,
	58, 357,
	349, 357,
	-2, 375,
	-1, 700,
	55, 44,
	57, 44,
	-2, 48,
	-1, 850,
	114, 649,
	-2, 645,
	-1, 1081,
	5, 30,
	-2, 442,
	-1, 1112,
	5, 29,
	-2, 582,
	-1, 1356,
	5, 30,
	-2, 583,
	-1, 1409,
	5, 29,
	-2, 585,
	-1, 1487,
	5, 30,
	-2, 586,
}

const yyPrivate = 57344

const yyLast = 16834

var yyAct = [...]int{

	323, 1523, 1513, 1474, 1318, 652, 1207, 1376, 1421, 1389,
	1115, 1133, 964, 353, 340, 1258, 1292, 937, 1259, 554,
	960, 935, 301, 987, 1116, 1044, 651, 3, 1160, 57,
	1007, 1255, 81, 1139, 1073, 1265, 266, 973, 397, 266,
	963, 1271, 1230, 885, 875, 1186, 813, 882, 1177, 977,
	713, 924, 939, 799, 327, 693, 903, 852, 583, 589,
	521, 391, 386, 712, 917, 383, 1003, 266, 81, 595,
	325, 388, 266, 604, 266, 702, 56, 1026, 300, 1516,
	1500, 1511, 666, 61, 1485, 694, 1508, 394, 310, 1319,
	1499, 1025, 541, 1484, 1247, 667, 1348, 526, 24, 25,
	52, 27, 28, 253, 556, 1286, 251, 314, 255, 63,
	64, 65, 66, 67, 954, 329, 292, 43, 1287, 1288,
	298, 1030, 29, 48, 49, 297, 261, 257, 258, 259,
	1024, 1449, 617, 616, 626, 627, 619, 620, 621, 622,
	623, 624, 625, 618, 38, 714, 628, 715, 54, 365,
	986, 371, 372, 369, 370, 368, 367, 366, 955, 956,
	993, 293, 294, 295, 296, 373, 374, 299, 1148, 577,
	558, 1147, 560, 572, 1149, 1168, 1209, 573, 570, 571,
	1021, 1018, 1019, 908, 1017, 1379, 884, 1396, 994, 1339,
	1337, 291, 788, 565, 566, 575, 787, 1510, 1211, 785,
	1507, 254, 1475, 557, 559, 1206, 918, 1467, 1531, 31,
	32, 34, 33, 36, 978, 50, 1028, 1031, 980, 1134,
	1136, 542, 252, 528, 255, 1212, 792, 1422, 576, 1210,
	980, 786, 789, 776, 276, 1281, 1280, 37, 44, 45,
	1424, 1430, 46, 47, 35, 260, 1279, 524, 1527, 522,
	531, 980, 266, 1023, 268, 256, 1456, 266, 39, 40,
	286, 41, 42, 266, 1231, 1038, 1359, 1203, 1037, 266,
	1090, 1218, 81, 1205, 81, 1022, 81, 81, 1144, 81,
	1087, 81, 1161, 538, 640, 641, 1304, 81, 555, 621,
	622, 623, 624, 625, 618, 1100, 1135, 628, 354, 51,
	1067, 1450, 1233, 824, 1483, 708, 608, 548, 1423, 618,
	950, 269, 628, 961, 1027, 628, 979, 81, 272, 994,
	821, 976, 974, 814, 975, 818, 280, 275, 979, 1029,
	972, 978, 1194, 592, 591, 522, 1235, 1305, 1239, 601,
	1234, 1046, 1232, 53, 1431, 1429, 535, 1237, 536, 979,
	51, 537, 544, 545, 546, 603, 1236, 1525, 306, 278,
	1526, 70, 1524, 1192, 859, 285, 603, 1465, 520, 1238,
	1240, 1204, 1439, 1202, 640, 641, 827, 828, 857, 858,
	856, 266, 266, 266, 640, 641, 1269, 602, 601, 1249,
	81, 593, 270, 716, 1251, 904, 81, 71, 1085, 904,
	1084, 1097, 983, 692, 603, 1532, 815, 778, 984, 394,
	842, 844, 845, 1470, 579, 580, 843, 602, 601, 282,
	273, 1045, 283, 284, 289, 1166, 602, 601, 274, 277,
	1193, 271, 288, 287, 603, 1198, 1195, 1188, 1196, 1191,
	638, 1187, 598, 603, 1189, 1190, 1533, 1351, 701, 669,
	671, 673, 675, 677, 679, 680, 1489, 54, 1197, 250,
	706, 710, 670, 672, 582, 676, 678, 855, 681, 617,
	616, 626, 627, 619, 620, 621, 622, 623, 624, 625,
	618, 823, 1385, 628, 581, 617, 616, 626, 627, 619,
	620, 621, 622, 623, 624, 625, 618, 697, 1384, 628,
	1181, 617, 616, 626, 627, 619, 620, 621, 622, 623,
	624, 625, 618, 602, 601, 628, 527, 1064, 1065, 1066,
	822, 266, 1180, 1074, 380, 381, 81, 876, 1086, 877,
	603, 266, 266, 81, 81, 81, 1169, 602, 601, 266,
	1491, 1150, 266, 1151, 1466, 266, 1403, 1382, 1215, 266,
	1178, 81, 81, 1049, 603, 22, 81, 81, 81, 266,
	81, 81, 1427, 1509, 1493, 582, 81, 81, 1427, 1478,
	553, 1463, 553, 1321, 553, 553, 1161, 553, 1156, 553,
	602, 601, 1427, 582, 582, 553, 878, 801, 1427, 1457,
	1436, 1350, 798, 529, 530, 81, 797, 603, 1427, 1426,
	266, 1374, 1373, 1361, 582, 51, 81, 793, 343, 342,
	345, 346, 347, 348, 829, 305, 779, 344, 349, 777,
	637, 1358, 582, 639, 774, 853, 1311, 1310, 849, 617,
	616, 626, 627, 619, 620, 621, 622, 623, 624, 625,
	618, 1307, 1308, 628, 1307, 1306, 1435, 850, 1079, 582,
	81, 650, 550, 654, 655, 656, 657, 658, 659, 660,
	661, 662, 848, 665, 668, 668, 668, 674, 668, 668,
	674, 668, 682, 683, 684, 685, 686, 687, 688, 846,
	698, 889, 831, 81, 81, 543, 926, 929, 930, 931,
	927, 266, 928, 932, 921, 582, 1272, 1273, 534, 266,
	266, 24, 704, 266, 266, 887, 582, 266, 266, 266,
	81, 879, 880, 352, 894, 897, 723, 722, 704, 533,
	905, 1328, 1301, 81, 945, 1110, 58, 854, 947, 394,
	981, 1111, 901, 913, 914, 1256, 920, 1140, 1268, 944,
	1140, 703, 965, 887, 1268, 79, 705, 801, 707, 24,
	1354, 54, 24, 921, 1438, 1309, 989, 990, 991, 992,
	1152, 953, 705, 921, 703, 943, 1103, 1079, 1079, 1102,
	948, 951, 1000, 1001, 1002, 952, 830, 266, 81, 1408,
	81, 396, 921, 1079, 968, 1268, 266, 266, 266, 266,
	266, 703, 266, 266, 709, 825, 266, 81, 791, 54,
	54, 307, 54, 1501, 1009, 926, 929, 930, 931, 927,
	1391, 928, 932, 266, 697, 266, 266, 1208, 697, 988,
	266, 1366, 697, 1008, 553, 1345, 1297, 1272, 1273, 1518,
	1155, 553, 553, 553, 1004, 886, 888, 1005, 1006, 999,
	316, 998, 890, 891, 849, 1392, 896, 899, 900, 553,
	553, 54, 1011, 1514, 553, 553, 553, 1299, 553, 553,
	837, 1275, 1256, 850, 553, 553, 1182, 819, 795, 1278,
	853, 912, 1127, 1277, 915, 916, 1125, 1128, 1054, 1124,
	1129, 1126, 930, 931, 1123, 1055, 311, 312, 1056, 1505,
	1498, 1217, 1051, 1503, 1061, 1060, 1063, 1173, 995, 996,
	997, 617, 616, 626, 627, 619, 620, 621, 622, 623,
	624, 625, 618, 721, 1069, 628, 596, 596, 551, 584,
	1165, 1472, 266, 266, 266, 266, 266, 1471, 1352, 597,
	597, 585, 1406, 594, 266, 1163, 1157, 266, 51, 1387,
	1014, 266, 794, 934, 1112, 266, 308, 309, 1059, 302,
	1481, 303, 1480, 654, 58, 1443, 1058, 1140, 574, 1096,
	1520, 1519, 1520, 889, 81, 1091, 1141, 1088, 812, 599,
	1453, 1380, 854, 820, 60, 1117, 1153, 1118, 62, 1142,
	1121, 1143, 55, 965, 1130, 396, 1, 396, 1512, 396,
	396, 1320, 396, 1138, 396, 1388, 1020, 936, 1473, 1420,
	396, 698, 1291, 971, 1145, 698, 1162, 552, 1119, 1120,
	962, 1122, 81, 81, 1172, 69, 1174, 1175, 1176, 519,
	68, 1464, 970, 969, 1428, 1158, 1159, 1378, 982, 1167,
	606, 985, 1298, 1164, 1469, 729, 727, 697, 697, 697,
	697, 697, 81, 728, 726, 731, 730, 725, 1179, 279,
	389, 933, 697, 717, 1010, 600, 72, 1201, 266, 1200,
	697, 1016, 1076, 817, 1199, 568, 1077, 569, 81, 281,
	1078, 636, 1057, 1081, 1082, 1083, 553, 1146, 553, 395,
	1089, 1263, 826, 1092, 1093, 588, 1479, 1222, 1094, 1099,
	1214, 1442, 1095, 1101, 663, 553, 1104, 1105, 1106, 1107,
	1108, 902, 328, 396, 841, 1224, 341, 338, 339, 718,
	832, 1109, 610, 326, 81, 81, 1223, 318, 696, 1132,
	1252, 1257, 689, 1229, 1248, 1260, 925, 923, 922, 1242,
	1241, 384, 1274, 1185, 1270, 695, 1327, 1062, 81, 850,
	1262, 1347, 1448, 586, 590, 836, 320, 26, 1068, 1267,
	1170, 1171, 59, 81, 1054, 81, 81, 313, 19, 18,
	609, 17, 20, 1276, 16, 1117, 15, 1290, 14, 1283,
	539, 30, 965, 1282, 965, 1285, 21, 13, 12, 11,
	10, 9, 8, 266, 7, 6, 5, 1295, 1296, 4,
	304, 1302, 1303, 1289, 1294, 653, 23, 2, 0, 0,
	0, 266, 0, 0, 664, 0, 0, 81, 0, 0,
	81, 81, 81, 266, 0, 0, 1113, 1114, 0, 81,
	698, 698, 698, 698, 698, 0, 619, 620, 621, 622,
	623, 624, 625, 618, 0, 936, 628, 1137, 1222, 396,
	1326, 0, 0, 698, 0, 0, 396, 396, 396, 1220,
	0, 0, 0, 0, 0, 1332, 1333, 0, 1334, 0,
	0, 1336, 1228, 1338, 396, 396, 1335, 0, 0, 396,
	396, 396, 0, 396, 396, 0, 0, 0, 0, 396,
	396, 561, 0, 562, 563, 0, 564, 0, 567, 1353,
	81, 0, 0, 1363, 578, 0, 0, 1362, 81, 0,
	0, 0, 1153, 1313, 0, 0, 1372, 0, 833, 965,
	0, 553, 0, 81, 0, 0, 1314, 1375, 1316, 606,
	81, 0, 396, 1117, 0, 0, 0, 0, 0, 266,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1390,
	553, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1394, 0, 0, 0, 0, 0, 0, 0, 0, 81,
	81, 1393, 81, 881, 0, 0, 0, 81, 1260, 81,
	81, 81, 266, 1407, 1415, 81, 1416, 1417, 1418, 906,
	0, 0, 0, 0, 1409, 1414, 0, 0, 0, 1419,
	0, 1425, 81, 266, 0, 1432, 910, 911, 0, 1440,
	0, 0, 1433, 0, 1434, 0, 0, 1329, 0, 0,
	1261, 0, 51, 0, 1331, 816, 0, 0, 0, 0,
	0, 0, 1260, 396, 1454, 1340, 1341, 0, 81, 1462,
	0, 1461, 0, 0, 0, 0, 396, 1455, 0, 81,
	81, 0, 839, 840, 697, 1355, 1356, 1357, 1476, 1360,
	0, 0, 1477, 0, 0, 0, 0, 81, 1390, 965,
	0, 0, 0, 0, 1486, 0, 1371, 1381, 266, 1383,
	0, 0, 0, 0, 0, 0, 81, 642, 643, 644,
	645, 646, 647, 648, 649, 1495, 0, 1497, 0, 0,
	0, 396, 0, 396, 1395, 653, 0, 1502, 892, 893,
	1504, 0, 81, 0, 0, 0, 0, 0, 1117, 1506,
	396, 0, 0, 0, 0, 1517, 0, 0, 0, 0,
	0, 0, 1528, 0, 0, 0, 0, 0, 0, 0,
	0, 1402, 0, 775, 0, 0, 0, 0, 396, 0,
	782, 783, 784, 0, 0, 0, 1346, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 959, 802, 803,
	0, 0, 0, 804, 805, 806, 0, 808, 809, 0,
	0, 0, 0, 810, 811, 0, 0, 0, 1368, 1369,
	1370, 1444, 1445, 1446, 1447, 0, 0, 0, 1451, 1452,
	0, 0, 0, 0, 1225, 0, 0, 0, 0, 0,
	1458, 1459, 1460, 0, 0, 0, 0, 0, 0, 0,
	0, 553, 0, 0, 617, 616, 626, 627, 619, 620,
	621, 622, 623, 624, 625, 618, 699, 698, 628, 0,
	0, 0, 1482, 0, 906, 0, 0, 0, 0, 1487,
	0, 0, 0, 0, 0, 0, 0, 0, 587, 0,
	0, 0, 0, 1261, 1344, 0, 1410, 1492, 0, 0,
	0, 0, 263, 1052, 1053, 0, 590, 626, 627, 619,
	620, 621, 622, 623, 624, 625, 618, 396, 0, 628,
	0, 0, 0, 0, 264, 0, 1437, 290, 0, 0,
	0, 0, 0, 385, 0, 0, 0, 0, 523, 0,
	525, 0, 0, 0, 0, 1529, 1530, 1261, 0, 51,
	0, 0, 317, 1343, 0, 387, 0, 0, 0, 0,
	264, 0, 264, 0, 0, 1183, 396, 0, 1080, 0,
	617, 616, 626, 627, 619, 620, 621, 622, 623, 624,
	625, 618, 0, 0, 628, 1098, 0, 0, 0, 0,
	0, 0, 0, 1342, 0, 396, 0, 851, 0, 0,
	860, 861, 862, 863, 864, 865, 866, 867, 868, 869,
	870, 871, 872, 873, 874, 0, 0, 0, 0, 0,
	0, 396, 0, 0, 0, 1013, 0, 1015, 0, 617,
	616, 626, 627, 619, 620, 621, 622, 623, 624, 625,
	618, 0, 0, 628, 1042, 0, 0, 0, 0, 1515,
	0, 0, 0, 0, 396, 909, 0, 0, 0, 0,
	0, 0, 0, 0, 906, 0, 0, 1264, 1266, 617,
	616, 626, 627, 619, 620, 621, 622, 623, 624, 625,
	618, 0, 0, 628, 0, 0, 0, 0, 0, 0,
	0, 1266, 0, 617, 616, 626, 627, 619, 620, 621,
	622, 623, 624, 625, 618, 0, 396, 628, 396, 1293,
	0, 0, 0, 0, 0, 0, 0, 0, 532, 0,
	0, 0, 0, 540, 0, 0, 0, 1216, 0, 547,
	0, 0, 0, 0, 0, 549, 0, 0, 0, 0,
	264, 0, 0, 0, 0, 264, 0, 0, 0, 0,
	0, 264, 0, 0, 0, 0, 0, 264, 0, 0,
	1317, 0, 0, 1322, 1323, 1324, 0, 0, 0, 0,
	0, 612, 396, 615, 0, 0, 0, 0, 1250, 629,
	630, 631, 632, 633, 634, 635, 1075, 613, 614, 611,
	617, 616, 626, 627, 619, 620, 621, 622, 623, 624,
	625, 618, 0, 0, 628, 0, 617, 616, 626, 627,
	619, 620, 621, 622, 623, 624, 625, 618, 0, 0,
	628, 1284, 906, 616, 626, 627, 619, 620, 621, 622,
	623, 624, 625, 618, 0, 0, 628, 0, 0, 0,
	0, 0, 0, 396, 1070, 1071, 1072, 691, 0, 700,
	0, 1377, 0, 0, 0, 0, 0, 0, 0, 0,
	1184, 0, 0, 0, 0, 0, 396, 0, 0, 264,
	264, 264, 0, 396, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1213,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1411, 1412, 0, 1413, 0, 0, 0, 0,
	1377, 0, 1377, 1377, 1377, 0, 0, 0, 1293, 0,
	0, 0, 1349, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 653, 0, 0, 1377, 0, 0, 0, 0,
	1364, 0, 0, 1365, 0, 0, 1367, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1468, 0, 0, 0, 0, 0, 724, 0, 0,
	0, 0, 396, 396, 0, 0, 0, 780, 781, 0,
	0, 0, 0, 0, 0, 790, 0, 906, 385, 264,
	1488, 796, 0, 0, 0, 0, 0, 0, 0, 264,
	264, 0, 0, 0, 0, 807, 0, 264, 0, 1494,
	264, 0, 0, 264, 0, 0, 0, 800, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 264, 0, 0,
	0, 0, 0, 0, 0, 1377, 0, 0, 0, 0,
	0, 1226, 1227, 0, 0, 0, 838, 0, 0, 0,
	0, 0, 0, 0, 1243, 1244, 0, 1245, 1246, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 264, 1253,
	1254, 0, 0, 0, 0, 0, 0, 800, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 317,
	0, 0, 0, 0, 317, 317, 0, 0, 317, 317,
	317, 0, 1300, 0, 907, 0, 0, 919, 0, 0,
	1386, 1496, 653, 0, 0, 0, 0, 0, 0, 0,
	946, 0, 0, 317, 317, 317, 317, 317, 0, 264,
	0, 0, 0, 0, 0, 0, 0, 264, 941, 0,
	0, 264, 264, 0, 0, 264, 949, 800, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1330, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1012, 0, 0, 0, 0, 0, 0,
	0, 0, 1032, 1033, 1034, 1035, 1036, 0, 1039, 1040,
	0, 0, 1041, 0, 0, 264, 0, 0, 0, 0,
	0, 0, 0, 0, 264, 264, 264, 264, 264, 1043,
	264, 264, 0, 0, 264, 0, 1050, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 746, 0, 0,
	0, 264, 0, 1047, 1048, 0, 0, 0, 264, 0,
	0, 0, 0, 800, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1397,
	1398, 1399, 1400, 1401, 0, 0, 0, 1404, 1405, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 317, 0, 0, 0, 0, 734, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	317, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 907,
	264, 264, 264, 264, 264, 747, 0, 0, 0, 0,
	0, 0, 1131, 0, 0, 264, 0, 0, 0, 941,
	0, 0, 0, 264, 0, 0, 0, 0, 760, 763,
	764, 765, 766, 767, 768, 0, 769, 770, 771, 772,
	773, 748, 749, 750, 751, 732, 733, 761, 0, 735,
	0, 736, 737, 738, 739, 740, 741, 742, 743, 744,
	745, 752, 753, 754, 755, 756, 757, 758, 759, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1521, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1219, 0, 0, 0, 0, 762,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 264, 0, 0, 0,
	0, 317, 0, 0, 0, 0, 0, 317, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 317, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 800,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 907,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1312,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1315, 0, 0,
	0, 264, 0, 0, 0, 0, 0, 0, 0, 1325,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 264,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 264, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 907, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 264, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1441,
	941, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 264, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 506, 494, 0, 451, 509, 424,
	441, 517, 442, 445, 482, 409, 464, 165, 439, 0,
	428, 404, 435, 405, 426, 453, 111, 457, 423, 496,
	467, 508, 137, 429, 1490, 515, 139, 473, 0, 211,
	153, 0, 907, 455, 498, 462, 491, 450, 483, 414,
	472, 510, 440, 480, 511, 0, 264, 0, 80, 0,
	966, 967, 0, 0, 0, 0, 0, 101, 0, 477,
	505, 437, 479, 481, 403, 474, 0, 407, 410, 516,
	501, 432, 433, 1154, 0, 0, 0, 0, 0, 0,
	454, 463, 488, 448, 0, 0, 0, 0, 0, 0,
	0, 0, 430, 0, 471, 0, 0, 0, 411, 408,
	0, 0, 452, 0, 0, 0, 413, 0, 431, 489,
	0, 401, 119, 493, 500, 449, 267, 504, 447, 446,
	507, 184, 0, 215, 122, 136, 97, 83, 93, 0,
	121, 162, 191, 195, 497, 427, 436, 105, 434, 193,
	172, 231, 470, 174, 192, 140, 221, 185, 230, 240,
	241, 218, 238, 245, 208, 86, 217, 229, 102, 203,
	88, 227, 214, 151, 131, 132, 87, 0, 189, 110,
	117, 107, 164, 224, 225, 106, 248, 94, 237, 90,
	95, 236, 158, 220, 228, 152, 145, 89, 226, 150,
	144, 135, 114, 124, 182, 142, 183, 125, 155, 154,
	156, 0, 406, 0, 212, 234, 249, 99, 422, 219,
	243, 244, 0, 0, 100, 118, 113, 181, 157, 96,
	127, 209, 134, 141, 188, 247, 171, 194, 103, 233,
	210, 418, 421, 416, 417, 465, 466, 512, 513, 514,
	490, 412, 0, 419, 420, 0, 495, 502, 503, 469,
	82, 91, 138, 246, 186, 116, 235, 402, 415, 109,
	425, 0, 0, 438, 443, 444, 456, 458, 459, 460,
	461, 468, 475, 476, 478, 484, 485, 486, 487, 492,
	499, 518, 84, 85, 92, 98, 104, 108, 112, 115,
	120, 123, 126, 128, 129, 130, 133, 143, 146, 147,
	148, 149, 159, 160, 161, 163, 166, 167, 168, 169,
	170, 173, 175, 176, 177, 178, 179, 180, 187, 190,
	196, 197, 198, 199, 200, 201, 202, 204, 205, 206,
	207, 213, 216, 222, 223, 232, 239, 242, 506, 494,
	0, 451, 509, 424, 441, 517, 442, 445, 482, 409,
	464, 165, 439, 0, 428, 404, 435, 405, 426, 453,
	111, 457, 423, 496, 467, 508, 137, 429, 0, 515,
	139, 473, 0, 211, 153, 0, 0, 455, 498, 462,
	491, 450, 483, 414, 472, 510, 440, 480, 511, 0,
	0, 0, 80, 0, 966, 967, 0, 0, 0, 0,
	0, 101, 0, 477, 505, 437, 479, 481, 403, 474,
	0, 407, 410, 516, 501, 432, 433, 0, 0, 0,
	0, 0, 0, 0, 454, 463, 488, 448, 0, 0,
	0, 0, 0, 0, 0, 0, 430, 0, 471, 0,
	0, 0, 411, 408, 0, 0, 452, 0, 0, 0,
	413, 0, 431, 489, 0, 401, 119, 493, 500, 449,
	267, 504, 447, 446, 507, 184, 0, 215, 122, 136,
	97, 83, 93, 0, 121, 162, 191, 195, 497, 427,
	436, 105, 434, 193, 172, 231, 470, 174, 192, 140,
	221, 185, 230, 240, 241, 218, 238, 245, 208, 86,
	217, 229, 102, 203, 88, 227, 214, 151, 131, 132,
	87, 0, 189, 110, 117, 107, 164, 224, 225, 106,
	248, 94, 237, 90, 95, 236, 158, 220, 228, 152,
	145, 89, 226, 150, 144, 135, 114, 124, 182, 142,
	183, 125, 155, 154, 156, 0, 406, 0, 212, 234,
	249, 99, 422, 219, 243, 244, 0, 0, 100, 118,
	113, 181, 157, 96, 127, 209, 134, 141, 188, 247,
	171, 194, 103, 233, 210, 418, 421, 416, 417, 465,
	466, 512, 513, 514, 490, 412, 0, 419, 420, 0,
	495, 502, 503, 469, 82, 91, 138, 246, 186, 116,
	235, 402, 415, 109, 425, 0, 0, 438, 443, 444,
	456, 458, 459, 460, 461, 468, 475, 476, 478, 484,
	485, 486, 487, 492, 499, 518, 84, 85, 92, 98,
	104, 108, 112, 115, 120, 123, 126, 128, 129, 130,
	133, 143, 146, 147, 148, 149, 159, 160, 161, 163,
	166, 167, 168, 169, 170, 173, 175, 176, 177, 178,
	179, 180, 187, 190, 196, 197, 198, 199, 200, 201,
	202, 204, 205, 206, 207, 213, 216, 222, 223, 232,
	239, 242, 506, 494, 0, 451, 509, 424, 441, 517,
	442, 445, 482, 409, 464, 165, 439, 0, 428, 404,
	435, 405, 426, 453, 111, 457, 423, 496, 467, 508,
	137, 429, 0, 515, 139, 473, 0, 211, 153, 0,
	0, 455, 498, 462, 491, 450, 483, 414, 472, 510,
	440, 480, 511, 54, 0, 0, 80, 0, 0, 0,
	0, 0, 0, 0, 0, 101, 0, 477, 505, 437,
	479, 481, 403, 474, 0, 407, 410, 516, 501, 432,
	433, 0, 0, 0, 0, 0, 0, 0, 454, 463,
	488, 448, 0, 0, 0, 0, 0, 0, 0, 0,
	430, 0, 471, 0, 0, 0, 411, 408, 0, 0,
	452, 0, 0, 0, 413, 0, 431, 489, 0, 401,
	119, 493, 500, 449, 267, 504, 447, 446, 507, 184,
	0, 215, 122, 136, 97, 83, 93, 0, 121, 162,
	191, 195, 497, 427, 436, 105, 434, 193, 172, 231,
	470, 174, 192, 140, 221, 185, 230, 240, 241, 218,
	238, 245, 208, 86, 217, 229, 102, 203, 88, 227,
	214, 151, 131, 132, 87, 0, 189, 110, 117, 107,
	164, 224, 225, 106, 248, 94, 237, 90, 95, 236,
	158, 220, 228, 152, 145, 89, 226, 150, 144, 135,
	114, 124, 182, 142, 183, 125, 155, 154, 156, 0,
	406, 0, 212, 234, 249, 99, 422, 219, 243, 244,
	0, 0, 100, 118, 113, 181, 157, 96, 127, 209,
	134, 141, 188, 247, 171, 194, 103, 233, 210, 418,
	421, 416, 417, 465, 466, 512, 513, 514, 490, 412,
	0, 419, 420, 0, 495, 502, 503, 469, 82, 91,
	138, 246, 186, 116, 235, 402, 415, 109, 425, 0,
	0, 438, 443, 444, 456, 458, 459, 460, 461, 468,
	475, 476, 478, 484, 485, 486, 487, 492, 499, 518,
	84, 85, 92, 98, 104, 108, 112, 115, 120, 123,
	126, 128, 129, 130, 133, 143, 146, 147, 148, 149,
	159, 160, 161, 163, 166, 167, 168, 169, 170, 173,
	175, 176, 177, 178, 179, 180, 187, 190, 196, 197,
	198, 199, 200, 201, 202, 204, 205, 206, 207, 213,
	216, 222, 223, 232, 239, 242, 506, 494, 0, 451,
	509, 424, 441, 517, 442, 445, 482, 409, 464, 165,
	439, 0, 428, 404, 435, 405, 426, 453, 111, 457,
	423, 496, 467, 508, 137, 429, 0, 515, 139, 473,
	0, 211, 153, 0, 0, 455, 498, 462, 491, 450,
	483, 414, 472, 510, 440, 480, 511, 0, 0, 0,
	80, 0, 0, 0, 0, 0, 0, 0, 0, 101,
	0, 477, 505, 437, 479, 481, 403, 474, 0, 407,
	410, 516, 501, 432, 433, 0, 0, 0, 0, 0,
	0, 0, 454, 463, 488, 448, 0, 0, 0, 0,
	0, 0, 1221, 0, 430, 0, 471, 0, 0, 0,
	411, 408, 0, 0, 452, 0, 0, 0, 413, 0,
	431, 489, 0, 401, 119, 493, 500, 449, 267, 504,
	447, 446, 507, 184, 0, 215, 122, 136, 97, 83,
	93, 0, 121, 162, 191, 195, 497, 427, 436, 105,
	434, 193, 172, 231, 470, 174, 192, 140, 221, 185,
	230, 240, 241, 218, 238, 245, 208, 86, 217, 229,
	102, 203, 88, 227, 214, 151, 131, 132, 87, 0,
	189, 110, 117, 107, 164, 224, 225, 106, 248, 94,
	237, 90, 95, 236, 158, 220, 228, 152, 145, 89,
	226, 150, 144, 135, 114, 124, 182, 142, 183, 125,
	155, 154, 156, 0, 406, 0, 212, 234, 249, 99,
	422, 219, 243, 244, 0, 0, 100, 118, 113, 181,
	157, 96, 127, 209, 134, 141, 188, 247, 171, 194,
	103, 233, 210, 418, 421, 416, 417, 465, 466, 512,
	513, 514, 490, 412, 0, 419, 420, 0, 495, 502,
	503, 469, 82, 91, 138, 246, 186, 116, 235, 402,
	415, 109, 425, 0, 0, 438, 443, 444, 456, 458,
	459, 460, 461, 468, 475, 476, 478, 484, 485, 486,
	487, 492, 499, 518, 84, 85, 92, 98, 104, 108,
	112, 115, 120, 123, 126, 128, 129, 130, 133, 143,
	146, 147, 148, 149, 159, 160, 161, 163, 166, 167,
	168, 169, 170, 173, 175, 176, 177, 178, 179, 180,
	187, 190, 196, 197, 198, 199, 200, 201, 202, 204,
	205, 206, 207, 213, 216, 222, 223, 232, 239, 242,
	506, 494, 0, 451, 509, 424, 441, 517, 442, 445,
	482, 409, 464, 165, 439, 0, 428, 404, 435, 405,
	426, 453, 111, 457, 423, 496, 467, 508, 137, 429,
	0, 515, 139, 473, 0, 211, 153, 0, 0, 455,
	498, 462, 491, 450, 483, 414, 472, 510, 440, 480,
	511, 0, 0, 0, 265, 0, 0, 0, 0, 0,
	0, 0, 0, 101, 0, 477, 505, 437, 479, 481,
	403, 474, 0, 407, 410, 516, 501, 432, 433, 0,
	0, 0, 0, 0, 0, 0, 454, 463, 488, 448,
	0, 0, 0, 0, 0, 0, 950, 0, 430, 0,
	471, 0, 0, 0, 411, 408, 0, 0, 452, 0,
	0, 0, 413, 0, 431, 489, 0, 401, 119, 493,
	500, 449, 267, 504, 447, 446, 507, 184, 0, 215,
	122, 136, 97, 83, 93, 0, 121, 162, 191, 195,
	497, 427, 436, 105, 434, 193, 172, 231, 470, 174,
	192, 140, 221, 185, 230, 240, 241, 218, 238, 245,
	208, 86, 217, 229, 102, 203, 88, 227, 214, 151,
	131, 132, 87, 0, 189, 110, 117, 107, 164, 224,
	225, 106, 248, 94, 237, 90, 95, 236, 158, 220,
	228, 152, 145, 89, 226, 150, 144, 135, 114, 124,
	182, 142, 183, 125, 155, 154, 156, 0, 406, 0,
	212, 234, 249, 99, 422, 219, 243, 244, 0, 0,
	100, 118, 113, 181, 157, 96, 127, 209, 134, 141,
	188, 247, 171, 194, 103, 233, 210, 418, 421, 416,
	417, 465, 466, 512, 513, 514, 490, 412, 0, 419,
	420, 0, 495, 502, 503, 469, 82, 91, 138, 246,
	186, 116, 235, 402, 415, 109, 425, 0, 0, 438,
	443, 444, 456, 458, 459, 460, 461, 468, 475, 476,
	478, 484, 485, 486, 487, 492, 499, 518, 84, 85,
	92, 98, 104, 108, 112, 115, 120, 123, 126, 128,
	129, 130, 133, 143, 146, 147, 148, 149, 159, 160,
	161, 163, 166, 167, 168, 169, 170, 173, 175, 176,
	177, 178, 179, 180, 187, 190, 196, 197, 198, 199,
	200, 201, 202, 204, 205, 206, 207, 213, 216, 222,
	223, 232, 239, 242, 506, 494, 0, 451, 509, 424,
	441, 517, 442, 445, 482, 409, 464, 165, 439, 0,
	428, 404, 435, 405, 426, 453, 111, 457, 423, 496,
	467, 508, 137, 429, 0, 515, 139, 473, 0, 211,
	153, 0, 0, 455, 498, 462, 491, 450, 483, 414,
	472, 510, 440, 480, 511, 0, 0, 0, 322, 0,
	0, 0, 0, 0, 0, 0, 0, 101, 0, 477,
	505, 437, 479, 481, 403, 474, 0, 407, 410, 516,
	501, 432, 433, 0, 0, 0, 0, 0, 0, 0,
	454, 463, 488, 448, 0, 0, 0, 0, 0, 0,
	847, 0, 430, 0, 471, 0, 0, 0, 411, 408,
	0, 0, 452, 0, 0, 0, 413, 0, 431, 489,
	0, 401, 119, 493, 500, 449, 267, 504, 447, 446,
	507, 184, 0, 215, 122, 136, 97, 83, 93, 0,
	121, 162, 191, 195, 497, 427, 436, 105, 434, 193,
	172, 231, 470, 174, 192, 140, 221, 185, 230, 240,
	241, 218, 238, 245, 208, 86, 217, 229, 102, 203,
	88, 227, 214, 151, 131, 132, 87, 0, 189, 110,
	117, 107, 164, 224, 225, 106, 248, 94, 237, 90,
	95, 236, 158, 220, 228, 152, 145, 89, 226, 150,
	144, 135, 114, 124, 182, 142, 183, 125, 155, 154,
	156, 0, 406, 0, 212, 234, 249, 99, 422, 219,
	243, 244, 0, 0, 100, 118, 113, 181, 157, 96,
	127, 209, 134, 141, 188, 247, 171, 194, 103, 233,
	210, 418, 421, 416, 417, 465, 466, 512, 513, 514,
	490, 412, 0, 419, 420, 0, 495, 502, 503, 469,
	82, 91, 138, 246, 186, 116, 235, 402, 415, 109,
	425, 0, 0, 438, 443, 444, 456, 458, 459, 460,
	461, 468, 475, 476, 478, 484, 485, 486, 487, 492,
	499, 518, 84, 85, 92, 98, 104, 108, 112, 115,
	120, 123, 126, 128, 129, 130, 133, 143, 146, 147,
	148, 149, 159, 160, 161, 163, 166, 167, 168, 169,
	170, 173, 175, 176, 177, 178, 179, 180, 187, 190,
	196, 197, 198, 199, 200, 201, 202, 204, 205, 206,
	207, 213, 216, 222, 223, 232, 239, 242, 506, 494,
	0, 451, 509, 424, 441, 517, 442, 445, 482, 409,
	464, 165, 439, 0, 428, 404, 435, 405, 426, 453,
	111, 457, 423, 496, 467, 508, 137, 429, 0, 515,
	139, 473, 0, 211, 153, 0, 0, 455, 498, 462,
	491, 450, 483, 414, 472, 510, 440, 480, 511, 0,
	0, 0, 80, 0, 0, 0, 0, 0, 0, 0,
	0, 101, 0, 477, 505, 437, 479, 481, 403, 474,
	0, 407, 410, 516, 501, 432, 433, 0, 0, 0,
	0, 0, 0, 0, 454, 463, 488, 448, 0, 0,
	0, 0, 0, 0, 0, 0, 430, 0, 471, 0,
	0, 0, 411, 408, 0, 0, 452, 0, 0, 0,
	413, 0, 431, 489, 0, 401, 119, 493, 500, 449,
	267, 504, 447, 446, 507, 184, 0, 215, 122, 136,
	97, 83, 93, 0, 121, 162, 191, 195, 497, 427,
	436, 105, 434, 193, 172, 231, 470, 174, 192, 140,
	221, 185, 230, 240, 241, 218, 238, 245, 208, 86,
	217, 229, 102, 203, 88, 227, 214, 151, 131, 132,
	87, 0, 189, 110, 117, 107, 164, 224, 225, 106,
	248, 94, 237, 90, 95, 236, 158, 220, 228, 152,
	145, 89, 226, 150, 144, 135, 114, 124, 182, 142,
	183, 125, 155, 154, 156, 0, 406, 0, 212, 234,
	249, 99, 422, 219, 243, 244, 0, 0, 100, 118,
	113, 181, 157, 96, 127, 209, 134, 141, 188, 247,
	171, 194, 103, 233, 210, 418, 421, 416, 417, 465,
	466, 512, 513, 514, 490, 412, 0, 419, 420, 0,
	495, 502, 503, 469, 82, 91, 138, 246, 186, 116,
	235, 402, 415, 109, 425, 0, 0, 438, 443, 444,
	456, 458, 459, 460, 461, 468, 475, 476, 478, 484,
	485, 486, 487, 492, 499, 518, 84, 85, 92, 98,
	104, 108, 112, 115, 120, 123, 126, 128, 129, 130,
	133, 143, 146, 147, 148, 149, 159, 160, 161, 163,
	166, 167, 168, 169, 170, 173, 175, 176, 177, 178,
	179, 180, 187, 190, 196, 197, 198, 199, 200, 201,
	202, 204, 205, 206, 207, 213, 216, 222, 223, 232,
	239, 242, 506, 494, 0, 451, 509, 424, 441, 517,
	442, 445, 482, 409, 464, 165, 439, 0, 428, 404,
	435, 405, 426, 453, 111, 457, 423, 496, 467, 508,
	137, 429, 0, 515, 139, 473, 0, 211, 153, 0,
	0, 455, 498, 462, 491, 450, 483, 414, 472, 510,
	440, 480, 511, 0, 0, 0, 322, 0, 0, 0,
	0, 0, 0, 0, 0, 101, 0, 477, 505, 437,
	479, 481, 403, 474, 0, 407, 410, 516, 501, 432,
	433, 0, 0, 0, 0, 0, 0, 0, 454, 463,
	488, 448, 0, 0, 0, 0, 0, 0, 0, 0,
	430, 0, 471, 0, 0, 0, 411, 408, 0, 0,
	452, 0, 0, 0, 413, 0, 431, 489, 0, 401,
	119, 493, 500, 449, 267, 504, 447, 446, 507, 184,
	0, 215, 122, 136, 97, 83, 93, 0, 121, 162,
	191, 195, 497, 427, 436, 105, 434, 193, 172, 231,
	470, 174, 192, 140, 221, 185, 230, 240, 241, 218,
	238, 245, 208, 86, 217, 229, 102, 203, 88, 227,
	214, 151, 131, 132, 87, 0, 189, 110, 117, 107,
	164, 224, 225, 106, 248, 94, 237, 90, 95, 236,
	158, 220, 228, 152, 145, 89, 226, 150, 144, 135,
	114, 124, 182, 142, 183, 125, 155, 154, 156, 0,
	406, 0, 212, 234, 249, 99, 422, 219, 243, 244,
	0, 0, 100, 118, 113, 181, 157, 96, 127, 209,
	134, 141, 188, 247, 171, 194, 103, 233, 210, 418,
	421, 416, 417, 465, 466, 512, 513, 514, 490, 412,
	0, 419, 420, 0, 495, 502, 503, 469, 82, 91,
	138, 246, 186, 116, 235, 402, 415, 109, 425, 0,
	0, 438, 443, 444, 456, 458, 459, 460, 461, 468,
	475, 476, 478, 484, 485, 486, 487, 492, 499, 518,
	84, 85, 92, 98, 104, 108, 112, 115, 120, 123,
	126, 128, 129, 130, 133, 143, 146, 147, 148, 149,
	159, 160, 161, 163, 166, 167, 168, 169, 170, 173,
	175, 176, 177, 178, 179, 180, 187, 190, 196, 197,
	198, 199, 200, 201, 202, 204, 205, 206, 207, 213,
	216, 222, 223, 232, 239, 242, 506, 494, 0, 451,
	509, 424, 441, 517, 442, 445, 482, 409, 464, 165,
	439, 0, 428, 404, 435, 405, 426, 453, 111, 457,
	423, 496, 467, 508, 137, 429, 0, 515, 139, 473,
	0, 211, 153, 0, 0, 455, 498, 462, 491, 450,
	483, 414, 472, 510, 440, 480, 511, 0, 0, 0,
	80, 0, 0, 0, 0, 0, 0, 0, 0, 101,
	0, 477, 505, 437, 479, 481, 403, 474, 0, 407,
	410, 516, 501, 432, 433, 0, 0, 0, 0, 0,
	0, 0, 454, 463, 488, 448, 0, 0, 0, 0,
	0, 0, 0, 0, 430, 0, 471, 0, 0, 0,
	411, 408, 0, 0, 452, 0, 0, 0, 413, 0,
	431, 489, 0, 401, 119, 493, 500, 449, 267, 504,
	447, 446, 507, 184, 0, 215, 122, 136, 97, 83,
	93, 0, 121, 162, 191, 195, 497, 427, 436, 105,
	434, 193, 172, 231, 470, 174, 192, 140, 221, 185,
	230, 240, 241, 218, 238, 245, 208, 86, 217, 229,
	102, 203, 88, 227, 214, 151, 131, 132, 87, 0,
	189, 110, 117, 107, 164, 224, 225, 106, 248, 94,
	237, 90, 399, 236, 158, 220, 228, 152, 145, 89,
	226, 150, 144, 135, 114, 124, 182, 142, 183, 125,
	155, 154, 156, 0, 406, 0, 212, 234, 249, 99,
	422, 219, 243, 244, 0, 0, 100, 118, 113, 181,
	400, 398, 127, 209, 134, 141, 188, 247, 171, 194,
	103, 233, 210, 418, 421, 416, 417, 465, 466, 512,
	513, 514, 490, 412, 0, 419, 420, 0, 495, 502,
	503, 469, 82, 91, 138, 246, 186, 116, 235, 402,
	415, 109, 425, 0, 0, 438, 443, 444, 456, 458,
	459, 460, 461, 468, 475, 476, 478, 484, 485, 486,
	487, 492, 499, 518, 84, 85, 92, 98, 104, 108,
	112, 115, 120, 123, 126, 128, 129, 130, 133, 143,
	146, 147, 148, 149, 159, 160, 161, 163, 166, 167,
	168, 169, 170, 173, 175, 176, 177, 178, 179, 180,
	187, 190, 196, 197, 198, 199, 200, 201, 202, 204,
	205, 206, 207, 213, 216, 222, 223, 232, 239, 242,
	506, 494, 0, 451, 509, 424, 441, 517, 442, 445,
	482, 409, 464, 165, 439, 0, 428, 404, 435, 405,
	426, 453, 111, 457, 423, 496, 467, 508, 137, 429,
	0, 515, 139, 473, 0, 211, 153, 0, 0, 455,
	498, 462, 491, 450, 483, 414, 472, 510, 440, 480,
	511, 0, 0, 0, 265, 0, 0, 0, 0, 0,
	0, 0, 0, 101, 0, 477, 505, 437, 479, 481,
	403, 474, 0, 407, 410, 516, 501, 432, 433, 0,
	0, 0, 0, 0, 0, 0, 454, 463, 488, 448,
	0, 0, 0, 0, 0, 0, 0, 0, 430, 0,
	471, 0, 0, 0, 411, 408, 0, 0, 452, 0,
	0, 0, 413, 0, 431, 489, 0, 401, 119, 493,
	500, 449, 267, 504, 447, 446, 507, 184, 0, 215,
	122, 136, 97, 83, 93, 0, 121, 162, 191, 195,
	497, 427, 436, 105, 434, 193, 172, 231, 470, 174,
	192, 140, 221, 185, 230, 240, 241, 218, 238, 245,
	208, 86, 217, 229, 102, 203, 88, 227, 214, 151,
	131, 132, 87, 0, 189, 110, 117, 107, 164, 224,
	225, 106, 248, 94, 237, 90, 95, 236, 158, 220,
	228, 152, 145, 89, 226, 150, 144, 135, 114, 124,
	182, 142, 183, 125, 155, 154, 156, 0, 406, 0,
	212, 234, 249, 99, 422, 219, 243, 244, 0, 0,
	100, 118, 113, 181, 157, 96, 127, 209, 134, 141,
	188, 247, 171, 194, 103, 233, 210, 418, 421, 416,
	417, 465, 466, 512, 513, 514, 490, 412, 0, 419,
	420, 0, 495, 502, 503, 469, 82, 91, 138, 246,
	186, 116, 235, 402, 415, 109, 425, 0, 0, 438,
	443, 444, 456, 458, 459, 460, 461, 468, 475, 476,
	478, 484, 485, 486, 487, 492, 499, 518, 84, 85,
	92, 98, 104, 108, 112, 115, 120, 123, 126, 128,
	129, 130, 133, 143, 146, 147, 148, 149, 159, 160,
	161, 163, 166, 167, 168, 169, 170, 173, 175, 176,
	177, 178, 179, 180, 187, 190, 196, 197, 198, 199,
	200, 201, 202, 204, 205, 206, 207, 213, 216, 222,
	223, 232, 239, 242, 506, 494, 0, 451, 509, 424,
	441, 517, 442, 445, 482, 409, 464, 165, 439, 0,
	428, 404, 435, 405, 426, 453, 111, 457, 423, 496,
	467, 508, 137, 429, 0, 515, 139, 473, 0, 211,
	153, 0, 0, 455, 498, 462, 491, 450, 483, 414,
	472, 510, 440, 480, 511, 0, 0, 0, 80, 0,
	0, 0, 0, 0, 0, 0, 0, 101, 0, 477,
	505, 437, 479, 481, 403, 474, 0, 407, 410, 516,
	501, 432, 433, 0, 0, 0, 0, 0, 0, 0,
	454, 463, 488, 448, 0, 0, 0, 0, 0, 0,
	0, 0, 430, 0, 471, 0, 0, 0, 411, 408,
	0, 0, 452, 0, 0, 0, 413, 0, 431, 489,
	0, 401, 119, 493, 500, 449, 267, 504, 447, 446,
	507, 184, 0, 215, 122, 136, 97, 83, 93, 0,
	121, 162, 191, 195, 497, 427, 436, 105, 434, 193,
	172, 231, 470, 174, 192, 140, 221, 185, 230, 240,
	241, 218, 238, 245, 208, 86, 217, 711, 102, 203,
	88, 227, 214, 151, 131, 132, 87, 0, 189, 110,
	117, 107, 164, 224, 225, 106, 248, 94, 237, 90,
	399, 236, 158, 220, 228, 152, 145, 89, 226, 150,
	144, 135, 114, 124, 182, 142, 183, 125, 155, 154,
	156, 0, 406, 0, 212, 234, 249, 99, 422, 219,
	243, 244, 0, 0, 100, 118, 113, 181, 400, 398,
	127, 209, 134, 141, 188, 247, 171, 194, 103, 233,
	210, 418, 421, 416, 417, 465, 466, 512, 513, 514,
	490, 412, 0, 419, 420, 0, 495, 502, 503, 469,
	82, 91, 138, 246, 186, 116, 235, 402, 415, 109,
	425, 0, 0, 438, 443, 444, 456, 458, 459, 460,
	461, 468, 475, 476, 478, 484, 485, 486, 487, 492,
	499, 518, 84, 85, 92, 98, 104, 108, 112, 115,
	120, 123, 126, 128, 129, 130, 133, 143, 146, 147,
	148, 149, 159, 160, 161, 163, 166, 167, 168, 169,
	170, 173, 175, 176, 177, 178, 179, 180, 187, 190,
	196, 197, 198, 199, 200, 201, 202, 204, 205, 206,
	207, 213, 216, 222, 223, 232, 239, 242, 506, 494,
	0, 451, 509, 424, 441, 517, 442, 445, 482, 409,
	464, 165, 439, 0, 428, 404, 435, 405, 426, 453,
	111, 457, 423, 496, 467, 508, 137, 429, 0, 515,
	139, 473, 0, 211, 153, 0, 0, 455, 498, 462,
	491, 450, 483, 414, 472, 510, 440, 480, 511, 0,
	0, 0, 80, 0, 0, 0, 0, 0, 0, 0,
	0, 101, 0, 477, 505, 437, 479, 481, 403, 474,
	0, 407, 410, 516, 501, 432, 433, 0, 0, 0,
	0, 0, 0, 0, 454, 463, 488, 448, 0, 0,
	0, 0, 0, 0, 0, 0, 430, 0, 471, 0,
	0, 0, 411, 408, 0, 0, 452, 0, 0, 0,
	413, 0, 431, 489, 0, 401, 119, 493, 500, 449,
	267, 504, 447, 446, 507, 184, 0, 215, 122, 136,
	97, 83, 93, 0, 121, 162, 191, 195, 497, 427,
	436, 105, 434, 193, 172, 231, 470, 174, 192, 140,
	221, 185, 230, 240, 241, 218, 238, 245, 208, 86,
	217, 390, 102, 203, 88, 227, 214, 151, 131, 132,
	87, 0, 189, 110, 117, 107, 164, 224, 225, 106,
	248, 94, 237, 90, 399, 236, 158, 220, 228, 152,
	145, 89, 226, 150, 144, 135, 114, 124, 182, 142,
	183, 125, 155, 154, 156, 0, 406, 0, 212, 234,
	249, 99, 422, 219, 243, 244, 0, 0, 100, 118,
	113, 181, 400, 398, 393, 392, 134, 141, 188, 247,
	171, 194, 103, 233, 210, 418, 421, 416, 417, 465,
	466, 512, 513, 514, 490, 412, 0, 419, 420, 0,
	495, 502, 503, 469, 82, 91, 138, 246, 186, 116,
	235, 402, 415, 109, 425, 0, 0, 438, 443, 444,
	456, 458, 459, 460, 461, 468, 475, 476, 478, 484,
	485, 486, 487, 492, 499, 518, 84, 85, 92, 98,
	104, 108, 112, 115, 120, 123, 126, 128, 129, 130,
	133, 143, 146, 147, 148, 149, 159, 160, 161, 163,
	166, 167, 168, 169, 170, 173, 175, 176, 177, 178,
	179, 180, 187, 190, 196, 197, 198, 199, 200, 201,
	202, 204, 205, 206, 207, 213, 216, 222, 223, 232,
	239, 242, 165, 0, 0, 0, 0, 324, 0, 0,
	0, 111, 0, 321, 0, 0, 0, 137, 0, 0,
	364, 139, 0, 0, 211, 153, 0, 0, 0, 0,
	355, 356, 0, 0, 0, 0, 0, 0, 957, 0,
	54, 0, 0, 322, 343, 342, 345, 346, 347, 348,
	0, 0, 101, 344, 349, 350, 351, 958, 0, 0,
	319, 336, 0, 363, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 333, 334, 0, 0, 0, 0, 378,
	0, 335, 0, 0, 330, 331, 332, 337, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 119, 377, 0,
	0, 267, 0, 0, 375, 0, 184, 0, 215, 122,
	136, 97, 83, 93, 0, 121, 162, 191, 195, 0,
	0, 0, 105, 0, 193, 172, 231, 0, 174, 192,
	140, 221, 185, 230, 240, 241, 218, 238, 245, 208,
	86, 217, 229, 102, 203, 88, 227, 214, 151, 131,
	132, 87, 0, 189, 110, 117, 107, 164, 224, 225,
	106, 248, 94, 237, 90, 95, 236, 158, 220, 228,
	152, 145, 89, 226, 150, 144, 135, 114, 124, 182,
	142, 183, 125, 155, 154, 156, 0, 0, 0, 212,
	234, 249, 99, 0, 219, 243, 244, 0, 0, 100,
	118, 113, 181, 157, 96, 127, 209, 134, 141, 188,
	247, 171, 194, 103, 233, 210, 365, 376, 371, 372,
	369, 370, 368, 367, 366, 379, 357, 358, 359, 360,
	362, 0, 373, 374, 361, 82, 91, 138, 246, 186,
	116, 235, 0, 0, 109, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 84, 85, 92,
	98, 104, 108, 112, 115, 120, 123, 126, 128, 129,
	130, 133, 143, 146, 147, 148, 149, 159, 160, 161,
	163, 166, 167, 168, 169, 170, 173, 175, 176, 177,
	178, 179, 180, 187, 190, 196, 197, 198, 199, 200,
	201, 202, 204, 205, 206, 207, 213, 216, 222, 223,
	232, 239, 242, 165, 0, 0, 883, 0, 324, 0,
	0, 0, 111, 0, 321, 0, 0, 0, 137, 0,
	0, 364, 139, 0, 0, 211, 153, 0, 0, 0,
	0, 355, 356, 0, 0, 0, 0, 0, 0, 0,
	0, 54, 0, 0, 322, 343, 342, 345, 346, 347,
	348, 0, 0, 101, 344, 349, 350, 351, 0, 0,
	0, 319, 336, 0, 363, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 333, 334, 315, 0, 0, 0,
	378, 0, 335, 0, 0, 330, 331, 332, 337, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 119, 377,
	0, 0, 267, 0, 0, 375, 0, 184, 0, 215,
	122, 136, 97, 83, 93, 0, 121, 162, 191, 195,
	0, 0, 0, 105, 0, 193, 172, 231, 0, 174,
	192, 140, 221, 185, 230, 240, 241, 218, 238, 245,
	208, 86, 217, 229, 102, 203, 88, 227, 214, 151,
	131, 132, 87, 0, 189, 110, 117, 107, 164, 224,
	225, 106, 248, 94, 237, 90, 95, 236, 158, 220,
	228, 152, 145, 89, 226, 150, 144, 135, 114, 124,
	182, 142, 183, 125, 155, 154, 156, 0, 0, 0,
	212, 234, 249, 99, 0, 219, 243, 244, 0, 0,
	100, 118, 113, 181, 157, 96, 127, 209, 134, 141,
	188, 247, 171, 194, 103, 233, 210, 365, 376, 371,
	372, 369, 370, 368, 367, 366, 379, 357, 358, 359,
	360, 362, 0, 373, 374, 361, 82, 91, 138, 246,
	186, 116, 235, 0, 0, 109, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 84, 85,
	92, 98, 104, 108, 112, 115, 120, 123, 126, 128,
	129, 130, 133, 143, 146, 147, 148, 149, 159, 160,
	161, 163, 166, 167, 168, 169, 170, 173, 175, 176,
	177, 178, 179, 180, 187, 190, 196, 197, 198, 199,
	200, 201, 202, 204, 205, 206, 207, 213, 216, 222,
	223, 232, 239, 242, 165, 0, 0, 0, 0, 324,
	0, 0, 0, 111, 0, 321, 0, 0, 0, 137,
	0, 0, 364, 139, 0, 0, 211, 153, 0, 0,
	0, 0, 355, 356, 0, 0, 0, 0, 0, 0,
	0, 0, 54, 0, 582, 322, 343, 342, 345, 346,
	347, 348, 0, 0, 101, 344, 349, 350, 351, 0,
	0, 0, 319, 336, 0, 363, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 333, 334, 0, 0, 0,
	0, 378, 0, 335, 0, 0, 330, 331, 332, 337,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 119,
	377, 0, 0, 267, 0, 0, 375, 0, 184, 0,
	215, 122, 136, 97, 83, 93, 0, 121, 162, 191,
	195, 0, 0, 0, 105, 0, 193, 172, 231, 0,
	174, 192, 140, 221, 185, 230, 240, 241, 218, 238,
	245, 208, 86, 217, 229, 102, 203, 88, 227, 214,
	151, 131, 132, 87, 0, 189, 110, 117, 107, 164,
	224, 225, 106, 248, 94, 237, 90, 95, 236, 158,
	220, 228, 152, 145, 89, 226, 150, 144, 135, 114,
	124, 182, 142, 183, 125, 155, 154, 156, 0, 0,
	0, 212, 234, 249, 99, 0, 219, 243, 244, 0,
	0, 100, 118, 113, 181, 157, 96, 127, 209, 134,
	141, 188, 247, 171, 194, 103, 233, 210, 365, 376,
	371, 372, 369, 370, 368, 367, 366, 379, 357, 358,
	359, 360, 362, 0, 373, 374, 361, 82, 91, 138,
	246, 186, 116, 235, 0, 0, 109, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 84,
	85, 92, 98, 104, 108, 112, 115, 120, 123, 126,
	128, 129, 130, 133, 143, 146, 147, 148, 149, 159,
	160, 161, 163, 166, 167, 168, 169, 170, 173, 175,
	176, 177, 178, 179, 180, 187, 190, 196, 197, 198,
	199, 200, 201, 202, 204, 205, 206, 207, 213, 216,
	222, 223, 232, 239, 242, 165, 0, 0, 0, 0,
	324, 0, 0, 0, 111, 0, 321, 0, 0, 0,
	137, 0, 0, 364, 139, 0, 0, 211, 153, 0,
	0, 0, 0, 355, 356, 0, 0, 0, 0, 0,
	0, 0, 0, 54, 0, 0, 322, 343, 342, 345,
	346, 347, 348, 0, 0, 101, 344, 349, 350, 351,
	0, 0, 0, 319, 336, 0, 363, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 333, 334, 315, 0,
	0, 0, 378, 0, 335, 0, 0, 330, 331, 332,
	337, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	119, 377, 0, 0, 267, 0, 0, 375, 0, 184,
	0, 215, 122, 136, 97, 83, 93, 0, 121, 162,
	191, 195, 0, 0, 0, 105, 0, 193, 172, 231,
	0, 174, 192, 140, 221, 185, 230, 240, 241, 218,
	238, 245, 208, 86, 217, 229, 102, 203, 88, 227,
	214, 151, 131, 132, 87, 0, 189, 110, 117, 107,
	164, 224, 225, 106, 248, 94, 237, 90, 95, 236,
	158, 220, 228, 152, 145, 89, 226, 150, 144, 135,
	114, 124, 182, 142, 183, 125, 155, 154, 156, 0,
	0, 0, 212, 234, 249, 99, 0, 219, 243, 244,
	0, 0, 100, 118, 113, 181, 157, 96, 127, 209,
	134, 141, 188, 247, 171, 194, 103, 233, 210, 365,
	376, 371, 372, 369, 370, 368, 367, 366, 379, 357,
	358, 359, 360, 362, 0, 373, 374, 361, 82, 91,
	138, 246, 186, 116, 235, 0, 0, 109, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	84, 85, 92, 98, 104, 108, 112, 115, 120, 123,
	126, 128, 129, 130, 133, 143, 146, 147, 148, 149,
	159, 160, 161, 163, 166, 167, 168, 169, 170, 173,
	175, 176, 177, 178, 179, 180, 187, 190, 196, 197,
	198, 199, 200, 201, 202, 204, 205, 206, 207, 213,
	216, 222, 223, 232, 239, 242, 165, 0, 0, 0,
	0, 324, 0, 0, 0, 111, 0, 321, 0, 0,
	0, 137, 0, 0, 364, 139, 0, 0, 211, 153,
	0, 0, 0, 0, 355, 356, 0, 0, 0, 0,
	0, 0, 0, 0, 54, 0, 0, 322, 343, 898,
	345, 346, 347, 348, 0, 0, 101, 344, 349, 350,
	351, 0, 0, 0, 319, 336, 0, 363, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 333, 334, 315,
	0, 0, 0, 378, 0, 335, 0, 0, 330, 331,
	332, 337, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 119, 377, 0, 0, 267, 0, 0, 375, 0,
	184, 0, 215, 122, 136, 97, 83, 93, 0, 121,
	162, 191, 195, 0, 0, 0, 105, 0, 193, 172,
	231, 0, 174, 192, 140, 221, 185, 230, 240, 241,
	218, 238, 245, 208, 86, 217, 229, 102, 203, 88,
	227, 214, 151, 131, 132, 87, 0, 189, 110, 117,
	107, 164, 224, 225, 106, 248, 94, 237, 90, 95,
	236, 158, 220, 228, 152, 145, 89, 226, 150, 144,
	135, 114, 124, 182, 142, 183, 125, 155, 154, 156,
	0, 0, 0, 212, 234, 249, 99, 0, 219, 243,
	244, 0, 0, 100, 118, 113, 181, 157, 96, 127,
	209, 134, 141, 188, 247, 171, 194, 103, 233, 210,
	365, 376, 371, 372, 369, 370, 368, 367, 366, 379,
	357, 358, 359, 360, 362, 0, 373, 374, 361, 82,
	91, 138, 246, 186, 116, 235, 0, 0, 109, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 84, 85, 92, 98, 104, 108, 112, 115, 120,
	123, 126, 128, 129, 130, 133, 143, 146, 147, 148,
	149, 159, 160, 161, 163, 166, 167, 168, 169, 170,
	173, 175, 176, 177, 178, 179, 180, 187, 190, 196,
	197, 198, 199, 200, 201, 202, 204, 205, 206, 207,
	213, 216, 222, 223, 232, 239, 242, 165, 0, 0,
	0, 0, 324, 0, 0, 0, 111, 0, 321, 0,
	0, 0, 137, 0, 0, 364, 139, 0, 0, 211,
	153, 0, 0, 0, 0, 355, 356, 0, 0, 0,
	0, 0, 0, 0, 0, 54, 0, 0, 322, 343,
	895, 345, 346, 347, 348, 0, 0, 101, 344, 349,
	350, 351, 0, 0, 0, 319, 336, 0, 363, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 333, 334,
	315, 0, 0, 0, 378, 0, 335, 0, 0, 330,
	331, 332, 337, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 119, 377, 0, 0, 267, 0, 0, 375,
	0, 184, 0, 215, 122, 136, 97, 83, 93, 0,
	121, 162, 191, 195, 0, 0, 0, 105, 0, 193,
	172, 231, 0, 174, 192, 140, 221, 185, 230, 240,
	241, 218, 238, 245, 208, 86, 217, 229, 102, 203,
	88, 227, 214, 151, 131, 132, 87, 0, 189, 110,
	117, 107, 164, 224, 225, 106, 248, 94, 237, 90,
	95, 236, 158, 220, 228, 152, 145, 89, 226, 150,
	144, 135, 114, 124, 182, 142, 183, 125, 155, 154,
	156, 0, 0, 0, 212, 234, 249, 99, 0, 219,
	243, 244, 0, 0, 100, 118, 113, 181, 157, 96,
	127, 209, 134, 141, 188, 247, 171, 194, 103, 233,
	210, 365, 376, 371, 372, 369, 370, 368, 367, 366,
	379, 357, 358, 359, 360, 362, 0, 373, 374, 361,
	82, 91, 138, 246, 186, 116, 235, 0, 0, 109,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 84, 85, 92, 98, 104, 108, 112, 115,
	120, 123, 126, 128, 129, 130, 133, 143, 146, 147,
	148, 149, 159, 160, 161, 163, 166, 167, 168, 169,
	170, 173, 175, 176, 177, 178, 179, 180, 187, 190,
	196, 197, 198, 199, 200, 201, 202, 204, 205, 206,
	207, 213, 216, 222, 223, 232, 239, 242, 24, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	165, 0, 0, 0, 0, 324, 0, 0, 0, 111,
	0, 321, 0, 0, 0, 137, 0, 0, 364, 139,
	0, 0, 211, 153, 0, 0, 0, 0, 355, 356,
	0, 0, 0, 0, 0, 0, 0, 0, 54, 0,
	0, 322, 343, 342, 345, 346, 347, 348, 0, 0,
	101, 344, 349, 350, 351, 0, 0, 0, 319, 336,
	0, 363, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 333, 334, 0, 0, 0, 0, 378, 0, 335,
	0, 0, 330, 331, 332, 337, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 119, 377, 0, 0, 267,
	0, 0, 375, 0, 184, 0, 215, 122, 136, 97,
	83, 93, 0, 121, 162, 191, 195, 0, 0, 0,
	105, 0, 193, 172, 231, 0, 174, 192, 140, 221,
	185, 230, 240, 241, 218, 238, 245, 208, 86, 217,
	229, 102, 203, 88, 227, 214, 151, 131, 132, 87,
	0, 189, 110, 117, 107, 164, 224, 225, 106, 248,
	94, 237, 90, 95, 236, 158, 220, 228, 152, 145,
	89, 226, 150, 144, 135, 114, 124, 182, 142, 183,
	125, 155, 154, 156, 0, 0, 0, 212, 234, 249,
	99, 0, 219, 243, 244, 0, 0, 100, 118, 113,
	181, 157, 96, 127, 209, 134, 141, 188, 247, 171,
	194, 103, 233, 210, 365, 376, 371, 372, 369, 370,
	368, 367, 366, 379, 357, 358, 359, 360, 362, 0,
	373, 374, 361, 82, 91, 138, 246, 186, 116, 235,
	0, 0, 109, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 84, 85, 92, 98, 104,
	108, 112, 115, 120, 123, 126, 128, 129, 130, 133,
	143, 146, 147, 148, 149, 159, 160, 161, 163, 166,
	167, 168, 169, 170, 173, 175, 176, 177, 178, 179,
	180, 187, 190, 196, 197, 198, 199, 200, 201, 202,
	204, 205, 206, 207, 213, 216, 222, 223, 232, 239,
	242, 165, 0, 0, 0, 0, 324, 0, 0, 0,
	111, 0, 321, 0, 0, 0, 137, 0, 0, 364,
	139, 0, 0, 211, 153, 0, 0, 0, 0, 355,
	356, 0, 0, 0, 0, 0, 0, 0, 0, 54,
	0, 0, 322, 343, 342, 345, 346, 347, 348, 0,
	0, 101, 344, 349, 350, 351, 0, 0, 0, 319,
	336, 0, 363, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 333, 334, 0, 0, 0, 0, 378, 0,
	335, 0, 0, 330, 331, 332, 337, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 119, 377, 0, 0,
	267, 0, 0, 375, 0, 184, 0, 215, 122, 136,
	97, 83, 93, 0, 121, 162, 191, 195, 0, 0,
	0, 105, 0, 193, 172, 231, 0, 174, 192, 140,
	221, 185, 230, 240, 241, 218, 238, 245, 208, 86,
	217, 229, 102, 203, 88, 227, 214, 151, 131, 132,
	87, 0, 189, 110, 117, 107, 164, 224, 225, 106,
	248, 94, 237, 90, 95, 236, 158, 220, 228, 152,
	145, 89, 226, 150, 144, 135, 114, 124, 182, 142,
	183, 125, 155, 154, 156, 0, 0, 0, 212, 234,
	249, 99, 0, 219, 243, 244, 0, 0, 100, 118,
	113, 181, 157, 96, 127, 209, 134, 141, 188, 247,
	171, 194, 103, 233, 210, 365, 376, 371, 372, 369,
	370, 368, 367, 366, 379, 357, 358, 359, 360, 362,
	0, 373, 374, 361, 82, 91, 138, 246, 186, 116,
	235, 0, 0, 109, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 84, 85, 92, 98,
	104, 108, 112, 115, 120, 123, 126, 128, 129, 130,
	133, 143, 146, 147, 148, 149, 159, 160, 161, 163,
	166, 167, 168, 169, 170, 173, 175, 176, 177, 178,
	179, 180, 187, 190, 196, 197, 198, 199, 200, 201,
	202, 204, 205, 206, 207, 213, 216, 222, 223, 232,
	239, 242, 165, 0, 0, 0, 0, 0, 0, 0,
	0, 111, 0, 0, 0, 0, 0, 137, 0, 0,
	364, 139, 0, 0, 211, 153, 0, 0, 0, 0,
	355, 356, 0, 0, 0, 0, 0, 0, 0, 0,
	54, 0, 0, 322, 343, 342, 345, 346, 347, 348,
	0, 0, 101, 344, 349, 350, 351, 0, 0, 0,
	0, 336, 0, 363, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 333, 334, 0, 0, 0, 0, 378,
	0, 335, 0, 0, 330, 331, 332, 337, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 119, 377, 0,
	0, 267, 0, 0, 375, 0, 184, 0, 215, 122,
	136, 97, 83, 93, 0, 121, 162, 191, 195, 0,
	0, 0, 105, 0, 193, 172, 231, 1522, 174, 192,
	140, 221, 185, 230, 240, 241, 218, 238, 245, 208,
	86, 217, 229, 102, 203, 88, 227, 214, 151, 131,
	132, 87, 0, 189, 110, 117, 107, 164, 224, 225,
	106, 248, 94, 237, 90, 95, 236, 158, 220, 228,
	152, 145, 89, 226, 150, 144, 135, 114, 124, 182,
	142, 183, 125, 155, 154, 156, 0, 0, 0, 212,
	234, 249, 99, 0, 219, 243, 244, 0, 0, 100,
	118, 113, 181, 157, 96, 127, 209, 134, 141, 188,
	247, 171, 194, 103, 233, 210, 365, 376, 371, 372,
	369, 370, 368, 367, 366, 379, 357, 358, 359, 360,
	362, 0, 373, 374, 361, 82, 91, 138, 246, 186,
	116, 235, 0, 0, 109, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 84, 85, 92,
	98, 104, 108, 112, 115, 120, 123, 126, 128, 129,
	130, 133, 143, 146, 147, 148, 149, 159, 160, 161,
	163, 166, 167, 168, 169, 170, 173, 175, 176, 177,
	178, 179, 180, 187, 190, 196, 197, 198, 199, 200,
	201, 202, 204, 205, 206, 207, 213, 216, 222, 223,
	232, 239, 242, 165, 0, 0, 0, 0, 0, 0,
	0, 0, 111, 0, 0, 0, 0, 0, 137, 0,
	0, 364, 139, 0, 0, 211, 153, 0, 0, 0,
	0, 355, 356, 0, 0, 0, 0, 0, 0, 0,
	0, 54, 0, 582, 322, 343, 342, 345, 346, 347,
	348, 0, 0, 101, 344, 349, 350, 351, 0, 0,
	0, 0, 336, 0, 363, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 333, 334, 0, 0, 0, 0,
	378, 0, 335, 0, 0, 330, 331, 332, 337, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 119, 377,
	0, 0, 267, 0, 0, 375, 0, 184, 0, 215,
	122, 136, 97, 83, 93, 0, 121, 162, 191, 195,
	0, 0, 0, 105, 0, 193, 172, 231, 0, 174,
	192, 140, 221, 185, 230, 240, 241, 218, 238, 245,
	208, 86, 217, 229, 102, 203, 88, 227, 214, 151,
	131, 132, 87, 0, 189, 110, 117, 107, 164, 224,
	225, 106, 248, 94, 237, 90, 95, 236, 158, 220,
	228, 152, 145, 89, 226, 150, 144, 135, 114, 124,
	182, 142, 183, 125, 155, 154, 156, 0, 0, 0,
	212, 234, 249, 99, 0, 219, 243, 244, 0, 0,
	100, 118, 113, 181, 157, 96, 127, 209, 134, 141,
	188, 247, 171, 194, 103, 233, 210, 365, 376, 371,
	372, 369, 370, 368, 367, 366, 379, 357, 358, 359,
	360, 362, 0, 373, 374, 361, 82, 91, 138, 246,
	186, 116, 235, 0, 0, 109, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 84, 85,
	92, 98, 104, 108, 112, 115, 120, 123, 126, 128,
	129, 130, 133, 143, 146, 147, 148, 149, 159, 160,
	161, 163, 166, 167, 168, 169, 170, 173, 175, 176,
	177, 178, 179, 180, 187, 190, 196, 197, 198, 199,
	200, 201, 202, 204, 205, 206, 207, 213, 216, 222,
	223, 232, 239, 242, 165, 0, 0, 0, 0, 0,
	0, 0, 0, 111, 0, 0, 0, 0, 0, 137,
	0, 0, 364, 139, 0, 0, 211, 153, 0, 0,
	0, 0, 355, 356, 0, 0, 0, 0, 0, 0,
	0, 0, 54, 0, 0, 322, 343, 342, 345, 346,
	347, 348, 0, 0, 101, 344, 349, 350, 351, 0,
	0, 0, 0, 336, 0, 363, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 333, 334, 0, 0, 0,
	0, 378, 0, 335, 0, 0, 330, 331, 332, 337,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 119,
	377, 0, 0, 267, 0, 0, 375, 0, 184, 0,
	215, 122, 136, 97, 83, 93, 0, 121, 162, 191,
	195, 0, 0, 0, 105, 0, 193, 172, 231, 0,
	174, 192, 140, 221, 185, 230, 240, 241, 218, 238,
	245, 208, 86, 217, 229, 102, 203, 88, 227, 214,
	151, 131, 132, 87, 0, 189, 110, 117, 107, 164,
	224, 225, 106, 248, 94, 237, 90, 95, 236, 158,
	220, 228, 152, 145, 89, 226, 150, 144, 135, 114,
	124, 182, 142, 183, 125, 155, 154, 156, 0, 0,
	0, 212, 234, 249, 99, 0, 219, 243, 244, 0,
	0, 100, 118, 113, 181, 157, 96, 127, 209, 134,
	141, 188, 247, 171, 194, 103, 233, 210, 365, 376,
	371, 372, 369, 370, 368, 367, 366, 379, 357, 358,
	359, 360, 362, 0, 373, 374, 361, 82, 91, 138,
	246, 186, 116, 235, 0, 0, 109, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 84,
	85, 92, 98, 104, 108, 112, 115, 120, 123, 126,
	128, 129, 130, 133, 143, 146, 147, 148, 149, 159,
	160, 161, 163, 166, 167, 168, 169, 170, 173, 175,
	176, 177, 178, 179, 180, 187, 190, 196, 197, 198,
	199, 200, 201, 202, 204, 205, 206, 207, 213, 216,
	222, 223, 232, 239, 242, 165, 0, 0, 0, 0,
	0, 0, 0, 0, 111, 0, 0, 0, 0, 0,
	137, 0, 0, 0, 139, 0, 0, 211, 153, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 80, 0, 0, 0,
	0, 0, 0, 0, 0, 101, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 617, 616, 626, 627, 619, 620, 621, 622,
	623, 624, 625, 618, 0, 0, 628, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	119, 0, 0, 0, 267, 0, 0, 0, 0, 184,
	0, 215, 122, 136, 97, 83, 93, 0, 121, 162,
	191, 195, 0, 0, 0, 105, 0, 193, 172, 231,
	0, 174, 192, 140, 221, 185, 230, 240, 241, 218,
	238, 245, 208, 86, 217, 229, 102, 203, 88, 227,
	214, 151, 131, 132, 87, 0, 189, 110, 117, 107,
	164, 224, 225, 106, 248, 94, 237, 90, 95, 236,
	158, 220, 228, 152, 145, 89, 226, 150, 144, 135,
	114, 124, 182, 142, 183, 125, 155, 154, 156, 0,
	0, 0, 212, 234, 249, 99, 0, 219, 243, 244,
	0, 0, 100, 118, 113, 181, 157, 96, 127, 209,
	134, 141, 188, 247, 171, 194, 103, 233, 210, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 82, 91,
	138, 246, 186, 116, 235, 0, 0, 109, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	84, 85, 92, 98, 104, 108, 112, 115, 120, 123,
	126, 128, 129, 130, 133, 143, 146, 147, 148, 149,
	159, 160, 161, 163, 166, 167, 168, 169, 170, 173,
	175, 176, 177, 178, 179, 180, 187, 190, 196, 197,
	198, 199, 200, 201, 202, 204, 205, 206, 207, 213,
	216, 222, 223, 232, 239, 242, 165, 0, 0, 0,
	605, 0, 0, 0, 0, 111, 0, 0, 0, 0,
	0, 137, 0, 0, 0, 139, 0, 0, 211, 153,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 80, 0, 607,
	0, 0, 0, 0, 0, 0, 101, 0, 0, 0,
	0, 0, 602, 601, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 603,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 119, 0, 0, 0, 267, 0, 0, 0, 0,
	184, 0, 215, 122, 136, 97, 83, 93, 0, 121,
	162, 191, 195, 0, 0, 0, 105, 0, 193, 172,
	231, 0, 174, 192, 140, 221, 185, 230, 240, 241,
	218, 238, 245, 208, 86, 217, 229, 102, 203, 88,
	227, 214, 151, 131, 132, 87, 0, 189, 110, 117,
	107, 164, 224, 225, 106, 248, 94, 237, 90, 95,
	236, 158, 220, 228, 152, 145, 89, 226, 150, 144,
	135, 114, 124, 182, 142, 183, 125, 155, 154, 156,
	0, 0, 0, 212, 234, 249, 99, 0, 219, 243,
	244, 0, 0, 100, 118, 113, 181, 157, 96, 127,
	209, 134, 141, 188, 247, 171, 194, 103, 233, 210,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 82,
	91, 138, 246, 186, 116, 235, 0, 0, 109, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 84, 85, 92, 98, 104, 108, 112, 115, 120,
	123, 126, 128, 129, 130, 133, 143, 146, 147, 148,
	149, 159, 160, 161, 163, 166, 167, 168, 169, 170,
	173, 175, 176, 177, 178, 179, 180, 187, 190, 196,
	197, 198, 199, 200, 201, 202, 204, 205, 206, 207,
	213, 216, 222, 223, 232, 239, 242, 165, 0, 0,
	0, 0, 0, 0, 0, 0, 111, 0, 0, 0,
	0, 0, 137, 0, 0, 0, 139, 0, 0, 211,
	153, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 80, 0,
	0, 0, 0, 0, 0, 0, 0, 101, 0, 0,
	0, 0, 0, 74, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 119, 76, 77, 0, 73, 0, 0, 0,
	78, 184, 0, 215, 122, 136, 97, 83, 93, 0,
	121, 162, 191, 195, 0, 0, 0, 105, 0, 193,
	172, 231, 0, 174, 192, 140, 221, 185, 230, 240,
	241, 218, 238, 245, 208, 86, 217, 229, 102, 203,
	88, 227, 214, 151, 131, 132, 87, 0, 189, 110,
	117, 107, 164, 224, 225, 106, 248, 94, 237, 90,
	95, 236, 158, 220, 228, 152, 145, 89, 226, 150,
	144, 135, 114, 124, 182, 142, 183, 125, 155, 154,
	156, 0, 0, 0, 212, 234, 249, 99, 0, 219,
	243, 244, 0, 0, 100, 118, 113, 181, 157, 96,
	127, 209, 134, 141, 188, 247, 171, 194, 103, 233,
	210, 0, 75, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	82, 91, 138, 246, 186, 116, 235, 0, 0, 109,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 84, 85, 92, 98, 104, 108, 112, 115,
	120, 123, 126, 128, 129, 130, 133, 143, 146, 147,
	148, 149, 159, 160, 161, 163, 166, 167, 168, 169,
	170, 173, 175, 176, 177, 178, 179, 180, 187, 190,
	196, 197, 198, 199, 200, 201, 202, 204, 205, 206,
	207, 213, 216, 222, 223, 232, 239, 242, 165, 0,
	0, 0, 940, 0, 0, 0, 0, 111, 0, 0,
	0, 0, 0, 137, 0, 0, 0, 139, 0, 0,
	211, 153, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 265,
	0, 942, 0, 0, 0, 0, 0, 0, 101, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 119, 0, 0, 0, 267, 0, 0,
	0, 0, 184, 0, 215, 122, 136, 97, 83, 93,
	0, 121, 162, 191, 195, 0, 0, 0, 105, 0,
	193, 172, 231, 0, 174, 192, 140, 221, 185, 230,
	240, 241, 218, 238, 245, 208, 86, 217, 229, 102,
	203, 88, 227, 214, 151, 131, 132, 87, 0, 189,
	110, 117, 107, 164, 224, 225, 106, 248, 94, 237,
	90, 95, 236, 158, 220, 228, 152, 145, 89, 226,
	150, 144, 135, 114, 124, 182, 142, 183, 125, 155,
	154, 156, 0, 0, 0, 212, 234, 249, 99, 0,
	219, 243, 244, 0, 0, 100, 118, 113, 181, 157,
	96, 127, 209, 134, 141, 188, 247, 171, 194, 103,
	233, 210, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 82, 91, 138, 246, 186, 116, 235, 0, 0,
	109, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 84, 85, 92, 98, 104, 108, 112,
	115, 120, 123, 126, 128, 129, 130, 133, 143, 146,
	147, 148, 149, 159, 160, 161, 163, 166, 167, 168,
	169, 170, 173, 175, 176, 177, 178, 179, 180, 187,
	190, 196, 197, 198, 199, 200, 201, 202, 204, 205,
	206, 207, 213, 216, 222, 223, 232, 239, 242, 24,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 165, 0, 0, 0, 0, 0, 0, 0, 0,
	111, 0, 0, 0, 0, 0, 137, 0, 0, 0,
	139, 0, 0, 211, 153, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 54,
	0, 0, 80, 0, 0, 0, 0, 0, 0, 0,
	0, 101, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 119, 0, 0, 0,
	267, 0, 0, 0, 0, 184, 0, 215, 122, 136,
	97, 83, 93, 0, 121, 162, 191, 195, 0, 0,
	0, 105, 0, 193, 172, 231, 0, 174, 192, 140,
	221, 185, 230, 240, 241, 218, 238, 245, 208, 86,
	217, 229, 102, 203, 88, 227, 214, 151, 131, 132,
	87, 0, 189, 110, 117, 107, 164, 224, 225, 106,
	248, 94, 237, 90, 95, 236, 158, 220, 228, 152,
	145, 89, 226, 150, 144, 135, 114, 124, 182, 142,
	183, 125, 155, 154, 156, 0, 0, 0, 212, 234,
	249, 99, 0, 219, 243, 244, 0, 0, 100, 118,
	113, 181, 157, 96, 127, 209, 134, 141, 188, 247,
	171, 194, 103, 233, 210, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 82, 91, 138, 246, 186, 116,
	235, 0, 0, 109, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 84, 85, 92, 98,
	104, 108, 112, 115, 120, 123, 126, 128, 129, 130,
	133, 143, 146, 147, 148, 149, 159, 160, 161, 163,
	166, 167, 168, 169, 170, 173, 175, 176, 177, 178,
	179, 180, 187, 190, 196, 197, 198, 199, 200, 201,
	202, 204, 205, 206, 207, 213, 216, 222, 223, 232,
	239, 242, 24, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 165, 0, 0, 0, 0, 0,
	0, 0, 0, 111, 0, 0, 0, 0, 0, 137,
	0, 0, 0, 139, 0, 0, 211, 153, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 54, 0, 0, 265, 0, 0, 0, 0,
	0, 0, 0, 0, 101, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 119,
	0, 0, 0, 267, 0, 0, 0, 0, 184, 0,
	215, 122, 136, 97, 83, 93, 0, 121, 162, 191,
	195, 0, 0, 0, 105, 0, 193, 172, 231, 0,
	174, 192, 140, 221, 185, 230, 240, 241, 218, 238,
	245, 208, 86, 217, 229, 102, 203, 88, 227, 214,
	151, 131, 132, 87, 0, 189, 110, 117, 107, 164,
	224, 225, 106, 248, 94, 237, 90, 95, 236, 158,
	220, 228, 152, 145, 89, 226, 150, 144, 135, 114,
	124, 182, 142, 183, 125, 155, 154, 156, 0, 0,
	0, 212, 234, 249, 99, 0, 219, 243, 244, 0,
	0, 100, 118, 113, 181, 157, 96, 127, 209, 134,
	141, 188, 247, 171, 194, 103, 233, 210, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 82, 91, 138,
	246, 186, 116, 235, 0, 0, 109, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 84,
	85, 92, 98, 104, 108, 112, 115, 120, 123, 126,
	128, 129, 130, 133, 143, 146, 147, 148, 149, 159,
	160, 161, 163, 166, 167, 168, 169, 170, 173, 175,
	176, 177, 178, 179, 180, 187, 190, 196, 197, 198,
	199, 200, 201, 202, 204, 205, 206, 207, 213, 216,
	222, 223, 232, 239, 242, 165, 0, 0, 0, 940,
	0, 0, 0, 0, 111, 0, 0, 0, 0, 0,
	137, 0, 0, 0, 139, 0, 0, 211, 153, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 265, 0, 942, 0,
	0, 0, 0, 0, 0, 101, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	119, 0, 0, 0, 267, 0, 0, 0, 0, 184,
	0, 215, 122, 136, 97, 83, 93, 0, 121, 162,
	191, 195, 0, 0, 0, 105, 0, 193, 172, 231,
	0, 938, 192, 140, 221, 185, 230, 240, 241, 218,
	238, 245, 208, 86, 217, 229, 102, 203, 88, 227,
	214, 151, 131, 132, 87, 0, 189, 110, 117, 107,
	164, 224, 225, 106, 248, 94, 237, 90, 95, 236,
	158, 220, 228, 152, 145, 89, 226, 150, 144, 135,
	114, 124, 182, 142, 183, 125, 155, 154, 156, 0,
	0, 0, 212, 234, 249, 99, 0, 219, 243, 244,
	0, 0, 100, 118, 113, 181, 157, 96, 127, 209,
	134, 141, 188, 247, 171, 194, 103, 233, 210, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 82, 91,
	138, 246, 186, 116, 235, 0, 0, 109, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	84, 85, 92, 98, 104, 108, 112, 115, 120, 123,
	126, 128, 129, 130, 133, 143, 146, 147, 148, 149,
	159, 160, 161, 163, 166, 167, 168, 169, 170, 173,
	175, 176, 177, 178, 179, 180, 187, 190, 196, 197,
	198, 199, 200, 201, 202, 204, 205, 206, 207, 213,
	216, 222, 223, 232, 239, 242, 165, 0, 0, 0,
	0, 0, 0, 0, 0, 111, 0, 0, 0, 0,
	0, 137, 0, 0, 0, 139, 0, 0, 211, 153,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 80, 0, 0,
	834, 0, 0, 835, 0, 0, 101, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 119, 0, 0, 0, 267, 0, 0, 0, 0,
	184, 0, 215, 122, 136, 97, 83, 93, 0, 121,
	162, 191, 195, 0, 0, 0, 105, 0, 193, 172,
	231, 0, 174, 192, 140, 221, 185, 230, 240, 241,
	218, 238, 245, 208, 86, 217, 229, 102, 203, 88,
	227, 214, 151, 131, 132, 87, 0, 189, 110, 117,
	107, 164, 224, 225, 106, 248, 94, 237, 90, 95,
	236, 158, 220, 228, 152, 145, 89, 226, 150, 144,
	135, 114, 124, 182, 142, 183, 125, 155, 154, 156,
	0, 0, 0, 212, 234, 249, 99, 0, 219, 243,
	244, 0, 0, 100, 118, 113, 181, 157, 96, 127,
	209, 134, 141, 188, 247, 171, 194, 103, 233, 210,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 82,
	91, 138, 246, 186, 116, 235, 0, 0, 109, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 84, 85, 92, 98, 104, 108, 112, 115, 120,
	123, 126, 128, 129, 130, 133, 143, 146, 147, 148,
	149, 159, 160, 161, 163, 166, 167, 168, 169, 170,
	173, 175, 176, 177, 178, 179, 180, 187, 190, 196,
	197, 198, 199, 200, 201, 202, 204, 205, 206, 207,
	213, 216, 222, 223, 232, 239, 242, 165, 0, 0,
	0, 0, 0, 0, 0, 0, 111, 0, 720, 0,
	0, 0, 137, 0, 0, 0, 139, 0, 0, 211,
	153, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 80, 0,
	719, 0, 0, 0, 0, 0, 0, 101, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 119, 0, 0, 0, 267, 0, 0, 0,
	0, 184, 0, 215, 122, 136, 97, 83, 93, 0,
	121, 162, 191, 195, 0, 0, 0, 105, 0, 193,
	172, 231, 0, 174, 192, 140, 221, 185, 230, 240,
	241, 218, 238, 245, 208, 86, 217, 229, 102, 203,
	88, 227, 214, 151, 131, 132, 87, 0, 189, 110,
	117, 107, 164, 224, 225, 106, 248, 94, 237, 90,
	95, 236, 158, 220, 228, 152, 145, 89, 226, 150,
	144, 135, 114, 124, 182, 142, 183, 125, 155, 154,
	156, 0, 0, 0, 212, 234, 249, 99, 0, 219,
	243, 244, 0, 0, 100, 118, 113, 181, 157, 96,
	127, 209, 134, 141, 188, 247, 171, 194, 103, 233,
	210, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	82, 91, 138, 246, 186, 116, 235, 0, 0, 109,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 84, 85, 92, 98, 104, 108, 112, 115,
	120, 123, 126, 128, 129, 130, 133, 143, 146, 147,
	148, 149, 159, 160, 161, 163, 166, 167, 168, 169,
	170, 173, 175, 176, 177, 178, 179, 180, 187, 190,
	196, 197, 198, 199, 200, 201, 202, 204, 205, 206,
	207, 213, 216, 222, 223, 232, 239, 242, 165, 0,
	0, 0, 0, 0, 0, 0, 0, 111, 0, 0,
	0, 0, 0, 137, 0, 0, 0, 139, 0, 0,
	211, 153, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 54, 0, 0, 265,
	0, 0, 0, 0, 0, 0, 0, 0, 101, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 119, 0, 0, 0, 267, 0, 0,
	0, 0, 184, 0, 215, 122, 136, 97, 83, 93,
	0, 121, 162, 191, 195, 0, 0, 0, 105, 0,
	193, 172, 231, 0, 174, 192, 140, 221, 185, 230,
	240, 241, 218, 238, 245, 208, 86, 217, 229, 102,
	203, 88, 227, 214, 151, 131, 132, 87, 0, 189,
	110, 117, 107, 164, 224, 225, 106, 248, 94, 237,
	90, 95, 236, 158, 220, 228, 152, 145, 89, 226,
	150, 144, 135, 114, 124, 182, 142, 183, 125, 155,
	154, 156, 0, 0, 0, 212, 234, 249, 99, 0,
	219, 243, 244, 0, 0, 100, 118, 113, 181, 157,
	96, 127, 209, 134, 141, 188, 247, 171, 194, 103,
	233, 210, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 82, 91, 138, 246, 186, 116, 235, 0, 0,
	109, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 84, 85, 92, 98, 104, 108, 112,
	115, 120, 123, 126, 128, 129, 130, 133, 143, 146,
	147, 148, 149, 159, 160, 161, 163, 166, 167, 168,
	169, 170, 173, 175, 176, 177, 178, 179, 180, 187,
	190, 196, 197, 198, 199, 200, 201, 202, 204, 205,
	206, 207, 213, 216, 222, 223, 232, 239, 242, 165,
	0, 0, 0, 0, 0, 0, 0, 0, 111, 0,
	0, 0, 0, 0, 137, 0, 0, 0, 139, 0,
	0, 211, 153, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	265, 0, 942, 0, 0, 0, 0, 0, 0, 101,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 119, 0, 0, 0, 267, 0,
	0, 0, 0, 184, 0, 215, 122, 136, 97, 83,
	93, 0, 121, 162, 191, 195, 0, 0, 0, 105,
	0, 193, 172, 231, 0, 174, 192, 140, 221, 185,
	230, 240, 241, 218, 238, 245, 208, 86, 217, 229,
	102, 203, 88, 227, 214, 151, 131, 132, 87, 0,
	189, 110, 117, 107, 164, 224, 225, 106, 248, 94,
	237, 90, 95, 236, 158, 220, 228, 152, 145, 89,
	226, 150, 144, 135, 114, 124, 182, 142, 183, 125,
	155, 154, 156, 0, 0, 0, 212, 234, 249, 99,
	0, 219, 243, 244, 0, 0, 100, 118, 113, 181,
	157, 96, 127, 209, 134, 141, 188, 247, 171, 194,
	103, 233, 210, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 82, 91, 138, 246, 186, 116, 235, 0,
	0, 109, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 84, 85, 92, 98, 104, 108,
	112, 115, 120, 123, 126, 128, 129, 130, 133, 143,
	146, 147, 148, 149, 159, 160, 161, 163, 166, 167,
	168, 169, 170, 173, 175, 176, 177, 178, 179, 180,
	187, 190, 196, 197, 198, 199, 200, 201, 202, 204,
	205, 206, 207, 213, 216, 222, 223, 232, 239, 242,
	165, 0, 0, 0, 0, 0, 0, 0, 0, 111,
	0, 0, 0, 0, 0, 137, 0, 0, 0, 139,
	0, 0, 211, 153, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 80, 0, 607, 0, 0, 0, 0, 0, 0,
	101, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 119, 0, 0, 0, 267,
	0, 0, 0, 0, 184, 0, 215, 122, 136, 97,
	83, 93, 0, 121, 162, 191, 195, 0, 0, 0,
	105, 0, 193, 172, 231, 0, 174, 192, 140, 221,
	185, 230, 240, 241, 218, 238, 245, 208, 86, 217,
	229, 102, 203, 88, 227, 214, 151, 131, 132, 87,
	0, 189, 110, 117, 107, 164, 224, 225, 106, 248,
	94, 237, 90, 95, 236, 158, 220, 228, 152, 145,
	89, 226, 150, 144, 135, 114, 124, 182, 142, 183,
	125, 155, 154, 156, 0, 0, 0, 212, 234, 249,
	99, 0, 219, 243, 244, 0, 0, 100, 118, 113,
	181, 157, 96, 127, 209, 134, 141, 188, 247, 171,
	194, 103, 233, 210, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 82, 91, 138, 246, 186, 116, 235,
	0, 0, 109, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 84, 85, 92, 98, 104,
	108, 112, 115, 120, 123, 126, 128, 129, 130, 133,
	143, 146, 147, 148, 149, 159, 160, 161, 163, 166,
	167, 168, 169, 170, 173, 175, 176, 177, 178, 179,
	180, 187, 190, 196, 197, 198, 199, 200, 201, 202,
	204, 205, 206, 207, 213, 216, 222, 223, 232, 239,
	242, 165, 0, 0, 0, 0, 0, 0, 0, 690,
	111, 0, 0, 0, 0, 0, 137, 0, 0, 0,
	139, 0, 0, 211, 153, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 265, 0, 0, 0, 0, 0, 0, 0,
	0, 101, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 119, 0, 0, 0,
	267, 0, 0, 0, 0, 184, 0, 215, 122, 136,
	97, 83, 93, 0, 121, 162, 191, 195, 0, 0,
	0, 105, 0, 193, 172, 231, 0, 174, 192, 140,
	221, 185, 230, 240, 241, 218, 238, 245, 208, 86,
	217, 229, 102, 203, 88, 227, 214, 151, 131, 132,
	87, 0, 189, 110, 117, 107, 164, 224, 225, 106,
	248, 94, 237, 90, 95, 236, 158, 220, 228, 152,
	145, 89, 226, 150, 144, 135, 114, 124, 182, 142,
	183, 125, 155, 154, 156, 0, 0, 0, 212, 234,
	249, 99, 0, 219, 243, 244, 0, 0, 100, 118,
	113, 181, 157, 96, 127, 209, 134, 141, 188, 247,
	171, 194, 103, 233, 210, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 82, 91, 138, 246, 186, 116,
	235, 0, 0, 109, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 84, 85, 92, 98,
	104, 108, 112, 115, 120, 123, 126, 128, 129, 130,
	133, 143, 146, 147, 148, 149, 159, 160, 161, 163,
	166, 167, 168, 169, 170, 173, 175, 176, 177, 178,
	179, 180, 187, 190, 196, 197, 198, 199, 200, 201,
	202, 204, 205, 206, 207, 213, 216, 222, 223, 232,
	239, 242, 382, 0, 0, 0, 0, 0, 0, 165,
	0, 0, 0, 0, 0, 0, 0, 0, 111, 0,
	0, 0, 0, 0, 137, 0, 0, 0, 139, 0,
	0, 211, 153, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	265, 0, 0, 0, 0, 0, 0, 0, 0, 101,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 119, 0, 0, 0, 267, 0,
	0, 0, 0, 184, 0, 215, 122, 136, 97, 83,
	93, 0, 121, 162, 191, 195, 0, 0, 0, 105,
	0, 193, 172, 231, 0, 174, 192, 140, 221, 185,
	230, 240, 241, 218, 238, 245, 208, 86, 217, 229,
	102, 203, 88, 227, 214, 151, 131, 132, 87, 0,
	189, 110, 117, 107, 164, 224, 225, 106, 248, 94,
	237, 90, 95, 236, 158, 220, 228, 152, 145, 89,
	226, 150, 144, 135, 114, 124, 182, 142, 183, 125,
	155, 154, 156, 0, 0, 0, 212, 234, 249, 99,
	0, 219, 243, 244, 0, 0, 100, 118, 113, 181,
	157, 96, 127, 209, 134, 141, 188, 247, 171, 194,
	103, 233, 210, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 82, 91, 138, 246, 186, 116, 235, 0,
	0, 109, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 84, 85, 92, 98, 104, 108,
	112, 115, 120, 123, 126, 128, 129, 130, 133, 143,
	146, 147, 148, 149, 159, 160, 161, 163, 166, 167,
	168, 169, 170, 173, 175, 176, 177, 178, 179, 180,
	187, 190, 196, 197, 198, 199, 200, 201, 202, 204,
	205, 206, 207, 213, 216, 222, 223, 232, 239, 242,
	165, 0, 0, 0, 0, 0, 0, 0, 0, 111,
	0, 0, 0, 0, 0, 137, 0, 0, 0, 139,
	0, 0, 211, 153, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 265, 0, 0, 0, 0, 0, 0, 0, 0,
	101, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 119, 0, 262, 0, 267,
	0, 0, 0, 0, 184, 0, 215, 122, 136, 97,
	83, 93, 0, 121, 162, 191, 195, 0, 0, 0,
	105, 0, 193, 172, 231, 0, 174, 192, 140, 221,
	185, 230, 240, 241, 218, 238, 245, 208, 86, 217,
	229, 102, 203, 88, 227, 214, 151, 131, 132, 87,
	0, 189, 110, 117, 107, 164, 224, 225, 106, 248,
	94, 237, 90, 95, 236, 158, 220, 228, 152, 145,
	89, 226, 150, 144, 135, 114, 124, 182, 142, 183,
	125, 155, 154, 156, 0, 0, 0, 212, 234, 249,
	99, 0, 219, 243, 244, 0, 0, 100, 118, 113,
	181, 157, 96, 127, 209, 134, 141, 188, 247, 171,
	194, 103, 233, 210, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 82, 91, 138, 246, 186, 116, 235,
	0, 0, 109, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 84, 85, 92, 98, 104,
	108, 112, 115, 120, 123, 126, 128, 129, 130, 133,
	143, 146, 147, 148, 149, 159, 160, 161, 163, 166,
	167, 168, 169, 170, 173, 175, 176, 177, 178, 179,
	180, 187, 190, 196, 197, 198, 199, 200, 201, 202,
	204, 205, 206, 207, 213, 216, 222, 223, 232, 239,
	242, 165, 0, 0, 0, 0, 0, 0, 0, 0,
	111, 0, 0, 0, 0, 0, 137, 0, 0, 0,
	139, 0, 0, 211, 153, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 80, 0, 0, 0, 0, 0, 0, 0,
	0, 101, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 119, 0, 0, 0,
	267, 0, 0, 0, 0, 184, 0, 215, 122, 136,
	97, 83, 93, 0, 121, 162, 191, 195, 0, 0,
	0, 105, 0, 193, 172, 231, 0, 174, 192, 140,
	221, 185, 230, 240, 241, 218, 238, 245, 208, 86,
	217, 229, 102, 203, 88, 227, 214, 151, 131, 132,
	87, 0, 189, 110, 117, 107, 164, 224, 225, 106,
	248, 94, 237, 90, 95, 236, 158, 220, 228, 152,
	145, 89, 226, 150, 144, 135, 114, 124, 182, 142,
	183, 125, 155, 154, 156, 0, 0, 0, 212, 234,
	249, 99, 0, 219, 243, 244, 0, 0, 100, 118,
	113, 181, 157, 96, 127, 209, 134, 141, 188, 247,
	171, 194, 103, 233, 210, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 82, 91, 138, 246, 186, 116,
	235, 0, 0, 109, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 84, 85, 92, 98,
	104, 108, 112, 115, 120, 123, 126, 128, 129, 130,
	133, 143, 146, 147, 148, 149, 159, 160, 161, 163,
	166, 167, 168, 169, 170, 173, 175, 176, 177, 178,
	179, 180, 187, 190, 196, 197, 198, 199, 200, 201,
	202, 204, 205, 206, 207, 213, 216, 222, 223, 232,
	239, 242, 165, 0, 0, 0, 0, 0, 0, 0,
	0, 111, 0, 0, 0, 0, 0, 137, 0, 0,
	0, 139, 0, 0, 211, 153, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 265, 0, 0, 0, 0, 0, 0,
	0, 0, 101, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 119, 0, 0,
	0, 267, 0, 0, 0, 0, 184, 0, 215, 122,
	136, 97, 83, 93, 0, 121, 162, 191, 195, 0,
	0, 0, 105, 0, 193, 172, 231, 0, 174, 192,
	140, 221, 185, 230, 240, 241, 218, 238, 245, 208,
	86, 217, 229, 102, 203, 88, 227, 214, 151, 131,
	132, 87, 0, 189, 110, 117, 107, 164, 224, 225,
	106, 248, 94, 237, 90, 95, 236, 158, 220, 228,
	152, 145, 89, 226, 150, 144, 135, 114, 124, 182,
	142, 183, 125, 155, 154, 156, 0, 0, 0, 212,
	234, 249, 99, 0, 219, 243, 244, 0, 0, 100,
	118, 113, 181, 157, 96, 127, 209, 134, 141, 188,
	247, 171, 194, 103, 233, 210, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 82, 91, 138, 246, 186,
	116, 235, 0, 0, 109, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 84, 85, 92,
	98, 104, 108, 112, 115, 120, 123, 126, 128, 129,
	130, 133, 143, 146, 147, 148, 149, 159, 160, 161,
	163, 166, 167, 168, 169, 170, 173, 175, 176, 177,
	178, 179, 180, 187, 190, 196, 197, 198, 199, 200,
	201, 202, 204, 205, 206, 207, 213, 216, 222, 223,
	232, 239, 242, 165, 0, 0, 0, 0, 0, 0,
	0, 0, 111, 0, 0, 0, 0, 0, 137, 0,
	0, 0, 139, 0, 0, 211, 153, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 322, 0, 0, 0, 0, 0,
	0, 0, 0, 101, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 119, 0,
	0, 0, 267, 0, 0, 0, 0, 184, 0, 215,
	122, 136, 97, 83, 93, 0, 121, 162, 191, 195,
	0, 0, 0, 105, 0, 193, 172, 231, 0, 174,
	192, 140, 221, 185, 230, 240, 241, 218, 238, 245,
	208, 86, 217, 229, 102, 203, 88, 227, 214, 151,
	131, 132, 87, 0, 189, 110, 117, 107, 164, 224,
	225, 106, 248, 94, 237, 90, 95, 236, 158, 220,
	228, 152, 145, 89, 226, 150, 144, 135, 114, 124,
	182, 142, 183, 125, 155, 154, 156, 0, 0, 0,
	212, 234, 249, 99, 0, 219, 243, 244, 0, 0,
	100, 118, 113, 181, 157, 96, 127, 209, 134, 141,
	188, 247, 171, 194, 103, 233, 210, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 82, 91, 138, 246,
	186, 116, 235, 0, 0, 109, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 84, 85,
	92, 98, 104, 108, 112, 115, 120, 123, 126, 128,
	129, 130, 133, 143, 146, 147, 148, 149, 159, 160,
	161, 163, 166, 167, 168, 169, 170, 173, 175, 176,
	177, 178, 179, 180, 187, 190, 196, 197, 198, 199,
	200, 201, 202, 204, 205, 206, 207, 213, 216, 222,
	223, 232, 239, 242,
}
var yyPact = [...]int{

	92, -1000, -273, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 939, 969, -1000, -1000, -1000, -1000, -1000, -1000,
	305, 11489, -21, 130, 2, 15492, 129, 201, 16154, -1000,
	23, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -95, -100,
	-1000, 746, -1000, -1000, -1000, -1000, -1000, 932, 935, 795,
	926, 844, -1000, 8167, 95, 95, 15161, 6843, -1000, -1000,
	276, 16154, 121, 16154, -154, 93, 93, 93, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	125, 16154, 660, 639, 229, -1000, 16154, 91, 626, 91,
	91, 91, 16154, -1000, 193, -1000, -1000, -1000, 16154, 593,
	888, 3747, 45, 3747, -1000, 3747, 3747, -1000, 3747, 31,
	3747, -47, 946, 32, 8, -1000, 3747, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	526, 900, 9503, 9503, 939, -1000, 746, -1000, -1000, -1000,
	895, -1000, -1000, 375, 958, -1000, 11158, 192, -1000, 9503,
	1855, 744, -1000, -1000, 744, -1000, -1000, 169, -1000, -1000,
	10496, 10496, 10496, 10496, 10496, 10496, 10496, 10496, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 744, -1000, 9172, 744, 744, 744, 744, 744,
	744, 744, 744, 9503, 744, 744, 744, 744, 744, 744,
	744, 744, 744, 744, 744, 744, 744, 744, 744, 744,
	14823, 13830, 16154, 707, 691, -1000, -1000, 191, 737, 6499,
	-88, -1000, -1000, -1000, 309, 13499, -1000, -1000, -1000, 883,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 659,
	16154, -1000, 2427, -1000, 565, 3747, 106, 560, 331, 557,
	16154, 16154, 3747, 3747, 3747, 39, 71, 67, 16154, 741,
	98, 16154, 919, 814, 16154, 537, 533, -1000, 6155, -1000,
	3747, 3747, -1000, -1000, -1000, 3747, 3747, 3747, 16154, 3747,
	3747, -1000, -1000, -1000, -1000, 3747, 3747, -1000, 957, 312,
	-1000, -1000, -1000, -1000, 9503, 233, -1000, 813, -1000, -1000,
	-1000, -1000, -1000, -1000, 964, 226, 463, 189, 738, -1000,
	352, 932, 526, 844, 13168, 815, -1000, -1000, -1000, 16154,
	-1000, 9503, 9503, 340, -1000, 14492, -1000, -1000, 4779, 275,
	10496, 401, 286, 10496, 10496, 10496, 10496, 10496, 10496, 10496,
	10496, 10496, 10496, 10496, 10496, 10496, 10496, 10496, 468, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 527, -1000, 746,
	548, 548, 206, 206, 206, 206, 206, 206, 206, 10827,
	7505, 526, 648, 439, 9172, 8167, 8167, 9503, 9503, 8829,
	8498, 8167, 896, 315, 439, 16485, -1000, -1000, 10165, -1000,
	-1000, -1000, -1000, -1000, 526, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 15823, 15823, 8167, 8167, 8167, 8167, 8167, 52,
	16154, -1000, 706, 761, -1000, -1000, -1000, 921, 12506, 12837,
	52, 684, 13830, 16154, -1000, -1000, 13830, 16154, 4435, 5811,
	737, -88, 704, -1000, -120, -78, 7174, 204, -1000, -1000,
	-1000, -1000, 3403, 190, 672, 332, -66, -1000, -1000, -1000,
	763, -1000, 763, 763, 763, 763, -3, -3, -3, -3,
	-1000, -1000, -1000, -1000, -1000, 785, 783, -1000, 763, 763,
	763, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 778,
	778, 778, 767, 767, 797, -1000, 16154, 3747, 917, 3747,
	-1000, 62, -1000, -1000, -1000, 16154, 16154, 16154, 16154, 16154,
	146, 16154, 16154, 734, -1000, 16154, 3747, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 16154, 329, 16154, 16154, 439, -1000, 492, 16154,
	-1000, 852, 9503, 9503, 5467, 9503, -1000, -1000, -1000, 900,
	-1000, 896, 937, -1000, 859, 858, 861, -1000, -1000, 275,
	264, -1000, -1000, 447, -1000, -1000, -1000, -1000, 186, 744,
	-1000, 1758, -1000, -1000, -1000, -1000, 401, 10496, 10496, 10496,
	374, 1758, 1871, 1570, 1887, 206, 188, 188, 203, 203,
	203, 203, 203, 1127, 1127, -1000, -1000, -1000, 526, -1000,
	-1000, -1000, 526, 8167, 726, -1000, -1000, 9503, -1000, 526,
	591, 591, 343, 506, 269, 956, 591, 259, 954, 591,
	591, 8167, 319, -1000, 9503, 526, -1000, 181, -1000, 406,
	712, 709, 591, 526, 526, 591, 591, 695, 744, -1000,
	16485, 13830, 13830, 13830, 13830, 13830, -1000, 840, 835, -1000,
	832, 828, 836, 16154, -1000, 637, 12506, 167, 744, -1000,
	14161, -1000, -1000, 945, 13830, 725, -1000, 725, -1000, 164,
	-1000, -1000, 704, -88, -67, -1000, -1000, -1000, -1000, 439,
	-1000, 482, 703, 3059, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 774, 519, -1000, 908, 202, 223, 517, 907, -1000,
	-1000, -1000, 891, -1000, 355, -42, -1000, -1000, 474, -3,
	-3, -1000, -1000, 204, 867, 204, 204, 204, 489, 489,
	-1000, -1000, -1000, -1000, 460, -1000, -1000, -1000, 438, -1000,
	812, 15823, 3747, -1000, -1000, -1000, -1000, 304, 304, 245,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 51, 762, -1000, -1000, -1000, -1000, 16, 38, 97,
	-1000, 3747, -1000, 312, -1000, 487, 9503, -1000, -1000, -1000,
	-1000, 850, 439, 439, 157, -1000, -1000, 16154, -1000, -1000,
	-1000, -1000, 8167, -1000, -1000, -1000, -1000, 4091, 8167, -1000,
	374, 1758, 1519, -1000, 10496, 10496, -1000, -1000, 591, 8167,
	439, -1000, -1000, -1000, 154, 468, 154, 10496, 10496, -1000,
	10496, 10496, -1000, -167, 711, 306, -1000, 9503, 313, -1000,
	5467, -1000, 10496, 10496, -1000, -1000, -1000, -1000, -1000, 808,
	16485, 744, -1000, 12163, 15823, 728, -1000, 302, 761, 773,
	807, 642, -1000, -1000, -1000, -1000, 829, -1000, 825, -1000,
	-1000, -1000, -1000, -1000, 120, 110, 109, 15823, -1000, 939,
	9503, 725, -1000, -1000, 209, -1000, -1000, -130, -121, -1000,
	-1000, -1000, 3403, -1000, 3403, 15823, 73, -1000, 517, 517,
	-1000, -1000, -1000, 770, 803, 10496, -1000, -1000, -1000, 664,
	204, 204, -1000, 227, -1000, -1000, -1000, 587, -1000, 584,
	698, 569, 16154, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	16154, -1000, -1000, -1000, -1000, -1000, 15823, -175, 514, 15823,
	15823, 15823, 16154, -1000, 329, -1000, 439, -1000, 5123, -1000,
	710, -1000, -1000, 526, -1000, 10496, 1758, 1758, -1000, -1000,
	526, 763, 763, -1000, 763, 767, -1000, 763, 14, 763,
	13, 526, 526, 1734, 1694, 1635, 806, 744, -161, -1000,
	439, 9503, -1000, 534, 390, -1000, 901, 681, 693, -1000,
	-1000, 7836, 526, 564, 152, 546, -1000, 939, 16485, 9503,
	-1000, -1000, 9503, 765, -1000, 9503, -1000, -1000, -1000, 744,
	744, 744, 546, 932, 439, -1000, -1000, -1000, -1000, 3059,
	-1000, 544, -1000, 763, -1000, -1000, -1000, 15823, -28, 962,
	1758, -1000, -1000, -1000, -1000, -1000, -3, 486, -3, 436,
	-1000, 420, 3747, -1000, -1000, -1000, -1000, 913, -1000, 5123,
	-1000, -1000, 754, 790, -1000, -1000, -1000, 945, 13830, -1000,
	1758, -1000, -1000, 128, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 10496, 10496, 10496, 10496, 10496, 526, 485, 439,
	10496, 10496, 904, -1000, 744, -1000, -1000, 743, 15823, 15823,
	-1000, 15823, 932, -1000, 439, 439, 15823, 439, 15823, 15823,
	15823, 11820, -1000, 172, 15823, -1000, 541, -1000, 213, -1000,
	-93, 204, -1000, 204, 588, 532, -1000, 744, 697, -1000,
	288, 15823, 16154, 942, 696, -1000, -1000, 406, 406, 406,
	406, 37, -1000, -1000, 406, 406, 961, -1000, 744, -1000,
	746, 142, -1000, -1000, -1000, 531, 525, 525, 525, 167,
	172, -1000, 512, 283, 483, -1000, 64, 15823, 345, 899,
	-1000, 893, -1000, -1000, -1000, -1000, -1000, 48, 5123, 3403,
	511, -1000, 938, 934, -1000, -1000, -1000, -1000, 526, 42,
	-181, -1000, -1000, 16485, 693, 526, 15823, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 394, -1000, -1000, 16154, -1000, -1000,
	479, -1000, -1000, 507, -1000, 15823, -1000, -1000, 762, -1000,
	9503, 9503, -1000, 849, -173, -186, 687, -1000, -1000, -1000,
	747, -1000, -1000, 48, 857, -175, 439, 686, -1000, 848,
	-1000, 15823, -1000, 44, -1000, -178, 505, 40, -184, 799,
	744, -187, 775, -1000, 951, 9834, -1000, -1000, 953, 218,
	218, 406, 526, -1000, -1000, -1000, 70, 376, -1000, -1000,
	-1000, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 1197, 26, 555, 1196, 1190, 1189, 1186, 1185, 1184,
	1182, 1181, 1180, 1179, 1178, 1177, 1176, 1171, 1170, 1168,
	1166, 1164, 1162, 1161, 1159, 1158, 83, 1157, 1152, 1147,
	69, 1145, 88, 1142, 1141, 1137, 34, 186, 47, 43,
	840, 1136, 21, 55, 85, 1135, 41, 1134, 1132, 65,
	1131, 1128, 51, 1127, 1126, 1626, 1122, 62, 1118, 11,
	33, 1117, 1113, 1112, 1111, 70, 1146, 1110, 1108, 14,
	1107, 1106, 95, 1104, 57, 5, 15, 13, 18, 1102,
	115, 54, 1101, 56, 1094, 1092, 1091, 1086, 29, 1085,
	59, 1082, 22, 58, 1081, 7, 64, 35, 31, 10,
	71, 63, 1079, 24, 61, 50, 1077, 1072, 459, 1071,
	1069, 46, 1067, 1065, 25, 1063, 92, 516, 1061, 1059,
	1057, 1056, 38, 0, 713, 19, 73, 1055, 1054, 1053,
	1648, 53, 52, 17, 1051, 116, 1007, 44, 1050, 1049,
	42, 1047, 1046, 1045, 1044, 1043, 1036, 1035, 23, 1034,
	1033, 1032, 160, 20, 1031, 1029, 66, 30, 1028, 1027,
	1024, 48, 60, 1023, 1022, 49, 28, 1021, 1020, 1019,
	1015, 1010, 40, 12, 1003, 16, 1002, 8, 999, 37,
	998, 3, 996, 9, 995, 4, 991, 6, 45, 1,
	988, 2, 986, 982, 298, 183, 75, 978, 82,
}
var yyR1 = [...]int{

	0, 192, 193, 193, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 2, 6, 3, 4,
	4, 5, 5, 7, 7, 29, 29, 8, 9, 9,
	9, 9, 196, 196, 49, 49, 50, 50, 96, 96,
	10, 10, 10, 10, 101, 101, 105, 105, 105, 106,
	106, 106, 106, 138, 138, 11, 11, 11, 11, 11,
	11, 11, 187, 187, 186, 185, 185, 184, 184, 183,
	17, 168, 170, 170, 169, 169, 169, 169, 162, 141,
	141, 141, 141, 144, 144, 142, 142, 142, 142, 142,
	142, 142, 142, 142, 143, 143, 143, 143, 143, 145,
	145, 145, 145, 145, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 147,
	147, 147, 147, 147, 147, 147, 147, 161, 161, 148,
	148, 156, 156, 157, 157, 157, 154, 154, 155, 155,
	158, 158, 158, 150, 150, 151, 151, 159, 159, 152,
	152, 152, 153, 153, 153, 160, 160, 160, 160, 160,
	149, 149, 163, 163, 178, 178, 177, 177, 177, 167,
	167, 174, 174, 174, 174, 174, 165, 165, 166, 166,
	176, 176, 175, 164, 164, 179, 179, 179, 179, 190,
	191, 189, 189, 189, 189, 189, 171, 171, 171, 172,
	172, 172, 173, 173, 173, 12, 12, 12, 12, 12,
	12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
	12, 12, 188, 188, 188, 188, 188, 188, 188, 188,
	188, 188, 188, 188, 182, 180, 180, 181, 181, 13,
	18, 18, 14, 14, 14, 14, 14, 15, 15, 19,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 112, 112,
	110, 110, 113, 113, 111, 111, 111, 114, 114, 114,
	115, 115, 139, 139, 139, 21, 21, 23, 23, 24,
	25, 22, 22, 22, 22, 22, 22, 22, 16, 197,
	26, 27, 27, 28, 28, 28, 32, 32, 32, 30,
	30, 30, 35, 35, 31, 31, 38, 38, 37, 37,
	39, 39, 39, 39, 127, 127, 127, 126, 126, 41,
	41, 42, 42, 43, 43, 44, 44, 44, 44, 58,
	58, 95, 95, 97, 97, 45, 45, 45, 45, 46,
	46, 47, 47, 48, 48, 134, 134, 133, 133, 133,
	132, 132, 51, 51, 51, 53, 52, 52, 52, 52,
	54, 54, 56, 56, 55, 55, 57, 59, 59, 59,
	59, 60, 60, 40, 40, 40, 40, 40, 40, 40,
	109, 109, 62, 62, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 73, 73, 73, 73, 73, 73,
	63, 63, 63, 63, 63, 63, 63, 36, 36, 74,
	74, 74, 80, 75, 75, 66, 66, 66, 66, 66,
	66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
	66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
	66, 66, 66, 66, 66, 66, 66, 70, 70, 70,
	68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
	68, 68, 68, 69, 69, 69, 69, 69, 69, 69,
	69, 69, 69, 69, 69, 69, 69, 69, 69, 198,
	198, 72, 71, 71, 71, 71, 71, 71, 71, 33,
	33, 33, 33, 33, 137, 137, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 84,
	84, 34, 34, 82, 82, 83, 85, 85, 81, 81,
	81, 65, 65, 65, 65, 65, 65, 65, 65, 67,
	67, 67, 86, 86, 87, 87, 88, 88, 89, 89,
	90, 91, 91, 91, 92, 92, 92, 92, 93, 93,
	93, 64, 64, 64, 64, 64, 64, 94, 94, 94,
	94, 98, 98, 76, 76, 78, 78, 77, 79, 99,
	99, 103, 100, 100, 104, 104, 104, 104, 102, 102,
	102, 129, 129, 129, 107, 107, 116, 116, 117, 117,
	108, 108, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 119, 119, 119, 120, 120, 121, 121, 121,
	128, 128, 124, 124, 125, 125, 130, 130, 131, 131,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 194, 195, 135,
	136, 136, 136,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 4, 6, 7, 5, 11, 1,
	3, 1, 3, 7, 8, 1, 1, 9, 8, 7,
	6, 6, 1, 1, 1, 3, 1, 3, 0, 4,
	3, 4, 5, 4, 1, 3, 3, 2, 2, 2,
	2, 2, 1, 1, 1, 2, 2, 8, 4, 6,
	5, 5, 0, 2, 1, 0, 2, 1, 3, 3,
	4, 4, 2, 4, 1, 3, 3, 3, 8, 3,
	1, 1, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 2, 2, 2, 1,
	2, 2, 2, 1, 4, 4, 2, 2, 3, 3,
	3, 3, 1, 1, 1, 1, 1, 6, 6, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 0,
	3, 0, 5, 0, 3, 5, 0, 1, 0, 1,
	0, 1, 2, 0, 2, 0, 3, 0, 1, 0,
	3, 3, 0, 2, 2, 0, 2, 1, 2, 1,
	0, 2, 5, 4, 1, 2, 2, 3, 2, 0,
	1, 2, 3, 3, 2, 2, 1, 1, 0, 1,
	1, 3, 2, 3, 1, 10, 11, 11, 12, 3,
	3, 1, 1, 2, 2, 2, 0, 1, 3, 1,
	2, 3, 1, 1, 1, 6, 7, 7, 7, 7,
	4, 5, 4, 4, 7, 5, 5, 5, 12, 7,
	5, 9, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 7, 1, 3, 8, 8, 3,
	3, 5, 4, 6, 5, 4, 4, 3, 2, 3,
	4, 4, 3, 4, 4, 4, 4, 4, 4, 3,
	2, 3, 3, 2, 3, 4, 3, 7, 5, 4,
	2, 4, 4, 3, 3, 5, 2, 3, 1, 1,
	0, 1, 1, 1, 0, 2, 2, 0, 2, 2,
	0, 2, 0, 1, 1, 2, 1, 1, 2, 1,
	1, 2, 2, 2, 2, 2, 3, 3, 2, 0,
	2, 0, 2, 1, 2, 2, 0, 1, 1, 0,
	1, 1, 0, 1, 0, 1, 0, 1, 1, 3,
	1, 2, 3, 5, 0, 1, 2, 1, 1, 0,
	2, 1, 3, 1, 1, 1, 3, 1, 3, 3,
	7, 1, 3, 1, 3, 4, 4, 4, 3, 2,
	4, 0, 1, 0, 2, 0, 1, 0, 1, 2,
	1, 1, 1, 2, 2, 1, 2, 3, 2, 3,
	2, 2, 2, 1, 1, 3, 3, 0, 5, 5,
	5, 0, 2, 1, 3, 3, 2, 3, 1, 2,
	0, 3, 1, 1, 3, 3, 4, 4, 5, 3,
	4, 5, 6, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 0, 2, 1,
	1, 1, 3, 1, 3, 1, 1, 1, 1, 1,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 2, 2, 2, 2, 2,
	2, 2, 3, 1, 1, 1, 1, 4, 5, 6,
	4, 4, 6, 6, 6, 8, 8, 8, 8, 9,
	7, 5, 4, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 8, 8, 0,
	2, 3, 4, 4, 4, 4, 4, 4, 4, 0,
	3, 4, 7, 3, 1, 1, 2, 3, 3, 1,
	2, 2, 1, 2, 1, 2, 2, 1, 2, 0,
	1, 0, 2, 1, 2, 4, 0, 2, 1, 3,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 0, 3, 0, 2, 0, 3, 1, 3,
	2, 0, 1, 1, 0, 2, 4, 4, 0, 2,
	4, 2, 1, 3, 5, 4, 6, 1, 3, 3,
	5, 0, 5, 1, 3, 1, 2, 3, 1, 1,
	3, 3, 1, 3, 3, 3, 3, 3, 1, 2,
	1, 1, 1, 1, 1, 1, 0, 2, 0, 3,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 1, 1, 1, 1, 0, 1, 1,
	0, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	0, 1, 1,
}
var yyChk = [...]int{

	-1000, -192, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -19, -20, -21, -23, -24, -25,
	-22, -16, -3, -4, 6, 7, -29, 9, 10, 30,
	-17, 117, 118, 120, 119, 152, 121, 145, 52, 166,
	167, 169, 170, 25, 146, 147, 150, 151, 31, 32,
	123, -194, 8, 251, 56, -193, 349, -88, 15, -28,
	5, -26, -197, -26, -26, -26, -26, -26, -168, -170,
	56, 92, -121, 127, 74, 243, 124, 125, 131, -124,
	59, -123, 261, 138, 293, 294, 166, 177, 171, 198,
	190, 262, 295, 139, 188, 191, 230, 137, 296, 218,
	225, 68, 169, 239, 297, 148, 186, 182, 298, 270,
	180, 27, 299, 227, 203, 300, 266, 181, 226, 123,
	301, 141, 135, 302, 204, 208, 303, 231, 304, 305,
	306, 175, 176, 307, 233, 202, 136, 33, 263, 37,
	156, 234, 206, 308, 201, 197, 309, 310, 311, 312,
	200, 174, 196, 41, 210, 209, 211, 229, 193, 313,
	314, 315, 142, 316, 183, 18, 317, 318, 319, 320,
	321, 237, 151, 322, 154, 323, 324, 325, 326, 327,
	328, 228, 205, 207, 132, 158, 265, 329, 235, 179,
	330, 143, 155, 150, 238, 144, 331, 332, 333, 334,
	335, 336, 337, 170, 338, 339, 340, 341, 165, 232,
	241, 40, 215, 342, 173, 134, 343, 167, 162, 220,
	194, 157, 344, 345, 184, 185, 199, 172, 195, 168,
	159, 152, 346, 240, 216, 267, 192, 189, 163, 347,
	160, 161, 348, 221, 222, 164, 264, 236, 187, 217,
	-108, 127, 243, 124, 222, 129, 125, 125, 126, 127,
	243, 124, 125, -55, -130, 59, -123, 127, 125, 110,
	191, 230, 117, 219, 227, 126, 33, 228, 158, -139,
	125, -110, 218, 221, 222, 164, 59, 232, 231, 223,
	-130, 168, -135, -135, -135, -135, -135, 220, 220, -135,
	-2, -92, 17, 16, -5, -3, -194, 6, 20, 21,
	-32, 42, 43, -27, -39, 101, -40, -130, -61, 76,
	-66, 29, 59, -123, 23, -65, -62, -81, -79, -80,
	110, 111, 112, 99, 100, 107, 77, 113, -70, -68,
	-69, -71, 61, 60, 69, 62, 63, 64, 65, 70,
	71, 72, -124, -77, -194, 46, 47, 252, 253, 254,
	255, 260, 256, 79, 36, 242, 250, 249, 248, 246,
	247, 244, 245, 258, 259, 130, 243, 124, 105, 251,
	-108, -108, 11, -49, -50, -55, -57, -130, -100, -138,
	168, -104, 232, 231, -125, -102, -124, -122, 230, 191,
	229, 122, 268, 75, 22, 24, 213, 78, 110, 16,
	79, 109, 252, 117, 50, 269, 244, 245, 242, 254,
	255, 243, 219, 29, 10, 271, 25, 146, 21, 34,
	103, 119, 82, 83, 149, 23, 147, 72, 274, 19,
	53, 11, 13, 275, 276, 14, 130, 129, 94, 126,
	48, 8, 113, 26, 91, 44, 277, 28, 278, 279,
	280, 281, 46, 92, 17, 246, 247, 31, 282, 260,
	153, 105, 51, 38, 76, 283, 284, 70, 285, 73,
	54, 74, 15, 49, 286, 287, 288, 289, 93, 120,
	251, 47, 290, 124, 6, 257, 30, 145, 45, 291,
	125, 81, 258, 259, 128, 71, 5, 131, 32, 9,
	52, 55, 248, 249, 250, 36, 80, 12, 292, -169,
	92, -162, 59, -55, 126, -55, 251, -117, 130, -117,
	-117, 125, -55, 59, 59, 117, 119, 122, 54, -18,
	-55, -116, 130, 59, -116, -116, -116, -55, 114, -55,
	59, 30, -136, -194, -125, 243, 59, 158, 125, 159,
	127, -136, -136, -136, -136, 162, 163, -136, -113, -112,
	225, 226, 220, 224, 12, 163, 220, 161, -136, -135,
	-135, -195, 58, -93, 19, 31, -40, -130, -89, -90,
	-40, -88, -2, -26, 38, -30, 21, 34, 67, 11,
	-127, 75, 74, 91, -126, 22, -124, 61, 114, -40,
	-63, 94, 76, 92, 93, 78, 96, 95, 106, 99,
	100, 101, 102, 103, 104, 105, 97, 98, 109, 84,
	85, 86, 87, 88, 89, 90, -109, -194, -80, -194,
	115, 116, -66, -66, -66, -66, -66, -66, -66, -66,
	-194, -2, -75, -40, -194, -194, -194, -194, -194, -194,
	-194, -194, -194, -84, -40, -194, -198, -72, -194, -198,
	-72, -198, -72, -198, -194, -198, -72, -198, -72, -198,
	-198, -72, -194, -194, -194, -194, -194, -194, -194, -56,
	26, -55, -42, -43, -44, -45, -58, -80, -194, -55,
	-55, -49, -196, 57, 11, 55, -196, 57, 114, 57,
	-100, 168, -101, -105, 233, 235, 84, -129, -124, 61,
	29, 30, 58, 57, -55, -141, -144, -146, -145, -147,
	-142, -143, 188, 189, 110, 192, 194, 195, 196, 197,
	198, 199, 200, 201, 202, 203, 30, 148, 184, 185,
	186, 187, 204, 205, 206, 207, 208, 209, 210, 211,
	171, 190, 262, 172, 173, 174, 175, 176, 177, 179,
	180, 181, 182, 183, 59, -136, 127, 59, 76, 59,
	-55, -55, -136, -136, -136, 160, 160, 125, 125, 165,
	-55, 57, 128, -49, 23, 54, -55, 59, 59, -131,
	-130, -122, -136, -136, -136, -136, -136, -55, -136, -136,
	-136, -136, 11, -111, 11, 94, -40, -115, 92, 54,
	9, 94, 57, 18, 114, 57, -91, 24, 25, -92,
	-195, -32, -67, -124, 62, 65, -31, 45, -55, -40,
	-40, -73, 70, 76, 71, 72, -126, 101, -131, -125,
	-122, -66, -74, -77, -80, 66, 94, 92, 93, 78,
	-66, -66, -66, -66, -66, -66, -66, -66, -66, -66,
	-66, -66, -66, -66, -66, -137, 59, 61, 59, -65,
	-65, -124, -38, 21, -37, -39, -195, 57, -195, -2,
	-37, -37, -40, -40, -81, 61, -37, -81, 61, -37,
	-37, -30, -82, -83, 80, -81, -124, -130, -195, -66,
	-124, -124, -37, -38, -38, -37, -37, -96, 154, -55,
	30, 57, -51, -53, -52, -54, 44, 48, 50, 45,
	46, 47, 51, -134, 22, -42, -194, -133, 154, -132,
	22, -130, 61, -96, 55, -42, -55, -42, -57, -130,
	101, -104, -101, 57, 234, 236, 237, 54, 73, -40,
	-153, 109, -171, -172, -173, -125, 61, 62, -162, -163,
	-164, -174, 140, -179, 132, 134, 131, -165, 141, 126,
	28, 58, -158, 70, 76, -154, 216, -148, 56, -148,
	-148, -148, -148, -152, 191, -152, -152, -152, 56, 56,
	-148, -148, -148, -156, 56, -156, -156, -157, 56, -157,
	-128, 55, -55, -136, 23, -136, -118, 122, 119, 120,
	-182, 118, 213, 191, 68, 29, 15, 252, 154, 267,
	59, 155, -55, -55, -55, -55, -55, 122, 119, -55,
	-55, -55, -136, -55, -114, 92, 12, -130, -130, 61,
	-55, 40, -40, -40, -131, -90, -93, -107, 19, 11,
	36, 36, -35, 35, 70, 71, 72, 114, -194, -74,
	-66, -66, -66, -36, 149, 75, -195, -195, -37, 57,
	-40, -195, -195, -195, 57, 55, 22, 11, 11, -195,
	11, 11, -195, -195, -37, -85, -83, 82, -40, -195,
	114, -195, 57, 57, -195, -195, -195, -195, -195, -64,
	30, 36, -2, -194, -194, -99, -103, -81, -43, -44,
	-44, -43, -44, 44, 44, 44, 49, 44, 49, 44,
	-52, -130, -195, -59, 52, 129, 53, -194, -132, -60,
	12, -42, -60, -60, 114, -105, -106, 238, 235, 241,
	59, 61, 57, -173, 84, 56, 59, 28, -165, -165,
	-166, 59, -166, 28, -150, 29, 70, -155, 217, 62,
	-152, -152, -153, 30, -153, -153, -153, -161, 61, -161,
	62, 62, 54, -124, -136, -135, -188, 137, 133, 140,
	141, 135, 59, 126, 28, 132, 134, 154, 131, -188,
	-119, -120, 128, 22, 126, 28, 154, -187, 55, 160,
	213, 160, 128, -136, -111, 61, -40, 41, 114, -55,
	-37, 101, -125, -38, -36, 75, -66, -66, -195, -39,
	-140, 110, 188, 148, 186, 182, 202, 193, 215, 184,
	216, -137, -140, -66, -66, -66, -66, 261, -88, 83,
	-40, 81, -125, -66, -66, -98, 54, -99, -76, -78,
	-77, -194, -2, -94, -124, -97, -124, -60, 57, 84,
	-47, -46, 54, 55, -48, 54, -46, 44, 44, 126,
	126, 126, -97, -88, -40, -60, 235, 239, 240, -172,
	-173, -176, -175, -124, -179, -166, -166, 56, -151, 54,
	-66, 58, -153, -153, 59, 110, 58, 57, 58, 57,
	58, 57, -55, -135, -135, -55, -135, -124, -185, 264,
	-186, 59, -124, -124, -124, -55, -114, -41, 11, -195,
	-66, -195, -148, -148, -148, -157, -148, 176, -148, 176,
	-195, -195, 19, 19, 19, 19, -194, -34, 257, -40,
	57, 57, 27, -98, 57, -195, -195, -195, 57, 114,
	-195, 57, -88, -103, -40, -40, 56, -40, -194, -194,
	-194, -195, -92, 58, 57, -148, -95, -124, -159, 213,
	9, -152, 61, -152, 62, 62, -136, 26, -184, -183,
	-125, 56, 55, -60, -42, -152, 59, -66, -66, -66,
	-66, -66, -195, 61, -66, -66, 28, -78, 36, -2,
	-194, -124, -124, -124, -92, -95, -95, -95, -95, -133,
	-178, -177, 55, 136, 68, -175, 58, 57, -160, 132,
	28, 131, -69, -153, -153, 58, 58, -194, 57, 84,
	-95, -55, -86, 13, -195, -195, -195, -195, -33, 94,
	264, -195, -195, 9, -76, -2, 114, 58, -195, -195,
	-195, -59, -177, 59, -167, 84, 61, 143, -124, -149,
	68, 28, 28, -180, -181, 154, -183, -173, 58, -87,
	14, 16, -195, 262, 51, 265, -99, -195, -124, 62,
	-55, 61, -195, 57, -124, -187, -40, -75, 41, 263,
	266, 56, -181, 36, -185, 41, -95, 156, 264, 58,
	157, 265, -190, -191, 54, -194, 266, -191, 54, 10,
	9, -66, 153, -189, 144, 139, 142, 30, -189, -195,
	-195, 138, 29, 70,
}
var yyDef = [...]int{

	23, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 566, 0, 319, 319, 319, 319, 319, 319,
	0, 637, 620, 0, 0, 0, 0, -2, 306, 307,
	0, 309, 310, 939, 939, 939, 939, 939, 0, 0,
	939, 0, 35, 36, 937, 1, 3, 574, 0, 0,
	323, 326, 321, 0, 620, 620, 0, 0, 65, 66,
	0, 0, 0, 926, 0, 618, 618, 618, 638, 639,
	642, 643, 768, 769, 770, 771, 772, 773, 774, 775,
	776, 777, 778, 779, 780, 781, 782, 783, 784, 785,
	786, 787, 788, 789, 790, 791, 792, 793, 794, 795,
	796, 797, 798, 799, 800, 801, 802, 803, 804, 805,
	806, 807, 808, 809, 810, 811, 812, 813, 814, 815,
	816, 817, 818, 819, 820, 821, 822, 823, 824, 825,
	826, 827, 828, 829, 830, 831, 832, 833, 834, 835,
	836, 837, 838, 839, 840, 841, 842, 843, 844, 845,
	846, 847, 848, 849, 850, 851, 852, 853, 854, 855,
	856, 857, 858, 859, 860, 861, 862, 863, 864, 865,
	866, 867, 868, 869, 870, 871, 872, 873, 874, 875,
	876, 877, 878, 879, 880, 881, 882, 883, 884, 885,
	886, 887, 888, 889, 890, 891, 892, 893, 894, 895,
	896, 897, 898, 899, 900, 901, 902, 903, 904, 905,
	906, 907, 908, 909, 910, 911, 912, 913, 914, 915,
	916, 917, 918, 919, 920, 921, 922, 923, 924, 925,
	927, 928, 929, 930, 931, 932, 933, 934, 935, 936,
	0, 0, 0, 0, 0, 621, 0, 616, 0, 616,
	616, 616, 0, 258, 394, 646, 647, 926, 0, 0,
	0, 940, 0, 940, 270, 940, 940, 273, 940, 0,
	940, 0, 280, 0, 0, 286, 940, 303, 304, 291,
	305, 308, 311, 312, 313, 314, 315, 939, 939, 318,
	29, 578, 0, 0, 566, 31, 0, 319, 324, 325,
	329, 327, 328, 320, 0, 340, 344, 0, 403, 0,
	408, 410, -2, -2, 0, 445, 446, 447, 448, 449,
	0, 0, 0, 0, 0, 0, 0, 0, 473, 474,
	475, 476, 551, 552, 553, 554, 555, 556, 557, 558,
	412, 413, 548, 598, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 539, 0, 509, 509, 509, 509, 509,
	509, 509, 509, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 44, 46, 394, 50, 0,
	915, 602, -2, -2, 0, 0, 644, 645, -2, 781,
	-2, 650, 651, 652, 653, 654, 655, 656, 657, 658,
	659, 660, 661, 662, 663, 664, 665, 666, 667, 668,
	669, 670, 671, 672, 673, 674, 675, 676, 677, 678,
	679, 680, 681, 682, 683, 684, 685, 686, 687, 688,
	689, 690, 691, 692, 693, 694, 695, 696, 697, 698,
	699, 700, 701, 702, 703, 704, 705, 706, 707, 708,
	709, 710, 711, 712, 713, 714, 715, 716, 717, 718,
	719, 720, 721, 722, 723, 724, 725, 726, 727, 728,
	729, 730, 731, 732, 733, 734, 735, 736, 737, 738,
	739, 740, 741, 742, 743, 744, 745, 746, 747, 748,
	749, 750, 751, 752, 753, 754, 755, 756, 757, 758,
	759, 760, 761, 762, 763, 764, 765, 766, 767, 0,
	0, 84, 0, 82, 0, 940, 0, 0, 0, 0,
	0, 0, 940, 940, 940, 0, 0, 0, 0, 249,
	0, 0, 0, 0, 0, 0, 0, 257, 0, 259,
	940, 940, 262, 941, 942, 940, 940, 940, 0, 940,
	940, 269, 271, 272, 274, 940, 940, 276, 0, 294,
	292, 293, 288, 289, 0, 300, 283, 284, 287, 316,
	317, 30, 938, 24, 0, 0, 575, 0, 567, 568,
	571, 574, 29, 326, 0, 334, 330, 331, 322, 0,
	341, 0, 0, 0, 345, 0, 347, 348, 0, 406,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 430,
	431, 432, 433, 434, 435, 436, 409, 0, 423, 0,
	0, 0, 465, 466, 467, 468, 469, 470, 471, 0,
	336, 29, 0, 443, 0, 0, 0, 0, 0, 0,
	0, 0, 329, 0, 540, 0, 493, 501, 0, 494,
	502, 495, 503, 496, 0, 497, 504, 498, 505, 499,
	500, 506, 0, 0, 0, 336, 336, 0, 0, 48,
	0, 393, 0, 351, 353, 354, 355, -2, 0, 377,
	-2, 0, 0, 0, 42, 43, 0, 0, 0, 0,
	51, 915, 53, 54, 0, 0, 0, 162, 611, 612,
	613, 609, 206, 0, 0, 150, 146, 90, 91, 92,
	139, 94, 139, 139, 139, 139, 159, 159, 159, 159,
	122, 123, 124, 125, 126, 0, 0, 109, 139, 139,
	139, 113, 129, 130, 131, 132, 133, 134, 135, 136,
	95, 96, 97, 98, 99, 100, 101, 102, 103, 141,
	141, 141, 143, 143, 640, 68, 0, 940, 0, 940,
	80, 0, 220, 222, 223, 0, 0, 0, 0, 0,
	0, 0, 0, 252, 617, 0, 940, 255, 256, 395,
	648, 649, 260, 261, 263, 264, 265, 266, 267, 268,
	275, 279, 0, 297, 0, 0, 281, 282, 0, 0,
	579, 0, 0, 0, 0, 0, 570, 572, 573, 578,
	32, 329, 0, 559, 0, 0, 332, 335, 27, 404,
	405, 407, 424, 0, 426, 428, 346, 342, 0, 549,
	-2, 414, 415, 439, 440, 441, 0, 0, 0, 0,
	437, 419, 0, 450, 451, 452, 453, 454, 455, 456,
	457, 458, 459, 460, 461, 464, 524, 525, 0, 462,
	463, 472, 0, 0, 337, 338, 442, 0, 597, 29,
	0, 0, 0, 0, 447, 551, 0, 447, 551, 0,
	0, 0, 546, 543, 0, 0, 548, 0, 510, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 392,
	0, 0, 0, 0, 0, 0, 382, 0, 0, 385,
	0, 0, 0, 0, 376, 0, 0, 397, 860, 378,
	0, 380, 381, 401, 0, 401, 45, 401, 47, 0,
	396, 603, 52, 0, 0, 57, 58, 604, 605, 606,
	607, 0, 81, 207, 209, 212, 213, 214, 85, 86,
	87, 0, 0, 194, 0, 0, 188, 188, 0, 186,
	187, 83, 153, 151, 0, 148, 147, 93, 0, 159,
	159, 116, 117, 162, 0, 162, 162, 162, 0, 0,
	110, 111, 112, 104, 0, 105, 106, 107, 0, 108,
	0, 0, 940, 70, 619, 71, 939, 0, 0, 632,
	221, 622, 623, 624, 625, 626, 627, 628, 629, 630,
	631, 0, 72, 225, 227, 226, 230, 0, 0, 0,
	250, 940, 254, 294, 278, 0, 0, 295, 296, 301,
	285, 0, 576, 577, 0, 569, 25, 0, 614, 615,
	560, 561, 0, 333, 425, 427, 429, 0, 336, 416,
	437, 420, 0, 417, 0, 0, 411, 477, 0, 0,
	444, -2, 480, 481, 0, 0, 0, 0, 0, 517,
	0, 0, 518, 0, 566, 0, 544, 0, 0, 492,
	0, 511, 0, 0, 512, 513, 514, 515, 516, 591,
	0, 0, -2, 0, 0, 401, 599, 0, 352, 371,
	373, 0, 368, 383, 384, 386, 0, 388, 0, 390,
	391, 356, 358, 359, 0, 0, 0, 0, 379, 566,
	0, 401, 40, 41, 0, 55, 56, 0, 0, 62,
	163, 164, 0, 210, 0, 0, 0, 181, 188, 188,
	184, 189, 185, 0, 155, 0, 152, 89, 149, 0,
	162, 162, 118, 0, 119, 120, 121, 0, 137, 0,
	0, 0, 0, 641, 69, 215, 939, 232, 233, 234,
	235, 236, 237, 238, 239, 240, 241, 242, 243, 939,
	0, 939, 633, 634, 635, 636, 0, 75, 0, 0,
	0, 0, 0, 253, 297, 298, 299, 580, 0, 26,
	349, 343, 550, 0, 418, 0, 438, 421, 478, 339,
	0, 139, 139, 529, 139, 143, 532, 139, 534, 139,
	537, 0, 0, 0, 0, 0, 0, 0, 541, 491,
	547, 0, 549, 0, 0, 33, 0, 591, 581, 593,
	595, 0, 29, 0, 587, 0, 363, 566, 0, 0,
	365, 372, 0, 0, 366, 0, 367, 387, 389, 0,
	0, 0, 0, 574, 402, 39, 59, 60, 61, 208,
	211, 0, 190, 139, 193, 182, 183, 0, 157, 0,
	154, 140, 114, 115, 160, 161, 159, 0, 159, 0,
	144, 0, 940, 216, 217, 218, 219, 0, 224, 0,
	73, 74, 0, 0, 229, 251, 277, 401, 0, 479,
	422, 482, 526, 159, 530, 531, 533, 535, 536, 538,
	484, 483, 0, 0, 0, 0, 0, 0, 0, 545,
	0, 0, 0, 34, 0, 596, -2, 0, 0, 0,
	49, 0, 574, 600, 601, 369, 0, 374, 0, 0,
	0, 377, 38, 173, 0, 192, 0, 361, 165, 158,
	0, 162, 138, 162, 0, 0, 67, 0, 76, 77,
	0, 0, 0, 562, 350, 527, 528, 0, 0, 0,
	0, 519, 490, 542, 0, 0, 0, 594, 0, -2,
	0, 589, 588, 364, 37, 0, 0, 0, 0, 397,
	172, 174, 0, 179, 0, 191, 0, 0, 170, 0,
	167, 169, 156, 127, 128, 142, 145, 0, 0, 0,
	0, 231, 564, 0, 485, 487, 486, 488, 0, 0,
	0, 507, 508, 0, 584, 29, 0, 370, 398, 399,
	400, 360, 175, 176, 0, 180, 178, 0, 362, 88,
	0, 166, 168, 0, 245, 0, 78, 79, 72, 28,
	0, 0, 489, 0, 0, 0, 592, -2, 590, 177,
	0, 171, 244, 0, 0, 75, 565, 563, 520, 0,
	523, 0, 246, 0, 228, 521, 0, 0, 0, 195,
	0, 0, 196, 197, 0, 0, 522, 198, 0, 0,
	0, 0, 0, 199, 201, 202, 0, 0, 200, 247,
	248, 203, 204, 205,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 77, 3, 3, 3, 104, 96, 3,
	56, 58, 101, 99, 57, 100, 114, 102, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 349,
	85, 84, 86, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 106, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 95, 3, 107,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 78, 79, 80, 81, 82, 83, 87, 88,
	89, 90, 91, 92, 93, 94, 97, 98, 103, 105,
	108, 109, 110, 111, 112, 113, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}
var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:324
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:329
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:330
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:334
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:356
		{
			setParseTree(yylex, nil)
		}
	case 24:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:362
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 25:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:370
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 26:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:374
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 27:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:380
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 28:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:387
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, CalcFoundRows: yyDollar[6].str, SelectExprs: yyDollar[7].selectExprs, From: yyDollar[8].tableExprs, Where: NewWhere(WhereStr, yyDollar[9].expr), GroupBy: GroupBy(yyDollar[10].exprs), Having: NewWhere(HavingStr, yyDollar[11].expr)}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:393
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:397
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:403
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:407
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 33:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:414
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 34:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:426
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:438
		{
			yyVAL.str = InsertStr
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:442
		{
			yyVAL.str = ReplaceStr
		}
	case 37:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:448
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].updateExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 38:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:454
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 39:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:458
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 40:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:462
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 41:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:466
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:471
		{
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:472
		{
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:476
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:480
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:486
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:490
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 48:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:495
		{
			yyVAL.partitions = nil
		}
	case 49:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:499
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:505
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 51:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:509
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 52:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:513
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 53:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:517
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:523
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:527
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:533
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(yyDollar[3].str))}
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:537
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(TxReadWrite))}
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:541
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(TxReadOnly))}
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:547
		{
			yyVAL.str = IsolationLevelRepeatableRead
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:551
		{
			yyVAL.str = IsolationLevelReadCommitted
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:555
		{
			yyVAL.str = IsolationLevelReadUncommitted
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:559
		{
			yyVAL.str = IsolationLevelSerializable
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:565
		{
			yyVAL.str = SessionStr
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:569
		{
			yyVAL.str = GlobalStr
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:575
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:580
		{
			// Create table [name] like [name]
			yyDollar[1].ddl.OptLike = yyDollar[2].optLike
			yyVAL.statement = yyDollar[1].ddl
		}
	case 67:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:586
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName}
		}
	case 68:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:591
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 69:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:595
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[5].tableName.ToViewName()}
		}
	case 70:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:599
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 71:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:603
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 72:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:608
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:612
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:618
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 75:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:623
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:628
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:634
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:639
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:645
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 80:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:651
		{
			yyVAL.ddl = &DDL{Action: CreateStr, Table: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 81:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:658
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 82:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:665
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[2].tableName}
		}
	case 83:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:669
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[3].tableName}
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:675
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:680
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:684
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:688
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 88:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:694
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].sqlVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:705
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:716
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].sqlVal
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:721
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:727
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:731
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:735
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:739
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:743
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:747
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:751
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:755
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:759
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:765
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:771
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:777
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:783
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:789
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:797
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:801
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:805
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:809
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:813
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 114:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:819
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 115:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:823
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:827
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:831
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:835
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 119:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:839
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:843
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:847
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:851
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:855
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:859
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:863
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:867
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 127:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:871
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 128:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:876
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:882
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:886
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:890
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:894
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:898
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:902
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:906
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:910
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:916
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:921
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 139:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:926
		{
			yyVAL.sqlVal = nil
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:930
		{
			yyVAL.sqlVal = NewIntVal(yyDollar[2].bytes)
		}
	case 141:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:935
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 142:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:939
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 143:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:947
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:951
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 145:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:957
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 146:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:965
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:969
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 148:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:974
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:978
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 150:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:984
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:988
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:992
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 153:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:997
		{
			yyVAL.optVal = nil
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1001
		{
			yyVAL.optVal = yyDollar[2].expr
		}
	case 155:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1006
		{
			yyVAL.optVal = nil
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1010
		{
			yyVAL.optVal = yyDollar[3].expr
		}
	case 157:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1015
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1019
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 159:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1024
		{
			yyVAL.str = ""
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1028
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1032
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 162:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1037
		{
			yyVAL.str = ""
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1041
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1045
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 165:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1050
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1054
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1058
		{
			yyVAL.colKeyOpt = colKey
		}
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1062
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1066
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 170:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1071
		{
			yyVAL.sqlVal = nil
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1075
		{
			yyVAL.sqlVal = NewStrVal(yyDollar[2].bytes)
		}
	case 172:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1081
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 173:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1085
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1091
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1095
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1101
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1105
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1110
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 179:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1116
		{
			yyVAL.str = ""
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1120
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1126
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1130
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1134
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1138
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1142
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1148
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1152
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 188:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1157
		{
			yyVAL.str = ""
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1161
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1167
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1171
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1177
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].sqlVal}
		}
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1183
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].bytes), Details: yyDollar[3].constraintInfo}
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1187
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 195:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1194
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 196:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1198
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 197:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1202
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 198:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1206
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 199:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1212
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 200:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1218
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1224
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1228
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1232
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1236
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1240
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 206:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1245
		{
			yyVAL.str = ""
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1249
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 208:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1253
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1261
		{
			yyVAL.str = yyDollar[1].str
		}
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1265
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 211:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1269
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1275
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1279
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1283
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 215:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1289
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 216:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1293
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 217:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1297
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 218:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1301
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[4].tableName}, ToTables: TableNames{yyDollar[7].tableName}}
		}
	case 219:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1306
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 220:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1311
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 221:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1315
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 222:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1319
		{
			yyVAL.statement = &DBDDL{Action: AlterStr, DBName: string(yyDollar[3].bytes)}
		}
	case 223:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1323
		{
			yyVAL.statement = &DBDDL{Action: AlterStr, DBName: string(yyDollar[3].bytes)}
		}
	case 224:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1327
		{
			yyVAL.statement = &DDL{
				Action: CreateVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name:   NewColIdent(yyDollar[5].tableName.Name.String()),
					Type:   yyDollar[6].colIdent,
					Params: yyDollar[7].vindexParams,
				},
			}
		}
	case 225:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1339
		{
			yyVAL.statement = &DDL{
				Action: DropVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name: NewColIdent(yyDollar[5].tableName.Name.String()),
				},
			}
		}
	case 226:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1349
		{
			yyVAL.statement = &DDL{Action: AddVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 227:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1353
		{
			yyVAL.statement = &DDL{Action: DropVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 228:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1357
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 229:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1370
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 230:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1380
		{
			yyVAL.statement = &DDL{Action: AddSequenceStr, Table: yyDollar[5].tableName}
		}
	case 231:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1384
		{
			yyVAL.statement = &DDL{
				Action: AddAutoIncStr,
				Table:  yyDollar[4].tableName,
				AutoIncSpec: &AutoIncSpec{
					Column:   yyDollar[7].colIdent,
					Sequence: yyDollar[9].tableName,
				},
			}
		}
	case 244:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1411
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1417
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 246:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1421
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 247:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1427
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 248:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1431
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 249:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1437
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 250:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1443
		{
			yyVAL.ddl = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 251:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1447
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 252:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1455
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 253:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1463
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName}
		}
	case 254:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1468
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: TableNames{yyDollar[4].tableName.ToViewName()}, IfExists: exists}
		}
	case 255:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1476
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 256:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1480
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 257:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1486
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 258:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1490
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 259:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1495
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName}
		}
	case 260:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1501
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 261:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1506
		{
			yyVAL.statement = &Show{Type: CharsetStr}
		}
	case 262:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1510
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 263:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1514
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 264:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1519
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 265:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1523
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 266:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1527
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 267:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1531
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 268:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1535
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 269:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1539
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1543
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 271:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1547
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 272:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1551
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 273:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1555
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 274:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1559
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 275:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1563
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 276:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1567
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 277:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1571
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 278:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1576
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[3].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 279:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1586
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1590
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 281:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1594
		{
			// Cannot dereference $4 directly, or else the parser stackcannot be pooled. See yyParsePooled
			showCollationFilterOpt := yyDollar[4].expr
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: &showCollationFilterOpt}
		}
	case 282:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1600
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Scope: string(yyDollar[2].bytes), Type: string(yyDollar[3].bytes), ShowTablesOpt: showTablesOpt}
		}
	case 283:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1605
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 284:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1609
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 285:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1613
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName}
		}
	case 286:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1617
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 287:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1631
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1637
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1641
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 290:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1647
		{
			yyVAL.str = ""
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1651
		{
			yyVAL.str = "full "
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1657
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1661
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 294:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1667
		{
			yyVAL.str = ""
		}
	case 295:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1671
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 296:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1675
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 297:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1681
		{
			yyVAL.showFilter = nil
		}
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1685
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1689
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 300:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1695
		{
			yyVAL.showFilter = nil
		}
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1699
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 302:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1705
		{
			yyVAL.str = ""
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1709
		{
			yyVAL.str = SessionStr
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1713
		{
			yyVAL.str = GlobalStr
		}
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1719
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1723
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1729
		{
			yyVAL.statement = &Begin{}
		}
	case 308:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1733
		{
			yyVAL.statement = &Begin{}
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1739
		{
			yyVAL.statement = &Commit{}
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1745
		{
			yyVAL.statement = &Rollback{}
		}
	case 311:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1751
		{
			yyVAL.statement = &OtherRead{}
		}
	case 312:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1755
		{
			yyVAL.statement = &OtherRead{}
		}
	case 313:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1759
		{
			yyVAL.statement = &OtherRead{}
		}
	case 314:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1763
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 315:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1767
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 316:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1771
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 317:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1775
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 318:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1781
		{
			yyVAL.statement = &DDL{Action: FlushStr}
		}
	case 319:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1785
		{
			setAllowComments(yylex, true)
		}
	case 320:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1789
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 321:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1795
		{
			yyVAL.bytes2 = nil
		}
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1799
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1805
		{
			yyVAL.str = UnionStr
		}
	case 324:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1809
		{
			yyVAL.str = UnionAllStr
		}
	case 325:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1813
		{
			yyVAL.str = UnionDistinctStr
		}
	case 326:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1818
		{
			yyVAL.str = ""
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1822
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1826
		{
			yyVAL.str = SQLCacheStr
		}
	case 329:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1831
		{
			yyVAL.str = ""
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1835
		{
			yyVAL.str = DistinctStr
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1839
		{
			yyVAL.str = DistinctStr
		}
	case 332:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1844
		{
			yyVAL.str = ""
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1848
		{
			yyVAL.str = SQLCalcFoundRows
		}
	case 334:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1853
		{
			yyVAL.str = ""
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1857
		{
			yyVAL.str = StraightJoinHint
		}
	case 336:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1862
		{
			yyVAL.selectExprs = nil
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1866
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1872
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 339:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1876
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1882
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 341:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1886
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 342:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1890
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 343:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1894
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 344:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1899
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1903
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 346:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1907
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1914
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 349:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1919
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 350:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1923
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1929
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 352:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1933
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1943
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 356:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1947
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1951
		{
			// missed alias for subquery
			yylex.Error("Every derived table must have its own alias")
			return 1
		}
	case 358:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1957
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1963
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 360:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1967
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1973
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 362:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1977
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1983
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1987
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 365:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2000
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 366:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2004
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 367:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2008
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 368:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2012
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 369:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2018
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 370:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2020
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 371:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2024
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2026
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 373:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2030
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 374:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2032
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 375:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2035
		{
			yyVAL.empty = struct{}{}
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2037
		{
			yyVAL.empty = struct{}{}
		}
	case 377:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2040
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2044
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 379:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2048
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2055
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2061
		{
			yyVAL.str = JoinStr
		}
	case 383:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2065
		{
			yyVAL.str = JoinStr
		}
	case 384:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2069
		{
			yyVAL.str = JoinStr
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2075
		{
			yyVAL.str = StraightJoinStr
		}
	case 386:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2081
		{
			yyVAL.str = LeftJoinStr
		}
	case 387:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2085
		{
			yyVAL.str = LeftJoinStr
		}
	case 388:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2089
		{
			yyVAL.str = RightJoinStr
		}
	case 389:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2093
		{
			yyVAL.str = RightJoinStr
		}
	case 390:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2099
		{
			yyVAL.str = NaturalJoinStr
		}
	case 391:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2103
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 392:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2113
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2117
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2123
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 395:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2127
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 396:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2133
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 397:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2138
		{
			yyVAL.indexHints = nil
		}
	case 398:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2142
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 399:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2146
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 400:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2150
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 401:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2155
		{
			yyVAL.expr = nil
		}
	case 402:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2159
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2165
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 404:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2169
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 405:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2173
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 406:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2177
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 407:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2181
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2185
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 409:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2189
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 410:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2195
		{
			yyVAL.str = ""
		}
	case 411:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2199
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2205
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2209
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 414:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2215
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 415:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2219
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 416:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2223
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 417:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2227
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 418:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2231
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 419:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2235
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 420:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2239
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 421:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2243
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 422:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2247
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 423:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2251
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2257
		{
			yyVAL.str = IsNullStr
		}
	case 425:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2261
		{
			yyVAL.str = IsNotNullStr
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2265
		{
			yyVAL.str = IsTrueStr
		}
	case 427:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2269
		{
			yyVAL.str = IsNotTrueStr
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2273
		{
			yyVAL.str = IsFalseStr
		}
	case 429:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2277
		{
			yyVAL.str = IsNotFalseStr
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2283
		{
			yyVAL.str = EqualStr
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2287
		{
			yyVAL.str = LessThanStr
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2291
		{
			yyVAL.str = GreaterThanStr
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2295
		{
			yyVAL.str = LessEqualStr
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2299
		{
			yyVAL.str = GreaterEqualStr
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2303
		{
			yyVAL.str = NotEqualStr
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2307
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 437:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2312
		{
			yyVAL.expr = nil
		}
	case 438:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2316
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2322
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2326
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2330
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2336
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2342
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 444:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2346
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2352
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2356
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2360
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2364
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2368
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 450:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2372
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 451:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2376
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 452:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2380
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 453:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2384
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 454:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2388
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 455:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2392
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 456:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2396
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2400
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 458:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2404
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 459:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2408
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 460:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2412
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 461:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2416
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 462:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2420
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 463:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2424
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 464:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2428
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 465:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2432
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 466:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2436
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 467:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2440
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Str, Expr: yyDollar[2].expr}
		}
	case 468:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2444
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 469:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2452
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 470:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2466
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 471:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2470
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 472:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2474
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 477:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2492
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 478:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2496
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 479:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2500
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 480:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2510
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 481:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2514
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 482:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2518
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 483:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2522
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 484:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2526
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 485:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2530
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 486:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2534
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 487:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2538
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 488:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2542
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 489:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2546
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 490:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2550
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 491:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2554
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 492:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2558
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 493:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2568
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 494:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2572
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 495:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2576
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 496:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2581
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 497:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2586
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 498:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2591
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 499:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2597
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 500:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2602
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 501:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2607
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 502:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2611
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 503:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2615
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_time"), Fsp: yyDollar[2].expr}
		}
	case 504:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2620
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtime"), Fsp: yyDollar[2].expr}
		}
	case 505:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2625
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtimestamp"), Fsp: yyDollar[2].expr}
		}
	case 506:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2630
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_time"), Fsp: yyDollar[2].expr}
		}
	case 507:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2634
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampadd"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 508:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2638
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampdiff"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 511:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2648
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 512:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2658
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 513:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2662
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 514:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2666
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("schema"), Exprs: yyDollar[3].selectExprs}
		}
	case 515:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2670
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 516:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2674
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 517:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2678
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 518:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2682
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 519:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2688
		{
			yyVAL.str = ""
		}
	case 520:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2692
		{
			yyVAL.str = BooleanModeStr
		}
	case 521:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2696
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 522:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2700
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 523:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2704
		{
			yyVAL.str = QueryExpansionStr
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2710
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2714
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 526:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2720
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 527:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2724
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 528:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2728
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: string(yyDollar[3].bytes)}
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2732
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 530:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2736
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 531:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2740
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2746
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 533:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2750
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2754
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 535:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2758
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 536:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2762
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2766
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 538:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2770
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 539:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2775
		{
			yyVAL.expr = nil
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2779
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 541:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2784
		{
			yyVAL.str = string("")
		}
	case 542:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2788
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2794
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 544:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2798
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 545:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2804
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 546:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2809
		{
			yyVAL.expr = nil
		}
	case 547:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2813
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2819
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 549:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2823
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 550:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2827
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2833
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2837
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2841
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2845
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2849
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2853
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2857
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2861
		{
			yyVAL.expr = &NullVal{}
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2867
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 560:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2876
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 561:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2880
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 562:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2885
		{
			yyVAL.exprs = nil
		}
	case 563:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2889
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 564:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2894
		{
			yyVAL.expr = nil
		}
	case 565:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2898
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 566:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2903
		{
			yyVAL.orderBy = nil
		}
	case 567:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2907
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2913
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 569:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2917
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 570:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2923
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 571:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2928
		{
			yyVAL.str = AscScr
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2932
		{
			yyVAL.str = AscScr
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2936
		{
			yyVAL.str = DescScr
		}
	case 574:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2941
		{
			yyVAL.limit = nil
		}
	case 575:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2945
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 576:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2949
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 577:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2953
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 578:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2958
		{
			yyVAL.str = ""
		}
	case 579:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2962
		{
			yyVAL.str = ForUpdateStr
		}
	case 580:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2966
		{
			yyVAL.str = ShareModeStr
		}
	case 581:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2979
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2983
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 583:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2987
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 584:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2992
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 585:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2996
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 586:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3000
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3007
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 588:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3011
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 589:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3015
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 590:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3019
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 591:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3024
		{
			yyVAL.updateExprs = nil
		}
	case 592:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3028
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3034
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 594:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3038
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3044
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 596:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3048
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 597:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3054
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3060
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3070
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 600:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3074
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 601:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3080
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3086
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 603:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3090
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 604:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3096
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 605:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3100
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 606:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3104
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 607:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3108
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 609:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3115
		{
			yyVAL.bytes = []byte("charset")
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3122
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3126
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3130
		{
			yyVAL.expr = &Default{}
		}
	case 616:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3139
		{
			yyVAL.byt = 0
		}
	case 617:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3141
		{
			yyVAL.byt = 1
		}
	case 618:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3144
		{
			yyVAL.empty = struct{}{}
		}
	case 619:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3146
		{
			yyVAL.empty = struct{}{}
		}
	case 620:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3149
		{
			yyVAL.str = ""
		}
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3151
		{
			yyVAL.str = IgnoreStr
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3155
		{
			yyVAL.empty = struct{}{}
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3157
		{
			yyVAL.empty = struct{}{}
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3159
		{
			yyVAL.empty = struct{}{}
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3161
		{
			yyVAL.empty = struct{}{}
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3163
		{
			yyVAL.empty = struct{}{}
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3165
		{
			yyVAL.empty = struct{}{}
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3167
		{
			yyVAL.empty = struct{}{}
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3169
		{
			yyVAL.empty = struct{}{}
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3171
		{
			yyVAL.empty = struct{}{}
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3173
		{
			yyVAL.empty = struct{}{}
		}
	case 632:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3176
		{
			yyVAL.empty = struct{}{}
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3178
		{
			yyVAL.empty = struct{}{}
		}
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3180
		{
			yyVAL.empty = struct{}{}
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3184
		{
			yyVAL.empty = struct{}{}
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3186
		{
			yyVAL.empty = struct{}{}
		}
	case 637:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3189
		{
			yyVAL.empty = struct{}{}
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3191
		{
			yyVAL.empty = struct{}{}
		}
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3193
		{
			yyVAL.empty = struct{}{}
		}
	case 640:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3196
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 641:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3198
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3202
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3206
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3213
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3219
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3223
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3230
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 937:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3543
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 938:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3552
		{
			decNesting(yylex)
		}
	case 939:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3557
		{
			skipToEnd(yylex)
		}
	case 940:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3562
		{
			skipToEnd(yylex)
		}
	case 941:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3566
		{
			skipToEnd(yylex)
		}
	case 942:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3570
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
