// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line sql.y:53
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	sqlVal               *SQLVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	colIdent             ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	colKeyOpt            ColumnKeyOption
	optVal               Expr
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexColumn          *IndexColumn
	indexColumns         []*IndexColumn
	constraintDefinition *ConstraintDefinition
	constraintInfo       ConstraintInfo
	ReferenceAction      ReferenceAction
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
	optLike              *OptLike
}

const LEX_ERROR = 57346
const UNION = 57347
const EXPLAIN = 57348
const SELECT = 57349
const STREAM = 57350
const INSERT = 57351
const UPDATE = 57352
const DELETE = 57353
const FROM = 57354
const WHERE = 57355
const GROUP = 57356
const HAVING = 57357
const ORDER = 57358
const BY = 57359
const LIMIT = 57360
const OFFSET = 57361
const FOR = 57362
const ALL = 57363
const DISTINCT = 57364
const AS = 57365
const EXISTS = 57366
const ASC = 57367
const DESC = 57368
const INTO = 57369
const DUPLICATE = 57370
const KEY = 57371
const DEFAULT = 57372
const SET = 57373
const LOCK = 57374
const UNLOCK = 57375
const KEYS = 57376
const VALUES = 57377
const LAST_INSERT_ID = 57378
const NEXT = 57379
const VALUE = 57380
const SHARE = 57381
const MODE = 57382
const SQL_NO_CACHE = 57383
const SQL_CACHE = 57384
const JOIN = 57385
const STRAIGHT_JOIN = 57386
const LEFT = 57387
const RIGHT = 57388
const INNER = 57389
const OUTER = 57390
const CROSS = 57391
const NATURAL = 57392
const USE = 57393
const FORCE = 57394
const ON = 57395
const USING = 57396
const ID = 57397
const HEX = 57398
const STRING = 57399
const INTEGRAL = 57400
const FLOAT = 57401
const HEXNUM = 57402
const VALUE_ARG = 57403
const LIST_ARG = 57404
const COMMENT = 57405
const COMMENT_KEYWORD = 57406
const BIT_LITERAL = 57407
const NULL = 57408
const TRUE = 57409
const FALSE = 57410
const OFF = 57411
const FORMAT = 57412
const OR = 57413
const AND = 57414
const NOT = 57415
const BETWEEN = 57416
const CASE = 57417
const WHEN = 57418
const THEN = 57419
const ELSE = 57420
const END = 57421
const LE = 57422
const GE = 57423
const NE = 57424
const NULL_SAFE_EQUAL = 57425
const IS = 57426
const LIKE = 57427
const REGEXP = 57428
const IN = 57429
const SHIFT_LEFT = 57430
const SHIFT_RIGHT = 57431
const DIV = 57432
const MOD = 57433
const UNARY = 57434
const COLLATE = 57435
const BINARY = 57436
const UNDERSCORE_BINARY = 57437
const UNDERSCORE_UTF8MB4 = 57438
const INTERVAL = 57439
const JSON_EXTRACT_OP = 57440
const JSON_UNQUOTE_EXTRACT_OP = 57441
const CREATE = 57442
const ALTER = 57443
const DROP = 57444
const RENAME = 57445
const ANALYZE = 57446
const ADD = 57447
const FLUSH = 57448
const SCHEMA = 57449
const TABLE = 57450
const INDEX = 57451
const VIEW = 57452
const TO = 57453
const IGNORE = 57454
const IF = 57455
const UNIQUE = 57456
const PRIMARY = 57457
const COLUMN = 57458
const SPATIAL = 57459
const FULLTEXT = 57460
const KEY_BLOCK_SIZE = 57461
const ACTION = 57462
const CASCADE = 57463
const CONSTRAINT = 57464
const FOREIGN = 57465
const NO = 57466
const REFERENCES = 57467
const RESTRICT = 57468
const SHOW = 57469
const DESCRIBE = 57470
const DATE = 57471
const ESCAPE = 57472
const REPAIR = 57473
const OPTIMIZE = 57474
const TRUNCATE = 57475
const MAXVALUE = 57476
const PARTITION = 57477
const REORGANIZE = 57478
const LESS = 57479
const THAN = 57480
const PROCEDURE = 57481
const TRIGGER = 57482
const VINDEX = 57483
const VINDEXES = 57484
const STATUS = 57485
const VARIABLES = 57486
const WARNINGS = 57487
const SEQUENCE = 57488
const BEGIN = 57489
const START = 57490
const TRANSACTION = 57491
const COMMIT = 57492
const ROLLBACK = 57493
const BIT = 57494
const TINYINT = 57495
const SMALLINT = 57496
const MEDIUMINT = 57497
const INT = 57498
const INTEGER = 57499
const BIGINT = 57500
const INTNUM = 57501
const REAL = 57502
const DOUBLE = 57503
const FLOAT_TYPE = 57504
const DECIMAL = 57505
const NUMERIC = 57506
const TIME = 57507
const TIMESTAMP = 57508
const DATETIME = 57509
const YEAR = 57510
const CHAR = 57511
const VARCHAR = 57512
const BOOL = 57513
const CHARACTER = 57514
const VARBINARY = 57515
const NCHAR = 57516
const TEXT = 57517
const TINYTEXT = 57518
const MEDIUMTEXT = 57519
const LONGTEXT = 57520
const BLOB = 57521
const TINYBLOB = 57522
const MEDIUMBLOB = 57523
const LONGBLOB = 57524
const JSON = 57525
const ENUM = 57526
const GEOMETRY = 57527
const POINT = 57528
const LINESTRING = 57529
const POLYGON = 57530
const GEOMETRYCOLLECTION = 57531
const MULTIPOINT = 57532
const MULTILINESTRING = 57533
const MULTIPOLYGON = 57534
const NULLX = 57535
const AUTO_INCREMENT = 57536
const APPROXNUM = 57537
const SIGNED = 57538
const UNSIGNED = 57539
const ZEROFILL = 57540
const COLLATION = 57541
const DATABASES = 57542
const TABLES = 57543
const VITESS_METADATA = 57544
const VSCHEMA = 57545
const FULL = 57546
const PROCESSLIST = 57547
const COLUMNS = 57548
const FIELDS = 57549
const ENGINES = 57550
const PLUGINS = 57551
const NAMES = 57552
const CHARSET = 57553
const GLOBAL = 57554
const SESSION = 57555
const ISOLATION = 57556
const LEVEL = 57557
const READ = 57558
const WRITE = 57559
const ONLY = 57560
const REPEATABLE = 57561
const COMMITTED = 57562
const UNCOMMITTED = 57563
const SERIALIZABLE = 57564
const CURRENT_TIMESTAMP = 57565
const DATABASE = 57566
const CURRENT_DATE = 57567
const CURRENT_TIME = 57568
const LOCALTIME = 57569
const LOCALTIMESTAMP = 57570
const UTC_DATE = 57571
const UTC_TIME = 57572
const UTC_TIMESTAMP = 57573
const REPLACE = 57574
const CONVERT = 57575
const CAST = 57576
const SUBSTR = 57577
const SUBSTRING = 57578
const GROUP_CONCAT = 57579
const SEPARATOR = 57580
const TIMESTAMPADD = 57581
const TIMESTAMPDIFF = 57582
const MATCH = 57583
const AGAINST = 57584
const BOOLEAN = 57585
const LANGUAGE = 57586
const WITH = 57587
const QUERY = 57588
const EXPANSION = 57589
const UNUSED = 57590

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"EXPLAIN",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"FORMAT",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"SHOW",
	"DESCRIBE",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"SEQUENCE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"TABLES",
	"VITESS_METADATA",
	"VSCHEMA",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"PLUGINS",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 34,
	-2, 4,
	-1, 38,
	160, 304,
	161, 304,
	-2, 292,
	-1, 264,
	114, 643,
	-2, 639,
	-1, 265,
	114, 644,
	-2, 640,
	-1, 333,
	84, 818,
	-2, 68,
	-1, 334,
	84, 774,
	-2, 69,
	-1, 339,
	84, 753,
	-2, 605,
	-1, 341,
	84, 795,
	-2, 607,
	-1, 614,
	1, 355,
	5, 355,
	13, 355,
	14, 355,
	15, 355,
	16, 355,
	18, 355,
	20, 355,
	31, 355,
	32, 355,
	43, 355,
	44, 355,
	45, 355,
	46, 355,
	47, 355,
	49, 355,
	50, 355,
	53, 355,
	54, 355,
	56, 355,
	57, 355,
	266, 355,
	-2, 373,
	-1, 617,
	54, 49,
	56, 49,
	-2, 53,
	-1, 765,
	114, 646,
	-2, 642,
	-1, 994,
	5, 35,
	-2, 440,
	-1, 1024,
	5, 34,
	-2, 579,
	-1, 1268,
	5, 35,
	-2, 580,
	-1, 1321,
	5, 34,
	-2, 582,
	-1, 1399,
	5, 35,
	-2, 583,
}

const yyPrivate = 57344

const yyLast = 12730

var yyAct = [...]int{

	265, 1433, 1423, 823, 1387, 1230, 1118, 269, 1027, 1045,
	878, 570, 1301, 282, 1288, 1170, 1204, 1333, 295, 243,
	58, 1171, 1028, 851, 921, 1167, 849, 907, 958, 887,
	874, 569, 3, 82, 877, 986, 1072, 207, 1177, 1183,
	207, 1142, 338, 797, 790, 714, 728, 1098, 1089, 630,
	610, 1051, 800, 891, 853, 767, 233, 838, 818, 508,
	502, 296, 52, 917, 629, 439, 327, 514, 207, 82,
	831, 332, 267, 207, 522, 207, 252, 329, 611, 584,
	619, 324, 57, 1426, 242, 1410, 585, 940, 1421, 307,
	1397, 313, 314, 311, 312, 310, 309, 308, 1418, 1231,
	1409, 939, 234, 235, 236, 315, 316, 239, 1396, 1159,
	1260, 444, 2, 472, 52, 1199, 1200, 256, 202, 198,
	199, 200, 248, 631, 1060, 632, 1198, 1059, 868, 944,
	1061, 869, 870, 194, 238, 196, 62, 237, 938, 1362,
	535, 534, 544, 545, 537, 538, 539, 540, 541, 542,
	543, 536, 488, 1080, 546, 493, 489, 486, 487, 900,
	1291, 499, 470, 64, 65, 66, 67, 68, 1120, 1308,
	908, 1251, 1249, 232, 481, 482, 491, 1122, 703, 700,
	474, 1420, 476, 1417, 1388, 1117, 702, 832, 1380, 935,
	932, 933, 892, 931, 1143, 207, 271, 1441, 207, 1046,
	1048, 799, 458, 446, 207, 196, 1123, 707, 457, 1105,
	207, 473, 475, 82, 492, 82, 704, 82, 82, 701,
	82, 1121, 82, 942, 945, 693, 195, 1334, 82, 894,
	1145, 335, 1437, 894, 1193, 201, 498, 449, 1103, 1192,
	1336, 1191, 442, 1342, 209, 1114, 500, 197, 1369, 952,
	1271, 1116, 951, 558, 559, 901, 1129, 1056, 1073, 82,
	937, 1013, 875, 980, 1147, 739, 1151, 510, 1146, 454,
	1144, 625, 3, 526, 469, 1149, 469, 1047, 469, 469,
	511, 469, 936, 469, 1148, 464, 546, 536, 1216, 469,
	546, 864, 736, 440, 495, 496, 471, 1150, 1152, 1003,
	908, 729, 52, 733, 71, 1378, 1104, 1363, 521, 1335,
	52, 1109, 1106, 1099, 1107, 1102, 1351, 1181, 1395, 1100,
	1101, 941, 207, 207, 207, 555, 893, 438, 557, 633,
	893, 82, 1108, 451, 1161, 452, 943, 82, 453, 1435,
	1217, 72, 1436, 1000, 1434, 1343, 1341, 819, 1115, 609,
	1113, 519, 1257, 497, 695, 819, 568, 1010, 572, 573,
	574, 575, 576, 577, 578, 579, 580, 521, 583, 586,
	586, 586, 592, 586, 586, 592, 586, 600, 601, 602,
	603, 604, 605, 730, 615, 241, 512, 738, 587, 589,
	591, 593, 595, 597, 598, 588, 590, 897, 594, 596,
	960, 599, 558, 559, 898, 618, 623, 1078, 627, 460,
	461, 462, 535, 534, 544, 545, 537, 538, 539, 540,
	541, 542, 543, 536, 737, 1383, 546, 535, 534, 544,
	545, 537, 538, 539, 540, 541, 542, 543, 536, 207,
	516, 546, 520, 519, 82, 1401, 558, 559, 1403, 207,
	207, 82, 894, 520, 519, 207, 55, 1297, 207, 521,
	1163, 207, 23, 556, 987, 207, 770, 82, 82, 1296,
	521, 774, 82, 82, 82, 207, 82, 82, 1442, 959,
	1093, 440, 82, 82, 217, 772, 773, 771, 791, 998,
	792, 997, 445, 335, 544, 545, 537, 538, 539, 540,
	541, 542, 543, 536, 1092, 469, 546, 716, 227, 520,
	519, 1376, 469, 1081, 82, 745, 1379, 1443, 207, 614,
	757, 759, 760, 247, 82, 294, 521, 758, 469, 469,
	744, 1315, 1294, 469, 469, 469, 501, 469, 469, 708,
	1062, 999, 1063, 469, 469, 977, 978, 979, 768, 893,
	1126, 1090, 963, 1233, 890, 888, 193, 889, 80, 1073,
	210, 1068, 886, 892, 1339, 1419, 1348, 213, 82, 765,
	447, 448, 763, 801, 803, 221, 216, 537, 538, 539,
	540, 541, 542, 543, 536, 809, 812, 546, 793, 746,
	713, 820, 520, 519, 337, 1405, 501, 1347, 761, 1339,
	1391, 82, 82, 712, 804, 696, 219, 694, 207, 521,
	1339, 501, 226, 501, 1339, 1370, 207, 207, 691, 52,
	207, 207, 321, 322, 207, 207, 207, 82, 258, 1339,
	1338, 794, 795, 466, 572, 1286, 1285, 1273, 501, 211,
	82, 1270, 501, 1223, 1222, 1213, 859, 828, 816, 459,
	861, 535, 534, 544, 545, 537, 538, 539, 540, 541,
	542, 543, 536, 1219, 1220, 546, 223, 214, 716, 224,
	225, 230, 895, 742, 743, 215, 218, 850, 212, 229,
	228, 615, 909, 910, 911, 615, 1219, 1218, 857, 764,
	1180, 862, 621, 866, 207, 82, 25, 82, 865, 520,
	519, 207, 207, 207, 207, 207, 882, 207, 207, 992,
	501, 207, 82, 835, 501, 923, 521, 802, 501, 59,
	1022, 1263, 520, 519, 1023, 858, 769, 620, 207, 25,
	207, 207, 640, 639, 622, 207, 624, 802, 337, 521,
	337, 1266, 337, 337, 55, 337, 1168, 337, 1350, 1180,
	835, 919, 920, 337, 1221, 1052, 469, 1320, 469, 992,
	535, 534, 544, 545, 537, 538, 539, 540, 541, 542,
	543, 536, 1064, 469, 546, 805, 806, 55, 1052, 811,
	814, 815, 765, 867, 524, 968, 1132, 25, 834, 335,
	768, 539, 540, 541, 542, 543, 536, 989, 835, 546,
	969, 990, 879, 621, 827, 970, 829, 830, 994, 995,
	996, 1016, 614, 835, 1015, 1002, 614, 992, 1005, 1006,
	614, 1180, 620, 626, 1012, 740, 981, 982, 1014, 706,
	992, 1017, 1018, 1019, 1020, 55, 207, 207, 207, 207,
	207, 55, 1029, 249, 1411, 622, 1119, 620, 207, 1303,
	902, 207, 1278, 1044, 922, 207, 337, 1209, 1067, 207,
	1184, 1185, 635, 1024, 840, 843, 844, 845, 841, 918,
	842, 846, 913, 505, 509, 912, 1009, 1304, 82, 925,
	1428, 1424, 804, 1211, 1187, 1053, 1030, 1168, 1065, 1033,
	527, 55, 1094, 1025, 1026, 734, 710, 615, 615, 615,
	615, 615, 764, 752, 1042, 903, 904, 905, 906, 1050,
	1190, 1054, 850, 1055, 1049, 1031, 1032, 1057, 1034, 1039,
	615, 914, 915, 916, 1040, 571, 82, 82, 1074, 1415,
	1037, 1082, 1083, 1189, 582, 1038, 1036, 1035, 1084, 1408,
	1086, 1087, 1088, 1070, 1071, 285, 284, 287, 288, 289,
	290, 253, 254, 976, 286, 291, 82, 1041, 1128, 844,
	845, 965, 1091, 515, 1413, 975, 974, 503, 769, 337,
	1085, 638, 207, 467, 1077, 1385, 337, 1384, 513, 504,
	1110, 82, 1318, 1075, 1069, 1264, 1299, 1097, 469, 928,
	709, 848, 337, 337, 515, 1140, 244, 337, 337, 337,
	991, 337, 337, 973, 1125, 250, 251, 337, 337, 1356,
	245, 972, 59, 1355, 1306, 1052, 490, 469, 1007, 1136,
	1430, 1429, 63, 1004, 1001, 1135, 82, 82, 1160, 727,
	1029, 1169, 614, 614, 614, 614, 614, 517, 1430, 748,
	879, 1154, 1172, 1153, 1366, 1141, 1292, 614, 735, 524,
	82, 61, 337, 56, 1, 614, 765, 1174, 1422, 968,
	1232, 1300, 934, 1386, 1332, 82, 1203, 82, 82, 262,
	885, 876, 1195, 1188, 70, 437, 69, 1202, 1377, 1179,
	884, 883, 1340, 1290, 896, 1173, 1079, 52, 1194, 899,
	1210, 1076, 1382, 796, 646, 207, 644, 645, 1206, 1201,
	643, 648, 647, 642, 220, 1197, 330, 1207, 1208, 821,
	847, 634, 207, 1214, 1215, 924, 518, 73, 82, 731,
	1112, 82, 82, 82, 207, 1111, 825, 826, 930, 732,
	82, 484, 485, 207, 840, 843, 844, 845, 841, 1241,
	842, 846, 222, 1134, 1184, 1185, 1243, 554, 754, 755,
	971, 1058, 337, 336, 1238, 1225, 1175, 1252, 1253, 1240,
	741, 507, 1354, 1305, 1008, 337, 581, 1226, 817, 1228,
	270, 756, 1247, 283, 280, 281, 1164, 1267, 1268, 1269,
	747, 1272, 1021, 1239, 528, 268, 260, 613, 1029, 606,
	839, 837, 836, 325, 615, 1265, 1186, 1182, 1283, 612,
	1274, 571, 82, 1275, 807, 808, 1131, 240, 1259, 1361,
	82, 751, 1065, 27, 60, 1284, 255, 19, 18, 17,
	337, 1258, 337, 20, 16, 82, 15, 879, 14, 879,
	455, 31, 82, 21, 13, 12, 11, 337, 10, 9,
	22, 8, 7, 6, 5, 4, 1293, 246, 1295, 468,
	24, 0, 0, 1280, 1281, 1282, 0, 0, 0, 0,
	0, 0, 873, 1314, 0, 337, 0, 0, 0, 0,
	0, 82, 82, 1307, 82, 0, 0, 0, 0, 82,
	0, 82, 82, 82, 207, 1172, 469, 82, 1319, 0,
	0, 0, 1134, 1327, 1326, 1328, 1329, 1330, 0, 0,
	0, 1321, 0, 1337, 82, 207, 1344, 1331, 0, 0,
	0, 0, 0, 1357, 1358, 1359, 1360, 0, 1352, 0,
	1364, 1365, 0, 0, 1345, 0, 1346, 0, 1173, 614,
	0, 1322, 1371, 1372, 1373, 0, 1367, 0, 0, 1172,
	82, 1374, 560, 561, 562, 563, 564, 565, 566, 567,
	1375, 82, 82, 0, 1368, 0, 0, 0, 0, 0,
	821, 1349, 1390, 1389, 879, 1394, 966, 967, 1393, 509,
	82, 0, 1399, 0, 1029, 1398, 0, 0, 0, 0,
	0, 207, 1173, 0, 52, 0, 0, 0, 0, 82,
	1404, 0, 0, 0, 1302, 0, 0, 0, 1407, 1244,
	1245, 0, 1246, 337, 0, 1248, 0, 1250, 0, 0,
	1412, 0, 82, 1414, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 506, 0, 1427, 1416, 0, 0, 0,
	0, 993, 1438, 0, 0, 1439, 1440, 534, 544, 545,
	537, 538, 539, 540, 541, 542, 543, 536, 1011, 0,
	546, 1095, 337, 0, 0, 0, 0, 0, 0, 0,
	205, 1287, 0, 231, 477, 0, 478, 479, 0, 480,
	0, 483, 0, 0, 0, 0, 1262, 494, 0, 0,
	0, 337, 1425, 0, 0, 0, 0, 0, 259, 0,
	0, 328, 0, 616, 0, 0, 205, 0, 205, 0,
	0, 0, 1256, 0, 0, 0, 337, 0, 0, 0,
	0, 0, 0, 1302, 879, 535, 534, 544, 545, 537,
	538, 539, 540, 541, 542, 543, 536, 0, 0, 546,
	204, 0, 0, 0, 0, 0, 0, 0, 0, 337,
	0, 0, 0, 0, 0, 0, 0, 0, 821, 0,
	0, 1176, 1178, 0, 0, 0, 0, 0, 0, 0,
	0, 326, 0, 0, 0, 0, 441, 0, 443, 0,
	0, 0, 0, 0, 0, 1178, 0, 535, 534, 544,
	545, 537, 538, 539, 540, 541, 542, 543, 536, 1127,
	337, 546, 337, 1205, 0, 0, 0, 0, 766, 0,
	0, 775, 776, 777, 778, 779, 780, 781, 782, 783,
	784, 785, 786, 787, 788, 789, 0, 0, 205, 0,
	0, 205, 0, 0, 0, 0, 0, 205, 0, 0,
	0, 0, 0, 205, 0, 0, 0, 0, 0, 1162,
	0, 0, 0, 1229, 0, 0, 1234, 1235, 1236, 530,
	0, 533, 0, 0, 0, 337, 824, 547, 548, 549,
	550, 551, 552, 553, 0, 531, 532, 529, 535, 534,
	544, 545, 537, 538, 539, 540, 541, 542, 543, 536,
	0, 1196, 546, 1255, 0, 0, 0, 0, 450, 0,
	0, 456, 0, 692, 0, 0, 0, 463, 1254, 0,
	699, 0, 0, 465, 0, 0, 821, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 717, 718, 0, 0,
	0, 719, 720, 721, 0, 723, 724, 337, 0, 0,
	0, 725, 726, 0, 0, 1289, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 205, 205, 205, 0, 0,
	337, 0, 0, 0, 0, 0, 0, 337, 535, 534,
	544, 545, 537, 538, 539, 540, 541, 542, 543, 536,
	0, 0, 546, 535, 534, 544, 545, 537, 538, 539,
	540, 541, 542, 543, 536, 0, 0, 546, 0, 0,
	0, 0, 1261, 0, 0, 0, 1323, 1324, 0, 1325,
	0, 0, 571, 0, 1289, 0, 1289, 1289, 1289, 0,
	1276, 0, 1205, 1277, 0, 608, 1279, 617, 0, 0,
	0, 0, 0, 0, 0, 1137, 0, 0, 0, 1289,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 983, 984, 985, 535, 534, 544, 545, 537,
	538, 539, 540, 541, 542, 543, 536, 0, 0, 546,
	0, 0, 205, 0, 0, 1381, 0, 0, 0, 0,
	0, 0, 205, 205, 0, 0, 337, 337, 205, 988,
	0, 205, 0, 0, 205, 0, 0, 0, 715, 0,
	0, 0, 821, 0, 0, 1400, 0, 0, 205, 535,
	534, 544, 545, 537, 538, 539, 540, 541, 542, 543,
	536, 0, 0, 546, 1406, 535, 534, 544, 545, 537,
	538, 539, 540, 541, 542, 543, 536, 0, 0, 546,
	0, 0, 641, 0, 0, 0, 0, 1289, 0, 0,
	0, 205, 697, 698, 927, 0, 929, 0, 705, 0,
	715, 326, 0, 0, 711, 0, 0, 0, 0, 0,
	0, 956, 0, 0, 0, 0, 0, 0, 722, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1392, 571, 0, 0, 0, 0,
	0, 0, 259, 0, 0, 0, 0, 259, 259, 0,
	0, 259, 259, 259, 0, 0, 0, 822, 0, 0,
	0, 753, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 259, 259, 259, 259,
	0, 205, 0, 0, 0, 0, 0, 0, 0, 205,
	855, 0, 0, 205, 205, 0, 0, 205, 863, 715,
	0, 0, 0, 0, 0, 0, 0, 1138, 1139, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1155, 1156, 0, 1157, 1158, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1165, 1166, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 833, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 860, 0, 0, 205, 0, 0,
	0, 0, 0, 0, 205, 205, 205, 205, 205, 0,
	205, 205, 0, 0, 205, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1212, 0, 0,
	0, 205, 0, 961, 962, 0, 0, 0, 205, 0,
	0, 0, 0, 715, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 259, 1096, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 926, 0, 0,
	0, 0, 0, 0, 946, 947, 948, 949, 950, 0,
	953, 954, 663, 0, 955, 1124, 0, 1242, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 957, 259, 0, 0, 0, 0, 0, 964, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	259, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 822, 205,
	205, 205, 205, 205, 0, 0, 0, 0, 0, 0,
	0, 1043, 0, 0, 205, 0, 0, 0, 855, 0,
	0, 651, 205, 0, 0, 0, 51, 25, 26, 53,
	28, 29, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 44, 0, 0, 0,
	0, 30, 48, 49, 0, 0, 0, 664, 0, 0,
	0, 0, 0, 0, 1309, 1310, 1311, 1312, 1313, 0,
	0, 39, 1316, 1317, 0, 55, 0, 0, 0, 0,
	677, 680, 681, 682, 683, 684, 685, 0, 686, 687,
	688, 689, 690, 665, 666, 667, 668, 649, 650, 678,
	0, 652, 0, 653, 654, 655, 656, 657, 658, 659,
	660, 661, 662, 669, 670, 671, 672, 673, 674, 675,
	676, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 205, 0, 32, 33, 35,
	34, 37, 0, 50, 0, 259, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 259, 0, 0, 0,
	0, 0, 0, 0, 38, 45, 0, 0, 46, 47,
	36, 679, 0, 0, 0, 0, 0, 715, 0, 0,
	0, 0, 0, 0, 40, 41, 822, 42, 43, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1130, 0, 0, 0, 0,
	0, 0, 0, 0, 1298, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1431, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 140, 0, 0, 0, 523,
	0, 0, 0, 0, 104, 0, 0, 0, 205, 0,
	121, 0, 123, 0, 0, 161, 132, 0, 0, 54,
	0, 0, 0, 0, 0, 205, 0, 0, 0, 0,
	0, 0, 0, 0, 81, 0, 525, 205, 0, 0,
	0, 0, 0, 97, 0, 0, 205, 0, 0, 0,
	520, 519, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 521, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1224, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 822, 1227, 0, 0, 0, 110,
	0, 0, 0, 208, 0, 0, 0, 1237, 147, 0,
	164, 112, 120, 84, 91, 0, 111, 138, 152, 156,
	0, 0, 100, 0, 154, 142, 177, 0, 143, 153,
	124, 169, 148, 176, 184, 185, 166, 183, 188, 158,
	85, 165, 175, 98, 157, 87, 173, 163, 130, 116,
	117, 86, 0, 151, 103, 108, 102, 139, 170, 171,
	101, 191, 92, 182, 89, 93, 181, 137, 168, 174,
	131, 128, 88, 172, 129, 127, 119, 106, 113, 145,
	126, 146, 114, 134, 133, 135, 0, 0, 0, 162,
	179, 192, 95, 0, 167, 186, 187, 855, 0, 96,
	109, 105, 144, 136, 94, 115, 159, 118, 125, 150,
	190, 141, 155, 99, 178, 160, 0, 0, 205, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 83, 90, 122, 189, 149,
	107, 180, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	822, 0, 0, 0, 0, 0, 0, 0, 1353, 0,
	0, 0, 0, 0, 205, 0, 425, 373, 414, 0,
	385, 428, 363, 377, 436, 378, 379, 407, 349, 393,
	140, 375, 0, 366, 344, 372, 345, 364, 387, 104,
	390, 362, 416, 396, 427, 121, 434, 123, 401, 0,
	161, 132, 0, 0, 389, 418, 391, 412, 384, 408,
	354, 400, 429, 376, 405, 430, 0, 0, 0, 81,
	0, 880, 881, 0, 0, 0, 0, 0, 97, 0,
	403, 424, 374, 404, 1402, 406, 343, 402, 0, 347,
	350, 435, 420, 369, 370, 1066, 0, 0, 0, 0,
	0, 0, 388, 392, 409, 382, 0, 0, 0, 0,
	0, 0, 0, 0, 367, 0, 399, 0, 0, 0,
	351, 348, 0, 0, 386, 0, 0, 0, 353, 0,
	368, 410, 0, 342, 110, 413, 419, 383, 208, 423,
	381, 380, 426, 147, 0, 164, 112, 120, 84, 91,
	0, 111, 138, 152, 156, 417, 365, 100, 371, 154,
	142, 177, 398, 143, 153, 124, 169, 148, 176, 184,
	185, 166, 183, 188, 158, 85, 165, 175, 98, 157,
	87, 173, 163, 130, 116, 117, 86, 0, 151, 103,
	108, 102, 139, 170, 171, 101, 191, 92, 182, 89,
	93, 181, 137, 168, 174, 131, 128, 88, 172, 129,
	127, 119, 106, 113, 145, 126, 146, 114, 134, 133,
	135, 0, 346, 0, 162, 179, 192, 95, 361, 167,
	186, 187, 0, 0, 96, 109, 105, 144, 136, 94,
	115, 159, 118, 125, 150, 190, 141, 155, 99, 178,
	160, 357, 360, 355, 356, 394, 395, 431, 432, 433,
	411, 352, 0, 358, 359, 0, 415, 421, 422, 397,
	83, 90, 122, 189, 149, 107, 180, 425, 373, 414,
	0, 385, 428, 363, 377, 436, 378, 379, 407, 349,
	393, 140, 375, 0, 366, 344, 372, 345, 364, 387,
	104, 390, 362, 416, 396, 427, 121, 434, 123, 401,
	0, 161, 132, 0, 0, 389, 418, 391, 412, 384,
	408, 354, 400, 429, 376, 405, 430, 0, 0, 0,
	81, 0, 880, 881, 0, 0, 0, 0, 0, 97,
	0, 403, 424, 374, 404, 0, 406, 343, 402, 0,
	347, 350, 435, 420, 369, 370, 0, 0, 0, 0,
	0, 0, 0, 388, 392, 409, 382, 0, 0, 0,
	0, 0, 0, 0, 0, 367, 0, 399, 0, 0,
	0, 351, 348, 0, 0, 386, 0, 0, 0, 353,
	0, 368, 410, 0, 342, 110, 413, 419, 383, 208,
	423, 381, 380, 426, 147, 0, 164, 112, 120, 84,
	91, 0, 111, 138, 152, 156, 417, 365, 100, 371,
	154, 142, 177, 398, 143, 153, 124, 169, 148, 176,
	184, 185, 166, 183, 188, 158, 85, 165, 175, 98,
	157, 87, 173, 163, 130, 116, 117, 86, 0, 151,
	103, 108, 102, 139, 170, 171, 101, 191, 92, 182,
	89, 93, 181, 137, 168, 174, 131, 128, 88, 172,
	129, 127, 119, 106, 113, 145, 126, 146, 114, 134,
	133, 135, 0, 346, 0, 162, 179, 192, 95, 361,
	167, 186, 187, 0, 0, 96, 109, 105, 144, 136,
	94, 115, 159, 118, 125, 150, 190, 141, 155, 99,
	178, 160, 357, 360, 355, 356, 394, 395, 431, 432,
	433, 411, 352, 0, 358, 359, 0, 415, 421, 422,
	397, 83, 90, 122, 189, 149, 107, 180, 425, 373,
	414, 0, 385, 428, 363, 377, 436, 378, 379, 407,
	349, 393, 140, 375, 0, 366, 344, 372, 345, 364,
	387, 104, 390, 362, 416, 396, 427, 121, 434, 123,
	401, 0, 161, 132, 0, 0, 389, 418, 391, 412,
	384, 408, 354, 400, 429, 376, 405, 430, 55, 0,
	0, 81, 0, 0, 0, 0, 0, 0, 0, 0,
	97, 0, 403, 424, 374, 404, 0, 406, 343, 402,
	0, 347, 350, 435, 420, 369, 370, 0, 0, 0,
	0, 0, 0, 0, 388, 392, 409, 382, 0, 0,
	0, 0, 0, 0, 0, 0, 367, 0, 399, 0,
	0, 0, 351, 348, 0, 0, 386, 0, 0, 0,
	353, 0, 368, 410, 0, 342, 110, 413, 419, 383,
	208, 423, 381, 380, 426, 147, 0, 164, 112, 120,
	84, 91, 0, 111, 138, 152, 156, 417, 365, 100,
	371, 154, 142, 177, 398, 143, 153, 124, 169, 148,
	176, 184, 185, 166, 183, 188, 158, 85, 165, 175,
	98, 157, 87, 173, 163, 130, 116, 117, 86, 0,
	151, 103, 108, 102, 139, 170, 171, 101, 191, 92,
	182, 89, 93, 181, 137, 168, 174, 131, 128, 88,
	172, 129, 127, 119, 106, 113, 145, 126, 146, 114,
	134, 133, 135, 0, 346, 0, 162, 179, 192, 95,
	361, 167, 186, 187, 0, 0, 96, 109, 105, 144,
	136, 94, 115, 159, 118, 125, 150, 190, 141, 155,
	99, 178, 160, 357, 360, 355, 356, 394, 395, 431,
	432, 433, 411, 352, 0, 358, 359, 0, 415, 421,
	422, 397, 83, 90, 122, 189, 149, 107, 180, 425,
	373, 414, 0, 385, 428, 363, 377, 436, 378, 379,
	407, 349, 393, 140, 375, 0, 366, 344, 372, 345,
	364, 387, 104, 390, 362, 416, 396, 427, 121, 434,
	123, 401, 0, 161, 132, 0, 0, 389, 418, 391,
	412, 384, 408, 354, 400, 429, 376, 405, 430, 0,
	0, 0, 81, 0, 0, 0, 0, 0, 0, 0,
	0, 97, 0, 403, 424, 374, 404, 0, 406, 343,
	402, 0, 347, 350, 435, 420, 369, 370, 0, 0,
	0, 0, 0, 0, 0, 388, 392, 409, 382, 0,
	0, 0, 0, 0, 0, 1133, 0, 367, 0, 399,
	0, 0, 0, 351, 348, 0, 0, 386, 0, 0,
	0, 353, 0, 368, 410, 0, 342, 110, 413, 419,
	383, 208, 423, 381, 380, 426, 147, 0, 164, 112,
	120, 84, 91, 0, 111, 138, 152, 156, 417, 365,
	100, 371, 154, 142, 177, 398, 143, 153, 124, 169,
	148, 176, 184, 185, 166, 183, 188, 158, 85, 165,
	175, 98, 157, 87, 173, 163, 130, 116, 117, 86,
	0, 151, 103, 108, 102, 139, 170, 171, 101, 191,
	92, 182, 89, 93, 181, 137, 168, 174, 131, 128,
	88, 172, 129, 127, 119, 106, 113, 145, 126, 146,
	114, 134, 133, 135, 0, 346, 0, 162, 179, 192,
	95, 361, 167, 186, 187, 0, 0, 96, 109, 105,
	144, 136, 94, 115, 159, 118, 125, 150, 190, 141,
	155, 99, 178, 160, 357, 360, 355, 356, 394, 395,
	431, 432, 433, 411, 352, 0, 358, 359, 0, 415,
	421, 422, 397, 83, 90, 122, 189, 149, 107, 180,
	425, 373, 414, 0, 385, 428, 363, 377, 436, 378,
	379, 407, 349, 393, 140, 375, 0, 366, 344, 372,
	345, 364, 387, 104, 390, 362, 416, 396, 427, 121,
	434, 123, 401, 0, 161, 132, 0, 0, 389, 418,
	391, 412, 384, 408, 354, 400, 429, 376, 405, 430,
	0, 0, 0, 206, 0, 0, 0, 0, 0, 0,
	0, 0, 97, 0, 403, 424, 374, 404, 0, 406,
	343, 402, 0, 347, 350, 435, 420, 369, 370, 0,
	0, 0, 0, 0, 0, 0, 388, 392, 409, 382,
	0, 0, 0, 0, 0, 0, 864, 0, 367, 0,
	399, 0, 0, 0, 351, 348, 0, 0, 386, 0,
	0, 0, 353, 0, 368, 410, 0, 342, 110, 413,
	419, 383, 208, 423, 381, 380, 426, 147, 0, 164,
	112, 120, 84, 91, 0, 111, 138, 152, 156, 417,
	365, 100, 371, 154, 142, 177, 398, 143, 153, 124,
	169, 148, 176, 184, 185, 166, 183, 188, 158, 85,
	165, 175, 98, 157, 87, 173, 163, 130, 116, 117,
	86, 0, 151, 103, 108, 102, 139, 170, 171, 101,
	191, 92, 182, 89, 93, 181, 137, 168, 174, 131,
	128, 88, 172, 129, 127, 119, 106, 113, 145, 126,
	146, 114, 134, 133, 135, 0, 346, 0, 162, 179,
	192, 95, 361, 167, 186, 187, 0, 0, 96, 109,
	105, 144, 136, 94, 115, 159, 118, 125, 150, 190,
	141, 155, 99, 178, 160, 357, 360, 355, 356, 394,
	395, 431, 432, 433, 411, 352, 0, 358, 359, 0,
	415, 421, 422, 397, 83, 90, 122, 189, 149, 107,
	180, 425, 373, 414, 0, 385, 428, 363, 377, 436,
	378, 379, 407, 349, 393, 140, 375, 0, 366, 344,
	372, 345, 364, 387, 104, 390, 362, 416, 396, 427,
	121, 434, 123, 401, 0, 161, 132, 0, 0, 389,
	418, 391, 412, 384, 408, 354, 400, 429, 376, 405,
	430, 0, 0, 0, 264, 0, 0, 0, 0, 0,
	0, 0, 0, 97, 0, 403, 424, 374, 404, 0,
	406, 343, 402, 0, 347, 350, 435, 420, 369, 370,
	0, 0, 0, 0, 0, 0, 0, 388, 392, 409,
	382, 0, 0, 0, 0, 0, 0, 762, 0, 367,
	0, 399, 0, 0, 0, 351, 348, 0, 0, 386,
	0, 0, 0, 353, 0, 368, 410, 0, 342, 110,
	413, 419, 383, 208, 423, 381, 380, 426, 147, 0,
	164, 112, 120, 84, 91, 0, 111, 138, 152, 156,
	417, 365, 100, 371, 154, 142, 177, 398, 143, 153,
	124, 169, 148, 176, 184, 185, 166, 183, 188, 158,
	85, 165, 175, 98, 157, 87, 173, 163, 130, 116,
	117, 86, 0, 151, 103, 108, 102, 139, 170, 171,
	101, 191, 92, 182, 89, 93, 181, 137, 168, 174,
	131, 128, 88, 172, 129, 127, 119, 106, 113, 145,
	126, 146, 114, 134, 133, 135, 0, 346, 0, 162,
	179, 192, 95, 361, 167, 186, 187, 0, 0, 96,
	109, 105, 144, 136, 94, 115, 159, 118, 125, 150,
	190, 141, 155, 99, 178, 160, 357, 360, 355, 356,
	394, 395, 431, 432, 433, 411, 352, 0, 358, 359,
	0, 415, 421, 422, 397, 83, 90, 122, 189, 149,
	107, 180, 425, 373, 414, 0, 385, 428, 363, 377,
	436, 378, 379, 407, 349, 393, 140, 375, 0, 366,
	344, 372, 345, 364, 387, 104, 390, 362, 416, 396,
	427, 121, 434, 123, 401, 0, 161, 132, 0, 0,
	389, 418, 391, 412, 384, 408, 354, 400, 429, 376,
	405, 430, 0, 0, 0, 81, 0, 0, 0, 0,
	0, 0, 0, 0, 97, 0, 403, 424, 374, 404,
	0, 406, 343, 402, 0, 347, 350, 435, 420, 369,
	370, 0, 0, 0, 0, 0, 0, 0, 388, 392,
	409, 382, 0, 0, 0, 0, 0, 0, 0, 0,
	367, 0, 399, 0, 0, 0, 351, 348, 0, 0,
	386, 0, 0, 0, 353, 0, 368, 410, 0, 342,
	110, 413, 419, 383, 208, 423, 381, 380, 426, 147,
	0, 164, 112, 120, 84, 91, 0, 111, 138, 152,
	156, 417, 365, 100, 371, 154, 142, 177, 398, 143,
	153, 124, 169, 148, 176, 184, 185, 166, 183, 188,
	158, 85, 165, 175, 98, 157, 87, 173, 163, 130,
	116, 117, 86, 0, 151, 103, 108, 102, 139, 170,
	171, 101, 191, 92, 182, 89, 93, 181, 137, 168,
	174, 131, 128, 88, 172, 129, 127, 119, 106, 113,
	145, 126, 146, 114, 134, 133, 135, 0, 346, 0,
	162, 179, 192, 95, 361, 167, 186, 187, 0, 0,
	96, 109, 105, 144, 136, 94, 115, 159, 118, 125,
	150, 190, 141, 155, 99, 178, 160, 357, 360, 355,
	356, 394, 395, 431, 432, 433, 411, 352, 0, 358,
	359, 0, 415, 421, 422, 397, 83, 90, 122, 189,
	149, 107, 180, 425, 373, 414, 0, 385, 428, 363,
	377, 436, 378, 379, 407, 349, 393, 140, 375, 0,
	366, 344, 372, 345, 364, 387, 104, 390, 362, 416,
	396, 427, 121, 434, 123, 401, 0, 161, 132, 0,
	0, 389, 418, 391, 412, 384, 408, 354, 400, 429,
	376, 405, 430, 0, 0, 0, 264, 0, 0, 0,
	0, 0, 0, 0, 0, 97, 0, 403, 424, 374,
	404, 0, 406, 343, 402, 0, 347, 350, 435, 420,
	369, 370, 0, 0, 0, 0, 0, 0, 0, 388,
	392, 409, 382, 0, 0, 0, 0, 0, 0, 0,
	0, 367, 0, 399, 0, 0, 0, 351, 348, 0,
	0, 386, 0, 0, 0, 353, 0, 368, 410, 0,
	342, 110, 413, 419, 383, 208, 423, 381, 380, 426,
	147, 0, 164, 112, 120, 84, 91, 0, 111, 138,
	152, 156, 417, 365, 100, 371, 154, 142, 177, 398,
	143, 153, 124, 169, 148, 176, 184, 185, 166, 183,
	188, 158, 85, 165, 175, 98, 157, 87, 173, 163,
	130, 116, 117, 86, 0, 151, 103, 108, 102, 139,
	170, 171, 101, 191, 92, 182, 89, 93, 181, 137,
	168, 174, 131, 128, 88, 172, 129, 127, 119, 106,
	113, 145, 126, 146, 114, 134, 133, 135, 0, 346,
	0, 162, 179, 192, 95, 361, 167, 186, 187, 0,
	0, 96, 109, 105, 144, 136, 94, 115, 159, 118,
	125, 150, 190, 141, 155, 99, 178, 160, 357, 360,
	355, 356, 394, 395, 431, 432, 433, 411, 352, 0,
	358, 359, 0, 415, 421, 422, 397, 83, 90, 122,
	189, 149, 107, 180, 425, 373, 414, 0, 385, 428,
	363, 377, 436, 378, 379, 407, 349, 393, 140, 375,
	0, 366, 344, 372, 345, 364, 387, 104, 390, 362,
	416, 396, 427, 121, 434, 123, 401, 0, 161, 132,
	0, 0, 389, 418, 391, 412, 384, 408, 354, 400,
	429, 376, 405, 430, 0, 0, 0, 81, 0, 0,
	0, 0, 0, 0, 0, 0, 97, 0, 403, 424,
	374, 404, 0, 406, 343, 402, 0, 347, 350, 435,
	420, 369, 370, 0, 0, 0, 0, 0, 0, 0,
	388, 392, 409, 382, 0, 0, 0, 0, 0, 0,
	0, 0, 367, 0, 399, 0, 0, 0, 351, 348,
	0, 0, 386, 0, 0, 0, 353, 0, 368, 410,
	0, 342, 110, 413, 419, 383, 208, 423, 381, 380,
	426, 147, 0, 164, 112, 120, 84, 91, 0, 111,
	138, 152, 156, 417, 365, 100, 371, 154, 142, 177,
	398, 143, 153, 124, 169, 148, 176, 184, 185, 166,
	183, 188, 158, 85, 165, 175, 98, 157, 87, 173,
	163, 130, 116, 117, 86, 0, 151, 103, 108, 102,
	139, 170, 171, 101, 191, 92, 182, 89, 340, 181,
	137, 168, 174, 131, 128, 88, 172, 129, 127, 119,
	106, 113, 145, 126, 146, 114, 134, 133, 135, 0,
	346, 0, 162, 179, 192, 95, 361, 167, 186, 187,
	0, 0, 96, 109, 105, 144, 341, 339, 115, 159,
	118, 125, 150, 190, 141, 155, 99, 178, 160, 357,
	360, 355, 356, 394, 395, 431, 432, 433, 411, 352,
	0, 358, 359, 0, 415, 421, 422, 397, 83, 90,
	122, 189, 149, 107, 180, 425, 373, 414, 0, 385,
	428, 363, 377, 436, 378, 379, 407, 349, 393, 140,
	375, 0, 366, 344, 372, 345, 364, 387, 104, 390,
	362, 416, 396, 427, 121, 434, 123, 401, 0, 161,
	132, 0, 0, 389, 418, 391, 412, 384, 408, 354,
	400, 429, 376, 405, 430, 0, 0, 0, 206, 0,
	0, 0, 0, 0, 0, 0, 0, 97, 0, 403,
	424, 374, 404, 0, 406, 343, 402, 0, 347, 350,
	435, 420, 369, 370, 0, 0, 0, 0, 0, 0,
	0, 388, 392, 409, 382, 0, 0, 0, 0, 0,
	0, 0, 0, 367, 0, 399, 0, 0, 0, 351,
	348, 0, 0, 386, 0, 0, 0, 353, 0, 368,
	410, 0, 342, 110, 413, 419, 383, 208, 423, 381,
	380, 426, 147, 0, 164, 112, 120, 84, 91, 0,
	111, 138, 152, 156, 417, 365, 100, 371, 154, 142,
	177, 398, 143, 153, 124, 169, 148, 176, 184, 185,
	166, 183, 188, 158, 85, 165, 175, 98, 157, 87,
	173, 163, 130, 116, 117, 86, 0, 151, 103, 108,
	102, 139, 170, 171, 101, 191, 92, 182, 89, 93,
	181, 137, 168, 174, 131, 128, 88, 172, 129, 127,
	119, 106, 113, 145, 126, 146, 114, 134, 133, 135,
	0, 346, 0, 162, 179, 192, 95, 361, 167, 186,
	187, 0, 0, 96, 109, 105, 144, 136, 94, 115,
	159, 118, 125, 150, 190, 141, 155, 99, 178, 160,
	357, 360, 355, 356, 394, 395, 431, 432, 433, 411,
	352, 0, 358, 359, 0, 415, 421, 422, 397, 83,
	90, 122, 189, 149, 107, 180, 425, 373, 414, 0,
	385, 428, 363, 377, 436, 378, 379, 407, 349, 393,
	140, 375, 0, 366, 344, 372, 345, 364, 387, 104,
	390, 362, 416, 396, 427, 121, 434, 123, 401, 0,
	161, 132, 0, 0, 389, 418, 391, 412, 384, 408,
	354, 400, 429, 376, 405, 430, 0, 0, 0, 81,
	0, 0, 0, 0, 0, 0, 0, 0, 97, 0,
	403, 424, 374, 404, 0, 406, 343, 402, 0, 347,
	350, 435, 420, 369, 370, 0, 0, 0, 0, 0,
	0, 0, 388, 392, 409, 382, 0, 0, 0, 0,
	0, 0, 0, 0, 367, 0, 399, 0, 0, 0,
	351, 348, 0, 0, 386, 0, 0, 0, 353, 0,
	368, 410, 0, 342, 110, 413, 419, 383, 208, 423,
	381, 380, 426, 147, 0, 164, 112, 120, 84, 91,
	0, 111, 138, 152, 156, 417, 365, 100, 371, 154,
	142, 177, 398, 143, 153, 124, 169, 148, 176, 184,
	185, 166, 183, 188, 158, 85, 165, 628, 98, 157,
	87, 173, 163, 130, 116, 117, 86, 0, 151, 103,
	108, 102, 139, 170, 171, 101, 191, 92, 182, 89,
	340, 181, 137, 168, 174, 131, 128, 88, 172, 129,
	127, 119, 106, 113, 145, 126, 146, 114, 134, 133,
	135, 0, 346, 0, 162, 179, 192, 95, 361, 167,
	186, 187, 0, 0, 96, 109, 105, 144, 341, 339,
	115, 159, 118, 125, 150, 190, 141, 155, 99, 178,
	160, 357, 360, 355, 356, 394, 395, 431, 432, 433,
	411, 352, 0, 358, 359, 0, 415, 421, 422, 397,
	83, 90, 122, 189, 149, 107, 180, 425, 373, 414,
	0, 385, 428, 363, 377, 436, 378, 379, 407, 349,
	393, 140, 375, 0, 366, 344, 372, 345, 364, 387,
	104, 390, 362, 416, 396, 427, 121, 434, 123, 401,
	0, 161, 132, 0, 0, 389, 418, 391, 412, 384,
	408, 354, 400, 429, 376, 405, 430, 0, 0, 0,
	81, 0, 0, 0, 0, 0, 0, 0, 0, 97,
	0, 403, 424, 374, 404, 0, 406, 343, 402, 0,
	347, 350, 435, 420, 369, 370, 0, 0, 0, 0,
	0, 0, 0, 388, 392, 409, 382, 0, 0, 0,
	0, 0, 0, 0, 0, 367, 0, 399, 0, 0,
	0, 351, 348, 0, 0, 386, 0, 0, 0, 353,
	0, 368, 410, 0, 342, 110, 413, 419, 383, 208,
	423, 381, 380, 426, 147, 0, 164, 112, 120, 84,
	91, 0, 111, 138, 152, 156, 417, 365, 100, 371,
	154, 142, 177, 398, 143, 153, 124, 169, 148, 176,
	184, 185, 166, 183, 188, 158, 85, 165, 331, 98,
	157, 87, 173, 163, 130, 116, 117, 86, 0, 151,
	103, 108, 102, 139, 170, 171, 101, 191, 92, 182,
	89, 340, 181, 137, 168, 174, 131, 128, 88, 172,
	129, 127, 119, 106, 113, 145, 126, 146, 114, 134,
	133, 135, 0, 346, 0, 162, 179, 192, 95, 361,
	167, 186, 187, 0, 0, 96, 109, 105, 144, 341,
	339, 334, 333, 118, 125, 150, 190, 141, 155, 99,
	178, 160, 357, 360, 355, 356, 394, 395, 431, 432,
	433, 411, 352, 0, 358, 359, 0, 415, 421, 422,
	397, 83, 90, 122, 189, 149, 107, 180, 140, 0,
	0, 0, 0, 266, 0, 0, 0, 104, 0, 263,
	0, 0, 0, 121, 306, 123, 0, 0, 161, 132,
	0, 0, 0, 0, 297, 298, 0, 0, 0, 0,
	0, 0, 871, 0, 55, 0, 0, 264, 285, 284,
	287, 288, 289, 290, 0, 0, 97, 286, 291, 292,
	293, 872, 0, 0, 0, 261, 278, 0, 305, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 275, 276,
	0, 0, 0, 0, 319, 0, 277, 0, 0, 272,
	273, 274, 279, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 110, 0, 0, 0, 208, 0, 0, 317,
	0, 147, 0, 164, 112, 120, 84, 91, 0, 111,
	138, 152, 156, 0, 0, 100, 0, 154, 142, 177,
	0, 143, 153, 124, 169, 148, 176, 184, 185, 166,
	183, 188, 158, 85, 165, 175, 98, 157, 87, 173,
	163, 130, 116, 117, 86, 0, 151, 103, 108, 102,
	139, 170, 171, 101, 191, 92, 182, 89, 93, 181,
	137, 168, 174, 131, 128, 88, 172, 129, 127, 119,
	106, 113, 145, 126, 146, 114, 134, 133, 135, 0,
	0, 0, 162, 179, 192, 95, 0, 167, 186, 187,
	0, 0, 96, 109, 105, 144, 136, 94, 115, 159,
	118, 125, 150, 190, 141, 155, 99, 178, 160, 307,
	318, 313, 314, 311, 312, 310, 309, 308, 320, 299,
	300, 301, 302, 304, 0, 315, 316, 303, 83, 90,
	122, 189, 149, 107, 180, 140, 0, 0, 798, 0,
	266, 0, 0, 0, 104, 0, 263, 0, 0, 0,
	121, 306, 123, 0, 0, 161, 132, 0, 0, 0,
	0, 297, 298, 0, 0, 0, 0, 0, 0, 0,
	0, 55, 0, 0, 264, 285, 284, 287, 288, 289,
	290, 0, 0, 97, 286, 291, 292, 293, 0, 0,
	0, 0, 261, 278, 0, 305, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 275, 276, 257, 0, 0,
	0, 319, 0, 277, 0, 0, 272, 273, 274, 279,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 110,
	0, 0, 0, 208, 0, 0, 317, 0, 147, 0,
	164, 112, 120, 84, 91, 0, 111, 138, 152, 156,
	0, 0, 100, 0, 154, 142, 177, 0, 143, 153,
	124, 169, 148, 176, 184, 185, 166, 183, 188, 158,
	85, 165, 175, 98, 157, 87, 173, 163, 130, 116,
	117, 86, 0, 151, 103, 108, 102, 139, 170, 171,
	101, 191, 92, 182, 89, 93, 181, 137, 168, 174,
	131, 128, 88, 172, 129, 127, 119, 106, 113, 145,
	126, 146, 114, 134, 133, 135, 0, 0, 0, 162,
	179, 192, 95, 0, 167, 186, 187, 0, 0, 96,
	109, 105, 144, 136, 94, 115, 159, 118, 125, 150,
	190, 141, 155, 99, 178, 160, 307, 318, 313, 314,
	311, 312, 310, 309, 308, 320, 299, 300, 301, 302,
	304, 0, 315, 316, 303, 83, 90, 122, 189, 149,
	107, 180, 140, 0, 0, 0, 0, 266, 0, 0,
	0, 104, 0, 263, 0, 0, 0, 121, 306, 123,
	0, 0, 161, 132, 0, 0, 0, 0, 297, 298,
	0, 0, 0, 0, 0, 0, 0, 0, 55, 0,
	501, 264, 285, 284, 287, 288, 289, 290, 0, 0,
	97, 286, 291, 292, 293, 0, 0, 0, 0, 261,
	278, 0, 305, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 275, 276, 0, 0, 0, 0, 319, 0,
	277, 0, 0, 272, 273, 274, 279, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 110, 0, 0, 0,
	208, 0, 0, 317, 0, 147, 0, 164, 112, 120,
	84, 91, 0, 111, 138, 152, 156, 0, 0, 100,
	0, 154, 142, 177, 0, 143, 153, 124, 169, 148,
	176, 184, 185, 166, 183, 188, 158, 85, 165, 175,
	98, 157, 87, 173, 163, 130, 116, 117, 86, 0,
	151, 103, 108, 102, 139, 170, 171, 101, 191, 92,
	182, 89, 93, 181, 137, 168, 174, 131, 128, 88,
	172, 129, 127, 119, 106, 113, 145, 126, 146, 114,
	134, 133, 135, 0, 0, 0, 162, 179, 192, 95,
	0, 167, 186, 187, 0, 0, 96, 109, 105, 144,
	136, 94, 115, 159, 118, 125, 150, 190, 141, 155,
	99, 178, 160, 307, 318, 313, 314, 311, 312, 310,
	309, 308, 320, 299, 300, 301, 302, 304, 0, 315,
	316, 303, 83, 90, 122, 189, 149, 107, 180, 140,
	0, 0, 0, 0, 266, 0, 0, 0, 104, 0,
	263, 0, 0, 0, 121, 306, 123, 0, 0, 161,
	132, 0, 0, 0, 0, 297, 298, 0, 0, 0,
	0, 0, 0, 0, 0, 55, 0, 0, 264, 285,
	284, 287, 288, 289, 290, 0, 0, 97, 286, 291,
	292, 293, 0, 0, 0, 0, 261, 278, 0, 305,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 275,
	276, 257, 0, 0, 0, 319, 0, 277, 0, 0,
	272, 273, 274, 279, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 110, 0, 0, 0, 208, 0, 0,
	317, 0, 147, 0, 164, 112, 120, 84, 91, 0,
	111, 138, 152, 156, 0, 0, 100, 0, 154, 142,
	177, 0, 143, 153, 124, 169, 148, 176, 184, 185,
	166, 183, 188, 158, 85, 165, 175, 98, 157, 87,
	173, 163, 130, 116, 117, 86, 0, 151, 103, 108,
	102, 139, 170, 171, 101, 191, 92, 182, 89, 93,
	181, 137, 168, 174, 131, 128, 88, 172, 129, 127,
	119, 106, 113, 145, 126, 146, 114, 134, 133, 135,
	0, 0, 0, 162, 179, 192, 95, 0, 167, 186,
	187, 0, 0, 96, 109, 105, 144, 136, 94, 115,
	159, 118, 125, 150, 190, 141, 155, 99, 178, 160,
	307, 318, 313, 314, 311, 312, 310, 309, 308, 320,
	299, 300, 301, 302, 304, 0, 315, 316, 303, 83,
	90, 122, 189, 149, 107, 180, 140, 0, 0, 0,
	0, 266, 0, 0, 0, 104, 0, 263, 0, 0,
	0, 121, 306, 123, 0, 0, 161, 132, 0, 0,
	0, 0, 297, 298, 0, 0, 0, 0, 0, 0,
	0, 0, 55, 0, 0, 264, 285, 813, 287, 288,
	289, 290, 0, 0, 97, 286, 291, 292, 293, 0,
	0, 0, 0, 261, 278, 0, 305, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 275, 276, 257, 0,
	0, 0, 319, 0, 277, 0, 0, 272, 273, 274,
	279, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	110, 0, 0, 0, 208, 0, 0, 317, 0, 147,
	0, 164, 112, 120, 84, 91, 0, 111, 138, 152,
	156, 0, 0, 100, 0, 154, 142, 177, 0, 143,
	153, 124, 169, 148, 176, 184, 185, 166, 183, 188,
	158, 85, 165, 175, 98, 157, 87, 173, 163, 130,
	116, 117, 86, 0, 151, 103, 108, 102, 139, 170,
	171, 101, 191, 92, 182, 89, 93, 181, 137, 168,
	174, 131, 128, 88, 172, 129, 127, 119, 106, 113,
	145, 126, 146, 114, 134, 133, 135, 0, 0, 0,
	162, 179, 192, 95, 0, 167, 186, 187, 0, 0,
	96, 109, 105, 144, 136, 94, 115, 159, 118, 125,
	150, 190, 141, 155, 99, 178, 160, 307, 318, 313,
	314, 311, 312, 310, 309, 308, 320, 299, 300, 301,
	302, 304, 0, 315, 316, 303, 83, 90, 122, 189,
	149, 107, 180, 140, 0, 0, 0, 0, 266, 0,
	0, 0, 104, 0, 263, 0, 0, 0, 121, 306,
	123, 0, 0, 161, 132, 0, 0, 0, 0, 297,
	298, 0, 0, 0, 0, 0, 0, 0, 0, 55,
	0, 0, 264, 285, 810, 287, 288, 289, 290, 0,
	0, 97, 286, 291, 292, 293, 0, 0, 0, 0,
	261, 278, 0, 305, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 275, 276, 257, 0, 0, 0, 319,
	0, 277, 0, 0, 272, 273, 274, 279, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 110, 0, 0,
	0, 208, 0, 0, 317, 0, 147, 0, 164, 112,
	120, 84, 91, 0, 111, 138, 152, 156, 0, 0,
	100, 0, 154, 142, 177, 0, 143, 153, 124, 169,
	148, 176, 184, 185, 166, 183, 188, 158, 85, 165,
	175, 98, 157, 87, 173, 163, 130, 116, 117, 86,
	0, 151, 103, 108, 102, 139, 170, 171, 101, 191,
	92, 182, 89, 93, 181, 137, 168, 174, 131, 128,
	88, 172, 129, 127, 119, 106, 113, 145, 126, 146,
	114, 134, 133, 135, 0, 0, 0, 162, 179, 192,
	95, 0, 167, 186, 187, 0, 0, 96, 109, 105,
	144, 136, 94, 115, 159, 118, 125, 150, 190, 141,
	155, 99, 178, 160, 307, 318, 313, 314, 311, 312,
	310, 309, 308, 320, 299, 300, 301, 302, 304, 25,
	315, 316, 303, 83, 90, 122, 189, 149, 107, 180,
	0, 140, 0, 0, 0, 0, 266, 0, 0, 0,
	104, 0, 263, 0, 0, 0, 121, 306, 123, 0,
	0, 161, 132, 0, 0, 0, 0, 297, 298, 0,
	0, 0, 0, 0, 0, 0, 0, 55, 0, 0,
	264, 285, 284, 287, 288, 289, 290, 0, 0, 97,
	286, 291, 292, 293, 0, 0, 0, 0, 261, 278,
	0, 305, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 275, 276, 0, 0, 0, 0, 319, 0, 277,
	0, 0, 272, 273, 274, 279, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 110, 0, 0, 0, 208,
	0, 0, 317, 0, 147, 0, 164, 112, 120, 84,
	91, 0, 111, 138, 152, 156, 0, 0, 100, 0,
	154, 142, 177, 0, 143, 153, 124, 169, 148, 176,
	184, 185, 166, 183, 188, 158, 85, 165, 175, 98,
	157, 87, 173, 163, 130, 116, 117, 86, 0, 151,
	103, 108, 102, 139, 170, 171, 101, 191, 92, 182,
	89, 93, 181, 137, 168, 174, 131, 128, 88, 172,
	129, 127, 119, 106, 113, 145, 126, 146, 114, 134,
	133, 135, 0, 0, 0, 162, 179, 192, 95, 0,
	167, 186, 187, 0, 0, 96, 109, 105, 144, 136,
	94, 115, 159, 118, 125, 150, 190, 141, 155, 99,
	178, 160, 307, 318, 313, 314, 311, 312, 310, 309,
	308, 320, 299, 300, 301, 302, 304, 0, 315, 316,
	303, 83, 90, 122, 189, 149, 107, 180, 140, 0,
	0, 0, 0, 266, 0, 0, 0, 104, 0, 263,
	0, 0, 0, 121, 306, 123, 0, 0, 161, 132,
	0, 0, 0, 0, 297, 298, 0, 0, 0, 0,
	0, 0, 0, 0, 55, 0, 0, 264, 285, 284,
	287, 288, 289, 290, 0, 0, 97, 286, 291, 292,
	293, 0, 0, 0, 0, 261, 278, 0, 305, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 275, 276,
	0, 0, 0, 0, 319, 0, 277, 0, 0, 272,
	273, 274, 279, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 110, 0, 0, 0, 208, 0, 0, 317,
	0, 147, 0, 164, 112, 120, 84, 91, 0, 111,
	138, 152, 156, 0, 0, 100, 0, 154, 142, 177,
	0, 143, 153, 124, 169, 148, 176, 184, 185, 166,
	183, 188, 158, 85, 165, 175, 98, 157, 87, 173,
	163, 130, 116, 117, 86, 0, 151, 103, 108, 102,
	139, 170, 171, 101, 191, 92, 182, 89, 93, 181,
	137, 168, 174, 131, 128, 88, 172, 129, 127, 119,
	106, 113, 145, 126, 146, 114, 134, 133, 135, 0,
	0, 0, 162, 179, 192, 95, 0, 167, 186, 187,
	0, 0, 96, 109, 105, 144, 136, 94, 115, 159,
	118, 125, 150, 190, 141, 155, 99, 178, 160, 307,
	318, 313, 314, 311, 312, 310, 309, 308, 320, 299,
	300, 301, 302, 304, 0, 315, 316, 303, 83, 90,
	122, 189, 149, 107, 180, 140, 0, 0, 0, 0,
	0, 0, 0, 0, 104, 0, 0, 0, 0, 0,
	121, 306, 123, 0, 0, 161, 132, 0, 0, 0,
	0, 297, 298, 0, 0, 0, 0, 0, 0, 0,
	0, 55, 0, 0, 264, 285, 284, 287, 288, 289,
	290, 0, 0, 97, 286, 291, 292, 293, 0, 0,
	0, 0, 0, 278, 0, 305, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 275, 276, 0, 0, 0,
	0, 319, 0, 277, 0, 0, 272, 273, 274, 279,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 110,
	0, 0, 0, 208, 0, 0, 317, 0, 147, 0,
	164, 112, 120, 84, 91, 0, 111, 138, 152, 156,
	0, 0, 100, 0, 154, 142, 177, 1432, 143, 153,
	124, 169, 148, 176, 184, 185, 166, 183, 188, 158,
	85, 165, 175, 98, 157, 87, 173, 163, 130, 116,
	117, 86, 0, 151, 103, 108, 102, 139, 170, 171,
	101, 191, 92, 182, 89, 93, 181, 137, 168, 174,
	131, 128, 88, 172, 129, 127, 119, 106, 113, 145,
	126, 146, 114, 134, 133, 135, 0, 0, 0, 162,
	179, 192, 95, 0, 167, 186, 187, 0, 0, 96,
	109, 105, 144, 136, 94, 115, 159, 118, 125, 150,
	190, 141, 155, 99, 178, 160, 307, 318, 313, 314,
	311, 312, 310, 309, 308, 320, 299, 300, 301, 302,
	304, 0, 315, 316, 303, 83, 90, 122, 189, 149,
	107, 180, 140, 0, 0, 0, 0, 0, 0, 0,
	0, 104, 0, 0, 0, 0, 0, 121, 306, 123,
	0, 0, 161, 132, 0, 0, 0, 0, 297, 298,
	0, 0, 0, 0, 0, 0, 0, 0, 55, 0,
	501, 264, 285, 284, 287, 288, 289, 290, 0, 0,
	97, 286, 291, 292, 293, 0, 0, 0, 0, 0,
	278, 0, 305, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 275, 276, 0, 0, 0, 0, 319, 0,
	277, 0, 0, 272, 273, 274, 279, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 110, 0, 0, 0,
	208, 0, 0, 317, 0, 147, 0, 164, 112, 120,
	84, 91, 0, 111, 138, 152, 156, 0, 0, 100,
	0, 154, 142, 177, 0, 143, 153, 124, 169, 148,
	176, 184, 185, 166, 183, 188, 158, 85, 165, 175,
	98, 157, 87, 173, 163, 130, 116, 117, 86, 0,
	151, 103, 108, 102, 139, 170, 171, 101, 191, 92,
	182, 89, 93, 181, 137, 168, 174, 131, 128, 88,
	172, 129, 127, 119, 106, 113, 145, 126, 146, 114,
	134, 133, 135, 0, 0, 0, 162, 179, 192, 95,
	0, 167, 186, 187, 0, 0, 96, 109, 105, 144,
	136, 94, 115, 159, 118, 125, 150, 190, 141, 155,
	99, 178, 160, 307, 318, 313, 314, 311, 312, 310,
	309, 308, 320, 299, 300, 301, 302, 304, 0, 315,
	316, 303, 83, 90, 122, 189, 149, 107, 180, 140,
	0, 0, 0, 0, 0, 0, 0, 0, 104, 0,
	0, 0, 0, 0, 121, 306, 123, 0, 0, 161,
	132, 0, 0, 0, 0, 297, 298, 0, 0, 0,
	0, 0, 0, 0, 0, 55, 0, 0, 264, 285,
	284, 287, 288, 289, 290, 0, 0, 97, 286, 291,
	292, 293, 0, 0, 0, 0, 0, 278, 0, 305,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 275,
	276, 0, 0, 0, 0, 319, 0, 277, 0, 0,
	272, 273, 274, 279, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 110, 0, 0, 0, 208, 0, 0,
	317, 0, 147, 0, 164, 112, 120, 84, 91, 0,
	111, 138, 152, 156, 0, 0, 100, 0, 154, 142,
	177, 0, 143, 153, 124, 169, 148, 176, 184, 185,
	166, 183, 188, 158, 85, 165, 175, 98, 157, 87,
	173, 163, 130, 116, 117, 86, 0, 151, 103, 108,
	102, 139, 170, 171, 101, 191, 92, 182, 89, 93,
	181, 137, 168, 174, 131, 128, 88, 172, 129, 127,
	119, 106, 113, 145, 126, 146, 114, 134, 133, 135,
	0, 0, 0, 162, 179, 192, 95, 0, 167, 186,
	187, 0, 0, 96, 109, 105, 144, 136, 94, 115,
	159, 118, 125, 150, 190, 141, 155, 99, 178, 160,
	307, 318, 313, 314, 311, 312, 310, 309, 308, 320,
	299, 300, 301, 302, 304, 0, 315, 316, 303, 83,
	90, 122, 189, 149, 107, 180, 140, 0, 0, 0,
	0, 0, 0, 0, 0, 104, 0, 0, 0, 0,
	0, 121, 0, 123, 0, 0, 161, 132, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 81, 0, 0, 0, 0,
	0, 0, 0, 0, 97, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 535, 534, 544, 545, 537, 538, 539, 540,
	541, 542, 543, 536, 0, 0, 546, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	110, 0, 0, 0, 208, 0, 0, 0, 0, 147,
	0, 164, 112, 120, 84, 91, 0, 111, 138, 152,
	156, 0, 0, 100, 0, 154, 142, 177, 0, 143,
	153, 124, 169, 148, 176, 184, 185, 166, 183, 188,
	158, 85, 165, 175, 98, 157, 87, 173, 163, 130,
	116, 117, 86, 0, 151, 103, 108, 102, 139, 170,
	171, 101, 191, 92, 182, 89, 93, 181, 137, 168,
	174, 131, 128, 88, 172, 129, 127, 119, 106, 113,
	145, 126, 146, 114, 134, 133, 135, 0, 0, 0,
	162, 179, 192, 95, 0, 167, 186, 187, 0, 0,
	96, 109, 105, 144, 136, 94, 115, 159, 118, 125,
	150, 190, 141, 155, 99, 178, 160, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 140, 0, 83, 90, 122, 189,
	149, 107, 180, 104, 0, 0, 0, 0, 0, 121,
	0, 123, 0, 0, 161, 132, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 81, 0, 0, 0, 0, 0, 0,
	0, 0, 97, 0, 0, 0, 0, 0, 0, 75,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 110, 77,
	78, 0, 74, 0, 0, 0, 79, 147, 0, 164,
	112, 120, 84, 91, 0, 111, 138, 152, 156, 0,
	0, 100, 0, 154, 142, 177, 0, 143, 153, 124,
	169, 148, 176, 184, 185, 166, 183, 188, 158, 85,
	165, 175, 98, 157, 87, 173, 163, 130, 116, 117,
	86, 0, 151, 103, 108, 102, 139, 170, 171, 101,
	191, 92, 182, 89, 93, 181, 137, 168, 174, 131,
	128, 88, 172, 129, 127, 119, 106, 113, 145, 126,
	146, 114, 134, 133, 135, 0, 0, 0, 162, 179,
	192, 95, 0, 167, 186, 187, 0, 0, 96, 109,
	105, 144, 136, 94, 115, 159, 118, 125, 150, 190,
	141, 155, 99, 178, 160, 0, 76, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 83, 90, 122, 189, 149, 107,
	180, 140, 0, 0, 0, 854, 0, 0, 0, 0,
	104, 0, 0, 0, 0, 0, 121, 0, 123, 0,
	0, 161, 132, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	206, 0, 856, 0, 0, 0, 0, 0, 0, 97,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 110, 0, 0, 0, 208,
	0, 0, 0, 0, 147, 0, 164, 112, 120, 84,
	91, 0, 111, 138, 152, 156, 0, 0, 100, 0,
	154, 142, 177, 0, 143, 153, 124, 169, 148, 176,
	184, 185, 166, 183, 188, 158, 85, 165, 175, 98,
	157, 87, 173, 163, 130, 116, 117, 86, 0, 151,
	103, 108, 102, 139, 170, 171, 101, 191, 92, 182,
	89, 93, 181, 137, 168, 174, 131, 128, 88, 172,
	129, 127, 119, 106, 113, 145, 126, 146, 114, 134,
	133, 135, 0, 0, 0, 162, 179, 192, 95, 0,
	167, 186, 187, 0, 0, 96, 109, 105, 144, 136,
	94, 115, 159, 118, 125, 150, 190, 141, 155, 99,
	178, 160, 0, 0, 0, 0, 0, 25, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 140,
	0, 83, 90, 122, 189, 149, 107, 180, 104, 0,
	0, 0, 0, 0, 121, 0, 123, 0, 0, 161,
	132, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 55, 0, 0, 81, 0,
	0, 0, 0, 0, 0, 0, 0, 97, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 110, 0, 0, 0, 208, 0, 0,
	0, 0, 147, 0, 164, 112, 120, 84, 91, 0,
	111, 138, 152, 156, 0, 0, 100, 0, 154, 142,
	177, 0, 143, 153, 124, 169, 148, 176, 184, 185,
	166, 183, 188, 158, 85, 165, 175, 98, 157, 87,
	173, 163, 130, 116, 117, 86, 0, 151, 103, 108,
	102, 139, 170, 171, 101, 191, 92, 182, 89, 93,
	181, 137, 168, 174, 131, 128, 88, 172, 129, 127,
	119, 106, 113, 145, 126, 146, 114, 134, 133, 135,
	0, 0, 0, 162, 179, 192, 95, 0, 167, 186,
	187, 0, 0, 96, 109, 105, 144, 136, 94, 115,
	159, 118, 125, 150, 190, 141, 155, 99, 178, 160,
	0, 0, 0, 0, 0, 25, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 140, 0, 83,
	90, 122, 189, 149, 107, 180, 104, 0, 0, 0,
	0, 0, 121, 0, 123, 0, 0, 161, 132, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 55, 0, 0, 206, 0, 0, 0,
	0, 0, 0, 0, 0, 97, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 110, 0, 0, 0, 208, 0, 0, 0, 0,
	147, 0, 164, 112, 120, 84, 91, 0, 111, 138,
	152, 156, 0, 0, 100, 0, 154, 142, 177, 0,
	143, 153, 124, 169, 148, 176, 184, 185, 166, 183,
	188, 158, 85, 165, 175, 98, 157, 87, 173, 163,
	130, 116, 117, 86, 0, 151, 103, 108, 102, 139,
	170, 171, 101, 191, 92, 182, 89, 93, 181, 137,
	168, 174, 131, 128, 88, 172, 129, 127, 119, 106,
	113, 145, 126, 146, 114, 134, 133, 135, 0, 0,
	0, 162, 179, 192, 95, 0, 167, 186, 187, 0,
	0, 96, 109, 105, 144, 136, 94, 115, 159, 118,
	125, 150, 190, 141, 155, 99, 178, 160, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 83, 90, 122,
	189, 149, 107, 180, 140, 0, 0, 0, 854, 0,
	0, 0, 0, 104, 0, 0, 0, 0, 0, 121,
	0, 123, 0, 0, 161, 132, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 206, 0, 856, 0, 0, 0, 0,
	0, 0, 97, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 110, 0,
	0, 0, 208, 0, 0, 0, 0, 147, 0, 164,
	112, 120, 84, 91, 0, 111, 138, 152, 156, 0,
	0, 100, 0, 154, 142, 177, 0, 852, 153, 124,
	169, 148, 176, 184, 185, 166, 183, 188, 158, 85,
	165, 175, 98, 157, 87, 173, 163, 130, 116, 117,
	86, 0, 151, 103, 108, 102, 139, 170, 171, 101,
	191, 92, 182, 89, 93, 181, 137, 168, 174, 131,
	128, 88, 172, 129, 127, 119, 106, 113, 145, 126,
	146, 114, 134, 133, 135, 0, 0, 0, 162, 179,
	192, 95, 0, 167, 186, 187, 0, 0, 96, 109,
	105, 144, 136, 94, 115, 159, 118, 125, 150, 190,
	141, 155, 99, 178, 160, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 140, 0, 83, 90, 122, 189, 149, 107,
	180, 104, 0, 0, 0, 0, 0, 121, 0, 123,
	0, 0, 161, 132, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 81, 0, 0, 749, 0, 0, 750, 0, 0,
	97, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 110, 0, 0, 0,
	208, 0, 0, 0, 0, 147, 0, 164, 112, 120,
	84, 91, 0, 111, 138, 152, 156, 0, 0, 100,
	0, 154, 142, 177, 0, 143, 153, 124, 169, 148,
	176, 184, 185, 166, 183, 188, 158, 85, 165, 175,
	98, 157, 87, 173, 163, 130, 116, 117, 86, 0,
	151, 103, 108, 102, 139, 170, 171, 101, 191, 92,
	182, 89, 93, 181, 137, 168, 174, 131, 128, 88,
	172, 129, 127, 119, 106, 113, 145, 126, 146, 114,
	134, 133, 135, 0, 0, 0, 162, 179, 192, 95,
	0, 167, 186, 187, 0, 0, 96, 109, 105, 144,
	136, 94, 115, 159, 118, 125, 150, 190, 141, 155,
	99, 178, 160, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	140, 0, 83, 90, 122, 189, 149, 107, 180, 104,
	0, 637, 0, 0, 0, 121, 0, 123, 0, 0,
	161, 132, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 81,
	0, 636, 0, 0, 0, 0, 0, 0, 97, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 110, 0, 0, 0, 208, 0,
	0, 0, 0, 147, 0, 164, 112, 120, 84, 91,
	0, 111, 138, 152, 156, 0, 0, 100, 0, 154,
	142, 177, 0, 143, 153, 124, 169, 148, 176, 184,
	185, 166, 183, 188, 158, 85, 165, 175, 98, 157,
	87, 173, 163, 130, 116, 117, 86, 0, 151, 103,
	108, 102, 139, 170, 171, 101, 191, 92, 182, 89,
	93, 181, 137, 168, 174, 131, 128, 88, 172, 129,
	127, 119, 106, 113, 145, 126, 146, 114, 134, 133,
	135, 0, 0, 0, 162, 179, 192, 95, 0, 167,
	186, 187, 0, 0, 96, 109, 105, 144, 136, 94,
	115, 159, 118, 125, 150, 190, 141, 155, 99, 178,
	160, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 140, 0,
	83, 90, 122, 189, 149, 107, 180, 104, 0, 0,
	0, 0, 0, 121, 0, 123, 0, 0, 161, 132,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 55, 0, 0, 206, 0, 0,
	0, 0, 0, 0, 0, 0, 97, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 110, 0, 0, 0, 208, 0, 0, 0,
	0, 147, 0, 164, 112, 120, 84, 91, 0, 111,
	138, 152, 156, 0, 0, 100, 0, 154, 142, 177,
	0, 143, 153, 124, 169, 148, 176, 184, 185, 166,
	183, 188, 158, 85, 165, 175, 98, 157, 87, 173,
	163, 130, 116, 117, 86, 0, 151, 103, 108, 102,
	139, 170, 171, 101, 191, 92, 182, 89, 93, 181,
	137, 168, 174, 131, 128, 88, 172, 129, 127, 119,
	106, 113, 145, 126, 146, 114, 134, 133, 135, 0,
	0, 0, 162, 179, 192, 95, 0, 167, 186, 187,
	0, 0, 96, 109, 105, 144, 136, 94, 115, 159,
	118, 125, 150, 190, 141, 155, 99, 178, 160, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 140, 0, 83, 90,
	122, 189, 149, 107, 180, 104, 0, 0, 0, 0,
	0, 121, 0, 123, 0, 0, 161, 132, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 206, 0, 856, 0, 0,
	0, 0, 0, 0, 97, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	110, 0, 0, 0, 208, 0, 0, 0, 0, 147,
	0, 164, 112, 120, 84, 91, 0, 111, 138, 152,
	156, 0, 0, 100, 0, 154, 142, 177, 0, 143,
	153, 124, 169, 148, 176, 184, 185, 166, 183, 188,
	158, 85, 165, 175, 98, 157, 87, 173, 163, 130,
	116, 117, 86, 0, 151, 103, 108, 102, 139, 170,
	171, 101, 191, 92, 182, 89, 93, 181, 137, 168,
	174, 131, 128, 88, 172, 129, 127, 119, 106, 113,
	145, 126, 146, 114, 134, 133, 135, 0, 0, 0,
	162, 179, 192, 95, 0, 167, 186, 187, 0, 0,
	96, 109, 105, 144, 136, 94, 115, 159, 118, 125,
	150, 190, 141, 155, 99, 178, 160, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 140, 0, 83, 90, 122, 189,
	149, 107, 180, 104, 0, 0, 0, 0, 0, 121,
	0, 123, 0, 0, 161, 132, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 81, 0, 525, 0, 0, 0, 0,
	0, 0, 97, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 110, 0,
	0, 0, 208, 0, 0, 0, 0, 147, 0, 164,
	112, 120, 84, 91, 0, 111, 138, 152, 156, 0,
	0, 100, 0, 154, 142, 177, 0, 143, 153, 124,
	169, 148, 176, 184, 185, 166, 183, 188, 158, 85,
	165, 175, 98, 157, 87, 173, 163, 130, 116, 117,
	86, 0, 151, 103, 108, 102, 139, 170, 171, 101,
	191, 92, 182, 89, 93, 181, 137, 168, 174, 131,
	128, 88, 172, 129, 127, 119, 106, 113, 145, 126,
	146, 114, 134, 133, 135, 0, 0, 0, 162, 179,
	192, 95, 0, 167, 186, 187, 0, 0, 96, 109,
	105, 144, 136, 94, 115, 159, 118, 125, 150, 190,
	141, 155, 99, 178, 160, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 140, 83, 90, 122, 189, 149, 107,
	180, 607, 104, 0, 0, 0, 0, 0, 121, 0,
	123, 0, 0, 161, 132, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 206, 0, 0, 0, 0, 0, 0, 0,
	0, 97, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 110, 0, 0,
	0, 208, 0, 0, 0, 0, 147, 0, 164, 112,
	120, 84, 91, 0, 111, 138, 152, 156, 0, 0,
	100, 0, 154, 142, 177, 0, 143, 153, 124, 169,
	148, 176, 184, 185, 166, 183, 188, 158, 85, 165,
	175, 98, 157, 87, 173, 163, 130, 116, 117, 86,
	0, 151, 103, 108, 102, 139, 170, 171, 101, 191,
	92, 182, 89, 93, 181, 137, 168, 174, 131, 128,
	88, 172, 129, 127, 119, 106, 113, 145, 126, 146,
	114, 134, 133, 135, 0, 0, 0, 162, 179, 192,
	95, 0, 167, 186, 187, 0, 0, 96, 109, 105,
	144, 136, 94, 115, 159, 118, 125, 150, 190, 141,
	155, 99, 178, 160, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 323, 0, 0, 0, 0, 0,
	0, 140, 0, 83, 90, 122, 189, 149, 107, 180,
	104, 0, 0, 0, 0, 0, 121, 0, 123, 0,
	0, 161, 132, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	206, 0, 0, 0, 0, 0, 0, 0, 0, 97,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 110, 0, 0, 0, 208,
	0, 0, 0, 0, 147, 0, 164, 112, 120, 84,
	91, 0, 111, 138, 152, 156, 0, 0, 100, 0,
	154, 142, 177, 0, 143, 153, 124, 169, 148, 176,
	184, 185, 166, 183, 188, 158, 85, 165, 175, 98,
	157, 87, 173, 163, 130, 116, 117, 86, 0, 151,
	103, 108, 102, 139, 170, 171, 101, 191, 92, 182,
	89, 93, 181, 137, 168, 174, 131, 128, 88, 172,
	129, 127, 119, 106, 113, 145, 126, 146, 114, 134,
	133, 135, 0, 0, 0, 162, 179, 192, 95, 0,
	167, 186, 187, 0, 0, 96, 109, 105, 144, 136,
	94, 115, 159, 118, 125, 150, 190, 141, 155, 99,
	178, 160, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 140,
	0, 83, 90, 122, 189, 149, 107, 180, 104, 0,
	0, 0, 0, 0, 121, 0, 123, 0, 0, 161,
	132, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 206, 0,
	0, 0, 0, 0, 0, 0, 0, 97, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 110, 0, 203, 0, 208, 0, 0,
	0, 0, 147, 0, 164, 112, 120, 84, 91, 0,
	111, 138, 152, 156, 0, 0, 100, 0, 154, 142,
	177, 0, 143, 153, 124, 169, 148, 176, 184, 185,
	166, 183, 188, 158, 85, 165, 175, 98, 157, 87,
	173, 163, 130, 116, 117, 86, 0, 151, 103, 108,
	102, 139, 170, 171, 101, 191, 92, 182, 89, 93,
	181, 137, 168, 174, 131, 128, 88, 172, 129, 127,
	119, 106, 113, 145, 126, 146, 114, 134, 133, 135,
	0, 0, 0, 162, 179, 192, 95, 0, 167, 186,
	187, 0, 0, 96, 109, 105, 144, 136, 94, 115,
	159, 118, 125, 150, 190, 141, 155, 99, 178, 160,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 140, 0, 83,
	90, 122, 189, 149, 107, 180, 104, 0, 0, 0,
	0, 0, 121, 0, 123, 0, 0, 161, 132, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 81, 0, 0, 0,
	0, 0, 0, 0, 0, 97, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 110, 0, 0, 0, 208, 0, 0, 0, 0,
	147, 0, 164, 112, 120, 84, 91, 0, 111, 138,
	152, 156, 0, 0, 100, 0, 154, 142, 177, 0,
	143, 153, 124, 169, 148, 176, 184, 185, 166, 183,
	188, 158, 85, 165, 175, 98, 157, 87, 173, 163,
	130, 116, 117, 86, 0, 151, 103, 108, 102, 139,
	170, 171, 101, 191, 92, 182, 89, 93, 181, 137,
	168, 174, 131, 128, 88, 172, 129, 127, 119, 106,
	113, 145, 126, 146, 114, 134, 133, 135, 0, 0,
	0, 162, 179, 192, 95, 0, 167, 186, 187, 0,
	0, 96, 109, 105, 144, 136, 94, 115, 159, 118,
	125, 150, 190, 141, 155, 99, 178, 160, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 140, 0, 83, 90, 122,
	189, 149, 107, 180, 104, 0, 0, 0, 0, 0,
	121, 0, 123, 0, 0, 161, 132, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 206, 0, 0, 0, 0, 0,
	0, 0, 0, 97, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 110,
	0, 0, 0, 208, 0, 0, 0, 0, 147, 0,
	164, 112, 120, 84, 91, 0, 111, 138, 152, 156,
	0, 0, 100, 0, 154, 142, 177, 0, 143, 153,
	124, 169, 148, 176, 184, 185, 166, 183, 188, 158,
	85, 165, 175, 98, 157, 87, 173, 163, 130, 116,
	117, 86, 0, 151, 103, 108, 102, 139, 170, 171,
	101, 191, 92, 182, 89, 93, 181, 137, 168, 174,
	131, 128, 88, 172, 129, 127, 119, 106, 113, 145,
	126, 146, 114, 134, 133, 135, 0, 0, 0, 162,
	179, 192, 95, 0, 167, 186, 187, 0, 0, 96,
	109, 105, 144, 136, 94, 115, 159, 118, 125, 150,
	190, 141, 155, 99, 178, 160, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 140, 0, 83, 90, 122, 189, 149,
	107, 180, 104, 0, 0, 0, 0, 0, 121, 0,
	123, 0, 0, 161, 132, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 264, 0, 0, 0, 0, 0, 0, 0,
	0, 97, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 110, 0, 0,
	0, 208, 0, 0, 0, 0, 147, 0, 164, 112,
	120, 84, 91, 0, 111, 138, 152, 156, 0, 0,
	100, 0, 154, 142, 177, 0, 143, 153, 124, 169,
	148, 176, 184, 185, 166, 183, 188, 158, 85, 165,
	175, 98, 157, 87, 173, 163, 130, 116, 117, 86,
	0, 151, 103, 108, 102, 139, 170, 171, 101, 191,
	92, 182, 89, 93, 181, 137, 168, 174, 131, 128,
	88, 172, 129, 127, 119, 106, 113, 145, 126, 146,
	114, 134, 133, 135, 0, 0, 0, 162, 179, 192,
	95, 0, 167, 186, 187, 0, 0, 96, 109, 105,
	144, 136, 94, 115, 159, 118, 125, 150, 190, 141,
	155, 99, 178, 160, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 83, 90, 122, 189, 149, 107, 180,
}
var yyPact = [...]int{

	2280, -1000, -184, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 996, 1046, -1000, -1000, -1000, -1000, -1000,
	-1000, 249, 8875, 6, 122, -6, 11750, 119, 450, 12226,
	-1000, 7, -1000, -1000, -1000, -1000, -1000, -1000, -81, -84,
	-1000, 312, 780, -1000, -1000, -1000, -1000, -1000, 978, 993,
	836, 984, 910, -1000, 6660, 76, 76, 11512, 5672, -1000,
	-1000, 235, 12226, 116, 12226, -138, 73, 73, 73, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 112, 12226, 216, -1000, 12226, 72, 591,
	72, 72, 72, 12226, -1000, 171, -1000, -1000, -1000, 12226,
	575, 942, 3323, 55, 3323, -1000, 3323, 3323, -1000, 3323,
	14, 3323, -66, 1003, 15, -4, -1000, 3323, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2280, 36, 479, 947, 7649, 7649, 996, -1000, 780, -1000,
	-1000, -1000, 941, -1000, -1000, 374, 1025, -1000, 2486, 159,
	-1000, 7649, 1573, 786, -1000, -1000, 786, -1000, -1000, 138,
	-1000, -1000, 8390, 8390, 8390, 8390, 8390, 8390, 8390, 8390,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 786, -1000, 7402, 786, 786, 786,
	786, 786, 786, 786, 786, 7649, 786, 786, 786, 786,
	786, 786, 786, 786, 786, 786, 786, 786, 786, 786,
	786, 11274, 10559, 12226, 791, 680, -1000, -1000, 157, 767,
	5411, -108, -1000, -1000, -1000, 245, 10321, -1000, -1000, -1000,
	940, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 676, 12226, -1000,
	2171, -1000, 560, 3323, 98, 549, 278, 547, 12226, 12226,
	3323, 21, 61, 53, 12226, 773, 79, 12226, 966, 843,
	12226, 545, 532, -1000, 5150, -1000, 3323, 3323, -1000, -1000,
	-1000, 3323, 3323, 3323, 12226, 3323, 3323, -1000, -1000, -1000,
	-1000, 3323, 3323, -1000, 1017, 289, -1000, -1000, -1000, -1000,
	7649, 211, -1000, 842, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1038, 198, 368, 151, 769, -1000, 648,
	978, 479, 910, 10083, 859, -1000, -1000, 12226, -1000, 7649,
	7649, 451, -1000, 11035, -1000, -1000, 4106, 217, 8390, 401,
	393, 8390, 8390, 8390, 8390, 8390, 8390, 8390, 8390, 8390,
	8390, 8390, 8390, 8390, 8390, 8390, 430, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 530, -1000, 780, 886, 886,
	177, 177, 177, 177, 177, 177, 177, 8637, 6166, 479,
	661, 625, 7402, 6660, 6660, 7649, 7649, 7154, 6907, 6660,
	972, 267, 625, 12464, -1000, -1000, 8143, -1000, -1000, -1000,
	-1000, -1000, 479, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	11988, 11988, 6660, 6660, 6660, 6660, 35, 12226, -1000, 757,
	821, -1000, -1000, -1000, 968, 9598, 9845, 35, 671, 10559,
	12226, -1000, -1000, 10559, 12226, 3845, 4889, 767, -108, 727,
	-1000, -104, -103, 5919, 153, -1000, -1000, -1000, -1000, 3062,
	423, 615, 328, -55, -1000, -1000, -1000, 795, -1000, 795,
	795, 795, 795, -19, -19, -19, -19, -1000, -1000, -1000,
	-1000, -1000, 820, 817, -1000, 795, 795, 795, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 814, 814, 814, 799,
	799, 825, -1000, 12226, 3323, 965, 3323, -1000, 71, -1000,
	12226, 12226, 12226, 12226, 12226, 130, 12226, 12226, 766, -1000,
	12226, 3323, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 12226, 387, 12226,
	12226, 625, -1000, 492, 12226, -1000, 922, 7649, 7649, 4628,
	7649, -1000, -1000, -1000, 947, -1000, 972, 991, -1000, 931,
	930, 6660, -1000, -1000, 217, 276, -1000, -1000, 476, -1000,
	-1000, -1000, -1000, 149, 786, -1000, 1820, -1000, -1000, -1000,
	-1000, 401, 8390, 8390, 8390, 317, 1820, 1804, 397, 1341,
	177, 690, 690, 181, 181, 181, 181, 181, 478, 478,
	-1000, -1000, -1000, 479, -1000, -1000, -1000, 479, 6660, 761,
	-1000, -1000, 7649, -1000, 479, 653, 653, 435, 518, 331,
	1012, 653, 287, 1011, 653, 653, 6660, 275, -1000, 7649,
	479, -1000, 147, -1000, 556, 758, 755, 653, 479, 653,
	653, 689, 786, -1000, 12464, 10559, 10559, 10559, 10559, 10559,
	-1000, 894, 893, -1000, 887, 876, 914, 12226, -1000, 657,
	9598, 148, 786, -1000, 10797, -1000, -1000, 1002, 10559, 742,
	-1000, 742, -1000, 143, -1000, -1000, 727, -108, -109, -1000,
	-1000, -1000, -1000, 625, -1000, 482, 716, 2801, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 803, 503, -1000, 955, 204,
	200, 501, 954, -1000, -1000, -1000, 944, -1000, 338, -62,
	-1000, -1000, 452, -19, -19, -1000, -1000, 153, 939, 153,
	153, 153, 491, 491, -1000, -1000, -1000, -1000, 443, -1000,
	-1000, -1000, 419, -1000, 839, 11988, 3323, -1000, -1000, -1000,
	-1000, 180, 180, 222, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 33, 792, -1000, -1000, -1000,
	-1000, 10, 19, 78, -1000, 3323, -1000, 289, -1000, 490,
	7649, -1000, -1000, -1000, -1000, 918, 625, 625, 142, -1000,
	-1000, 12226, -1000, -1000, -1000, -1000, 774, -1000, -1000, -1000,
	3584, 6660, -1000, 317, 1820, 1750, -1000, 8390, 8390, -1000,
	-1000, 653, 6660, 625, -1000, -1000, -1000, 84, 430, 84,
	8390, 8390, -1000, 8390, 8390, -1000, -150, 703, 251, -1000,
	7649, 379, -1000, 4628, -1000, 8390, 8390, -1000, -1000, -1000,
	-1000, 834, 12464, 786, -1000, 9360, 11988, 765, -1000, 233,
	821, 807, 831, 1091, -1000, -1000, -1000, -1000, 890, -1000,
	867, -1000, -1000, -1000, -1000, -1000, 115, 113, 108, 11988,
	-1000, 996, 7649, 742, -1000, -1000, 190, -1000, -1000, -107,
	-122, -1000, -1000, -1000, 3062, -1000, 3062, 11988, 52, -1000,
	501, 501, -1000, -1000, -1000, 802, 830, 8390, -1000, -1000,
	-1000, 588, 153, 153, -1000, 230, -1000, -1000, -1000, 630,
	-1000, 607, 698, 587, 12226, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 12226, -1000, -1000, -1000, -1000, -1000, 11988, -163, 495,
	11988, 11988, 11988, 12226, -1000, 387, -1000, 625, -1000, 4367,
	-1000, 1002, 10559, -1000, -1000, 479, -1000, 8390, 1820, 1820,
	-1000, -1000, 479, 795, 795, -1000, 795, 799, -1000, 795,
	-2, 795, -3, 479, 479, 1678, 1663, 1482, 332, 786,
	-145, -1000, 625, 7649, -1000, 1420, 665, -1000, 957, 693,
	685, -1000, -1000, 6413, 479, 585, 136, 581, -1000, 996,
	12464, 7649, -1000, -1000, 7649, 797, -1000, 7649, -1000, -1000,
	-1000, 786, 786, 786, 581, 978, 625, -1000, -1000, -1000,
	-1000, 2801, -1000, 579, -1000, 795, -1000, -1000, -1000, 11988,
	-51, 1036, 1820, -1000, -1000, -1000, -1000, -1000, -19, 472,
	-19, 408, -1000, 396, 3323, -1000, -1000, -1000, -1000, 959,
	-1000, 4367, -1000, -1000, 794, 823, -1000, -1000, -1000, 1000,
	694, -1000, 1820, -1000, -1000, 111, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 8390, 8390, 8390, 8390, 8390, 479,
	471, 625, 8390, 8390, 953, -1000, 786, -1000, -1000, 722,
	11988, 11988, -1000, 11988, 978, -1000, 625, 625, 11988, 625,
	11988, 11988, 11988, 9122, -1000, 173, 11988, -1000, 573, -1000,
	214, -1000, -151, 153, -1000, 153, 540, 509, -1000, 786,
	692, -1000, 232, 11988, 12226, 998, 992, -1000, -1000, 556,
	556, 556, 556, 45, -1000, -1000, 556, 556, 1034, -1000,
	786, -1000, 780, 134, -1000, -1000, -1000, 558, 554, 554,
	554, 148, 173, -1000, 453, 221, 456, -1000, 46, 11988,
	358, 948, -1000, 946, -1000, -1000, -1000, -1000, -1000, 32,
	4367, 3062, 543, -1000, -1000, 7649, 7649, -1000, -1000, -1000,
	-1000, 479, 58, -173, -1000, -1000, 12464, 685, 479, 11988,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 384, -1000, -1000,
	12226, -1000, -1000, 388, -1000, -1000, 539, -1000, 11988, -1000,
	-1000, 792, 625, 681, -1000, 899, -161, -179, 634, -1000,
	-1000, -1000, 789, -1000, -1000, 32, 929, -163, -1000, 889,
	-1000, 11988, -1000, 29, -1000, -164, 508, 26, -175, 828,
	786, -181, 827, -1000, 1010, 7896, -1000, -1000, 1028, 201,
	201, 556, 479, -1000, -1000, -1000, 60, 448, -1000, -1000,
	-1000, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 112, 31, 462, 1250, 1247, 1245, 1244, 1243, 1242,
	1241, 1240, 1239, 1238, 1236, 1235, 1234, 1233, 1231, 1230,
	1228, 1226, 1224, 1223, 1219, 1218, 1217, 136, 1216, 1214,
	1213, 67, 1211, 76, 1209, 1208, 1207, 35, 201, 43,
	52, 628, 1206, 26, 50, 78, 1199, 39, 1197, 1196,
	81, 1193, 1192, 57, 1191, 1190, 1493, 1189, 66, 1187,
	9, 51, 1186, 1185, 1184, 1182, 72, 1069, 1180, 1175,
	13, 1174, 1173, 86, 1171, 55, 11, 15, 18, 21,
	1170, 196, 7, 1168, 58, 1166, 1164, 1163, 1162, 20,
	1161, 59, 1160, 19, 60, 1156, 14, 70, 38, 25,
	8, 77, 64, 1153, 22, 71, 49, 1151, 1150, 556,
	1147, 1142, 46, 1132, 1131, 28, 1129, 208, 492, 1128,
	1125, 1120, 1117, 42, 0, 525, 162, 74, 1116, 1115,
	1111, 1423, 45, 54, 23, 1110, 56, 1249, 44, 1106,
	1104, 41, 1103, 1102, 1101, 1100, 1097, 1096, 1094, 255,
	1092, 1091, 1090, 27, 30, 1089, 1086, 63, 24, 1084,
	1083, 1082, 48, 65, 1081, 1080, 53, 36, 1078, 1076,
	1075, 1074, 1071, 34, 10, 1070, 16, 1066, 17, 1064,
	29, 1063, 4, 1062, 12, 1061, 5, 1060, 6, 47,
	1, 1058, 2, 1054, 1053, 61, 3, 80, 1022, 79,
}
var yyR1 = [...]int{

	0, 193, 194, 194, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 36, 36, 36, 11, 2,
	2, 2, 6, 3, 4, 4, 5, 5, 7, 7,
	30, 30, 8, 9, 9, 9, 9, 197, 197, 50,
	50, 51, 51, 97, 97, 10, 10, 10, 10, 102,
	102, 106, 106, 106, 107, 107, 107, 107, 139, 139,
	12, 12, 12, 12, 12, 12, 12, 188, 188, 187,
	186, 186, 185, 185, 184, 18, 169, 171, 171, 170,
	170, 170, 170, 163, 142, 142, 142, 142, 145, 145,
	143, 143, 143, 143, 143, 143, 143, 143, 143, 144,
	144, 144, 144, 144, 146, 146, 146, 146, 146, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 148, 148, 148, 148, 148, 148,
	148, 148, 162, 162, 149, 149, 157, 157, 158, 158,
	158, 155, 155, 156, 156, 159, 159, 159, 151, 151,
	152, 152, 160, 160, 153, 153, 153, 154, 154, 154,
	161, 161, 161, 161, 161, 150, 150, 164, 164, 179,
	179, 178, 178, 178, 168, 168, 175, 175, 175, 175,
	175, 166, 166, 167, 167, 177, 177, 176, 165, 165,
	180, 180, 180, 180, 191, 192, 190, 190, 190, 190,
	190, 172, 172, 172, 173, 173, 173, 174, 174, 174,
	13, 13, 13, 13, 13, 13, 13, 13, 13, 13,
	13, 13, 13, 13, 13, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 183, 181, 181, 182,
	182, 14, 19, 19, 15, 15, 15, 15, 15, 16,
	16, 20, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	113, 113, 111, 111, 114, 114, 112, 112, 112, 115,
	115, 115, 116, 116, 140, 140, 140, 22, 22, 24,
	24, 25, 26, 23, 23, 23, 23, 23, 23, 17,
	198, 27, 28, 28, 29, 29, 29, 33, 33, 33,
	31, 31, 32, 32, 39, 39, 38, 38, 40, 40,
	40, 40, 128, 128, 128, 127, 127, 42, 42, 43,
	43, 44, 44, 45, 45, 45, 45, 59, 59, 96,
	96, 98, 98, 46, 46, 46, 46, 47, 47, 48,
	48, 49, 49, 135, 135, 134, 134, 134, 133, 133,
	52, 52, 52, 54, 53, 53, 53, 53, 55, 55,
	57, 57, 56, 56, 58, 60, 60, 60, 60, 61,
	61, 41, 41, 41, 41, 41, 41, 41, 110, 110,
	63, 63, 62, 62, 62, 62, 62, 62, 62, 62,
	62, 62, 74, 74, 74, 74, 74, 74, 64, 64,
	64, 64, 64, 64, 64, 37, 37, 75, 75, 75,
	81, 76, 76, 67, 67, 67, 67, 67, 67, 67,
	67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
	67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
	67, 67, 67, 67, 67, 71, 71, 71, 69, 69,
	69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
	69, 70, 70, 70, 70, 70, 70, 70, 70, 70,
	70, 70, 70, 70, 70, 70, 70, 199, 199, 73,
	72, 72, 72, 72, 72, 72, 34, 34, 34, 34,
	34, 138, 138, 141, 141, 141, 141, 141, 141, 141,
	141, 141, 141, 141, 141, 141, 85, 85, 35, 35,
	83, 83, 84, 86, 86, 82, 82, 82, 66, 66,
	66, 66, 66, 66, 66, 66, 68, 68, 68, 87,
	87, 88, 88, 89, 89, 90, 90, 91, 92, 92,
	92, 93, 93, 93, 93, 94, 94, 94, 65, 65,
	65, 65, 65, 65, 95, 95, 95, 95, 99, 99,
	77, 77, 79, 79, 78, 80, 100, 100, 104, 101,
	101, 105, 105, 105, 105, 103, 103, 103, 130, 130,
	130, 108, 108, 117, 117, 118, 118, 109, 109, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 120,
	120, 120, 121, 121, 122, 122, 122, 129, 129, 125,
	125, 126, 126, 131, 131, 132, 132, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 195, 196, 136, 137, 137, 137,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 0, 2, 2, 3, 4,
	6, 7, 5, 10, 1, 3, 1, 3, 7, 8,
	1, 1, 9, 8, 7, 6, 6, 1, 1, 1,
	3, 1, 3, 0, 4, 3, 4, 5, 4, 1,
	3, 3, 2, 2, 2, 2, 2, 1, 1, 1,
	2, 2, 8, 4, 6, 5, 5, 0, 2, 1,
	0, 2, 1, 3, 3, 4, 4, 2, 4, 1,
	3, 3, 3, 8, 3, 1, 1, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 2, 2, 2, 1, 2, 2, 2, 1, 4,
	4, 2, 2, 3, 3, 3, 3, 1, 1, 1,
	1, 1, 6, 6, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 0, 3, 0, 5, 0, 3,
	5, 0, 1, 0, 1, 0, 1, 2, 0, 2,
	0, 3, 0, 1, 0, 3, 3, 0, 2, 2,
	0, 2, 1, 2, 1, 0, 2, 5, 4, 1,
	2, 2, 3, 2, 0, 1, 2, 3, 3, 2,
	2, 1, 1, 0, 1, 1, 3, 2, 3, 1,
	10, 11, 11, 12, 3, 3, 1, 1, 2, 2,
	2, 0, 1, 3, 1, 2, 3, 1, 1, 1,
	6, 7, 7, 7, 7, 4, 5, 7, 5, 5,
	5, 12, 7, 5, 9, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 7, 1, 3, 8,
	8, 3, 3, 5, 4, 6, 5, 4, 4, 3,
	2, 3, 4, 4, 3, 4, 4, 4, 4, 4,
	4, 3, 2, 3, 3, 2, 3, 4, 3, 7,
	5, 4, 2, 4, 4, 3, 3, 5, 2, 3,
	1, 1, 0, 1, 1, 1, 0, 2, 2, 0,
	2, 2, 0, 2, 0, 1, 1, 2, 1, 1,
	2, 1, 1, 2, 2, 2, 2, 3, 3, 2,
	0, 2, 0, 2, 1, 2, 2, 0, 1, 1,
	0, 1, 0, 1, 0, 1, 1, 3, 1, 2,
	3, 5, 0, 1, 2, 1, 1, 0, 2, 1,
	3, 1, 1, 1, 3, 1, 3, 3, 7, 1,
	3, 1, 3, 4, 4, 4, 3, 2, 4, 0,
	1, 0, 2, 0, 1, 0, 1, 2, 1, 1,
	1, 2, 2, 1, 2, 3, 2, 3, 2, 2,
	2, 1, 1, 3, 3, 0, 5, 5, 5, 0,
	2, 1, 3, 3, 2, 3, 1, 2, 0, 3,
	1, 1, 3, 3, 4, 4, 5, 3, 4, 5,
	6, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 0, 2, 1, 1, 1,
	3, 1, 3, 1, 1, 1, 1, 1, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 2, 2, 2, 2, 2, 2, 2,
	3, 1, 1, 1, 1, 4, 5, 6, 4, 4,
	6, 6, 6, 8, 8, 8, 8, 9, 7, 5,
	4, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 8, 8, 0, 2, 3,
	4, 4, 4, 4, 4, 4, 0, 3, 4, 7,
	3, 1, 1, 2, 3, 3, 1, 2, 2, 1,
	2, 1, 2, 2, 1, 2, 0, 1, 0, 2,
	1, 2, 4, 0, 2, 1, 3, 5, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 0,
	3, 0, 2, 0, 3, 1, 3, 2, 0, 1,
	1, 0, 2, 4, 4, 0, 2, 4, 2, 1,
	3, 5, 4, 6, 1, 3, 3, 5, 0, 5,
	1, 3, 1, 2, 3, 1, 1, 3, 3, 1,
	3, 3, 3, 3, 3, 1, 2, 1, 1, 1,
	1, 1, 1, 0, 2, 0, 3, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 1, 0, 1, 1, 0, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -193, -1, -2, -6, -7, -8, -9, -10, -12,
	-13, -14, -15, -16, -20, -21, -22, -24, -25, -26,
	-23, -17, -11, -3, -4, 7, 8, -30, 10, 11,
	31, -18, 117, 118, 120, 119, 150, 121, 144, 51,
	164, 165, 167, 168, 26, 145, 148, 149, 32, 33,
	123, 6, -195, 9, 249, 55, -194, 266, -89, 16,
	-29, 5, -27, -198, -27, -27, -27, -27, -27, -169,
	-171, 55, 92, -122, 127, 74, 241, 124, 125, 131,
	-125, 58, -124, 259, 137, 164, 175, 169, 196, 188,
	260, 138, 186, 189, 228, 216, 223, 67, 167, 237,
	146, 184, 180, 178, 28, 225, 201, 264, 179, 224,
	123, 140, 135, 202, 206, 229, 173, 174, 231, 200,
	136, 34, 261, 36, 154, 232, 204, 199, 195, 198,
	172, 194, 40, 208, 207, 209, 227, 191, 141, 181,
	19, 235, 149, 152, 226, 203, 205, 132, 156, 263,
	233, 177, 142, 153, 148, 236, 143, 168, 163, 230,
	239, 39, 213, 171, 134, 165, 160, 218, 192, 155,
	182, 183, 197, 170, 193, 166, 157, 150, 238, 214,
	265, 190, 187, 161, 158, 159, 219, 220, 162, 262,
	234, 185, 215, -109, 127, 220, 129, 125, 125, 126,
	127, 241, 124, 125, -56, -131, 58, -124, 127, 125,
	110, 189, 228, 117, 217, 225, 126, 34, 226, 156,
	-140, 125, -111, 216, 219, 220, 162, 58, 230, 229,
	221, -131, 166, -136, -136, -136, -136, 218, 218, -136,
	-36, 73, -2, -93, 18, 17, -5, -3, -195, 7,
	21, 22, -33, 41, 42, -28, -40, 101, -41, -131,
	-62, 76, -67, 30, 58, -124, 24, -66, -63, -82,
	-80, -81, 110, 111, 112, 99, 100, 107, 77, 113,
	-71, -69, -70, -72, 60, 59, 68, 61, 62, 63,
	64, 69, 70, 71, -125, -78, -195, 45, 46, 250,
	251, 252, 253, 258, 254, 79, 35, 240, 248, 247,
	246, 244, 245, 242, 243, 256, 257, 130, 241, 105,
	249, -109, -109, 12, -50, -51, -56, -58, -131, -101,
	-139, 166, -105, 230, 229, -126, -103, -125, -123, 228,
	189, 227, 122, 75, 23, 25, 211, 78, 110, 17,
	79, 109, 250, 117, 49, 242, 243, 240, 252, 253,
	241, 217, 30, 11, 26, 145, 22, 103, 119, 82,
	83, 147, 24, 6, 71, 20, 52, 12, 14, 15,
	130, 129, 94, 126, 47, 9, 113, 27, 91, 43,
	29, 45, 92, 18, 244, 245, 32, 258, 151, 105,
	50, 37, 76, 69, 72, 53, 74, 16, 48, 93,
	120, 249, 46, 124, 7, 255, 31, 144, 44, 125,
	81, 256, 257, 128, 70, 5, 131, 33, 10, 51,
	54, 246, 247, 248, 35, 80, 13, -170, 92, -163,
	58, -56, 126, -56, 249, -118, 130, -118, -118, 125,
	-56, 117, 119, 122, 53, -19, -56, -117, 130, 58,
	-117, -117, -117, -56, 114, -56, 58, 31, -137, -195,
	-126, 241, 58, 156, 125, 157, 127, -137, -137, -137,
	-137, 160, 161, -137, -114, -113, 223, 224, 218, 222,
	13, 161, 218, 159, -137, -136, -136, -1, 200, 125,
	-196, 57, -94, 20, 32, -41, -131, -90, -91, -41,
	-89, -2, -27, 37, -31, 22, 66, 12, -128, 75,
	74, 91, -127, 23, -125, 60, 114, -41, -64, 94,
	76, 92, 93, 78, 96, 95, 106, 99, 100, 101,
	102, 103, 104, 105, 97, 98, 109, 84, 85, 86,
	87, 88, 89, 90, -110, -195, -81, -195, 115, 116,
	-67, -67, -67, -67, -67, -67, -67, -67, -195, -2,
	-76, -41, -195, -195, -195, -195, -195, -195, -195, -195,
	-195, -85, -41, -195, -199, -73, -195, -199, -73, -199,
	-73, -199, -195, -199, -73, -199, -73, -199, -199, -73,
	-195, -195, -195, -195, -195, -195, -57, 27, -56, -43,
	-44, -45, -46, -59, -81, -195, -56, -56, -50, -197,
	56, 12, 54, -197, 56, 114, 56, -101, 166, -102,
	-106, 231, 233, 84, -130, -125, 60, 30, 31, 57,
	56, -56, -142, -145, -147, -146, -148, -143, -144, 186,
	187, 110, 190, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 31, 146, 182, 183, 184, 185, 202,
	203, 204, 205, 206, 207, 208, 209, 169, 188, 260,
	170, 171, 172, 173, 174, 175, 177, 178, 179, 180,
	181, 58, -137, 127, 58, 76, 58, -56, -56, -137,
	158, 158, 125, 125, 163, -56, 56, 128, -50, 24,
	53, -56, 58, 58, -132, -131, -123, -137, -137, -137,
	-137, -137, -56, -137, -137, -137, -137, 12, -112, 12,
	94, -41, -116, 92, 53, 10, 94, 56, 19, 114,
	56, -92, 25, 26, -93, -196, -33, -68, -125, 61,
	64, -32, 44, -56, -41, -41, -74, 69, 76, 70,
	71, -127, 101, -132, -126, -123, -67, -75, -78, -81,
	65, 94, 92, 93, 78, -67, -67, -67, -67, -67,
	-67, -67, -67, -67, -67, -67, -67, -67, -67, -67,
	-138, 58, 60, 58, -66, -66, -125, -39, 22, -38,
	-40, -196, 56, -196, -2, -38, -38, -41, -41, -82,
	60, -38, -82, 60, -38, -38, -31, -83, -84, 80,
	-82, -125, -131, -196, -67, -125, -125, -38, -39, -38,
	-38, -97, 152, -56, 31, 56, -52, -54, -53, -55,
	43, 47, 49, 44, 45, 46, 50, -135, 23, -43,
	-195, -134, 152, -133, 23, -131, 60, -97, 54, -43,
	-56, -43, -58, -131, 101, -105, -102, 56, 232, 234,
	235, 53, 72, -41, -154, 109, -172, -173, -174, -126,
	60, 61, -163, -164, -165, -175, 139, -180, 132, 134,
	131, -166, 140, 126, 29, 57, -159, 69, 76, -155,
	214, -149, 55, -149, -149, -149, -149, -153, 189, -153,
	-153, -153, 55, 55, -149, -149, -149, -157, 55, -157,
	-157, -158, 55, -158, -129, 54, -56, -137, 24, -137,
	-119, 122, 119, 120, -183, 118, 211, 189, 67, 30,
	16, 250, 152, 265, 58, 153, -56, -56, -56, -56,
	-56, 122, 119, -56, -56, -56, -137, -56, -115, 92,
	13, -131, -131, 60, -56, 39, -41, -41, -132, -91,
	-94, -108, 20, 12, 35, 35, -38, 69, 70, 71,
	114, -195, -75, -67, -67, -67, -37, 147, 75, -196,
	-196, -38, 56, -41, -196, -196, -196, 56, 54, 23,
	12, 12, -196, 12, 12, -196, -196, -38, -86, -84,
	82, -41, -196, 114, -196, 56, 56, -196, -196, -196,
	-196, -65, 31, 35, -2, -195, -195, -100, -104, -82,
	-44, -45, -45, -44, -45, 43, 43, 43, 48, 43,
	48, 43, -53, -131, -196, -60, 51, 129, 52, -195,
	-133, -61, 13, -43, -61, -61, 114, -106, -107, 236,
	233, 239, 58, 60, 56, -174, 84, 55, 58, 29,
	-166, -166, -167, 58, -167, 29, -151, 30, 69, -156,
	215, 61, -153, -153, -154, 31, -154, -154, -154, -162,
	60, -162, 61, 61, 53, -125, -137, -136, -189, 133,
	139, 140, 135, 58, 126, 29, 132, 134, 152, 131,
	-189, -120, -121, 128, 23, 126, 29, 152, -188, 54,
	158, 211, 158, 128, -137, -112, 60, -41, 40, 114,
	-56, -42, 12, 101, -126, -39, -37, 75, -67, -67,
	-196, -40, -141, 110, 186, 146, 184, 180, 200, 191,
	213, 182, 214, -138, -141, -67, -67, -67, -67, 259,
	-89, 83, -41, 81, -126, -67, -67, -99, 53, -100,
	-77, -79, -78, -195, -2, -95, -125, -98, -125, -61,
	56, 84, -48, -47, 53, 54, -49, 53, -47, 43,
	43, 126, 126, 126, -98, -89, -41, -61, 233, 237,
	238, -173, -174, -177, -176, -125, -180, -167, -167, 55,
	-152, 53, -67, 57, -154, -154, 58, 110, 57, 56,
	57, 56, 57, 56, -56, -136, -136, -56, -136, -125,
	-186, 262, -187, 58, -125, -125, -125, -56, -115, -61,
	-43, -196, -67, -196, -149, -149, -149, -158, -149, 174,
	-149, 174, -196, -196, 20, 20, 20, 20, -195, -35,
	255, -41, 56, 56, 28, -99, 56, -196, -196, -196,
	56, 114, -196, 56, -89, -104, -41, -41, 55, -41,
	-195, -195, -195, -196, -93, 57, 56, -149, -96, -125,
	-160, 211, 10, -153, 60, -153, 61, 61, -137, 27,
	-185, -184, -126, 55, 54, -87, 14, -153, 58, -67,
	-67, -67, -67, -67, -196, 60, -67, -67, 29, -79,
	35, -2, -195, -125, -125, -125, -93, -96, -96, -96,
	-96, -134, -179, -178, 54, 136, 67, -176, 57, 56,
	-161, 132, 29, 131, -70, -154, -154, 57, 57, -195,
	56, 84, -96, -56, -88, 15, 17, -196, -196, -196,
	-196, -34, 94, 262, -196, -196, 10, -77, -2, 114,
	57, -196, -196, -196, -60, -178, 58, -168, 84, 60,
	142, -125, -150, 67, 29, 29, -181, -182, 152, -184,
	-174, 57, -41, -76, -196, 260, 50, 263, -100, -196,
	-125, 61, -56, 60, -196, 56, -125, -188, 40, 261,
	264, 55, -182, 35, -186, 40, -96, 154, 262, 57,
	155, 263, -191, -192, 53, -195, 264, -192, 53, 11,
	10, -67, 151, -190, 143, 138, 141, 31, -190, -196,
	-196, 137, 30, 69,
}
var yyDef = [...]int{

	24, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 563, 0, 320, 320, 320, 320, 320,
	320, 0, 634, 617, 0, 0, 0, 0, -2, 308,
	309, 0, 311, 312, 855, 855, 855, 855, 0, 0,
	855, 25, 0, 40, 41, 853, 1, 3, 571, 0,
	0, 324, 327, 322, 0, 617, 617, 0, 0, 70,
	71, 0, 0, 0, 843, 0, 615, 615, 615, 635,
	636, 639, 640, 742, 743, 744, 745, 746, 747, 748,
	749, 750, 751, 752, 753, 754, 755, 756, 757, 758,
	759, 760, 761, 762, 763, 764, 765, 766, 767, 768,
	769, 770, 771, 772, 773, 774, 775, 776, 777, 778,
	779, 780, 781, 782, 783, 784, 785, 786, 787, 788,
	789, 790, 791, 792, 793, 794, 795, 796, 797, 798,
	799, 800, 801, 802, 803, 804, 805, 806, 807, 808,
	809, 810, 811, 812, 813, 814, 815, 816, 817, 818,
	819, 820, 821, 822, 823, 824, 825, 826, 827, 828,
	829, 830, 831, 832, 833, 834, 835, 836, 837, 838,
	839, 840, 841, 842, 844, 845, 846, 847, 848, 849,
	850, 851, 852, 0, 0, 0, 618, 0, 613, 0,
	613, 613, 613, 0, 260, 392, 643, 644, 843, 0,
	0, 0, 856, 0, 856, 272, 856, 856, 275, 856,
	0, 856, 0, 282, 0, 0, 288, 856, 305, 306,
	293, 307, 310, 313, 314, 315, 316, 855, 855, 319,
	24, 0, 34, 575, 0, 0, 563, 36, 0, 320,
	325, 326, 330, 328, 329, 321, 0, 338, 342, 0,
	401, 0, 406, 408, -2, -2, 0, 443, 444, 445,
	446, 447, 0, 0, 0, 0, 0, 0, 0, 0,
	471, 472, 473, 474, 548, 549, 550, 551, 552, 553,
	554, 555, 410, 411, 545, 595, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 536, 0, 507, 507, 507,
	507, 507, 507, 507, 507, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 49, 51, 392, 55,
	0, 834, 599, -2, -2, 0, 0, 641, 642, -2,
	752, -2, 647, 648, 649, 650, 651, 652, 653, 654,
	655, 656, 657, 658, 659, 660, 661, 662, 663, 664,
	665, 666, 667, 668, 669, 670, 671, 672, 673, 674,
	675, 676, 677, 678, 679, 680, 681, 682, 683, 684,
	685, 686, 687, 688, 689, 690, 691, 692, 693, 694,
	695, 696, 697, 698, 699, 700, 701, 702, 703, 704,
	705, 706, 707, 708, 709, 710, 711, 712, 713, 714,
	715, 716, 717, 718, 719, 720, 721, 722, 723, 724,
	725, 726, 727, 728, 729, 730, 731, 732, 733, 734,
	735, 736, 737, 738, 739, 740, 741, 0, 0, 89,
	0, 87, 0, 856, 0, 0, 0, 0, 0, 0,
	856, 0, 0, 0, 0, 251, 0, 0, 0, 0,
	0, 0, 0, 259, 0, 261, 856, 856, 264, 857,
	858, 856, 856, 856, 0, 856, 856, 271, 273, 274,
	276, 856, 856, 278, 0, 296, 294, 295, 290, 291,
	0, 302, 285, 286, 289, 317, 318, 28, 26, 27,
	35, 854, 29, 0, 0, 572, 0, 564, 565, 568,
	571, 34, 327, 0, 332, 331, 323, 0, 339, 0,
	0, 0, 343, 0, 345, 346, 0, 404, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 428, 429, 430,
	431, 432, 433, 434, 407, 0, 421, 0, 0, 0,
	463, 464, 465, 466, 467, 468, 469, 0, 334, 34,
	0, 441, 0, 0, 0, 0, 0, 0, 0, 0,
	330, 0, 537, 0, 491, 499, 0, 492, 500, 493,
	501, 494, 0, 495, 502, 496, 503, 497, 498, 504,
	0, 0, 0, 334, 0, 0, 53, 0, 391, 0,
	349, 351, 352, 353, -2, 0, 375, -2, 0, 0,
	0, 47, 48, 0, 0, 0, 0, 56, 834, 58,
	59, 0, 0, 0, 167, 608, 609, 610, 606, 211,
	0, 0, 155, 151, 95, 96, 97, 144, 99, 144,
	144, 144, 144, 164, 164, 164, 164, 127, 128, 129,
	130, 131, 0, 0, 114, 144, 144, 144, 118, 134,
	135, 136, 137, 138, 139, 140, 141, 100, 101, 102,
	103, 104, 105, 106, 107, 108, 146, 146, 146, 148,
	148, 637, 73, 0, 856, 0, 856, 85, 0, 225,
	0, 0, 0, 0, 0, 0, 0, 0, 254, 614,
	0, 856, 257, 258, 393, 645, 646, 262, 263, 265,
	266, 267, 268, 269, 270, 277, 281, 0, 299, 0,
	0, 283, 284, 0, 0, 576, 0, 0, 0, 0,
	0, 567, 569, 570, 575, 37, 330, 0, 556, 0,
	0, 0, 333, 32, 402, 403, 405, 422, 0, 424,
	426, 344, 340, 0, 546, -2, 412, 413, 437, 438,
	439, 0, 0, 0, 0, 435, 417, 0, 448, 449,
	450, 451, 452, 453, 454, 455, 456, 457, 458, 459,
	462, 521, 522, 0, 460, 461, 470, 0, 0, 335,
	336, 440, 0, 594, 34, 0, 0, 0, 0, 445,
	548, 0, 445, 548, 0, 0, 0, 543, 540, 0,
	0, 545, 0, 508, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 390, 0, 0, 0, 0, 0, 0,
	380, 0, 0, 383, 0, 0, 0, 0, 374, 0,
	0, 395, 802, 376, 0, 378, 379, 399, 0, 399,
	50, 399, 52, 0, 394, 600, 57, 0, 0, 62,
	63, 601, 602, 603, 604, 0, 86, 212, 214, 217,
	218, 219, 90, 91, 92, 0, 0, 199, 0, 0,
	193, 193, 0, 191, 192, 88, 158, 156, 0, 153,
	152, 98, 0, 164, 164, 121, 122, 167, 0, 167,
	167, 167, 0, 0, 115, 116, 117, 109, 0, 110,
	111, 112, 0, 113, 0, 0, 856, 75, 616, 76,
	855, 0, 0, 629, 226, 619, 620, 621, 622, 623,
	624, 625, 626, 627, 628, 0, 77, 228, 230, 229,
	233, 0, 0, 0, 252, 856, 256, 296, 280, 0,
	0, 297, 298, 303, 287, 0, 573, 574, 0, 566,
	30, 0, 611, 612, 557, 558, 347, 423, 425, 427,
	0, 334, 414, 435, 418, 0, 415, 0, 0, 409,
	475, 0, 0, 442, -2, 478, 479, 0, 0, 0,
	0, 0, 514, 0, 0, 515, 0, 563, 0, 541,
	0, 0, 490, 0, 509, 0, 0, 510, 511, 512,
	513, 588, 0, 0, -2, 0, 0, 399, 596, 0,
	350, 369, 371, 0, 366, 381, 382, 384, 0, 386,
	0, 388, 389, 354, 356, 357, 0, 0, 0, 0,
	377, 563, 0, 399, 45, 46, 0, 60, 61, 0,
	0, 67, 168, 169, 0, 215, 0, 0, 0, 186,
	193, 193, 189, 194, 190, 0, 160, 0, 157, 94,
	154, 0, 167, 167, 123, 0, 124, 125, 126, 0,
	142, 0, 0, 0, 0, 638, 74, 220, 855, 235,
	236, 237, 238, 239, 240, 241, 242, 243, 244, 245,
	855, 0, 855, 630, 631, 632, 633, 0, 80, 0,
	0, 0, 0, 0, 255, 299, 300, 301, 577, 0,
	31, 399, 0, 341, 547, 0, 416, 0, 436, 419,
	476, 337, 0, 144, 144, 526, 144, 148, 529, 144,
	531, 144, 534, 0, 0, 0, 0, 0, 0, 0,
	538, 489, 544, 0, 546, 0, 0, 38, 0, 588,
	578, 590, 592, 0, 34, 0, 584, 0, 361, 563,
	0, 0, 363, 370, 0, 0, 364, 0, 365, 385,
	387, 0, 0, 0, 0, 571, 400, 44, 64, 65,
	66, 213, 216, 0, 195, 144, 198, 187, 188, 0,
	162, 0, 159, 145, 119, 120, 165, 166, 164, 0,
	164, 0, 149, 0, 856, 221, 222, 223, 224, 0,
	227, 0, 78, 79, 0, 0, 232, 253, 279, 559,
	348, 477, 420, 480, 523, 164, 527, 528, 530, 532,
	533, 535, 482, 481, 0, 0, 0, 0, 0, 0,
	0, 542, 0, 0, 0, 39, 0, 593, -2, 0,
	0, 0, 54, 0, 571, 597, 598, 367, 0, 372,
	0, 0, 0, 375, 43, 178, 0, 197, 0, 359,
	170, 163, 0, 167, 143, 167, 0, 0, 72, 0,
	81, 82, 0, 0, 0, 561, 0, 524, 525, 0,
	0, 0, 0, 516, 488, 539, 0, 0, 0, 591,
	0, -2, 0, 586, 585, 362, 42, 0, 0, 0,
	0, 395, 177, 179, 0, 184, 0, 196, 0, 0,
	175, 0, 172, 174, 161, 132, 133, 147, 150, 0,
	0, 0, 0, 234, 33, 0, 0, 483, 485, 484,
	486, 0, 0, 0, 505, 506, 0, 581, 34, 0,
	368, 396, 397, 398, 358, 180, 181, 0, 185, 183,
	0, 360, 93, 0, 171, 173, 0, 247, 0, 83,
	84, 77, 562, 560, 487, 0, 0, 0, 589, -2,
	587, 182, 0, 176, 246, 0, 0, 80, 517, 0,
	520, 0, 248, 0, 231, 518, 0, 0, 0, 200,
	0, 0, 201, 202, 0, 0, 519, 203, 0, 0,
	0, 0, 0, 204, 206, 207, 0, 0, 205, 249,
	250, 208, 209, 210,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 77, 3, 3, 3, 104, 96, 3,
	55, 57, 101, 99, 56, 100, 114, 102, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 266,
	85, 84, 86, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 106, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 95, 3, 107,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 78, 79, 80, 81, 82, 83, 87, 88,
	89, 90, 91, 92, 93, 94, 97, 98, 103, 105,
	108, 109, 110, 111, 112, 113, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:317
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:322
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:323
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:327
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 24:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:350
		{
			setParseTree(yylex, nil)
		}
	case 25:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:355
		{
			yyVAL.str = "DEFAULT"
		}
	case 26:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:359
		{
			yyVAL.str = "JSON"
		}
	case 27:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:363
		{
			yyVAL.str = "TABLE"
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:369
		{
			yyVAL.statement = NewExplain(yyDollar[3].statement, yyDollar[2].str)
		}
	case 29:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:375
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 30:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:383
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:387
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 32:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:393
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 33:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:400
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:406
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 35:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:410
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:416
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:420
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 38:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:427
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 39:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:439
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:451
		{
			yyVAL.str = InsertStr
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:455
		{
			yyVAL.str = ReplaceStr
		}
	case 42:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:461
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].updateExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 43:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:467
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 44:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:471
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 45:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:475
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 46:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:479
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:484
		{
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:485
		{
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:489
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:493
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:499
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:503
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 53:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:508
		{
			yyVAL.partitions = nil
		}
	case 54:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:512
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:518
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 56:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:522
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 57:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:526
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 58:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:530
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:536
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:540
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:546
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(yyDollar[3].str))}
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:550
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(TxReadWrite))}
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:554
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(TxReadOnly))}
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:560
		{
			yyVAL.str = IsolationLevelRepeatableRead
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:564
		{
			yyVAL.str = IsolationLevelReadCommitted
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:568
		{
			yyVAL.str = IsolationLevelReadUncommitted
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:572
		{
			yyVAL.str = IsolationLevelSerializable
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:578
		{
			yyVAL.str = SessionStr
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:582
		{
			yyVAL.str = GlobalStr
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:588
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:593
		{
			// Create table [name] like [name]
			yyDollar[1].ddl.OptLike = yyDollar[2].optLike
			yyVAL.statement = yyDollar[1].ddl
		}
	case 72:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:599
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName}
		}
	case 73:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:604
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 74:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:608
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[5].tableName.ToViewName()}
		}
	case 75:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:612
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 76:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:616
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 77:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:621
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:625
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:631
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 80:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:636
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 81:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:641
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:647
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:652
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 84:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:658
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 85:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:664
		{
			yyVAL.ddl = &DDL{Action: CreateStr, Table: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 86:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:671
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:678
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[2].tableName}
		}
	case 88:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:682
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[3].tableName}
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:688
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:693
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:697
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:701
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 93:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:707
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].sqlVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:718
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:729
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].sqlVal
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:734
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:740
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:744
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:748
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:752
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:756
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:760
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:764
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:768
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:772
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:778
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:784
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:790
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:796
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:802
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:810
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:814
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:818
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:822
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:826
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 119:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:832
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 120:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:836
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:840
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:844
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:848
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:852
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:856
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 126:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:860
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:864
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:868
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:872
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:876
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:880
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 132:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:884
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 133:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:889
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:895
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:899
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:903
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:907
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:911
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:915
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:919
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:923
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:929
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:934
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 144:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:939
		{
			yyVAL.sqlVal = nil
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:943
		{
			yyVAL.sqlVal = NewIntVal(yyDollar[2].bytes)
		}
	case 146:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:948
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 147:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:952
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 148:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:960
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:964
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 150:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:970
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 151:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:978
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:982
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 153:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:987
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:991
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 155:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:997
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1001
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 157:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1005
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 158:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1010
		{
			yyVAL.optVal = nil
		}
	case 159:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1014
		{
			yyVAL.optVal = yyDollar[2].expr
		}
	case 160:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1019
		{
			yyVAL.optVal = nil
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1023
		{
			yyVAL.optVal = yyDollar[3].expr
		}
	case 162:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1028
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1032
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1037
		{
			yyVAL.str = ""
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1041
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1045
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 167:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1050
		{
			yyVAL.str = ""
		}
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1054
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1058
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 170:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1063
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1067
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1071
		{
			yyVAL.colKeyOpt = colKey
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1075
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1079
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 175:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1084
		{
			yyVAL.sqlVal = nil
		}
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1088
		{
			yyVAL.sqlVal = NewStrVal(yyDollar[2].bytes)
		}
	case 177:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1094
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 178:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1098
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1104
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1108
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1114
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1118
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1123
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 184:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1129
		{
			yyVAL.str = ""
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1133
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1139
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1143
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1147
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1151
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1155
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1161
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1165
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 193:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1170
		{
			yyVAL.str = ""
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1174
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1180
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 196:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1184
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 197:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1190
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].sqlVal}
		}
	case 198:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1196
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].bytes), Details: yyDollar[3].constraintInfo}
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1200
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 200:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1207
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 201:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1211
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 202:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1215
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 203:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1219
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 204:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1225
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 205:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1231
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1237
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1241
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1245
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1249
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1253
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 211:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1258
		{
			yyVAL.str = ""
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1262
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 213:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1266
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1274
		{
			yyVAL.str = yyDollar[1].str
		}
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1278
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 216:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1282
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1288
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1292
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1296
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 220:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1302
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 221:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1306
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 222:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1310
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 223:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1314
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[4].tableName}, ToTables: TableNames{yyDollar[7].tableName}}
		}
	case 224:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1319
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 225:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1324
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 226:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1328
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 227:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1332
		{
			yyVAL.statement = &DDL{
				Action: CreateVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name:   NewColIdent(yyDollar[5].tableName.Name.String()),
					Type:   yyDollar[6].colIdent,
					Params: yyDollar[7].vindexParams,
				},
			}
		}
	case 228:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1344
		{
			yyVAL.statement = &DDL{
				Action: DropVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name: NewColIdent(yyDollar[5].tableName.Name.String()),
				},
			}
		}
	case 229:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1354
		{
			yyVAL.statement = &DDL{Action: AddVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 230:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1358
		{
			yyVAL.statement = &DDL{Action: DropVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 231:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1362
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 232:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1375
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 233:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1385
		{
			yyVAL.statement = &DDL{Action: AddSequenceStr, Table: yyDollar[5].tableName}
		}
	case 234:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1389
		{
			yyVAL.statement = &DDL{
				Action: AddAutoIncStr,
				Table:  yyDollar[4].tableName,
				AutoIncSpec: &AutoIncSpec{
					Column:   yyDollar[7].colIdent,
					Sequence: yyDollar[9].tableName,
				},
			}
		}
	case 246:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1415
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1421
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 248:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1425
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 249:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1431
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 250:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1435
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 251:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1441
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 252:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1447
		{
			yyVAL.ddl = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 253:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1451
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 254:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1459
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 255:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1467
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName}
		}
	case 256:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1472
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: TableNames{yyDollar[4].tableName.ToViewName()}, IfExists: exists}
		}
	case 257:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1480
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 258:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1484
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 259:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1490
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 260:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1494
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 261:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1499
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName}
		}
	case 262:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1505
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 263:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1510
		{
			yyVAL.statement = &Show{Type: CharsetStr}
		}
	case 264:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1514
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 265:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1518
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 266:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1523
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 267:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1527
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 268:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1531
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 269:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1535
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 270:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1539
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 271:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1543
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1547
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 273:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1551
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 274:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1555
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1559
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 276:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1563
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 277:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1567
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 278:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1571
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 279:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1575
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 280:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1580
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[3].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 281:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1590
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1594
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 283:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1598
		{
			// Cannot dereference $4 directly, or else the parser stackcannot be pooled. See yyParsePooled
			showCollationFilterOpt := yyDollar[4].expr
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: &showCollationFilterOpt}
		}
	case 284:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1604
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Scope: string(yyDollar[2].bytes), Type: string(yyDollar[3].bytes), ShowTablesOpt: showTablesOpt}
		}
	case 285:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1609
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 286:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1613
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 287:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1617
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName}
		}
	case 288:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1621
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 289:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1635
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1641
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1645
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 292:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1651
		{
			yyVAL.str = ""
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1655
		{
			yyVAL.str = "full "
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1661
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1665
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 296:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1671
		{
			yyVAL.str = ""
		}
	case 297:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1675
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1679
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 299:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1685
		{
			yyVAL.showFilter = nil
		}
	case 300:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1689
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1693
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 302:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1699
		{
			yyVAL.showFilter = nil
		}
	case 303:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1703
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 304:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1709
		{
			yyVAL.str = ""
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1713
		{
			yyVAL.str = SessionStr
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1717
		{
			yyVAL.str = GlobalStr
		}
	case 307:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1723
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1727
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1733
		{
			yyVAL.statement = &Begin{}
		}
	case 310:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1737
		{
			yyVAL.statement = &Begin{}
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1743
		{
			yyVAL.statement = &Commit{}
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1749
		{
			yyVAL.statement = &Rollback{}
		}
	case 313:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1755
		{
			yyVAL.statement = &OtherRead{}
		}
	case 314:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1759
		{
			yyVAL.statement = &OtherRead{}
		}
	case 315:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1763
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 316:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1767
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 317:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1771
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 318:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1775
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1781
		{
			yyVAL.statement = &DDL{Action: FlushStr}
		}
	case 320:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1785
		{
			setAllowComments(yylex, true)
		}
	case 321:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1789
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 322:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1795
		{
			yyVAL.bytes2 = nil
		}
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1799
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1805
		{
			yyVAL.str = UnionStr
		}
	case 325:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1809
		{
			yyVAL.str = UnionAllStr
		}
	case 326:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1813
		{
			yyVAL.str = UnionDistinctStr
		}
	case 327:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1818
		{
			yyVAL.str = ""
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1822
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1826
		{
			yyVAL.str = SQLCacheStr
		}
	case 330:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1831
		{
			yyVAL.str = ""
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1835
		{
			yyVAL.str = DistinctStr
		}
	case 332:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1840
		{
			yyVAL.str = ""
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1844
		{
			yyVAL.str = StraightJoinHint
		}
	case 334:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1849
		{
			yyVAL.selectExprs = nil
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1853
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1859
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 337:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1863
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1869
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 339:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1873
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 340:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1877
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 341:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1881
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 342:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1886
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1890
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 344:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1894
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1901
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 347:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1906
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 348:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1910
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1916
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 350:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1920
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1930
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 354:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1934
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1938
		{
			// missed alias for subquery
			yylex.Error("Every derived table must have its own alias")
			return 1
		}
	case 356:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1944
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1950
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 358:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1954
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1960
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 360:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1964
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1970
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 362:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1974
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 363:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1987
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 364:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1991
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 365:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1995
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 366:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1999
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 367:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2005
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 368:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2007
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 369:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2011
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2013
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 371:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2017
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 372:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2019
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 373:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2022
		{
			yyVAL.empty = struct{}{}
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2024
		{
			yyVAL.empty = struct{}{}
		}
	case 375:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2027
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2031
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 377:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2035
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2042
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2048
		{
			yyVAL.str = JoinStr
		}
	case 381:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2052
		{
			yyVAL.str = JoinStr
		}
	case 382:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2056
		{
			yyVAL.str = JoinStr
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2062
		{
			yyVAL.str = StraightJoinStr
		}
	case 384:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2068
		{
			yyVAL.str = LeftJoinStr
		}
	case 385:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2072
		{
			yyVAL.str = LeftJoinStr
		}
	case 386:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2076
		{
			yyVAL.str = RightJoinStr
		}
	case 387:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2080
		{
			yyVAL.str = RightJoinStr
		}
	case 388:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2086
		{
			yyVAL.str = NaturalJoinStr
		}
	case 389:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2090
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 390:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2100
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2104
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2110
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 393:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2114
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 394:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2120
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 395:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2125
		{
			yyVAL.indexHints = nil
		}
	case 396:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2129
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 397:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2133
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 398:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2137
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 399:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2142
		{
			yyVAL.expr = nil
		}
	case 400:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2146
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2152
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 402:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2156
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 403:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2160
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 404:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2164
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 405:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2168
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2172
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 407:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2176
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 408:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2182
		{
			yyVAL.str = ""
		}
	case 409:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2186
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2192
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2196
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 412:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2202
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2206
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 414:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2210
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 415:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2214
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 416:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2218
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 417:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2222
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 418:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2226
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 419:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2230
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 420:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2234
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 421:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2238
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2244
		{
			yyVAL.str = IsNullStr
		}
	case 423:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2248
		{
			yyVAL.str = IsNotNullStr
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2252
		{
			yyVAL.str = IsTrueStr
		}
	case 425:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2256
		{
			yyVAL.str = IsNotTrueStr
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2260
		{
			yyVAL.str = IsFalseStr
		}
	case 427:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2264
		{
			yyVAL.str = IsNotFalseStr
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2270
		{
			yyVAL.str = EqualStr
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2274
		{
			yyVAL.str = LessThanStr
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2278
		{
			yyVAL.str = GreaterThanStr
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2282
		{
			yyVAL.str = LessEqualStr
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2286
		{
			yyVAL.str = GreaterEqualStr
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2290
		{
			yyVAL.str = NotEqualStr
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2294
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 435:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2299
		{
			yyVAL.expr = nil
		}
	case 436:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2303
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2309
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2313
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2317
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 440:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2323
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2329
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2333
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2339
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2343
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2347
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2351
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2355
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 448:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2359
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 449:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2363
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 450:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2367
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 451:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2371
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 452:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2375
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 453:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2379
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 454:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2383
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 455:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2387
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 456:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2391
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2395
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 458:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2399
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 459:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2403
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 460:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2407
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 461:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2411
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 462:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2415
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 463:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2419
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 464:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2423
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 465:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2427
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Str, Expr: yyDollar[2].expr}
		}
	case 466:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2431
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 467:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2439
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 468:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2453
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 469:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2457
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 470:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2461
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 475:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2479
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 476:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2483
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 477:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2487
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 478:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2497
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 479:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2501
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 480:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2505
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 481:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2509
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 482:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2513
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 483:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2517
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 484:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2521
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 485:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2525
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 486:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2529
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 487:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2533
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 488:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2537
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 489:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2541
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 490:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2545
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 491:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2555
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 492:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2559
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 493:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2563
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 494:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2568
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 495:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2573
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 496:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2578
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 497:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2584
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 498:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2589
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 499:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2594
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 500:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2598
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 501:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2602
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_time"), Fsp: yyDollar[2].expr}
		}
	case 502:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2607
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtime"), Fsp: yyDollar[2].expr}
		}
	case 503:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2612
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtimestamp"), Fsp: yyDollar[2].expr}
		}
	case 504:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2617
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_time"), Fsp: yyDollar[2].expr}
		}
	case 505:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2621
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampadd"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 506:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2625
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampdiff"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 509:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2635
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 510:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2645
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 511:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2649
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 512:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2653
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 513:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2657
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 514:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2661
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 515:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2665
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 516:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2671
		{
			yyVAL.str = ""
		}
	case 517:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2675
		{
			yyVAL.str = BooleanModeStr
		}
	case 518:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2679
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 519:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2683
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 520:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2687
		{
			yyVAL.str = QueryExpansionStr
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2693
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2697
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 523:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2703
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 524:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2707
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 525:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2711
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: string(yyDollar[3].bytes)}
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2715
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 527:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2719
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 528:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2723
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2729
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 530:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2733
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2737
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 532:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2741
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 533:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2745
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2749
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 535:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2753
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 536:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2758
		{
			yyVAL.expr = nil
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2762
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 538:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2767
		{
			yyVAL.str = string("")
		}
	case 539:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2771
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2777
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 541:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2781
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 542:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2787
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 543:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2792
		{
			yyVAL.expr = nil
		}
	case 544:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2796
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2802
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 546:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2806
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 547:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2810
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2816
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2820
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2824
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2828
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2832
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2836
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2840
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2844
		{
			yyVAL.expr = &NullVal{}
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2850
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 557:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2859
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 558:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2863
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 559:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2868
		{
			yyVAL.exprs = nil
		}
	case 560:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2872
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 561:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2877
		{
			yyVAL.expr = nil
		}
	case 562:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2881
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 563:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2886
		{
			yyVAL.orderBy = nil
		}
	case 564:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2890
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2896
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 566:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2900
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 567:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2906
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 568:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2911
		{
			yyVAL.str = AscScr
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2915
		{
			yyVAL.str = AscScr
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2919
		{
			yyVAL.str = DescScr
		}
	case 571:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2924
		{
			yyVAL.limit = nil
		}
	case 572:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2928
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 573:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2932
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 574:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2936
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 575:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2941
		{
			yyVAL.str = ""
		}
	case 576:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2945
		{
			yyVAL.str = ForUpdateStr
		}
	case 577:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2949
		{
			yyVAL.str = ShareModeStr
		}
	case 578:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2962
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2966
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 580:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2970
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 581:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2975
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 582:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2979
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 583:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2983
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2990
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 585:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2994
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 586:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2998
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 587:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3002
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 588:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3007
		{
			yyVAL.updateExprs = nil
		}
	case 589:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3011
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3017
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 591:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3021
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3027
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 593:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3031
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 594:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3037
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3043
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3053
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 597:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3057
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 598:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3063
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3069
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 600:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3073
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 601:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3079
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 602:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3083
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 603:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3087
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 604:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3091
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 606:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3098
		{
			yyVAL.bytes = []byte("charset")
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3105
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3109
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3113
		{
			yyVAL.expr = &Default{}
		}
	case 613:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3122
		{
			yyVAL.byt = 0
		}
	case 614:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3124
		{
			yyVAL.byt = 1
		}
	case 615:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3127
		{
			yyVAL.empty = struct{}{}
		}
	case 616:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3129
		{
			yyVAL.empty = struct{}{}
		}
	case 617:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3132
		{
			yyVAL.str = ""
		}
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3134
		{
			yyVAL.str = IgnoreStr
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3138
		{
			yyVAL.empty = struct{}{}
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3140
		{
			yyVAL.empty = struct{}{}
		}
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3142
		{
			yyVAL.empty = struct{}{}
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3144
		{
			yyVAL.empty = struct{}{}
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3146
		{
			yyVAL.empty = struct{}{}
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3148
		{
			yyVAL.empty = struct{}{}
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3150
		{
			yyVAL.empty = struct{}{}
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3152
		{
			yyVAL.empty = struct{}{}
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3154
		{
			yyVAL.empty = struct{}{}
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3156
		{
			yyVAL.empty = struct{}{}
		}
	case 629:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3159
		{
			yyVAL.empty = struct{}{}
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3161
		{
			yyVAL.empty = struct{}{}
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3163
		{
			yyVAL.empty = struct{}{}
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3167
		{
			yyVAL.empty = struct{}{}
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3169
		{
			yyVAL.empty = struct{}{}
		}
	case 634:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3172
		{
			yyVAL.empty = struct{}{}
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3174
		{
			yyVAL.empty = struct{}{}
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3176
		{
			yyVAL.empty = struct{}{}
		}
	case 637:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3179
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 638:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3181
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3185
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3189
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3196
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3202
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3206
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3213
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 853:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3445
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 854:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3454
		{
			decNesting(yylex)
		}
	case 855:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3459
		{
			skipToEnd(yylex)
		}
	case 856:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3464
		{
			skipToEnd(yylex)
		}
	case 857:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3468
		{
			skipToEnd(yylex)
		}
	case 858:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3472
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
