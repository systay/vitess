/*
Copyright 2023 The Vitess Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package asthelpergen

import (
	"fmt"
	"go/types"
	"log"
	"strings"

	"github.com/dave/jennifer/jen"
)

type cowGen struct {
	file *jen.File
}

var _ generator = (*cowGen)(nil)

func newCOWGen(pkgname string) *cowGen {
	file := jen.NewFile(pkgname)
	file.HeaderComment(licenseFileHeader)
	file.HeaderComment("Code generated by ASTHelperGen. DO NOT EDIT.")

	return &cowGen{
		file: file,
	}
}

func (c *cowGen) addFunc(name string, code *jen.Statement) {
	c.file.Add(jen.Comment(fmt.Sprintf("%s creates a deep clone of the input.", name)))
	c.file.Add(code)
}

func (c *cowGen) genFile() (string, *jen.File) {
	return "ast_cow.go", c.file
}

const cowName = "COW"

// readValueOfType produces code to read the expression of type `t`, and adds the type to the todo-list
func (c *cowGen) readValueOfType(t types.Type, expr jen.Code, spi generatorSPI) jen.Code {
	switch t.Underlying().(type) {
	case *types.Basic:
		return expr
	case *types.Interface:
		if types.TypeString(t, noQualifier) == "any" {
			// these fields have to be taken care of manually
			return expr
		}
	}
	spi.addType(t)
	return jen.Id("c").Dot(cowName + printableTypeName(t)).Call(expr)
}

func (c *cowGen) structMethod(t types.Type, _ *types.Struct, spi generatorSPI) error {
	typeString := types.TypeString(t, noQualifier)
	funcName := cowName + printableTypeName(t)
	c.addFunc(funcName,
		jen.Func().Id(funcName).Call(jen.Id("n").Id(typeString)).Id(typeString).Block(
			jen.Return(jen.Op("*").Add(c.readValueOfType(types.NewPointer(t), jen.Op("&").Id("n"), spi))),
		))
	return nil
}

func (c *cowGen) sliceMethod(t types.Type, slice *types.Slice, spi generatorSPI) error {
	typeString := types.TypeString(t, noQualifier)
	name := printableTypeName(t)
	funcName := cowName + name

	c.addFunc(funcName,
		// func (n Bytes) Clone() Bytes {
		jen.Func().Id(funcName).Call(jen.Id("n").Id(typeString)).Id(typeString).Block(
			// if n == nil { return nil }
			ifNilReturnNil("n"),
			//	res := make(Bytes, len(n))
			jen.Id("res").Op(":=").Id("make").Call(jen.Id(typeString), jen.Id("len").Call(jen.Id("n"))),
			c.copySliceElement(t, slice.Elem(), spi),
			//	return res
			jen.Return(jen.Id("res")),
		))
	return nil
}

func (c *cowGen) basicMethod(t types.Type, basic *types.Basic, spi generatorSPI) error {
	return nil
}

func (c *cowGen) copySliceElement(t types.Type, elType types.Type, spi generatorSPI) jen.Code {
	if !isNamed(t) && isBasic(elType) {
		//	copy(res, n)
		return jen.Id("copy").Call(jen.Id("res"), jen.Id("n"))
	}

	// for i := range n {
	//  res[i] = CloneAST(x)
	// }
	spi.addType(elType)

	return jen.For(jen.List(jen.Id("i"), jen.Id("x"))).Op(":=").Range().Id("n").Block(
		jen.Id("res").Index(jen.Id("i")).Op("=").Add(c.readValueOfType(elType, jen.Id("x"), spi)),
	)
}

func ifNilReturnNilAndFalse(id string) *jen.Statement {
	return jen.If(jen.Id(id).Op("==").Nil()).Block(jen.Return(jen.Nil(), jen.False()))
}

func ifEqualToOldReturnNew() *jen.Statement {
	return jen.If(jen.Id("c").Dot("old").Op("==").Id("in")).Block(jen.Return(jen.Id("c").Dot("new"), jen.True()))
}

func (c *cowGen) interfaceMethod(t types.Type, iface *types.Interface, spi generatorSPI) error {

	// func (c cow) cowAST(in AST) (AST, bool) {
	//	if in == nil {
	//		return nil, false
	// 	}
	//
	//	if c.old == in {
	//		return c.new, true
	//	}
	//	switch in := in.(type) {
	// 	case *RefContainer:
	//			return c.CowRefOfRefContainer(in)
	// 	}
	//	// this should never happen
	//	return nil
	// }

	typeString := types.TypeString(t, noQualifier)
	typeName := printableTypeName(t)

	stmts := []jen.Code{ifNilReturnNilAndFalse("in"), ifEqualToOldReturnNew()}

	var cases []jen.Code
	_ = findImplementations(spi.scope(), iface, func(t types.Type) error {
		typeString := types.TypeString(t, noQualifier)

		// case Type: return CloneType(in)
		block := jen.Case(jen.Id(typeString)).Block(jen.Return(c.readValueOfType(t, jen.Id("in"), spi)))
		switch t := t.(type) {
		case *types.Pointer:
			_, isIface := t.Elem().(*types.Interface)
			if !isIface {
				cases = append(cases, block)
			}

		case *types.Named:
			_, isIface := t.Underlying().(*types.Interface)
			if !isIface {
				cases = append(cases, block)
			}

		default:
			log.Fatalf("unexpected type encountered: %s", typeString)
		}

		return nil
	})

	cases = append(cases,
		jen.Default().Block(
			jen.Comment("this should never happen"),
			jen.Return(jen.Nil()),
		))

	//	switch n := node.(type) {
	stmts = append(stmts, jen.Switch(jen.Id("in").Op(":=").Id("in").Assert(jen.Id("type")).Block(
		cases...,
	)))

	funcName := cowName + typeName
	funcDecl := jen.Func().Params(jen.Id("c").Id("cow")).Id(funcName).Call(jen.Id("in").Id(typeString)).Params(jen.Id(typeString), jen.Id("bool")).Block(stmts...)
	c.addFunc(funcName, funcDecl)
	return nil
}

func (c *cowGen) ptrToBasicMethod(t types.Type, _ *types.Basic, spi generatorSPI) error {
	ptr := t.Underlying().(*types.Pointer)
	return c.ptrToOtherMethod(t, ptr, spi)
}

func (c *cowGen) ptrToOtherMethod(t types.Type, ptr *types.Pointer, spi generatorSPI) error {
	receiveType := types.TypeString(t, noQualifier)

	funcName := cowName + printableTypeName(t)
	c.addFunc(funcName,
		jen.Func().Id(funcName).Call(jen.Id("n").Id(receiveType)).Id(receiveType).Block(
			ifNilReturnNil("n"),
			jen.Id("out").Op(":=").Add(c.readValueOfType(ptr.Elem(), jen.Op("*").Id("n"), spi)),
			jen.Return(jen.Op("&").Id("out")),
		))
	return nil
}

func (c *cowGen) ptrToStructMethod(t types.Type, strct *types.Struct, spi generatorSPI) error {
	receiveType := types.TypeString(t, noQualifier)
	funcName := cowName + printableTypeName(t)

	// func (c cow) COWRefOfType(n *Type) (*Type, bool)
	funcDeclaration := jen.Func().Params(jen.Id("c").Id("cow")).Id(funcName).Call(jen.Id("n").Id(receiveType)).Params(jen.Id(receiveType), jen.Id("bool"))

	var fields []jen.Code
	for i := 0; i < strct.NumFields(); i++ {
		field := strct.Field(i)
		if isBasic(field.Type()) || strings.HasPrefix(field.Name(), "_") {
			continue
		}
		// out.Field = CloneType(n.Field)
		fields = append(fields,
			jen.Id("out").Dot(field.Name()).Op("=").Add(c.readValueOfType(field.Type(), jen.Id("n").Dot(field.Name()), spi)))
	}

	stmts := []jen.Code{
		// if n == nil { return nil }
		ifNilReturnNil("n"),
		// 	out := *n
		jen.Id("out").Op(":=").Op("*").Id("n"),
	}

	// handle all fields with CloneAble types
	stmts = append(stmts, fields...)

	stmts = append(stmts,
		// return &out
		jen.Return(jen.Op("&").Id("out")),
	)

	c.addFunc(funcName, funcDeclaration.Block(stmts...))
	return nil
}
